// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcommand.proto

#ifndef PROTOBUF_chatcommand_2eproto__INCLUDED
#define PROTOBUF_chatcommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chatcommand_2eproto();
void protobuf_AssignDesc_chatcommand_2eproto();
void protobuf_ShutdownFile_chatcommand_2eproto();

class Chat;
class CommonChatUserPmd_CS;
class GMCommandChatUserPmd_C;
class GMHelpInfo;
class GMCommandListChatUserPmd_S;
class PrivateChatUserPmd_CS;
class CurrentGmLevelChatUserPmd_S;
class stAddHideButtonBookChatUserPmd_S;
class stAddHideButtonChatUserPmd_S;
class stAddHideButtonNewFunctionChatUserPmd_S;
class stAddHideButtonServerHotKeyChatUserPmd_S;
class stCommonChatUserPmd_CS;
class stMessageBoxChatUserPmd_S;

enum Chat_Param {
  Chat_Param_CommonChatUserPmd_CS = 1,
  Chat_Param_GMCommandChatUserPmd_C = 2,
  Chat_Param_GMCommandListChatUserPmd_S = 4,
  Chat_Param_PrivateChatUserPmd_CS = 5,
  Chat_Param_CurrentGmLevelChatUserPmd_S = 6,
  Chat_Param_stAddHideButtonBookChatUserPmd_S = 7,
  Chat_Param_stAddHideButtonChatUserPmd_S = 8,
  Chat_Param_stAddHideButtonNewFunctionChatUserPmd_S = 9,
  Chat_Param_stAddHideButtonServerHotKeyChatUserPmd_S = 10,
  Chat_Param_stCommonChatUserPmd_CS = 11,
  Chat_Param_stMessageBoxChatUserPmd_S = 12
};
bool Chat_Param_IsValid(int value);
const Chat_Param Chat_Param_Param_MIN = Chat_Param_CommonChatUserPmd_CS;
const Chat_Param Chat_Param_Param_MAX = Chat_Param_stMessageBoxChatUserPmd_S;
const int Chat_Param_Param_ARRAYSIZE = Chat_Param_Param_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chat_Param_descriptor();
inline const ::std::string& Chat_Param_Name(Chat_Param value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chat_Param_descriptor(), value);
}
inline bool Chat_Param_Parse(
    const ::std::string& name, Chat_Param* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chat_Param>(
    Chat_Param_descriptor(), name, value);
}
enum CommonChatUserPmd_CS_ChatType {
  CommonChatUserPmd_CS_ChatType_ChatType_None = 0,
  CommonChatUserPmd_CS_ChatType_ChatType_Lobby = 1,
  CommonChatUserPmd_CS_ChatType_ChatType_Room = 2,
  CommonChatUserPmd_CS_ChatType_ChatType_Robot = 4
};
bool CommonChatUserPmd_CS_ChatType_IsValid(int value);
const CommonChatUserPmd_CS_ChatType CommonChatUserPmd_CS_ChatType_ChatType_MIN = CommonChatUserPmd_CS_ChatType_ChatType_None;
const CommonChatUserPmd_CS_ChatType CommonChatUserPmd_CS_ChatType_ChatType_MAX = CommonChatUserPmd_CS_ChatType_ChatType_Robot;
const int CommonChatUserPmd_CS_ChatType_ChatType_ARRAYSIZE = CommonChatUserPmd_CS_ChatType_ChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonChatUserPmd_CS_ChatType_descriptor();
inline const ::std::string& CommonChatUserPmd_CS_ChatType_Name(CommonChatUserPmd_CS_ChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonChatUserPmd_CS_ChatType_descriptor(), value);
}
inline bool CommonChatUserPmd_CS_ChatType_Parse(
    const ::std::string& name, CommonChatUserPmd_CS_ChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonChatUserPmd_CS_ChatType>(
    CommonChatUserPmd_CS_ChatType_descriptor(), name, value);
}
enum CommonChatUserPmd_CS_ChatPos {
  CommonChatUserPmd_CS_ChatPos_ChatPos_None = 0,
  CommonChatUserPmd_CS_ChatPos_ChatPos_Normal = 1,
  CommonChatUserPmd_CS_ChatPos_ChatPos_Sys = 2,
  CommonChatUserPmd_CS_ChatPos_ChatPos_Tips = 4,
  CommonChatUserPmd_CS_ChatPos_ChatPos_Pop = 8,
  CommonChatUserPmd_CS_ChatPos_ChatPos_Private = 16,
  CommonChatUserPmd_CS_ChatPos_ChatPos_Important = 32,
  CommonChatUserPmd_CS_ChatPos_ChatPos_Honor = 64,
  CommonChatUserPmd_CS_ChatPos_ChatPos_Gm = 128
};
bool CommonChatUserPmd_CS_ChatPos_IsValid(int value);
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS_ChatPos_ChatPos_MIN = CommonChatUserPmd_CS_ChatPos_ChatPos_None;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS_ChatPos_ChatPos_MAX = CommonChatUserPmd_CS_ChatPos_ChatPos_Gm;
const int CommonChatUserPmd_CS_ChatPos_ChatPos_ARRAYSIZE = CommonChatUserPmd_CS_ChatPos_ChatPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonChatUserPmd_CS_ChatPos_descriptor();
inline const ::std::string& CommonChatUserPmd_CS_ChatPos_Name(CommonChatUserPmd_CS_ChatPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonChatUserPmd_CS_ChatPos_descriptor(), value);
}
inline bool CommonChatUserPmd_CS_ChatPos_Parse(
    const ::std::string& name, CommonChatUserPmd_CS_ChatPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonChatUserPmd_CS_ChatPos>(
    CommonChatUserPmd_CS_ChatPos_descriptor(), name, value);
}
enum ChatType {
  ChatType_Map = 2
};
bool ChatType_IsValid(int value);
const ChatType ChatType_MIN = ChatType_Map;
const ChatType ChatType_MAX = ChatType_Map;
const int ChatType_ARRAYSIZE = ChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatType_descriptor();
inline const ::std::string& ChatType_Name(ChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatType_descriptor(), value);
}
inline bool ChatType_Parse(
    const ::std::string& name, ChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatType>(
    ChatType_descriptor(), name, value);
}
// ===================================================================

class Chat : public ::google::protobuf::Message {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat& default_instance();

  void Swap(Chat* other);

  // implements Message ----------------------------------------------

  Chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Chat_Param Param;
  static const Param CommonChatUserPmd_CS = Chat_Param_CommonChatUserPmd_CS;
  static const Param GMCommandChatUserPmd_C = Chat_Param_GMCommandChatUserPmd_C;
  static const Param GMCommandListChatUserPmd_S = Chat_Param_GMCommandListChatUserPmd_S;
  static const Param PrivateChatUserPmd_CS = Chat_Param_PrivateChatUserPmd_CS;
  static const Param CurrentGmLevelChatUserPmd_S = Chat_Param_CurrentGmLevelChatUserPmd_S;
  static const Param stAddHideButtonBookChatUserPmd_S = Chat_Param_stAddHideButtonBookChatUserPmd_S;
  static const Param stAddHideButtonChatUserPmd_S = Chat_Param_stAddHideButtonChatUserPmd_S;
  static const Param stAddHideButtonNewFunctionChatUserPmd_S = Chat_Param_stAddHideButtonNewFunctionChatUserPmd_S;
  static const Param stAddHideButtonServerHotKeyChatUserPmd_S = Chat_Param_stAddHideButtonServerHotKeyChatUserPmd_S;
  static const Param stCommonChatUserPmd_CS = Chat_Param_stCommonChatUserPmd_CS;
  static const Param stMessageBoxChatUserPmd_S = Chat_Param_stMessageBoxChatUserPmd_S;
  static inline bool Param_IsValid(int value) {
    return Chat_Param_IsValid(value);
  }
  static const Param Param_MIN =
    Chat_Param_Param_MIN;
  static const Param Param_MAX =
    Chat_Param_Param_MAX;
  static const int Param_ARRAYSIZE =
    Chat_Param_Param_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Param_descriptor() {
    return Chat_Param_descriptor();
  }
  static inline const ::std::string& Param_Name(Param value) {
    return Chat_Param_Name(value);
  }
  static inline bool Param_Parse(const ::std::string& name,
      Param* value) {
    return Chat_Param_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pmd.Chat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static Chat* default_instance_;
};
// -------------------------------------------------------------------

class CommonChatUserPmd_CS : public ::google::protobuf::Message {
 public:
  CommonChatUserPmd_CS();
  virtual ~CommonChatUserPmd_CS();

  CommonChatUserPmd_CS(const CommonChatUserPmd_CS& from);

  inline CommonChatUserPmd_CS& operator=(const CommonChatUserPmd_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonChatUserPmd_CS& default_instance();

  void Swap(CommonChatUserPmd_CS* other);

  // implements Message ----------------------------------------------

  CommonChatUserPmd_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonChatUserPmd_CS& from);
  void MergeFrom(const CommonChatUserPmd_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommonChatUserPmd_CS_ChatType ChatType;
  static const ChatType ChatType_None = CommonChatUserPmd_CS_ChatType_ChatType_None;
  static const ChatType ChatType_Lobby = CommonChatUserPmd_CS_ChatType_ChatType_Lobby;
  static const ChatType ChatType_Room = CommonChatUserPmd_CS_ChatType_ChatType_Room;
  static const ChatType ChatType_Robot = CommonChatUserPmd_CS_ChatType_ChatType_Robot;
  static inline bool ChatType_IsValid(int value) {
    return CommonChatUserPmd_CS_ChatType_IsValid(value);
  }
  static const ChatType ChatType_MIN =
    CommonChatUserPmd_CS_ChatType_ChatType_MIN;
  static const ChatType ChatType_MAX =
    CommonChatUserPmd_CS_ChatType_ChatType_MAX;
  static const int ChatType_ARRAYSIZE =
    CommonChatUserPmd_CS_ChatType_ChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatType_descriptor() {
    return CommonChatUserPmd_CS_ChatType_descriptor();
  }
  static inline const ::std::string& ChatType_Name(ChatType value) {
    return CommonChatUserPmd_CS_ChatType_Name(value);
  }
  static inline bool ChatType_Parse(const ::std::string& name,
      ChatType* value) {
    return CommonChatUserPmd_CS_ChatType_Parse(name, value);
  }

  typedef CommonChatUserPmd_CS_ChatPos ChatPos;
  static const ChatPos ChatPos_None = CommonChatUserPmd_CS_ChatPos_ChatPos_None;
  static const ChatPos ChatPos_Normal = CommonChatUserPmd_CS_ChatPos_ChatPos_Normal;
  static const ChatPos ChatPos_Sys = CommonChatUserPmd_CS_ChatPos_ChatPos_Sys;
  static const ChatPos ChatPos_Tips = CommonChatUserPmd_CS_ChatPos_ChatPos_Tips;
  static const ChatPos ChatPos_Pop = CommonChatUserPmd_CS_ChatPos_ChatPos_Pop;
  static const ChatPos ChatPos_Private = CommonChatUserPmd_CS_ChatPos_ChatPos_Private;
  static const ChatPos ChatPos_Important = CommonChatUserPmd_CS_ChatPos_ChatPos_Important;
  static const ChatPos ChatPos_Honor = CommonChatUserPmd_CS_ChatPos_ChatPos_Honor;
  static const ChatPos ChatPos_Gm = CommonChatUserPmd_CS_ChatPos_ChatPos_Gm;
  static inline bool ChatPos_IsValid(int value) {
    return CommonChatUserPmd_CS_ChatPos_IsValid(value);
  }
  static const ChatPos ChatPos_MIN =
    CommonChatUserPmd_CS_ChatPos_ChatPos_MIN;
  static const ChatPos ChatPos_MAX =
    CommonChatUserPmd_CS_ChatPos_ChatPos_MAX;
  static const int ChatPos_ARRAYSIZE =
    CommonChatUserPmd_CS_ChatPos_ChatPos_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChatPos_descriptor() {
    return CommonChatUserPmd_CS_ChatPos_descriptor();
  }
  static inline const ::std::string& ChatPos_Name(ChatPos value) {
    return CommonChatUserPmd_CS_ChatPos_Name(value);
  }
  static inline bool ChatPos_Parse(const ::std::string& name,
      ChatPos* value) {
    return CommonChatUserPmd_CS_ChatPos_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool sexman = 3;
  inline bool has_sexman() const;
  inline void clear_sexman();
  static const int kSexmanFieldNumber = 3;
  inline bool sexman() const;
  inline void set_sexman(bool value);

  // optional uint32 chatpos = 4;
  inline bool has_chatpos() const;
  inline void clear_chatpos();
  static const int kChatposFieldNumber = 4;
  inline ::google::protobuf::uint32 chatpos() const;
  inline void set_chatpos(::google::protobuf::uint32 value);

  // optional uint32 chattype = 5;
  inline bool has_chattype() const;
  inline void clear_chattype();
  static const int kChattypeFieldNumber = 5;
  inline ::google::protobuf::uint32 chattype() const;
  inline void set_chattype(::google::protobuf::uint32 value);

  // required string info = 6;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional uint64 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.CommonChatUserPmd_CS)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sexman();
  inline void clear_has_sexman();
  inline void set_has_chatpos();
  inline void clear_has_chatpos();
  inline void set_has_chattype();
  inline void clear_has_chattype();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  bool sexman_;
  ::google::protobuf::uint32 chatpos_;
  ::std::string* info_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 chattype_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static CommonChatUserPmd_CS* default_instance_;
};
// -------------------------------------------------------------------

class GMCommandChatUserPmd_C : public ::google::protobuf::Message {
 public:
  GMCommandChatUserPmd_C();
  virtual ~GMCommandChatUserPmd_C();

  GMCommandChatUserPmd_C(const GMCommandChatUserPmd_C& from);

  inline GMCommandChatUserPmd_C& operator=(const GMCommandChatUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMCommandChatUserPmd_C& default_instance();

  void Swap(GMCommandChatUserPmd_C* other);

  // implements Message ----------------------------------------------

  GMCommandChatUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMCommandChatUserPmd_C& from);
  void MergeFrom(const GMCommandChatUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // required string method = 3;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 3;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // optional string params = 4;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 4;
  inline const ::std::string& params() const;
  inline void set_params(const ::std::string& value);
  inline void set_params(const char* value);
  inline void set_params(const char* value, size_t size);
  inline ::std::string* mutable_params();
  inline ::std::string* release_params();
  inline void set_allocated_params(::std::string* params);

  // @@protoc_insertion_point(class_scope:Pmd.GMCommandChatUserPmd_C)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_params();
  inline void clear_has_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::std::string* charname_;
  ::std::string* method_;
  ::std::string* params_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static GMCommandChatUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class GMHelpInfo : public ::google::protobuf::Message {
 public:
  GMHelpInfo();
  virtual ~GMHelpInfo();

  GMHelpInfo(const GMHelpInfo& from);

  inline GMHelpInfo& operator=(const GMHelpInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMHelpInfo& default_instance();

  void Swap(GMHelpInfo* other);

  // implements Message ----------------------------------------------

  GMHelpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMHelpInfo& from);
  void MergeFrom(const GMHelpInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // required string example = 2;
  inline bool has_example() const;
  inline void clear_example();
  static const int kExampleFieldNumber = 2;
  inline const ::std::string& example() const;
  inline void set_example(const ::std::string& value);
  inline void set_example(const char* value);
  inline void set_example(const char* value, size_t size);
  inline ::std::string* mutable_example();
  inline ::std::string* release_example();
  inline void set_allocated_example(::std::string* example);

  // @@protoc_insertion_point(class_scope:Pmd.GMHelpInfo)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_example();
  inline void clear_has_example();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* method_;
  ::std::string* example_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static GMHelpInfo* default_instance_;
};
// -------------------------------------------------------------------

class GMCommandListChatUserPmd_S : public ::google::protobuf::Message {
 public:
  GMCommandListChatUserPmd_S();
  virtual ~GMCommandListChatUserPmd_S();

  GMCommandListChatUserPmd_S(const GMCommandListChatUserPmd_S& from);

  inline GMCommandListChatUserPmd_S& operator=(const GMCommandListChatUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMCommandListChatUserPmd_S& default_instance();

  void Swap(GMCommandListChatUserPmd_S* other);

  // implements Message ----------------------------------------------

  GMCommandListChatUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMCommandListChatUserPmd_S& from);
  void MergeFrom(const GMCommandListChatUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pmd.GMHelpInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Pmd::GMHelpInfo& list(int index) const;
  inline ::Pmd::GMHelpInfo* mutable_list(int index);
  inline ::Pmd::GMHelpInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::GMHelpInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::GMHelpInfo >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Pmd.GMCommandListChatUserPmd_S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::GMHelpInfo > list_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static GMCommandListChatUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class PrivateChatUserPmd_CS : public ::google::protobuf::Message {
 public:
  PrivateChatUserPmd_CS();
  virtual ~PrivateChatUserPmd_CS();

  PrivateChatUserPmd_CS(const PrivateChatUserPmd_CS& from);

  inline PrivateChatUserPmd_CS& operator=(const PrivateChatUserPmd_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivateChatUserPmd_CS& default_instance();

  void Swap(PrivateChatUserPmd_CS* other);

  // implements Message ----------------------------------------------

  PrivateChatUserPmd_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrivateChatUserPmd_CS& from);
  void MergeFrom(const PrivateChatUserPmd_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool sexman = 3;
  inline bool has_sexman() const;
  inline void clear_sexman();
  static const int kSexmanFieldNumber = 3;
  inline bool sexman() const;
  inline void set_sexman(bool value);

  // required string info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional uint64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.PrivateChatUserPmd_CS)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sexman();
  inline void clear_has_sexman();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::std::string* info_;
  ::google::protobuf::uint64 time_;
  bool sexman_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static PrivateChatUserPmd_CS* default_instance_;
};
// -------------------------------------------------------------------

class CurrentGmLevelChatUserPmd_S : public ::google::protobuf::Message {
 public:
  CurrentGmLevelChatUserPmd_S();
  virtual ~CurrentGmLevelChatUserPmd_S();

  CurrentGmLevelChatUserPmd_S(const CurrentGmLevelChatUserPmd_S& from);

  inline CurrentGmLevelChatUserPmd_S& operator=(const CurrentGmLevelChatUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrentGmLevelChatUserPmd_S& default_instance();

  void Swap(CurrentGmLevelChatUserPmd_S* other);

  // implements Message ----------------------------------------------

  CurrentGmLevelChatUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrentGmLevelChatUserPmd_S& from);
  void MergeFrom(const CurrentGmLevelChatUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gmlevel = 1;
  inline bool has_gmlevel() const;
  inline void clear_gmlevel();
  static const int kGmlevelFieldNumber = 1;
  inline ::google::protobuf::uint32 gmlevel() const;
  inline void set_gmlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.CurrentGmLevelChatUserPmd_S)
 private:
  inline void set_has_gmlevel();
  inline void clear_has_gmlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gmlevel_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static CurrentGmLevelChatUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class stAddHideButtonBookChatUserPmd_S : public ::google::protobuf::Message {
 public:
  stAddHideButtonBookChatUserPmd_S();
  virtual ~stAddHideButtonBookChatUserPmd_S();

  stAddHideButtonBookChatUserPmd_S(const stAddHideButtonBookChatUserPmd_S& from);

  inline stAddHideButtonBookChatUserPmd_S& operator=(const stAddHideButtonBookChatUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddHideButtonBookChatUserPmd_S& default_instance();

  void Swap(stAddHideButtonBookChatUserPmd_S* other);

  // implements Message ----------------------------------------------

  stAddHideButtonBookChatUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddHideButtonBookChatUserPmd_S& from);
  void MergeFrom(const stAddHideButtonBookChatUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lifetime = 1;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifetimeFieldNumber = 1;
  inline ::google::protobuf::uint32 lifetime() const;
  inline void set_lifetime(::google::protobuf::uint32 value);

  // optional uint32 bookid = 2;
  inline bool has_bookid() const;
  inline void clear_bookid();
  static const int kBookidFieldNumber = 2;
  inline ::google::protobuf::uint32 bookid() const;
  inline void set_bookid(::google::protobuf::uint32 value);

  // optional uint32 iconid = 3;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconidFieldNumber = 3;
  inline ::google::protobuf::uint32 iconid() const;
  inline void set_iconid(::google::protobuf::uint32 value);

  // optional uint32 close = 4;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline ::google::protobuf::uint32 close() const;
  inline void set_close(::google::protobuf::uint32 value);

  // optional string tips = 5;
  inline bool has_tips() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 5;
  inline const ::std::string& tips() const;
  inline void set_tips(const ::std::string& value);
  inline void set_tips(const char* value);
  inline void set_tips(const char* value, size_t size);
  inline ::std::string* mutable_tips();
  inline ::std::string* release_tips();
  inline void set_allocated_tips(::std::string* tips);

  // @@protoc_insertion_point(class_scope:Pmd.stAddHideButtonBookChatUserPmd_S)
 private:
  inline void set_has_lifetime();
  inline void clear_has_lifetime();
  inline void set_has_bookid();
  inline void clear_has_bookid();
  inline void set_has_iconid();
  inline void clear_has_iconid();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_tips();
  inline void clear_has_tips();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lifetime_;
  ::google::protobuf::uint32 bookid_;
  ::google::protobuf::uint32 iconid_;
  ::google::protobuf::uint32 close_;
  ::std::string* tips_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static stAddHideButtonBookChatUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class stAddHideButtonChatUserPmd_S : public ::google::protobuf::Message {
 public:
  stAddHideButtonChatUserPmd_S();
  virtual ~stAddHideButtonChatUserPmd_S();

  stAddHideButtonChatUserPmd_S(const stAddHideButtonChatUserPmd_S& from);

  inline stAddHideButtonChatUserPmd_S& operator=(const stAddHideButtonChatUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddHideButtonChatUserPmd_S& default_instance();

  void Swap(stAddHideButtonChatUserPmd_S* other);

  // implements Message ----------------------------------------------

  stAddHideButtonChatUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddHideButtonChatUserPmd_S& from);
  void MergeFrom(const stAddHideButtonChatUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lifetime = 1;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifetimeFieldNumber = 1;
  inline ::google::protobuf::uint32 lifetime() const;
  inline void set_lifetime(::google::protobuf::uint32 value);

  // optional uint32 hotkeyid = 2;
  inline bool has_hotkeyid() const;
  inline void clear_hotkeyid();
  static const int kHotkeyidFieldNumber = 2;
  inline ::google::protobuf::uint32 hotkeyid() const;
  inline void set_hotkeyid(::google::protobuf::uint32 value);

  // optional uint32 iconid = 3;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconidFieldNumber = 3;
  inline ::google::protobuf::uint32 iconid() const;
  inline void set_iconid(::google::protobuf::uint32 value);

  // optional uint32 tabid = 4;
  inline bool has_tabid() const;
  inline void clear_tabid();
  static const int kTabidFieldNumber = 4;
  inline ::google::protobuf::uint32 tabid() const;
  inline void set_tabid(::google::protobuf::uint32 value);

  // optional uint32 tabframe = 5;
  inline bool has_tabframe() const;
  inline void clear_tabframe();
  static const int kTabframeFieldNumber = 5;
  inline ::google::protobuf::uint32 tabframe() const;
  inline void set_tabframe(::google::protobuf::uint32 value);

  // optional uint32 close = 6;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 6;
  inline ::google::protobuf::uint32 close() const;
  inline void set_close(::google::protobuf::uint32 value);

  // optional string tips = 7;
  inline bool has_tips() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 7;
  inline const ::std::string& tips() const;
  inline void set_tips(const ::std::string& value);
  inline void set_tips(const char* value);
  inline void set_tips(const char* value, size_t size);
  inline ::std::string* mutable_tips();
  inline ::std::string* release_tips();
  inline void set_allocated_tips(::std::string* tips);

  // @@protoc_insertion_point(class_scope:Pmd.stAddHideButtonChatUserPmd_S)
 private:
  inline void set_has_lifetime();
  inline void clear_has_lifetime();
  inline void set_has_hotkeyid();
  inline void clear_has_hotkeyid();
  inline void set_has_iconid();
  inline void clear_has_iconid();
  inline void set_has_tabid();
  inline void clear_has_tabid();
  inline void set_has_tabframe();
  inline void clear_has_tabframe();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_tips();
  inline void clear_has_tips();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lifetime_;
  ::google::protobuf::uint32 hotkeyid_;
  ::google::protobuf::uint32 iconid_;
  ::google::protobuf::uint32 tabid_;
  ::google::protobuf::uint32 tabframe_;
  ::google::protobuf::uint32 close_;
  ::std::string* tips_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static stAddHideButtonChatUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class stAddHideButtonNewFunctionChatUserPmd_S : public ::google::protobuf::Message {
 public:
  stAddHideButtonNewFunctionChatUserPmd_S();
  virtual ~stAddHideButtonNewFunctionChatUserPmd_S();

  stAddHideButtonNewFunctionChatUserPmd_S(const stAddHideButtonNewFunctionChatUserPmd_S& from);

  inline stAddHideButtonNewFunctionChatUserPmd_S& operator=(const stAddHideButtonNewFunctionChatUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddHideButtonNewFunctionChatUserPmd_S& default_instance();

  void Swap(stAddHideButtonNewFunctionChatUserPmd_S* other);

  // implements Message ----------------------------------------------

  stAddHideButtonNewFunctionChatUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddHideButtonNewFunctionChatUserPmd_S& from);
  void MergeFrom(const stAddHideButtonNewFunctionChatUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lifetime = 1;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifetimeFieldNumber = 1;
  inline ::google::protobuf::uint32 lifetime() const;
  inline void set_lifetime(::google::protobuf::uint32 value);

  // optional uint32 functionid = 2;
  inline bool has_functionid() const;
  inline void clear_functionid();
  static const int kFunctionidFieldNumber = 2;
  inline ::google::protobuf::uint32 functionid() const;
  inline void set_functionid(::google::protobuf::uint32 value);

  // optional uint32 iconid = 3;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconidFieldNumber = 3;
  inline ::google::protobuf::uint32 iconid() const;
  inline void set_iconid(::google::protobuf::uint32 value);

  // optional uint32 close = 4;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline ::google::protobuf::uint32 close() const;
  inline void set_close(::google::protobuf::uint32 value);

  // optional string tips = 5;
  inline bool has_tips() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 5;
  inline const ::std::string& tips() const;
  inline void set_tips(const ::std::string& value);
  inline void set_tips(const char* value);
  inline void set_tips(const char* value, size_t size);
  inline ::std::string* mutable_tips();
  inline ::std::string* release_tips();
  inline void set_allocated_tips(::std::string* tips);

  // @@protoc_insertion_point(class_scope:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
 private:
  inline void set_has_lifetime();
  inline void clear_has_lifetime();
  inline void set_has_functionid();
  inline void clear_has_functionid();
  inline void set_has_iconid();
  inline void clear_has_iconid();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_tips();
  inline void clear_has_tips();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lifetime_;
  ::google::protobuf::uint32 functionid_;
  ::google::protobuf::uint32 iconid_;
  ::google::protobuf::uint32 close_;
  ::std::string* tips_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static stAddHideButtonNewFunctionChatUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class stAddHideButtonServerHotKeyChatUserPmd_S : public ::google::protobuf::Message {
 public:
  stAddHideButtonServerHotKeyChatUserPmd_S();
  virtual ~stAddHideButtonServerHotKeyChatUserPmd_S();

  stAddHideButtonServerHotKeyChatUserPmd_S(const stAddHideButtonServerHotKeyChatUserPmd_S& from);

  inline stAddHideButtonServerHotKeyChatUserPmd_S& operator=(const stAddHideButtonServerHotKeyChatUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddHideButtonServerHotKeyChatUserPmd_S& default_instance();

  void Swap(stAddHideButtonServerHotKeyChatUserPmd_S* other);

  // implements Message ----------------------------------------------

  stAddHideButtonServerHotKeyChatUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddHideButtonServerHotKeyChatUserPmd_S& from);
  void MergeFrom(const stAddHideButtonServerHotKeyChatUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lifetime = 1;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifetimeFieldNumber = 1;
  inline ::google::protobuf::uint32 lifetime() const;
  inline void set_lifetime(::google::protobuf::uint32 value);

  // optional uint32 serverhotkeyid = 2;
  inline bool has_serverhotkeyid() const;
  inline void clear_serverhotkeyid();
  static const int kServerhotkeyidFieldNumber = 2;
  inline ::google::protobuf::uint32 serverhotkeyid() const;
  inline void set_serverhotkeyid(::google::protobuf::uint32 value);

  // optional uint32 iconid = 3;
  inline bool has_iconid() const;
  inline void clear_iconid();
  static const int kIconidFieldNumber = 3;
  inline ::google::protobuf::uint32 iconid() const;
  inline void set_iconid(::google::protobuf::uint32 value);

  // optional uint32 close = 4;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline ::google::protobuf::uint32 close() const;
  inline void set_close(::google::protobuf::uint32 value);

  // optional string tips = 5;
  inline bool has_tips() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 5;
  inline const ::std::string& tips() const;
  inline void set_tips(const ::std::string& value);
  inline void set_tips(const char* value);
  inline void set_tips(const char* value, size_t size);
  inline ::std::string* mutable_tips();
  inline ::std::string* release_tips();
  inline void set_allocated_tips(::std::string* tips);

  // @@protoc_insertion_point(class_scope:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
 private:
  inline void set_has_lifetime();
  inline void clear_has_lifetime();
  inline void set_has_serverhotkeyid();
  inline void clear_has_serverhotkeyid();
  inline void set_has_iconid();
  inline void clear_has_iconid();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_tips();
  inline void clear_has_tips();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lifetime_;
  ::google::protobuf::uint32 serverhotkeyid_;
  ::google::protobuf::uint32 iconid_;
  ::google::protobuf::uint32 close_;
  ::std::string* tips_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static stAddHideButtonServerHotKeyChatUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class stCommonChatUserPmd_CS : public ::google::protobuf::Message {
 public:
  stCommonChatUserPmd_CS();
  virtual ~stCommonChatUserPmd_CS();

  stCommonChatUserPmd_CS(const stCommonChatUserPmd_CS& from);

  inline stCommonChatUserPmd_CS& operator=(const stCommonChatUserPmd_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCommonChatUserPmd_CS& default_instance();

  void Swap(stCommonChatUserPmd_CS* other);

  // implements Message ----------------------------------------------

  stCommonChatUserPmd_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCommonChatUserPmd_CS& from);
  void MergeFrom(const stCommonChatUserPmd_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 byChatType = 1;
  inline bool has_bychattype() const;
  inline void clear_bychattype();
  static const int kByChatTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bychattype() const;
  inline void set_bychattype(::google::protobuf::uint32 value);

  // optional uint32 byChatColor = 2;
  inline bool has_bychatcolor() const;
  inline void clear_bychatcolor();
  static const int kByChatColorFieldNumber = 2;
  inline ::google::protobuf::uint32 bychatcolor() const;
  inline void set_bychatcolor(::google::protobuf::uint32 value);

  // optional uint32 byItemNum = 3;
  inline bool has_byitemnum() const;
  inline void clear_byitemnum();
  static const int kByItemNumFieldNumber = 3;
  inline ::google::protobuf::uint32 byitemnum() const;
  inline void set_byitemnum(::google::protobuf::uint32 value);

  // optional uint32 byChatPos = 4;
  inline bool has_bychatpos() const;
  inline void clear_bychatpos();
  static const int kByChatPosFieldNumber = 4;
  inline ::google::protobuf::uint32 bychatpos() const;
  inline void set_bychatpos(::google::protobuf::uint32 value);

  // optional uint32 reserved = 5;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 5;
  inline ::google::protobuf::uint32 reserved() const;
  inline void set_reserved(::google::protobuf::uint32 value);

  // optional uint32 country = 6;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 6;
  inline ::google::protobuf::uint32 country() const;
  inline void set_country(::google::protobuf::uint32 value);

  // optional uint32 function = 7;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 7;
  inline ::google::protobuf::uint32 function() const;
  inline void set_function(::google::protobuf::uint32 value);

  // optional uint32 dwOPDes = 8;
  inline bool has_dwopdes() const;
  inline void clear_dwopdes();
  static const int kDwOPDesFieldNumber = 8;
  inline ::google::protobuf::uint32 dwopdes() const;
  inline void set_dwopdes(::google::protobuf::uint32 value);

  // optional uint32 levelOrder = 9;
  inline bool has_levelorder() const;
  inline void clear_levelorder();
  static const int kLevelOrderFieldNumber = 9;
  inline ::google::protobuf::uint32 levelorder() const;
  inline void set_levelorder(::google::protobuf::uint32 value);

  // optional uint32 vipflag = 10;
  inline bool has_vipflag() const;
  inline void clear_vipflag();
  static const int kVipflagFieldNumber = 10;
  inline ::google::protobuf::uint32 vipflag() const;
  inline void set_vipflag(::google::protobuf::uint32 value);

  // optional uint32 wdOldZoneID = 11;
  inline bool has_wdoldzoneid() const;
  inline void clear_wdoldzoneid();
  static const int kWdOldZoneIDFieldNumber = 11;
  inline ::google::protobuf::uint32 wdoldzoneid() const;
  inline void set_wdoldzoneid(::google::protobuf::uint32 value);

  // optional uint32 byBitmask = 12;
  inline bool has_bybitmask() const;
  inline void clear_bybitmask();
  static const int kByBitmaskFieldNumber = 12;
  inline ::google::protobuf::uint32 bybitmask() const;
  inline void set_bybitmask(::google::protobuf::uint32 value);

  // optional uint32 byUserCmd = 13;
  inline bool has_byusercmd() const;
  inline void clear_byusercmd();
  static const int kByUserCmdFieldNumber = 13;
  inline ::google::protobuf::uint32 byusercmd() const;
  inline void set_byusercmd(::google::protobuf::uint32 value);

  // optional uint32 byUserParam = 14;
  inline bool has_byuserparam() const;
  inline void clear_byuserparam();
  static const int kByUserParamFieldNumber = 14;
  inline ::google::protobuf::uint32 byuserparam() const;
  inline void set_byuserparam(::google::protobuf::uint32 value);

  // optional string szInfo = 15;
  inline bool has_szinfo() const;
  inline void clear_szinfo();
  static const int kSzInfoFieldNumber = 15;
  inline const ::std::string& szinfo() const;
  inline void set_szinfo(const ::std::string& value);
  inline void set_szinfo(const char* value);
  inline void set_szinfo(const char* value, size_t size);
  inline ::std::string* mutable_szinfo();
  inline ::std::string* release_szinfo();
  inline void set_allocated_szinfo(::std::string* szinfo);

  // optional uint32 profession = 16;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 16;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional uint32 sex = 17;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 17;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 18;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 18;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.stCommonChatUserPmd_CS)
 private:
  inline void set_has_bychattype();
  inline void clear_has_bychattype();
  inline void set_has_bychatcolor();
  inline void clear_has_bychatcolor();
  inline void set_has_byitemnum();
  inline void clear_has_byitemnum();
  inline void set_has_bychatpos();
  inline void clear_has_bychatpos();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_dwopdes();
  inline void clear_has_dwopdes();
  inline void set_has_levelorder();
  inline void clear_has_levelorder();
  inline void set_has_vipflag();
  inline void clear_has_vipflag();
  inline void set_has_wdoldzoneid();
  inline void clear_has_wdoldzoneid();
  inline void set_has_bybitmask();
  inline void clear_has_bybitmask();
  inline void set_has_byusercmd();
  inline void clear_has_byusercmd();
  inline void set_has_byuserparam();
  inline void clear_has_byuserparam();
  inline void set_has_szinfo();
  inline void clear_has_szinfo();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bychattype_;
  ::google::protobuf::uint32 bychatcolor_;
  ::google::protobuf::uint32 byitemnum_;
  ::google::protobuf::uint32 bychatpos_;
  ::google::protobuf::uint32 reserved_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 function_;
  ::google::protobuf::uint32 dwopdes_;
  ::google::protobuf::uint32 levelorder_;
  ::google::protobuf::uint32 vipflag_;
  ::google::protobuf::uint32 wdoldzoneid_;
  ::google::protobuf::uint32 bybitmask_;
  ::google::protobuf::uint32 byusercmd_;
  ::google::protobuf::uint32 byuserparam_;
  ::std::string* szinfo_;
  ::google::protobuf::uint32 profession_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 timestamp_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static stCommonChatUserPmd_CS* default_instance_;
};
// -------------------------------------------------------------------

class stMessageBoxChatUserPmd_S : public ::google::protobuf::Message {
 public:
  stMessageBoxChatUserPmd_S();
  virtual ~stMessageBoxChatUserPmd_S();

  stMessageBoxChatUserPmd_S(const stMessageBoxChatUserPmd_S& from);

  inline stMessageBoxChatUserPmd_S& operator=(const stMessageBoxChatUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMessageBoxChatUserPmd_S& default_instance();

  void Swap(stMessageBoxChatUserPmd_S* other);

  // implements Message ----------------------------------------------

  stMessageBoxChatUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMessageBoxChatUserPmd_S& from);
  void MergeFrom(const stMessageBoxChatUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string buttons = 1;
  inline bool has_buttons() const;
  inline void clear_buttons();
  static const int kButtonsFieldNumber = 1;
  inline const ::std::string& buttons() const;
  inline void set_buttons(const ::std::string& value);
  inline void set_buttons(const char* value);
  inline void set_buttons(const char* value, size_t size);
  inline ::std::string* mutable_buttons();
  inline ::std::string* release_buttons();
  inline void set_allocated_buttons(::std::string* buttons);

  // optional string szInfo = 2;
  inline bool has_szinfo() const;
  inline void clear_szinfo();
  static const int kSzInfoFieldNumber = 2;
  inline const ::std::string& szinfo() const;
  inline void set_szinfo(const ::std::string& value);
  inline void set_szinfo(const char* value);
  inline void set_szinfo(const char* value, size_t size);
  inline ::std::string* mutable_szinfo();
  inline ::std::string* release_szinfo();
  inline void set_allocated_szinfo(::std::string* szinfo);

  // optional uint32 data0 = 3;
  inline bool has_data0() const;
  inline void clear_data0();
  static const int kData0FieldNumber = 3;
  inline ::google::protobuf::uint32 data0() const;
  inline void set_data0(::google::protobuf::uint32 value);

  // optional uint32 data1 = 4;
  inline bool has_data1() const;
  inline void clear_data1();
  static const int kData1FieldNumber = 4;
  inline ::google::protobuf::uint32 data1() const;
  inline void set_data1(::google::protobuf::uint32 value);

  // optional uint32 data2 = 5;
  inline bool has_data2() const;
  inline void clear_data2();
  static const int kData2FieldNumber = 5;
  inline ::google::protobuf::uint32 data2() const;
  inline void set_data2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.stMessageBoxChatUserPmd_S)
 private:
  inline void set_has_buttons();
  inline void clear_has_buttons();
  inline void set_has_szinfo();
  inline void clear_has_szinfo();
  inline void set_has_data0();
  inline void clear_has_data0();
  inline void set_has_data1();
  inline void clear_has_data1();
  inline void set_has_data2();
  inline void clear_has_data2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* buttons_;
  ::std::string* szinfo_;
  ::google::protobuf::uint32 data0_;
  ::google::protobuf::uint32 data1_;
  ::google::protobuf::uint32 data2_;
  friend void  protobuf_AddDesc_chatcommand_2eproto();
  friend void protobuf_AssignDesc_chatcommand_2eproto();
  friend void protobuf_ShutdownFile_chatcommand_2eproto();

  void InitAsDefaultInstance();
  static stMessageBoxChatUserPmd_S* default_instance_;
};
// ===================================================================


// ===================================================================

// Chat

// -------------------------------------------------------------------

// CommonChatUserPmd_CS

// optional uint64 id = 1;
inline bool CommonChatUserPmd_CS::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonChatUserPmd_CS::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonChatUserPmd_CS::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonChatUserPmd_CS::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CommonChatUserPmd_CS::id() const {
  // @@protoc_insertion_point(field_get:Pmd.CommonChatUserPmd_CS.id)
  return id_;
}
inline void CommonChatUserPmd_CS::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Pmd.CommonChatUserPmd_CS.id)
}

// optional string name = 2;
inline bool CommonChatUserPmd_CS::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonChatUserPmd_CS::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonChatUserPmd_CS::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonChatUserPmd_CS::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CommonChatUserPmd_CS::name() const {
  // @@protoc_insertion_point(field_get:Pmd.CommonChatUserPmd_CS.name)
  return *name_;
}
inline void CommonChatUserPmd_CS::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.CommonChatUserPmd_CS.name)
}
inline void CommonChatUserPmd_CS::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.CommonChatUserPmd_CS.name)
}
inline void CommonChatUserPmd_CS::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.CommonChatUserPmd_CS.name)
}
inline ::std::string* CommonChatUserPmd_CS::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.CommonChatUserPmd_CS.name)
  return name_;
}
inline ::std::string* CommonChatUserPmd_CS::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CommonChatUserPmd_CS::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.CommonChatUserPmd_CS.name)
}

// optional bool sexman = 3;
inline bool CommonChatUserPmd_CS::has_sexman() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonChatUserPmd_CS::set_has_sexman() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonChatUserPmd_CS::clear_has_sexman() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonChatUserPmd_CS::clear_sexman() {
  sexman_ = false;
  clear_has_sexman();
}
inline bool CommonChatUserPmd_CS::sexman() const {
  // @@protoc_insertion_point(field_get:Pmd.CommonChatUserPmd_CS.sexman)
  return sexman_;
}
inline void CommonChatUserPmd_CS::set_sexman(bool value) {
  set_has_sexman();
  sexman_ = value;
  // @@protoc_insertion_point(field_set:Pmd.CommonChatUserPmd_CS.sexman)
}

// optional uint32 chatpos = 4;
inline bool CommonChatUserPmd_CS::has_chatpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonChatUserPmd_CS::set_has_chatpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonChatUserPmd_CS::clear_has_chatpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonChatUserPmd_CS::clear_chatpos() {
  chatpos_ = 0u;
  clear_has_chatpos();
}
inline ::google::protobuf::uint32 CommonChatUserPmd_CS::chatpos() const {
  // @@protoc_insertion_point(field_get:Pmd.CommonChatUserPmd_CS.chatpos)
  return chatpos_;
}
inline void CommonChatUserPmd_CS::set_chatpos(::google::protobuf::uint32 value) {
  set_has_chatpos();
  chatpos_ = value;
  // @@protoc_insertion_point(field_set:Pmd.CommonChatUserPmd_CS.chatpos)
}

// optional uint32 chattype = 5;
inline bool CommonChatUserPmd_CS::has_chattype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonChatUserPmd_CS::set_has_chattype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonChatUserPmd_CS::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonChatUserPmd_CS::clear_chattype() {
  chattype_ = 0u;
  clear_has_chattype();
}
inline ::google::protobuf::uint32 CommonChatUserPmd_CS::chattype() const {
  // @@protoc_insertion_point(field_get:Pmd.CommonChatUserPmd_CS.chattype)
  return chattype_;
}
inline void CommonChatUserPmd_CS::set_chattype(::google::protobuf::uint32 value) {
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:Pmd.CommonChatUserPmd_CS.chattype)
}

// required string info = 6;
inline bool CommonChatUserPmd_CS::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonChatUserPmd_CS::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonChatUserPmd_CS::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonChatUserPmd_CS::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& CommonChatUserPmd_CS::info() const {
  // @@protoc_insertion_point(field_get:Pmd.CommonChatUserPmd_CS.info)
  return *info_;
}
inline void CommonChatUserPmd_CS::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.CommonChatUserPmd_CS.info)
}
inline void CommonChatUserPmd_CS::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.CommonChatUserPmd_CS.info)
}
inline void CommonChatUserPmd_CS::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.CommonChatUserPmd_CS.info)
}
inline ::std::string* CommonChatUserPmd_CS::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.CommonChatUserPmd_CS.info)
  return info_;
}
inline ::std::string* CommonChatUserPmd_CS::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CommonChatUserPmd_CS::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.CommonChatUserPmd_CS.info)
}

// optional uint64 time = 7;
inline bool CommonChatUserPmd_CS::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonChatUserPmd_CS::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonChatUserPmd_CS::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonChatUserPmd_CS::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 CommonChatUserPmd_CS::time() const {
  // @@protoc_insertion_point(field_get:Pmd.CommonChatUserPmd_CS.time)
  return time_;
}
inline void CommonChatUserPmd_CS::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Pmd.CommonChatUserPmd_CS.time)
}

// -------------------------------------------------------------------

// GMCommandChatUserPmd_C

// optional uint64 charid = 1;
inline bool GMCommandChatUserPmd_C::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMCommandChatUserPmd_C::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMCommandChatUserPmd_C::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMCommandChatUserPmd_C::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 GMCommandChatUserPmd_C::charid() const {
  // @@protoc_insertion_point(field_get:Pmd.GMCommandChatUserPmd_C.charid)
  return charid_;
}
inline void GMCommandChatUserPmd_C::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.GMCommandChatUserPmd_C.charid)
}

// optional string charname = 2;
inline bool GMCommandChatUserPmd_C::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMCommandChatUserPmd_C::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMCommandChatUserPmd_C::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMCommandChatUserPmd_C::clear_charname() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& GMCommandChatUserPmd_C::charname() const {
  // @@protoc_insertion_point(field_get:Pmd.GMCommandChatUserPmd_C.charname)
  return *charname_;
}
inline void GMCommandChatUserPmd_C::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.GMCommandChatUserPmd_C.charname)
}
inline void GMCommandChatUserPmd_C::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.GMCommandChatUserPmd_C.charname)
}
inline void GMCommandChatUserPmd_C::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.GMCommandChatUserPmd_C.charname)
}
inline ::std::string* GMCommandChatUserPmd_C::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.GMCommandChatUserPmd_C.charname)
  return charname_;
}
inline ::std::string* GMCommandChatUserPmd_C::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GMCommandChatUserPmd_C::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.GMCommandChatUserPmd_C.charname)
}

// required string method = 3;
inline bool GMCommandChatUserPmd_C::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMCommandChatUserPmd_C::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMCommandChatUserPmd_C::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMCommandChatUserPmd_C::clear_method() {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& GMCommandChatUserPmd_C::method() const {
  // @@protoc_insertion_point(field_get:Pmd.GMCommandChatUserPmd_C.method)
  return *method_;
}
inline void GMCommandChatUserPmd_C::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.GMCommandChatUserPmd_C.method)
}
inline void GMCommandChatUserPmd_C::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.GMCommandChatUserPmd_C.method)
}
inline void GMCommandChatUserPmd_C::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.GMCommandChatUserPmd_C.method)
}
inline ::std::string* GMCommandChatUserPmd_C::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.GMCommandChatUserPmd_C.method)
  return method_;
}
inline ::std::string* GMCommandChatUserPmd_C::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GMCommandChatUserPmd_C::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.GMCommandChatUserPmd_C.method)
}

// optional string params = 4;
inline bool GMCommandChatUserPmd_C::has_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMCommandChatUserPmd_C::set_has_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMCommandChatUserPmd_C::clear_has_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMCommandChatUserPmd_C::clear_params() {
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_->clear();
  }
  clear_has_params();
}
inline const ::std::string& GMCommandChatUserPmd_C::params() const {
  // @@protoc_insertion_point(field_get:Pmd.GMCommandChatUserPmd_C.params)
  return *params_;
}
inline void GMCommandChatUserPmd_C::set_params(const ::std::string& value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.GMCommandChatUserPmd_C.params)
}
inline void GMCommandChatUserPmd_C::set_params(const char* value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.GMCommandChatUserPmd_C.params)
}
inline void GMCommandChatUserPmd_C::set_params(const char* value, size_t size) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.GMCommandChatUserPmd_C.params)
}
inline ::std::string* GMCommandChatUserPmd_C::mutable_params() {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.GMCommandChatUserPmd_C.params)
  return params_;
}
inline ::std::string* GMCommandChatUserPmd_C::release_params() {
  clear_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = params_;
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GMCommandChatUserPmd_C::set_allocated_params(::std::string* params) {
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete params_;
  }
  if (params) {
    set_has_params();
    params_ = params;
  } else {
    clear_has_params();
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.GMCommandChatUserPmd_C.params)
}

// -------------------------------------------------------------------

// GMHelpInfo

// required string method = 1;
inline bool GMHelpInfo::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMHelpInfo::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMHelpInfo::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMHelpInfo::clear_method() {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& GMHelpInfo::method() const {
  // @@protoc_insertion_point(field_get:Pmd.GMHelpInfo.method)
  return *method_;
}
inline void GMHelpInfo::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.GMHelpInfo.method)
}
inline void GMHelpInfo::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.GMHelpInfo.method)
}
inline void GMHelpInfo::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.GMHelpInfo.method)
}
inline ::std::string* GMHelpInfo::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.GMHelpInfo.method)
  return method_;
}
inline ::std::string* GMHelpInfo::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GMHelpInfo::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.GMHelpInfo.method)
}

// required string example = 2;
inline bool GMHelpInfo::has_example() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMHelpInfo::set_has_example() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMHelpInfo::clear_has_example() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMHelpInfo::clear_example() {
  if (example_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    example_->clear();
  }
  clear_has_example();
}
inline const ::std::string& GMHelpInfo::example() const {
  // @@protoc_insertion_point(field_get:Pmd.GMHelpInfo.example)
  return *example_;
}
inline void GMHelpInfo::set_example(const ::std::string& value) {
  set_has_example();
  if (example_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    example_ = new ::std::string;
  }
  example_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.GMHelpInfo.example)
}
inline void GMHelpInfo::set_example(const char* value) {
  set_has_example();
  if (example_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    example_ = new ::std::string;
  }
  example_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.GMHelpInfo.example)
}
inline void GMHelpInfo::set_example(const char* value, size_t size) {
  set_has_example();
  if (example_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    example_ = new ::std::string;
  }
  example_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.GMHelpInfo.example)
}
inline ::std::string* GMHelpInfo::mutable_example() {
  set_has_example();
  if (example_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    example_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.GMHelpInfo.example)
  return example_;
}
inline ::std::string* GMHelpInfo::release_example() {
  clear_has_example();
  if (example_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = example_;
    example_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GMHelpInfo::set_allocated_example(::std::string* example) {
  if (example_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete example_;
  }
  if (example) {
    set_has_example();
    example_ = example;
  } else {
    clear_has_example();
    example_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.GMHelpInfo.example)
}

// -------------------------------------------------------------------

// GMCommandListChatUserPmd_S

// repeated .Pmd.GMHelpInfo list = 1;
inline int GMCommandListChatUserPmd_S::list_size() const {
  return list_.size();
}
inline void GMCommandListChatUserPmd_S::clear_list() {
  list_.Clear();
}
inline const ::Pmd::GMHelpInfo& GMCommandListChatUserPmd_S::list(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.GMCommandListChatUserPmd_S.list)
  return list_.Get(index);
}
inline ::Pmd::GMHelpInfo* GMCommandListChatUserPmd_S::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.GMCommandListChatUserPmd_S.list)
  return list_.Mutable(index);
}
inline ::Pmd::GMHelpInfo* GMCommandListChatUserPmd_S::add_list() {
  // @@protoc_insertion_point(field_add:Pmd.GMCommandListChatUserPmd_S.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::GMHelpInfo >&
GMCommandListChatUserPmd_S::list() const {
  // @@protoc_insertion_point(field_list:Pmd.GMCommandListChatUserPmd_S.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::GMHelpInfo >*
GMCommandListChatUserPmd_S::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.GMCommandListChatUserPmd_S.list)
  return &list_;
}

// -------------------------------------------------------------------

// PrivateChatUserPmd_CS

// optional uint64 id = 1;
inline bool PrivateChatUserPmd_CS::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrivateChatUserPmd_CS::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrivateChatUserPmd_CS::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrivateChatUserPmd_CS::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 PrivateChatUserPmd_CS::id() const {
  // @@protoc_insertion_point(field_get:Pmd.PrivateChatUserPmd_CS.id)
  return id_;
}
inline void PrivateChatUserPmd_CS::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PrivateChatUserPmd_CS.id)
}

// optional string name = 2;
inline bool PrivateChatUserPmd_CS::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrivateChatUserPmd_CS::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrivateChatUserPmd_CS::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrivateChatUserPmd_CS::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrivateChatUserPmd_CS::name() const {
  // @@protoc_insertion_point(field_get:Pmd.PrivateChatUserPmd_CS.name)
  return *name_;
}
inline void PrivateChatUserPmd_CS::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PrivateChatUserPmd_CS.name)
}
inline void PrivateChatUserPmd_CS::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PrivateChatUserPmd_CS.name)
}
inline void PrivateChatUserPmd_CS::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PrivateChatUserPmd_CS.name)
}
inline ::std::string* PrivateChatUserPmd_CS::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PrivateChatUserPmd_CS.name)
  return name_;
}
inline ::std::string* PrivateChatUserPmd_CS::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PrivateChatUserPmd_CS::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PrivateChatUserPmd_CS.name)
}

// optional bool sexman = 3;
inline bool PrivateChatUserPmd_CS::has_sexman() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrivateChatUserPmd_CS::set_has_sexman() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrivateChatUserPmd_CS::clear_has_sexman() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrivateChatUserPmd_CS::clear_sexman() {
  sexman_ = false;
  clear_has_sexman();
}
inline bool PrivateChatUserPmd_CS::sexman() const {
  // @@protoc_insertion_point(field_get:Pmd.PrivateChatUserPmd_CS.sexman)
  return sexman_;
}
inline void PrivateChatUserPmd_CS::set_sexman(bool value) {
  set_has_sexman();
  sexman_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PrivateChatUserPmd_CS.sexman)
}

// required string info = 4;
inline bool PrivateChatUserPmd_CS::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrivateChatUserPmd_CS::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrivateChatUserPmd_CS::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrivateChatUserPmd_CS::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& PrivateChatUserPmd_CS::info() const {
  // @@protoc_insertion_point(field_get:Pmd.PrivateChatUserPmd_CS.info)
  return *info_;
}
inline void PrivateChatUserPmd_CS::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PrivateChatUserPmd_CS.info)
}
inline void PrivateChatUserPmd_CS::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PrivateChatUserPmd_CS.info)
}
inline void PrivateChatUserPmd_CS::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PrivateChatUserPmd_CS.info)
}
inline ::std::string* PrivateChatUserPmd_CS::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PrivateChatUserPmd_CS.info)
  return info_;
}
inline ::std::string* PrivateChatUserPmd_CS::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PrivateChatUserPmd_CS::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PrivateChatUserPmd_CS.info)
}

// optional uint64 time = 5;
inline bool PrivateChatUserPmd_CS::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrivateChatUserPmd_CS::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrivateChatUserPmd_CS::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrivateChatUserPmd_CS::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 PrivateChatUserPmd_CS::time() const {
  // @@protoc_insertion_point(field_get:Pmd.PrivateChatUserPmd_CS.time)
  return time_;
}
inline void PrivateChatUserPmd_CS::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PrivateChatUserPmd_CS.time)
}

// -------------------------------------------------------------------

// CurrentGmLevelChatUserPmd_S

// optional uint32 gmlevel = 1;
inline bool CurrentGmLevelChatUserPmd_S::has_gmlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrentGmLevelChatUserPmd_S::set_has_gmlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurrentGmLevelChatUserPmd_S::clear_has_gmlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurrentGmLevelChatUserPmd_S::clear_gmlevel() {
  gmlevel_ = 0u;
  clear_has_gmlevel();
}
inline ::google::protobuf::uint32 CurrentGmLevelChatUserPmd_S::gmlevel() const {
  // @@protoc_insertion_point(field_get:Pmd.CurrentGmLevelChatUserPmd_S.gmlevel)
  return gmlevel_;
}
inline void CurrentGmLevelChatUserPmd_S::set_gmlevel(::google::protobuf::uint32 value) {
  set_has_gmlevel();
  gmlevel_ = value;
  // @@protoc_insertion_point(field_set:Pmd.CurrentGmLevelChatUserPmd_S.gmlevel)
}

// -------------------------------------------------------------------

// stAddHideButtonBookChatUserPmd_S

// optional uint32 lifetime = 1;
inline bool stAddHideButtonBookChatUserPmd_S::has_lifetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddHideButtonBookChatUserPmd_S::set_has_lifetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_lifetime() {
  lifetime_ = 0u;
  clear_has_lifetime();
}
inline ::google::protobuf::uint32 stAddHideButtonBookChatUserPmd_S::lifetime() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonBookChatUserPmd_S.lifetime)
  return lifetime_;
}
inline void stAddHideButtonBookChatUserPmd_S::set_lifetime(::google::protobuf::uint32 value) {
  set_has_lifetime();
  lifetime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonBookChatUserPmd_S.lifetime)
}

// optional uint32 bookid = 2;
inline bool stAddHideButtonBookChatUserPmd_S::has_bookid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddHideButtonBookChatUserPmd_S::set_has_bookid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_has_bookid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_bookid() {
  bookid_ = 0u;
  clear_has_bookid();
}
inline ::google::protobuf::uint32 stAddHideButtonBookChatUserPmd_S::bookid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonBookChatUserPmd_S.bookid)
  return bookid_;
}
inline void stAddHideButtonBookChatUserPmd_S::set_bookid(::google::protobuf::uint32 value) {
  set_has_bookid();
  bookid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonBookChatUserPmd_S.bookid)
}

// optional uint32 iconid = 3;
inline bool stAddHideButtonBookChatUserPmd_S::has_iconid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAddHideButtonBookChatUserPmd_S::set_has_iconid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_iconid() {
  iconid_ = 0u;
  clear_has_iconid();
}
inline ::google::protobuf::uint32 stAddHideButtonBookChatUserPmd_S::iconid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonBookChatUserPmd_S.iconid)
  return iconid_;
}
inline void stAddHideButtonBookChatUserPmd_S::set_iconid(::google::protobuf::uint32 value) {
  set_has_iconid();
  iconid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonBookChatUserPmd_S.iconid)
}

// optional uint32 close = 4;
inline bool stAddHideButtonBookChatUserPmd_S::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAddHideButtonBookChatUserPmd_S::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_close() {
  close_ = 0u;
  clear_has_close();
}
inline ::google::protobuf::uint32 stAddHideButtonBookChatUserPmd_S::close() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonBookChatUserPmd_S.close)
  return close_;
}
inline void stAddHideButtonBookChatUserPmd_S::set_close(::google::protobuf::uint32 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonBookChatUserPmd_S.close)
}

// optional string tips = 5;
inline bool stAddHideButtonBookChatUserPmd_S::has_tips() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stAddHideButtonBookChatUserPmd_S::set_has_tips() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_has_tips() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stAddHideButtonBookChatUserPmd_S::clear_tips() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_->clear();
  }
  clear_has_tips();
}
inline const ::std::string& stAddHideButtonBookChatUserPmd_S::tips() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonBookChatUserPmd_S.tips)
  return *tips_;
}
inline void stAddHideButtonBookChatUserPmd_S::set_tips(const ::std::string& value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonBookChatUserPmd_S.tips)
}
inline void stAddHideButtonBookChatUserPmd_S::set_tips(const char* value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.stAddHideButtonBookChatUserPmd_S.tips)
}
inline void stAddHideButtonBookChatUserPmd_S::set_tips(const char* value, size_t size) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.stAddHideButtonBookChatUserPmd_S.tips)
}
inline ::std::string* stAddHideButtonBookChatUserPmd_S::mutable_tips() {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.stAddHideButtonBookChatUserPmd_S.tips)
  return tips_;
}
inline ::std::string* stAddHideButtonBookChatUserPmd_S::release_tips() {
  clear_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tips_;
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stAddHideButtonBookChatUserPmd_S::set_allocated_tips(::std::string* tips) {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (tips) {
    set_has_tips();
    tips_ = tips;
  } else {
    clear_has_tips();
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.stAddHideButtonBookChatUserPmd_S.tips)
}

// -------------------------------------------------------------------

// stAddHideButtonChatUserPmd_S

// optional uint32 lifetime = 1;
inline bool stAddHideButtonChatUserPmd_S::has_lifetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddHideButtonChatUserPmd_S::set_has_lifetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddHideButtonChatUserPmd_S::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddHideButtonChatUserPmd_S::clear_lifetime() {
  lifetime_ = 0u;
  clear_has_lifetime();
}
inline ::google::protobuf::uint32 stAddHideButtonChatUserPmd_S::lifetime() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonChatUserPmd_S.lifetime)
  return lifetime_;
}
inline void stAddHideButtonChatUserPmd_S::set_lifetime(::google::protobuf::uint32 value) {
  set_has_lifetime();
  lifetime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonChatUserPmd_S.lifetime)
}

// optional uint32 hotkeyid = 2;
inline bool stAddHideButtonChatUserPmd_S::has_hotkeyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddHideButtonChatUserPmd_S::set_has_hotkeyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddHideButtonChatUserPmd_S::clear_has_hotkeyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddHideButtonChatUserPmd_S::clear_hotkeyid() {
  hotkeyid_ = 0u;
  clear_has_hotkeyid();
}
inline ::google::protobuf::uint32 stAddHideButtonChatUserPmd_S::hotkeyid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonChatUserPmd_S.hotkeyid)
  return hotkeyid_;
}
inline void stAddHideButtonChatUserPmd_S::set_hotkeyid(::google::protobuf::uint32 value) {
  set_has_hotkeyid();
  hotkeyid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonChatUserPmd_S.hotkeyid)
}

// optional uint32 iconid = 3;
inline bool stAddHideButtonChatUserPmd_S::has_iconid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAddHideButtonChatUserPmd_S::set_has_iconid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAddHideButtonChatUserPmd_S::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAddHideButtonChatUserPmd_S::clear_iconid() {
  iconid_ = 0u;
  clear_has_iconid();
}
inline ::google::protobuf::uint32 stAddHideButtonChatUserPmd_S::iconid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonChatUserPmd_S.iconid)
  return iconid_;
}
inline void stAddHideButtonChatUserPmd_S::set_iconid(::google::protobuf::uint32 value) {
  set_has_iconid();
  iconid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonChatUserPmd_S.iconid)
}

// optional uint32 tabid = 4;
inline bool stAddHideButtonChatUserPmd_S::has_tabid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAddHideButtonChatUserPmd_S::set_has_tabid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAddHideButtonChatUserPmd_S::clear_has_tabid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAddHideButtonChatUserPmd_S::clear_tabid() {
  tabid_ = 0u;
  clear_has_tabid();
}
inline ::google::protobuf::uint32 stAddHideButtonChatUserPmd_S::tabid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonChatUserPmd_S.tabid)
  return tabid_;
}
inline void stAddHideButtonChatUserPmd_S::set_tabid(::google::protobuf::uint32 value) {
  set_has_tabid();
  tabid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonChatUserPmd_S.tabid)
}

// optional uint32 tabframe = 5;
inline bool stAddHideButtonChatUserPmd_S::has_tabframe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stAddHideButtonChatUserPmd_S::set_has_tabframe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stAddHideButtonChatUserPmd_S::clear_has_tabframe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stAddHideButtonChatUserPmd_S::clear_tabframe() {
  tabframe_ = 0u;
  clear_has_tabframe();
}
inline ::google::protobuf::uint32 stAddHideButtonChatUserPmd_S::tabframe() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonChatUserPmd_S.tabframe)
  return tabframe_;
}
inline void stAddHideButtonChatUserPmd_S::set_tabframe(::google::protobuf::uint32 value) {
  set_has_tabframe();
  tabframe_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonChatUserPmd_S.tabframe)
}

// optional uint32 close = 6;
inline bool stAddHideButtonChatUserPmd_S::has_close() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stAddHideButtonChatUserPmd_S::set_has_close() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stAddHideButtonChatUserPmd_S::clear_has_close() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stAddHideButtonChatUserPmd_S::clear_close() {
  close_ = 0u;
  clear_has_close();
}
inline ::google::protobuf::uint32 stAddHideButtonChatUserPmd_S::close() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonChatUserPmd_S.close)
  return close_;
}
inline void stAddHideButtonChatUserPmd_S::set_close(::google::protobuf::uint32 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonChatUserPmd_S.close)
}

// optional string tips = 7;
inline bool stAddHideButtonChatUserPmd_S::has_tips() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stAddHideButtonChatUserPmd_S::set_has_tips() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stAddHideButtonChatUserPmd_S::clear_has_tips() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stAddHideButtonChatUserPmd_S::clear_tips() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_->clear();
  }
  clear_has_tips();
}
inline const ::std::string& stAddHideButtonChatUserPmd_S::tips() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonChatUserPmd_S.tips)
  return *tips_;
}
inline void stAddHideButtonChatUserPmd_S::set_tips(const ::std::string& value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonChatUserPmd_S.tips)
}
inline void stAddHideButtonChatUserPmd_S::set_tips(const char* value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.stAddHideButtonChatUserPmd_S.tips)
}
inline void stAddHideButtonChatUserPmd_S::set_tips(const char* value, size_t size) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.stAddHideButtonChatUserPmd_S.tips)
}
inline ::std::string* stAddHideButtonChatUserPmd_S::mutable_tips() {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.stAddHideButtonChatUserPmd_S.tips)
  return tips_;
}
inline ::std::string* stAddHideButtonChatUserPmd_S::release_tips() {
  clear_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tips_;
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stAddHideButtonChatUserPmd_S::set_allocated_tips(::std::string* tips) {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (tips) {
    set_has_tips();
    tips_ = tips;
  } else {
    clear_has_tips();
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.stAddHideButtonChatUserPmd_S.tips)
}

// -------------------------------------------------------------------

// stAddHideButtonNewFunctionChatUserPmd_S

// optional uint32 lifetime = 1;
inline bool stAddHideButtonNewFunctionChatUserPmd_S::has_lifetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_has_lifetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_lifetime() {
  lifetime_ = 0u;
  clear_has_lifetime();
}
inline ::google::protobuf::uint32 stAddHideButtonNewFunctionChatUserPmd_S::lifetime() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.lifetime)
  return lifetime_;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_lifetime(::google::protobuf::uint32 value) {
  set_has_lifetime();
  lifetime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.lifetime)
}

// optional uint32 functionid = 2;
inline bool stAddHideButtonNewFunctionChatUserPmd_S::has_functionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_has_functionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_has_functionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_functionid() {
  functionid_ = 0u;
  clear_has_functionid();
}
inline ::google::protobuf::uint32 stAddHideButtonNewFunctionChatUserPmd_S::functionid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.functionid)
  return functionid_;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_functionid(::google::protobuf::uint32 value) {
  set_has_functionid();
  functionid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.functionid)
}

// optional uint32 iconid = 3;
inline bool stAddHideButtonNewFunctionChatUserPmd_S::has_iconid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_has_iconid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_iconid() {
  iconid_ = 0u;
  clear_has_iconid();
}
inline ::google::protobuf::uint32 stAddHideButtonNewFunctionChatUserPmd_S::iconid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.iconid)
  return iconid_;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_iconid(::google::protobuf::uint32 value) {
  set_has_iconid();
  iconid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.iconid)
}

// optional uint32 close = 4;
inline bool stAddHideButtonNewFunctionChatUserPmd_S::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_close() {
  close_ = 0u;
  clear_has_close();
}
inline ::google::protobuf::uint32 stAddHideButtonNewFunctionChatUserPmd_S::close() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.close)
  return close_;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_close(::google::protobuf::uint32 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.close)
}

// optional string tips = 5;
inline bool stAddHideButtonNewFunctionChatUserPmd_S::has_tips() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_has_tips() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_has_tips() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::clear_tips() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_->clear();
  }
  clear_has_tips();
}
inline const ::std::string& stAddHideButtonNewFunctionChatUserPmd_S::tips() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.tips)
  return *tips_;
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_tips(const ::std::string& value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.tips)
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_tips(const char* value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.tips)
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_tips(const char* value, size_t size) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.tips)
}
inline ::std::string* stAddHideButtonNewFunctionChatUserPmd_S::mutable_tips() {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.tips)
  return tips_;
}
inline ::std::string* stAddHideButtonNewFunctionChatUserPmd_S::release_tips() {
  clear_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tips_;
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stAddHideButtonNewFunctionChatUserPmd_S::set_allocated_tips(::std::string* tips) {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (tips) {
    set_has_tips();
    tips_ = tips;
  } else {
    clear_has_tips();
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.stAddHideButtonNewFunctionChatUserPmd_S.tips)
}

// -------------------------------------------------------------------

// stAddHideButtonServerHotKeyChatUserPmd_S

// optional uint32 lifetime = 1;
inline bool stAddHideButtonServerHotKeyChatUserPmd_S::has_lifetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_has_lifetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_lifetime() {
  lifetime_ = 0u;
  clear_has_lifetime();
}
inline ::google::protobuf::uint32 stAddHideButtonServerHotKeyChatUserPmd_S::lifetime() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.lifetime)
  return lifetime_;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_lifetime(::google::protobuf::uint32 value) {
  set_has_lifetime();
  lifetime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.lifetime)
}

// optional uint32 serverhotkeyid = 2;
inline bool stAddHideButtonServerHotKeyChatUserPmd_S::has_serverhotkeyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_has_serverhotkeyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_has_serverhotkeyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_serverhotkeyid() {
  serverhotkeyid_ = 0u;
  clear_has_serverhotkeyid();
}
inline ::google::protobuf::uint32 stAddHideButtonServerHotKeyChatUserPmd_S::serverhotkeyid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.serverhotkeyid)
  return serverhotkeyid_;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_serverhotkeyid(::google::protobuf::uint32 value) {
  set_has_serverhotkeyid();
  serverhotkeyid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.serverhotkeyid)
}

// optional uint32 iconid = 3;
inline bool stAddHideButtonServerHotKeyChatUserPmd_S::has_iconid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_has_iconid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_has_iconid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_iconid() {
  iconid_ = 0u;
  clear_has_iconid();
}
inline ::google::protobuf::uint32 stAddHideButtonServerHotKeyChatUserPmd_S::iconid() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.iconid)
  return iconid_;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_iconid(::google::protobuf::uint32 value) {
  set_has_iconid();
  iconid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.iconid)
}

// optional uint32 close = 4;
inline bool stAddHideButtonServerHotKeyChatUserPmd_S::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_close() {
  close_ = 0u;
  clear_has_close();
}
inline ::google::protobuf::uint32 stAddHideButtonServerHotKeyChatUserPmd_S::close() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.close)
  return close_;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_close(::google::protobuf::uint32 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.close)
}

// optional string tips = 5;
inline bool stAddHideButtonServerHotKeyChatUserPmd_S::has_tips() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_has_tips() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_has_tips() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::clear_tips() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_->clear();
  }
  clear_has_tips();
}
inline const ::std::string& stAddHideButtonServerHotKeyChatUserPmd_S::tips() const {
  // @@protoc_insertion_point(field_get:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.tips)
  return *tips_;
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_tips(const ::std::string& value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.tips)
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_tips(const char* value) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.tips)
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_tips(const char* value, size_t size) {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  tips_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.tips)
}
inline ::std::string* stAddHideButtonServerHotKeyChatUserPmd_S::mutable_tips() {
  set_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tips_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.tips)
  return tips_;
}
inline ::std::string* stAddHideButtonServerHotKeyChatUserPmd_S::release_tips() {
  clear_has_tips();
  if (tips_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tips_;
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stAddHideButtonServerHotKeyChatUserPmd_S::set_allocated_tips(::std::string* tips) {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (tips) {
    set_has_tips();
    tips_ = tips;
  } else {
    clear_has_tips();
    tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S.tips)
}

// -------------------------------------------------------------------

// stCommonChatUserPmd_CS

// optional uint32 byChatType = 1;
inline bool stCommonChatUserPmd_CS::has_bychattype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_bychattype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCommonChatUserPmd_CS::clear_has_bychattype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCommonChatUserPmd_CS::clear_bychattype() {
  bychattype_ = 0u;
  clear_has_bychattype();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::bychattype() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.byChatType)
  return bychattype_;
}
inline void stCommonChatUserPmd_CS::set_bychattype(::google::protobuf::uint32 value) {
  set_has_bychattype();
  bychattype_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.byChatType)
}

// optional uint32 byChatColor = 2;
inline bool stCommonChatUserPmd_CS::has_bychatcolor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_bychatcolor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCommonChatUserPmd_CS::clear_has_bychatcolor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCommonChatUserPmd_CS::clear_bychatcolor() {
  bychatcolor_ = 0u;
  clear_has_bychatcolor();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::bychatcolor() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.byChatColor)
  return bychatcolor_;
}
inline void stCommonChatUserPmd_CS::set_bychatcolor(::google::protobuf::uint32 value) {
  set_has_bychatcolor();
  bychatcolor_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.byChatColor)
}

// optional uint32 byItemNum = 3;
inline bool stCommonChatUserPmd_CS::has_byitemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_byitemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCommonChatUserPmd_CS::clear_has_byitemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCommonChatUserPmd_CS::clear_byitemnum() {
  byitemnum_ = 0u;
  clear_has_byitemnum();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::byitemnum() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.byItemNum)
  return byitemnum_;
}
inline void stCommonChatUserPmd_CS::set_byitemnum(::google::protobuf::uint32 value) {
  set_has_byitemnum();
  byitemnum_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.byItemNum)
}

// optional uint32 byChatPos = 4;
inline bool stCommonChatUserPmd_CS::has_bychatpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_bychatpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCommonChatUserPmd_CS::clear_has_bychatpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCommonChatUserPmd_CS::clear_bychatpos() {
  bychatpos_ = 0u;
  clear_has_bychatpos();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::bychatpos() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.byChatPos)
  return bychatpos_;
}
inline void stCommonChatUserPmd_CS::set_bychatpos(::google::protobuf::uint32 value) {
  set_has_bychatpos();
  bychatpos_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.byChatPos)
}

// optional uint32 reserved = 5;
inline bool stCommonChatUserPmd_CS::has_reserved() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_reserved() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stCommonChatUserPmd_CS::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stCommonChatUserPmd_CS::clear_reserved() {
  reserved_ = 0u;
  clear_has_reserved();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::reserved() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.reserved)
  return reserved_;
}
inline void stCommonChatUserPmd_CS::set_reserved(::google::protobuf::uint32 value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.reserved)
}

// optional uint32 country = 6;
inline bool stCommonChatUserPmd_CS::has_country() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_country() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stCommonChatUserPmd_CS::clear_has_country() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stCommonChatUserPmd_CS::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::country() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.country)
  return country_;
}
inline void stCommonChatUserPmd_CS::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.country)
}

// optional uint32 function = 7;
inline bool stCommonChatUserPmd_CS::has_function() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_function() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stCommonChatUserPmd_CS::clear_has_function() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stCommonChatUserPmd_CS::clear_function() {
  function_ = 0u;
  clear_has_function();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::function() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.function)
  return function_;
}
inline void stCommonChatUserPmd_CS::set_function(::google::protobuf::uint32 value) {
  set_has_function();
  function_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.function)
}

// optional uint32 dwOPDes = 8;
inline bool stCommonChatUserPmd_CS::has_dwopdes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_dwopdes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stCommonChatUserPmd_CS::clear_has_dwopdes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stCommonChatUserPmd_CS::clear_dwopdes() {
  dwopdes_ = 0u;
  clear_has_dwopdes();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::dwopdes() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.dwOPDes)
  return dwopdes_;
}
inline void stCommonChatUserPmd_CS::set_dwopdes(::google::protobuf::uint32 value) {
  set_has_dwopdes();
  dwopdes_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.dwOPDes)
}

// optional uint32 levelOrder = 9;
inline bool stCommonChatUserPmd_CS::has_levelorder() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_levelorder() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stCommonChatUserPmd_CS::clear_has_levelorder() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stCommonChatUserPmd_CS::clear_levelorder() {
  levelorder_ = 0u;
  clear_has_levelorder();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::levelorder() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.levelOrder)
  return levelorder_;
}
inline void stCommonChatUserPmd_CS::set_levelorder(::google::protobuf::uint32 value) {
  set_has_levelorder();
  levelorder_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.levelOrder)
}

// optional uint32 vipflag = 10;
inline bool stCommonChatUserPmd_CS::has_vipflag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_vipflag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stCommonChatUserPmd_CS::clear_has_vipflag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stCommonChatUserPmd_CS::clear_vipflag() {
  vipflag_ = 0u;
  clear_has_vipflag();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::vipflag() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.vipflag)
  return vipflag_;
}
inline void stCommonChatUserPmd_CS::set_vipflag(::google::protobuf::uint32 value) {
  set_has_vipflag();
  vipflag_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.vipflag)
}

// optional uint32 wdOldZoneID = 11;
inline bool stCommonChatUserPmd_CS::has_wdoldzoneid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_wdoldzoneid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stCommonChatUserPmd_CS::clear_has_wdoldzoneid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stCommonChatUserPmd_CS::clear_wdoldzoneid() {
  wdoldzoneid_ = 0u;
  clear_has_wdoldzoneid();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::wdoldzoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.wdOldZoneID)
  return wdoldzoneid_;
}
inline void stCommonChatUserPmd_CS::set_wdoldzoneid(::google::protobuf::uint32 value) {
  set_has_wdoldzoneid();
  wdoldzoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.wdOldZoneID)
}

// optional uint32 byBitmask = 12;
inline bool stCommonChatUserPmd_CS::has_bybitmask() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_bybitmask() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stCommonChatUserPmd_CS::clear_has_bybitmask() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stCommonChatUserPmd_CS::clear_bybitmask() {
  bybitmask_ = 0u;
  clear_has_bybitmask();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::bybitmask() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.byBitmask)
  return bybitmask_;
}
inline void stCommonChatUserPmd_CS::set_bybitmask(::google::protobuf::uint32 value) {
  set_has_bybitmask();
  bybitmask_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.byBitmask)
}

// optional uint32 byUserCmd = 13;
inline bool stCommonChatUserPmd_CS::has_byusercmd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_byusercmd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stCommonChatUserPmd_CS::clear_has_byusercmd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stCommonChatUserPmd_CS::clear_byusercmd() {
  byusercmd_ = 0u;
  clear_has_byusercmd();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::byusercmd() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.byUserCmd)
  return byusercmd_;
}
inline void stCommonChatUserPmd_CS::set_byusercmd(::google::protobuf::uint32 value) {
  set_has_byusercmd();
  byusercmd_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.byUserCmd)
}

// optional uint32 byUserParam = 14;
inline bool stCommonChatUserPmd_CS::has_byuserparam() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_byuserparam() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stCommonChatUserPmd_CS::clear_has_byuserparam() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stCommonChatUserPmd_CS::clear_byuserparam() {
  byuserparam_ = 0u;
  clear_has_byuserparam();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::byuserparam() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.byUserParam)
  return byuserparam_;
}
inline void stCommonChatUserPmd_CS::set_byuserparam(::google::protobuf::uint32 value) {
  set_has_byuserparam();
  byuserparam_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.byUserParam)
}

// optional string szInfo = 15;
inline bool stCommonChatUserPmd_CS::has_szinfo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_szinfo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stCommonChatUserPmd_CS::clear_has_szinfo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stCommonChatUserPmd_CS::clear_szinfo() {
  if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_->clear();
  }
  clear_has_szinfo();
}
inline const ::std::string& stCommonChatUserPmd_CS::szinfo() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.szInfo)
  return *szinfo_;
}
inline void stCommonChatUserPmd_CS::set_szinfo(const ::std::string& value) {
  set_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_ = new ::std::string;
  }
  szinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.szInfo)
}
inline void stCommonChatUserPmd_CS::set_szinfo(const char* value) {
  set_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_ = new ::std::string;
  }
  szinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.stCommonChatUserPmd_CS.szInfo)
}
inline void stCommonChatUserPmd_CS::set_szinfo(const char* value, size_t size) {
  set_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_ = new ::std::string;
  }
  szinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.stCommonChatUserPmd_CS.szInfo)
}
inline ::std::string* stCommonChatUserPmd_CS::mutable_szinfo() {
  set_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.stCommonChatUserPmd_CS.szInfo)
  return szinfo_;
}
inline ::std::string* stCommonChatUserPmd_CS::release_szinfo() {
  clear_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = szinfo_;
    szinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stCommonChatUserPmd_CS::set_allocated_szinfo(::std::string* szinfo) {
  if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szinfo_;
  }
  if (szinfo) {
    set_has_szinfo();
    szinfo_ = szinfo;
  } else {
    clear_has_szinfo();
    szinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.stCommonChatUserPmd_CS.szInfo)
}

// optional uint32 profession = 16;
inline bool stCommonChatUserPmd_CS::has_profession() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_profession() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stCommonChatUserPmd_CS::clear_has_profession() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stCommonChatUserPmd_CS::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::profession() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.profession)
  return profession_;
}
inline void stCommonChatUserPmd_CS::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.profession)
}

// optional uint32 sex = 17;
inline bool stCommonChatUserPmd_CS::has_sex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_sex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stCommonChatUserPmd_CS::clear_has_sex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stCommonChatUserPmd_CS::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::sex() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.sex)
  return sex_;
}
inline void stCommonChatUserPmd_CS::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.sex)
}

// optional uint32 timestamp = 18;
inline bool stCommonChatUserPmd_CS::has_timestamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stCommonChatUserPmd_CS::set_has_timestamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stCommonChatUserPmd_CS::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stCommonChatUserPmd_CS::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 stCommonChatUserPmd_CS::timestamp() const {
  // @@protoc_insertion_point(field_get:Pmd.stCommonChatUserPmd_CS.timestamp)
  return timestamp_;
}
inline void stCommonChatUserPmd_CS::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stCommonChatUserPmd_CS.timestamp)
}

// -------------------------------------------------------------------

// stMessageBoxChatUserPmd_S

// optional string buttons = 1;
inline bool stMessageBoxChatUserPmd_S::has_buttons() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMessageBoxChatUserPmd_S::set_has_buttons() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMessageBoxChatUserPmd_S::clear_has_buttons() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMessageBoxChatUserPmd_S::clear_buttons() {
  if (buttons_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttons_->clear();
  }
  clear_has_buttons();
}
inline const ::std::string& stMessageBoxChatUserPmd_S::buttons() const {
  // @@protoc_insertion_point(field_get:Pmd.stMessageBoxChatUserPmd_S.buttons)
  return *buttons_;
}
inline void stMessageBoxChatUserPmd_S::set_buttons(const ::std::string& value) {
  set_has_buttons();
  if (buttons_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttons_ = new ::std::string;
  }
  buttons_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.stMessageBoxChatUserPmd_S.buttons)
}
inline void stMessageBoxChatUserPmd_S::set_buttons(const char* value) {
  set_has_buttons();
  if (buttons_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttons_ = new ::std::string;
  }
  buttons_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.stMessageBoxChatUserPmd_S.buttons)
}
inline void stMessageBoxChatUserPmd_S::set_buttons(const char* value, size_t size) {
  set_has_buttons();
  if (buttons_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttons_ = new ::std::string;
  }
  buttons_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.stMessageBoxChatUserPmd_S.buttons)
}
inline ::std::string* stMessageBoxChatUserPmd_S::mutable_buttons() {
  set_has_buttons();
  if (buttons_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buttons_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.stMessageBoxChatUserPmd_S.buttons)
  return buttons_;
}
inline ::std::string* stMessageBoxChatUserPmd_S::release_buttons() {
  clear_has_buttons();
  if (buttons_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buttons_;
    buttons_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stMessageBoxChatUserPmd_S::set_allocated_buttons(::std::string* buttons) {
  if (buttons_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buttons_;
  }
  if (buttons) {
    set_has_buttons();
    buttons_ = buttons;
  } else {
    clear_has_buttons();
    buttons_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.stMessageBoxChatUserPmd_S.buttons)
}

// optional string szInfo = 2;
inline bool stMessageBoxChatUserPmd_S::has_szinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMessageBoxChatUserPmd_S::set_has_szinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMessageBoxChatUserPmd_S::clear_has_szinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMessageBoxChatUserPmd_S::clear_szinfo() {
  if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_->clear();
  }
  clear_has_szinfo();
}
inline const ::std::string& stMessageBoxChatUserPmd_S::szinfo() const {
  // @@protoc_insertion_point(field_get:Pmd.stMessageBoxChatUserPmd_S.szInfo)
  return *szinfo_;
}
inline void stMessageBoxChatUserPmd_S::set_szinfo(const ::std::string& value) {
  set_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_ = new ::std::string;
  }
  szinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.stMessageBoxChatUserPmd_S.szInfo)
}
inline void stMessageBoxChatUserPmd_S::set_szinfo(const char* value) {
  set_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_ = new ::std::string;
  }
  szinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.stMessageBoxChatUserPmd_S.szInfo)
}
inline void stMessageBoxChatUserPmd_S::set_szinfo(const char* value, size_t size) {
  set_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_ = new ::std::string;
  }
  szinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.stMessageBoxChatUserPmd_S.szInfo)
}
inline ::std::string* stMessageBoxChatUserPmd_S::mutable_szinfo() {
  set_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    szinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.stMessageBoxChatUserPmd_S.szInfo)
  return szinfo_;
}
inline ::std::string* stMessageBoxChatUserPmd_S::release_szinfo() {
  clear_has_szinfo();
  if (szinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = szinfo_;
    szinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void stMessageBoxChatUserPmd_S::set_allocated_szinfo(::std::string* szinfo) {
  if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szinfo_;
  }
  if (szinfo) {
    set_has_szinfo();
    szinfo_ = szinfo;
  } else {
    clear_has_szinfo();
    szinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.stMessageBoxChatUserPmd_S.szInfo)
}

// optional uint32 data0 = 3;
inline bool stMessageBoxChatUserPmd_S::has_data0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMessageBoxChatUserPmd_S::set_has_data0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMessageBoxChatUserPmd_S::clear_has_data0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMessageBoxChatUserPmd_S::clear_data0() {
  data0_ = 0u;
  clear_has_data0();
}
inline ::google::protobuf::uint32 stMessageBoxChatUserPmd_S::data0() const {
  // @@protoc_insertion_point(field_get:Pmd.stMessageBoxChatUserPmd_S.data0)
  return data0_;
}
inline void stMessageBoxChatUserPmd_S::set_data0(::google::protobuf::uint32 value) {
  set_has_data0();
  data0_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stMessageBoxChatUserPmd_S.data0)
}

// optional uint32 data1 = 4;
inline bool stMessageBoxChatUserPmd_S::has_data1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stMessageBoxChatUserPmd_S::set_has_data1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stMessageBoxChatUserPmd_S::clear_has_data1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stMessageBoxChatUserPmd_S::clear_data1() {
  data1_ = 0u;
  clear_has_data1();
}
inline ::google::protobuf::uint32 stMessageBoxChatUserPmd_S::data1() const {
  // @@protoc_insertion_point(field_get:Pmd.stMessageBoxChatUserPmd_S.data1)
  return data1_;
}
inline void stMessageBoxChatUserPmd_S::set_data1(::google::protobuf::uint32 value) {
  set_has_data1();
  data1_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stMessageBoxChatUserPmd_S.data1)
}

// optional uint32 data2 = 5;
inline bool stMessageBoxChatUserPmd_S::has_data2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stMessageBoxChatUserPmd_S::set_has_data2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stMessageBoxChatUserPmd_S::clear_has_data2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stMessageBoxChatUserPmd_S::clear_data2() {
  data2_ = 0u;
  clear_has_data2();
}
inline ::google::protobuf::uint32 stMessageBoxChatUserPmd_S::data2() const {
  // @@protoc_insertion_point(field_get:Pmd.stMessageBoxChatUserPmd_S.data2)
  return data2_;
}
inline void stMessageBoxChatUserPmd_S::set_data2(::google::protobuf::uint32 value) {
  set_has_data2();
  data2_ = value;
  // @@protoc_insertion_point(field_set:Pmd.stMessageBoxChatUserPmd_S.data2)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Pmd::Chat_Param> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::Chat_Param>() {
  return ::Pmd::Chat_Param_descriptor();
}
template <> struct is_proto_enum< ::Pmd::CommonChatUserPmd_CS_ChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::CommonChatUserPmd_CS_ChatType>() {
  return ::Pmd::CommonChatUserPmd_CS_ChatType_descriptor();
}
template <> struct is_proto_enum< ::Pmd::CommonChatUserPmd_CS_ChatPos> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::CommonChatUserPmd_CS_ChatPos>() {
  return ::Pmd::CommonChatUserPmd_CS_ChatPos_descriptor();
}
template <> struct is_proto_enum< ::Pmd::ChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::ChatType>() {
  return ::Pmd::ChatType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chatcommand_2eproto__INCLUDED
