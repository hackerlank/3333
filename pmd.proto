package Pmd;

// 平台登陆一级消息
enum PlatCommand
{
	PlatCommand_Null 		= 0;
	PlatCommand_Push 		= 247;	// 推送服务器
	PlatCommand_Gm 			= 248;	// GM服务器
	PlatCommand_Monitor		= 249;	// 监控消息
	PlatCommand_Login 		= 250;	// 登陆消息
	PlatCommand_Forward		= 251;	// 登陆转发消息
	PlatCommand_Sdk 		= 252;	// 第三方对接服务器间消息
	PlatCommand_Chat 		= 253;	// 聊天消息
}


// HTTP请求错误返回定义
enum HttpReturnCode
{
	HttpReturnCode_Null					= 0;	// 无错误
	HttpReturnCode_DbError				= 2;	// 数据库出错
	HttpReturnCode_GameZoneListError	= 5;	// 找不到游戏区列表
	HttpReturnCode_SignError			= 11;	// 签名检查错误，需要重新登陆
	HttpReturnCode_ServerShutDown		= 12;	// 服务器未开
	HttpReturnCode_JsonSyntaxError		= 13;	// Json语法格式错误
	HttpReturnCode_JsonMessageError		= 14;	// Json消息格式错误
	HttpReturnCode_TokenValueError		= 15;	// tokenvalue为空
	HttpReturnCode_WaiGuaUidError		= 16;	// uid与登陆uid不同
	HttpReturnCode_NoGatewaytDown		= 17;	// 没有可用网关
	HttpReturnCode_NoSdkServer			= 18;	// 没有可用Sdk服务器
	HttpReturnCode_SdkCheckSignErr		= 19;	// 签名错误
	HttpReturnCode_Sdk3PartyServerErr	= 20;	// 第三方服务器验证错误
	HttpReturnCode_ProtobufErr			= 21;	// proto解析错误
	HttpReturnCode_GatewayErr			= 22;	// 网关错误
}

// 服务器类型
enum TaskType
{
	TaskType_Null			= 0;		// 未知
	TaskType_Monitor		= 1;		// 监控服务器
	TaskType_Login			= 2;		// 登陆服务器
	TaskType_NameS			= 3;		// 名字验证服务器,这里因为有名字冲突，职能加后缀了
	TaskType_Sdk			= 4;		// sdk服务器
	TaskType_Gm				= 5;		// gm服务器
	TaskType_Gateway		= 6;		// 网关服务器
	TaskType_GameZone		= 7;		// 游戏区服务器
}

// 游戏类型信息,以后可能会扩充
message GameZoneInfo
{
	optional uint32 gameid 		= 1;//游戏编号
	optional uint32 zoneid 		= 2;//区编号
	optional string gamename 	= 3;//游戏名称
	optional string zonename 	= 4;//区名称
	optional string mysql 		= 5;//mysql数据库,不填表示从配置文件读取
	optional string redis 		= 6;//redis数据库,不填表示从配置文件读取
	optional string rethink 	= 7;//rethink数据库,不填表示从配置文件读取
	optional string mongo 		= 8;//mongo数据库,不填表示从配置文件读取
	optional uint32 zonestate	= 9;//当前区服状态0表示关闭,1表示正常,2表示无权限
	optional bool   separatezoneuid = 10;//是否以区为单位分uid，方便合区
}

enum ServerType
{
    UNKNOWNSERVER    = 0;
    SUPERSERVER    = 1;
    LOGINSERVER    = 10;
    RECORDSERVER    = 11;
    SESSIONSERVER    = 20;
    SCENESSERVER    = 21;
    GATEWAYSERVER    = 22;
    INFOSERVER    = 23;
    HTTPSERVER    = 24;
    CHANGESERVER    = 25;
    USERSERVER    = 26;
    BILLSERVER    = 27;
    NAMESERVER    = 28;
    MONITORSERVER    = 29;
    GMSERVER    = 30;
    STATERSERVER    = 31;
    SOUNDSERVER    = 32;
    BILLSERVER_ALIPAY    = 33;
    BILLSERVER_JUNKA    = 34;
    BILLSERVER_TIANXIATONG    = 35;
    BILLSERVER_ZONGYOU    = 36;
    BILLSERVER_OFFLINE    = 37;
    BILLSERVER_MESSAGE    = 38;
    BILLSERVER_ZQB    = 39;
    WEBGATESERVER    = 40;
    BILLSERVER_BAIDU    = 41;
    BILLSERVER_SHUN    = 42;
    SDKSERVER    = 43;
    MAX_SERVERTYPE    = 44;
}

message ServerInfo
{
	optional uint32 zoneid = 1;					/**< down机区 */
	optional uint32 serverid = 2;					/**< down机服务器id */
	optional uint32 servertype = 3;				/**< down机服务器类型 */
	optional uint32 protocol = 4;					/**< 协议号 */
	optional uint32 buildtime = 5;				/**< 编译时间 */
	optional uint32 svnversion = 6;				/**< svn 版本号 */
	optional uint32 data1 = 7;
	optional uint32 funcion = 8;					/**< 服务器状态ServerInfoState */
	optional uint32 reserve0 = 9;
	optional uint32 reserve1 = 10;
	optional uint32 reserve2 = 11;
	optional uint32 reserve3 = 12;
	optional uint32 serverip = 13;					/**< down机服务器ip */
	optional uint32 usernum = 14;					/**< down机影响人数 */
	optional uint32 time = 15;						/**< down机服务器时间 */
}
/**
 * \author	王海军
 * \brief
 */
enum NetType
{
	NetType_near = 0;		//近程路由，电信区连电信服务器，网通区连网通服务器
	NetType_far = 1;		//远端路由，电信区连网通服务器，网通区连电信服务器
	NetType_CTC = 2;				//电信
	NetType_CNC = 3;				//网通
};
/**
 * \author	王海军
 * \brief	机器人id断定义
 */
enum RobotUid
{
	RobotUid_begin 	= 10000;		//最小id
	RobotUid_end 	= 20000;		//最大id
};
