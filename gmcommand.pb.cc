// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gmcommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gmcommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* Gm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gm_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Gm_Param_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestExecGmCommandGmPmd_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestExecGmCommandGmPmd_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGameZoneErrorGmPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGameZoneErrorGmPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHotRestartGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHotRestartGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequesetScriptUpdateGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequesetScriptUpdateGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequesetRefreshGatewaylistGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequesetRefreshGatewaylistGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGenerateCodeGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGenerateCodeGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnGenerateCodeGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnGenerateCodeGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOpeartorCodeGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOpeartorCodeGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* CodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnOpreatorCodeGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnOpreatorCodeGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOrderListGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOrderListGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPackageCodeGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPackageCodeGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUsePackageCodeGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUsePackageCodeGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedbackData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedbackData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedbackGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedbackGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFeedbackListGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFeedbackListGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDealFeedbackGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDealFeedbackGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointReportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointReportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPointReportGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPointReportGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointDetailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointDetailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPointDetailGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPointDetailGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* BettingDetailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BettingDetailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBettingDetailGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBettingDetailGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStockInfoGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStockInfoGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOnlineUserInfoGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOnlineUserInfoGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedPacketsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedPacketsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRedPacketsGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRedPacketsGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubgameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubgameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestedSubgameListGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestedSubgameListGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* WinLoseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WinLoseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestWinningListGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestWinningListGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlackWhitelistInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlackWhitelistInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBlackWhitelistGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBlackWhitelistGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModBlackWhitelistGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModBlackWhitelistGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelBlackWhitelistGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelBlackWhitelistGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBlackWhitelistGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBlackWhitelistGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GmMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GmMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSendMailGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSendMailGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestLoginRecordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestLoginRecordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsumeRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsumeRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestConsumeRecordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestConsumeRecordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestActionRecordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestActionRecordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrengthenRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengthenRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStrengthenRecordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStrengthenRecordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMailRecordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMailRecordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRankRecordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRankRecordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBossRecordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBossRecordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRenameRecordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRenameRecordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartUpGameRequestGmPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartUpGameRequestGmPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartUpGameReturnGmPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartUpGameReturnGmPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurportGameZoneRequestGmPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurportGameZoneRequestGmPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurportGameZoneReturnGmPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurportGameZoneReturnGmPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectKickoutGmSmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectKickoutGmSmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* GmUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GmUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestLoginGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestLoginGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnLoginGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnLoginGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPasswordGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPasswordGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNewGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNewGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* GmAccountListGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GmAccountListGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDelGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDelGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestModifyPriGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestModifyPriGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectGamezoneGmUserPmd_SC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectGamezoneGmUserPmd_SC_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastNewGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastNewGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnBroadcastNewGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnBroadcastNewGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastDeleteGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastDeleteGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnBroadcastDeleteGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnBroadcastDeleteGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBroadcastListGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBroadcastListGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnBroadcastListGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnBroadcastListGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* PunishUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PunishUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PunishUserGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PunishUserGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnPunishUserGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnPunishUserGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePunishUserGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePunishUserGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnDeletePunishUserGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnDeletePunishUserGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPunishListGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPunishListGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnPunishListGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnPunishListGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestItemTypeInfoGmUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestItemTypeInfoGmUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUserInfoGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUserInfoGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnUserInfoGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnUserInfoGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUserPackageGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUserPackageGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnUserPackageGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnUserPackageGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestModifyUserInfoGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestModifyUserInfoGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnModifyUserInfoGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnModifyUserInfoGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUserRecordGmUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUserRecordGmUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnUserRecordGmUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnUserRecordGmUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForbidAccountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForbidAccountData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ForbidAccountData_ForbidType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRequestLoginGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestLoginGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnLoginGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnLoginGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stConfigGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stConfigGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSetPasswordGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetPasswordGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnPasswordGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnPasswordGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAddNewGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddNewGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnAddNewGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnAddNewGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stQueryListGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQueryListGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnListGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnListGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnListGmUserCmd_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnListGmUserCmd_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestZoneConfigGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestZoneConfigGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnZoneDicCountryGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnZoneDicCountryGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnZoneDicCountryGmUserCmd_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnZoneDicCountryGmUserCmd_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnZoneDicMapGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnZoneDicMapGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnZoneDicMapGmUserCmd_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnZoneDicMapGmUserCmd_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* stForwardToAllGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForwardToAllGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stForwardToOnlyGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForwardToOnlyGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastNewGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastNewGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastDeleteGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastDeleteGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastRequestGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastRequestGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestTimeGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestTimeGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnTimeGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnTimeGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stServerShutdownGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stServerShutdownGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestZoneDicGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestZoneDicGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnZoneDicGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnZoneDicGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnZoneDicGmUserCmd_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnZoneDicGmUserCmd_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAddChatConfigGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddChatConfigGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stCancelChatConfigGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelChatConfigGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestChatTypesGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestChatTypesGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnChatTypesGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnChatTypesGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnChatTypesGmUserCmd_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnChatTypesGmUserCmd_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* stServerStartupGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stServerStartupGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNotifyShutdownGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyShutdownGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stCancelShutdownGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelShutdownGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGmServerMessageGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGmServerMessageGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestDelGmUserGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestDelGmUserGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestResetGmUserPasswordGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestResetGmUserPasswordGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stQequestShutDownGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQequestShutDownGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestForbidAccountGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestForbidAccountGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stQueryForbidAccountGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQueryForbidAccountGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnForbidAccountListGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnForbidAccountListGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestUnForbidAccountGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestUnForbidAccountGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastDeleteZoneGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastDeleteZoneGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestNameAccountGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestNameAccountGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnNameAccountGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnNameAccountGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestDBConnectionConfigGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestDBConnectionConfigGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnDBConnectionConfigGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnDBConnectionConfigGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stQueryNameExistGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQueryNameExistGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stForceInsertNameGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForceInsertNameGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stForceModifyNameGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForceModifyNameGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stCheckOnlineGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCheckOnlineGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnCheckOnlineGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnCheckOnlineGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stPunishUserGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPunishUserGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestUserPosUserGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestUserPosUserGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnUserPosUserGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnUserPosUserGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnUserPosUserGmUserCmd_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnUserPosUserGmUserCmd_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* stEndUserPosUserGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEndUserPosUserGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastReallySendGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastReallySendGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDBQueryGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDBQueryGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDBReturnDataGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDBReturnDataGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDBReturnEndGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDBReturnEndGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stFullForbidAccountLogDataGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFullForbidAccountLogDataGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stFullGameGmCmdLogDataGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFullGameGmCmdLogDataGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestAddQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestAddQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSequenceQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSequenceQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDeleteQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDeleteQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestSeqQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestSeqQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnNoneQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnNoneQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stUserCmdForwardGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserCmdForwardGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stProcessQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stProcessQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGMToolBeginQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGMToolBeginQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGMToolEndQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGMToolEndQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDisableGMChatInputGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDisableGMChatInputGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDeleteQuestionByGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDeleteQuestionByGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stQuestionOverGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQuestionOverGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stQueryQuestionLimitGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQueryQuestionLimitGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnQuestionLimitGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnQuestionLimitGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stResetQuestionLimitGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetQuestionLimitGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastToWorldGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastToWorldGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSetActivityNoteGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetActivityNoteGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestRefreshUserQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestRefreshUserQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestSetUserGoldInGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestSetUserGoldInGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSetPrivilegesGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetPrivilegesGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestSaveChatGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestSaveChatGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGameClientMessageBoxGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGameClientMessageBoxGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGameClientChatMessageGMUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGameClientChatMessageGMUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestGameClientMessageConfigGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestGameClientMessageConfigGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnGameClientMessageConfigGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnGameClientMessageConfigGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stPlayerSatisfactionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPlayerSatisfactionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestMyQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestMyQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestQuestionSubmitableGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestQuestionSubmitableGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stVerifyOnlineQaGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stVerifyOnlineQaGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNewGameClientMessageBoxGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNewGameClientMessageBoxGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestPreProcessQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestPreProcessQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnPreProcessQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnPreProcessQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnNowPreProcessQusetGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnNowPreProcessQusetGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDeleteProcessedQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDeleteProcessedQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestOneQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestOneQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnOneQuestionGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnOneQuestionGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestResetGmWorkStateGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestResetGmWorkStateGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReturnResetGmWorkStateGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReturnResetGmWorkStateGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGmCommandUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGmCommandUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGmCommandToSceneUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGmCommandToSceneUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stForceChangeSexGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForceChangeSexGmUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRequestMobileInfoGmUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRequestMobileInfoGmUserCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GMToolRightKey_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GMOptKey_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReturnLoginGmType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GmServerMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NameOperateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* dbtype_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enumQuestionOver_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameClientMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gmcommand_2eproto() {
  protobuf_AddDesc_gmcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gmcommand.proto");
  GOOGLE_CHECK(file != NULL);
  Gm_descriptor_ = file->message_type(0);
  static const int Gm_offsets_[1] = {
  };
  Gm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gm_descriptor_,
      Gm::default_instance_,
      Gm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gm));
  Gm_Param_descriptor_ = Gm_descriptor_->enum_type(0);
  RequestExecGmCommandGmPmd_SC_descriptor_ = file->message_type(1);
  static const int RequestExecGmCommandGmPmd_SC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExecGmCommandGmPmd_SC, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExecGmCommandGmPmd_SC, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExecGmCommandGmPmd_SC, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExecGmCommandGmPmd_SC, msg_),
  };
  RequestExecGmCommandGmPmd_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestExecGmCommandGmPmd_SC_descriptor_,
      RequestExecGmCommandGmPmd_SC::default_instance_,
      RequestExecGmCommandGmPmd_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExecGmCommandGmPmd_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExecGmCommandGmPmd_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestExecGmCommandGmPmd_SC));
  RequestGameZoneErrorGmPmd_S_descriptor_ = file->message_type(2);
  static const int RequestGameZoneErrorGmPmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameZoneErrorGmPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameZoneErrorGmPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameZoneErrorGmPmd_S, gmid_),
  };
  RequestGameZoneErrorGmPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGameZoneErrorGmPmd_S_descriptor_,
      RequestGameZoneErrorGmPmd_S::default_instance_,
      RequestGameZoneErrorGmPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameZoneErrorGmPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameZoneErrorGmPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGameZoneErrorGmPmd_S));
  RequestHotRestartGmUserPmd_CS_descriptor_ = file->message_type(3);
  static const int RequestHotRestartGmUserPmd_CS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHotRestartGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHotRestartGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHotRestartGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHotRestartGmUserPmd_CS, ret_),
  };
  RequestHotRestartGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHotRestartGmUserPmd_CS_descriptor_,
      RequestHotRestartGmUserPmd_CS::default_instance_,
      RequestHotRestartGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHotRestartGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHotRestartGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHotRestartGmUserPmd_CS));
  RequesetScriptUpdateGmUserPmd_CS_descriptor_ = file->message_type(4);
  static const int RequesetScriptUpdateGmUserPmd_CS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetScriptUpdateGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetScriptUpdateGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetScriptUpdateGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetScriptUpdateGmUserPmd_CS, ret_),
  };
  RequesetScriptUpdateGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequesetScriptUpdateGmUserPmd_CS_descriptor_,
      RequesetScriptUpdateGmUserPmd_CS::default_instance_,
      RequesetScriptUpdateGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetScriptUpdateGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetScriptUpdateGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequesetScriptUpdateGmUserPmd_CS));
  RequesetRefreshGatewaylistGmUserPmd_CS_descriptor_ = file->message_type(5);
  static const int RequesetRefreshGatewaylistGmUserPmd_CS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetRefreshGatewaylistGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetRefreshGatewaylistGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetRefreshGatewaylistGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetRefreshGatewaylistGmUserPmd_CS, ret_),
  };
  RequesetRefreshGatewaylistGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequesetRefreshGatewaylistGmUserPmd_CS_descriptor_,
      RequesetRefreshGatewaylistGmUserPmd_CS::default_instance_,
      RequesetRefreshGatewaylistGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetRefreshGatewaylistGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequesetRefreshGatewaylistGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequesetRefreshGatewaylistGmUserPmd_CS));
  RequestGenerateCodeGmUserPmd_C_descriptor_ = file->message_type(6);
  static const int RequestGenerateCodeGmUserPmd_C_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, codenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, codetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, gmid_),
  };
  RequestGenerateCodeGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGenerateCodeGmUserPmd_C_descriptor_,
      RequestGenerateCodeGmUserPmd_C::default_instance_,
      RequestGenerateCodeGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGenerateCodeGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGenerateCodeGmUserPmd_C));
  ReturnGenerateCodeGmUserPmd_S_descriptor_ = file->message_type(7);
  static const int ReturnGenerateCodeGmUserPmd_S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGenerateCodeGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGenerateCodeGmUserPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGenerateCodeGmUserPmd_S, codenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGenerateCodeGmUserPmd_S, gmid_),
  };
  ReturnGenerateCodeGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnGenerateCodeGmUserPmd_S_descriptor_,
      ReturnGenerateCodeGmUserPmd_S::default_instance_,
      ReturnGenerateCodeGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGenerateCodeGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnGenerateCodeGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnGenerateCodeGmUserPmd_S));
  RequestOpeartorCodeGmUserPmd_C_descriptor_ = file->message_type(8);
  static const int RequestOpeartorCodeGmUserPmd_C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOpeartorCodeGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOpeartorCodeGmUserPmd_C, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOpeartorCodeGmUserPmd_C, optype_),
  };
  RequestOpeartorCodeGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestOpeartorCodeGmUserPmd_C_descriptor_,
      RequestOpeartorCodeGmUserPmd_C::default_instance_,
      RequestOpeartorCodeGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOpeartorCodeGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOpeartorCodeGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestOpeartorCodeGmUserPmd_C));
  CodeInfo_descriptor_ = file->message_type(9);
  static const int CodeInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, codetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, flag_),
  };
  CodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CodeInfo_descriptor_,
      CodeInfo::default_instance_,
      CodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CodeInfo));
  ReturnOpreatorCodeGmUserPmd_S_descriptor_ = file->message_type(10);
  static const int ReturnOpreatorCodeGmUserPmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpreatorCodeGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpreatorCodeGmUserPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpreatorCodeGmUserPmd_S, data_),
  };
  ReturnOpreatorCodeGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnOpreatorCodeGmUserPmd_S_descriptor_,
      ReturnOpreatorCodeGmUserPmd_S::default_instance_,
      ReturnOpreatorCodeGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpreatorCodeGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpreatorCodeGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnOpreatorCodeGmUserPmd_S));
  OrderInfo_descriptor_ = file->message_type(11);
  static const int OrderInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, gameorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, createtime_),
  };
  OrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderInfo_descriptor_,
      OrderInfo::default_instance_,
      OrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderInfo));
  GameOrderListGmUserPmd_CS_descriptor_ = file->message_type(12);
  static const int GameOrderListGmUserPmd_CS_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, perpage_),
  };
  GameOrderListGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOrderListGmUserPmd_CS_descriptor_,
      GameOrderListGmUserPmd_CS::default_instance_,
      GameOrderListGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOrderListGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOrderListGmUserPmd_CS));
  QueryPackageCodeGmUserPmd_CS_descriptor_ = file->message_type(13);
  static const int QueryPackageCodeGmUserPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, codeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, usedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, usedgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, usedzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, useduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, codetype_),
  };
  QueryPackageCodeGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPackageCodeGmUserPmd_CS_descriptor_,
      QueryPackageCodeGmUserPmd_CS::default_instance_,
      QueryPackageCodeGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPackageCodeGmUserPmd_CS));
  RequestUsePackageCodeGmUserPmd_CS_descriptor_ = file->message_type(14);
  static const int RequestUsePackageCodeGmUserPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, codeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, typemutex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, usedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, usedgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, usedzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, useduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, codetype_),
  };
  RequestUsePackageCodeGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUsePackageCodeGmUserPmd_CS_descriptor_,
      RequestUsePackageCodeGmUserPmd_CS::default_instance_,
      RequestUsePackageCodeGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUsePackageCodeGmUserPmd_CS));
  FeedbackData_descriptor_ = file->message_type(15);
  static const int FeedbackData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, feedbackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, phonenum_),
  };
  FeedbackData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedbackData_descriptor_,
      FeedbackData::default_instance_,
      FeedbackData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedbackData));
  FeedbackGmUserPmd_CS_descriptor_ = file->message_type(16);
  static const int FeedbackGmUserPmd_CS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackGmUserPmd_CS, feedbacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackGmUserPmd_CS, perpage_),
  };
  FeedbackGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedbackGmUserPmd_CS_descriptor_,
      FeedbackGmUserPmd_CS::default_instance_,
      FeedbackGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedbackGmUserPmd_CS));
  RequestFeedbackListGmUserPmd_C_descriptor_ = file->message_type(17);
  static const int RequestFeedbackListGmUserPmd_C_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, feedbacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, perpage_),
  };
  RequestFeedbackListGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFeedbackListGmUserPmd_C_descriptor_,
      RequestFeedbackListGmUserPmd_C::default_instance_,
      RequestFeedbackListGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFeedbackListGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFeedbackListGmUserPmd_C));
  RequestDealFeedbackGmUserPmd_CS_descriptor_ = file->message_type(18);
  static const int RequestDealFeedbackGmUserPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, feedbacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, gmid_),
  };
  RequestDealFeedbackGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestDealFeedbackGmUserPmd_CS_descriptor_,
      RequestDealFeedbackGmUserPmd_CS::default_instance_,
      RequestDealFeedbackGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDealFeedbackGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestDealFeedbackGmUserPmd_CS));
  PointReportData_descriptor_ = file->message_type(19);
  static const int PointReportData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReportData, recorddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReportData, redeemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReportData, redeemout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReportData, redeemtotal_),
  };
  PointReportData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointReportData_descriptor_,
      PointReportData::default_instance_,
      PointReportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReportData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReportData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointReportData));
  RequestPointReportGmUserPmd_CS_descriptor_ = file->message_type(20);
  static const int RequestPointReportGmUserPmd_CS_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, perpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, data_),
  };
  RequestPointReportGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPointReportGmUserPmd_CS_descriptor_,
      RequestPointReportGmUserPmd_CS::default_instance_,
      RequestPointReportGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointReportGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPointReportGmUserPmd_CS));
  PointDetailData_descriptor_ = file->message_type(21);
  static const int PointDetailData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, ptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, redeemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, originnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, currentnum_),
  };
  PointDetailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointDetailData_descriptor_,
      PointDetailData::default_instance_,
      PointDetailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDetailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointDetailData));
  RequestPointDetailGmUserPmd_CS_descriptor_ = file->message_type(22);
  static const int RequestPointDetailGmUserPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, ptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, perpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, data_),
  };
  RequestPointDetailGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPointDetailGmUserPmd_CS_descriptor_,
      RequestPointDetailGmUserPmd_CS::default_instance_,
      RequestPointDetailGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPointDetailGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPointDetailGmUserPmd_CS));
  BettingDetailData_descriptor_ = file->message_type(23);
  static const int BettingDetailData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, roundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, winlosenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, dealerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, dealernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, betdetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, lotterydetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, opensource_),
  };
  BettingDetailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BettingDetailData_descriptor_,
      BettingDetailData::default_instance_,
      BettingDetailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingDetailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BettingDetailData));
  RequestBettingDetailGmUserPmd_CS_descriptor_ = file->message_type(24);
  static const int RequestBettingDetailGmUserPmd_CS_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, dealerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, roundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, perpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, opensource_),
  };
  RequestBettingDetailGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBettingDetailGmUserPmd_CS_descriptor_,
      RequestBettingDetailGmUserPmd_CS::default_instance_,
      RequestBettingDetailGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBettingDetailGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBettingDetailGmUserPmd_CS));
  StockData_descriptor_ = file->message_type(25);
  static const int StockData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockData, stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockData, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockData, lottery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockData, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockData, subgameid_),
  };
  StockData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockData_descriptor_,
      StockData::default_instance_,
      StockData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockData));
  RequestStockInfoGmUserPmd_CS_descriptor_ = file->message_type(26);
  static const int RequestStockInfoGmUserPmd_CS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStockInfoGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStockInfoGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStockInfoGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStockInfoGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStockInfoGmUserPmd_CS, subgameid_),
  };
  RequestStockInfoGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStockInfoGmUserPmd_CS_descriptor_,
      RequestStockInfoGmUserPmd_CS::default_instance_,
      RequestStockInfoGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStockInfoGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStockInfoGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStockInfoGmUserPmd_CS));
  RequestOnlineUserInfoGmUserPmd_CS_descriptor_ = file->message_type(27);
  static const int RequestOnlineUserInfoGmUserPmd_CS_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, perpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, data_),
  };
  RequestOnlineUserInfoGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestOnlineUserInfoGmUserPmd_CS_descriptor_,
      RequestOnlineUserInfoGmUserPmd_CS::default_instance_,
      RequestOnlineUserInfoGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOnlineUserInfoGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestOnlineUserInfoGmUserPmd_CS));
  RedPacketsInfo_descriptor_ = file->message_type(28);
  static const int RedPacketsInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, srcuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, srcnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, desuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, desnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, recordtime_),
  };
  RedPacketsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedPacketsInfo_descriptor_,
      RedPacketsInfo::default_instance_,
      RedPacketsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedPacketsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedPacketsInfo));
  RequestRedPacketsGmUserPmd_CS_descriptor_ = file->message_type(29);
  static const int RequestRedPacketsGmUserPmd_CS_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, srcuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, desuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, packetcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, perpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, data_),
  };
  RequestRedPacketsGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRedPacketsGmUserPmd_CS_descriptor_,
      RequestRedPacketsGmUserPmd_CS::default_instance_,
      RequestRedPacketsGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRedPacketsGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRedPacketsGmUserPmd_CS));
  SubgameList_descriptor_ = file->message_type(30);
  static const int SubgameList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubgameList, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubgameList, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubgameList, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubgameList, zonename_),
  };
  SubgameList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubgameList_descriptor_,
      SubgameList::default_instance_,
      SubgameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubgameList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubgameList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubgameList));
  RequestedSubgameListGmUserPmd_CS_descriptor_ = file->message_type(31);
  static const int RequestedSubgameListGmUserPmd_CS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSubgameListGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSubgameListGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSubgameListGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSubgameListGmUserPmd_CS, data_),
  };
  RequestedSubgameListGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestedSubgameListGmUserPmd_CS_descriptor_,
      RequestedSubgameListGmUserPmd_CS::default_instance_,
      RequestedSubgameListGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSubgameListGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSubgameListGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestedSubgameListGmUserPmd_CS));
  WinLoseInfo_descriptor_ = file->message_type(32);
  static const int WinLoseInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, curnum_),
  };
  WinLoseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WinLoseInfo_descriptor_,
      WinLoseInfo::default_instance_,
      WinLoseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinLoseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WinLoseInfo));
  RequestWinningListGmUserPmd_CS_descriptor_ = file->message_type(33);
  static const int RequestWinningListGmUserPmd_CS_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, perpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, data_),
  };
  RequestWinningListGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestWinningListGmUserPmd_CS_descriptor_,
      RequestWinningListGmUserPmd_CS::default_instance_,
      RequestWinningListGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestWinningListGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestWinningListGmUserPmd_CS));
  BlackWhitelistInfo_descriptor_ = file->message_type(34);
  static const int BlackWhitelistInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, setchips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, curchips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, winrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, settimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, curtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, intervaltimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, zoneid_),
  };
  BlackWhitelistInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlackWhitelistInfo_descriptor_,
      BlackWhitelistInfo::default_instance_,
      BlackWhitelistInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackWhitelistInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlackWhitelistInfo));
  AddBlackWhitelistGmUserPmd_CS_descriptor_ = file->message_type(35);
  static const int AddBlackWhitelistGmUserPmd_CS_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, retdesc_),
  };
  AddBlackWhitelistGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBlackWhitelistGmUserPmd_CS_descriptor_,
      AddBlackWhitelistGmUserPmd_CS::default_instance_,
      AddBlackWhitelistGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlackWhitelistGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBlackWhitelistGmUserPmd_CS));
  ModBlackWhitelistGmUserPmd_CS_descriptor_ = file->message_type(36);
  static const int ModBlackWhitelistGmUserPmd_CS_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, retdesc_),
  };
  ModBlackWhitelistGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModBlackWhitelistGmUserPmd_CS_descriptor_,
      ModBlackWhitelistGmUserPmd_CS::default_instance_,
      ModBlackWhitelistGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBlackWhitelistGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModBlackWhitelistGmUserPmd_CS));
  DelBlackWhitelistGmUserPmd_CS_descriptor_ = file->message_type(37);
  static const int DelBlackWhitelistGmUserPmd_CS_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, retdesc_),
  };
  DelBlackWhitelistGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelBlackWhitelistGmUserPmd_CS_descriptor_,
      DelBlackWhitelistGmUserPmd_CS::default_instance_,
      DelBlackWhitelistGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelBlackWhitelistGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelBlackWhitelistGmUserPmd_CS));
  RequestBlackWhitelistGmUserPmd_CS_descriptor_ = file->message_type(38);
  static const int RequestBlackWhitelistGmUserPmd_CS_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, subgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, perpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, data_),
  };
  RequestBlackWhitelistGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBlackWhitelistGmUserPmd_CS_descriptor_,
      RequestBlackWhitelistGmUserPmd_CS::default_instance_,
      RequestBlackWhitelistGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBlackWhitelistGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBlackWhitelistGmUserPmd_CS));
  GmMailInfo_descriptor_ = file->message_type(39);
  static const int GmMailInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, recordtime_),
  };
  GmMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GmMailInfo_descriptor_,
      GmMailInfo::default_instance_,
      GmMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GmMailInfo));
  RequestSendMailGmUserPmd_CS_descriptor_ = file->message_type(40);
  static const int RequestSendMailGmUserPmd_CS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMailGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMailGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMailGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMailGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMailGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMailGmUserPmd_CS, retdesc_),
  };
  RequestSendMailGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSendMailGmUserPmd_CS_descriptor_,
      RequestSendMailGmUserPmd_CS::default_instance_,
      RequestSendMailGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMailGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendMailGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSendMailGmUserPmd_CS));
  LoginRecordData_descriptor_ = file->message_type(41);
  static const int LoginRecordData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, onlinemin_),
  };
  LoginRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRecordData_descriptor_,
      LoginRecordData::default_instance_,
      LoginRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRecordData));
  RequestLoginRecordGmUserPmd_CS_descriptor_ = file->message_type(42);
  static const int RequestLoginRecordGmUserPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, perpage_),
  };
  RequestLoginRecordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestLoginRecordGmUserPmd_CS_descriptor_,
      RequestLoginRecordGmUserPmd_CS::default_instance_,
      RequestLoginRecordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginRecordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestLoginRecordGmUserPmd_CS));
  ConsumeRecordData_descriptor_ = file->message_type(43);
  static const int ConsumeRecordData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, actionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, beforenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, afternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, usednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, ext_),
  };
  ConsumeRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsumeRecordData_descriptor_,
      ConsumeRecordData::default_instance_,
      ConsumeRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsumeRecordData));
  RequestConsumeRecordGmUserPmd_CS_descriptor_ = file->message_type(44);
  static const int RequestConsumeRecordGmUserPmd_CS_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, perpage_),
  };
  RequestConsumeRecordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestConsumeRecordGmUserPmd_CS_descriptor_,
      RequestConsumeRecordGmUserPmd_CS::default_instance_,
      RequestConsumeRecordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestConsumeRecordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestConsumeRecordGmUserPmd_CS));
  ActionRecordData_descriptor_ = file->message_type(45);
  static const int ActionRecordData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, acttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, typename__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, actionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, lastmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, ext1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, ext2_),
  };
  ActionRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionRecordData_descriptor_,
      ActionRecordData::default_instance_,
      ActionRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionRecordData));
  RequestActionRecordGmUserPmd_CS_descriptor_ = file->message_type(46);
  static const int RequestActionRecordGmUserPmd_CS_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, acttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, perpage_),
  };
  RequestActionRecordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestActionRecordGmUserPmd_CS_descriptor_,
      RequestActionRecordGmUserPmd_CS::default_instance_,
      RequestActionRecordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestActionRecordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestActionRecordGmUserPmd_CS));
  StrengthenRecordData_descriptor_ = file->message_type(47);
  static const int StrengthenRecordData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, optarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, typename__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, opresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, beforenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, afternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, ext_),
  };
  StrengthenRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengthenRecordData_descriptor_,
      StrengthenRecordData::default_instance_,
      StrengthenRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengthenRecordData));
  RequestStrengthenRecordGmUserPmd_CS_descriptor_ = file->message_type(48);
  static const int RequestStrengthenRecordGmUserPmd_CS_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, optarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, perpage_),
  };
  RequestStrengthenRecordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStrengthenRecordGmUserPmd_CS_descriptor_,
      RequestStrengthenRecordGmUserPmd_CS::default_instance_,
      RequestStrengthenRecordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStrengthenRecordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStrengthenRecordGmUserPmd_CS));
  MailRecordData_descriptor_ = file->message_type(49);
  static const int MailRecordData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, recvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, recvname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, optype_),
  };
  MailRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailRecordData_descriptor_,
      MailRecordData::default_instance_,
      MailRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailRecordData));
  RequestMailRecordGmUserPmd_CS_descriptor_ = file->message_type(50);
  static const int RequestMailRecordGmUserPmd_CS_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, recvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, perpage_),
  };
  RequestMailRecordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMailRecordGmUserPmd_CS_descriptor_,
      RequestMailRecordGmUserPmd_CS::default_instance_,
      RequestMailRecordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMailRecordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMailRecordGmUserPmd_CS));
  RankRecordData_descriptor_ = file->message_type(51);
  static const int RankRecordData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, rankname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, ext_),
  };
  RankRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankRecordData_descriptor_,
      RankRecordData::default_instance_,
      RankRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankRecordData));
  RequestRankRecordGmUserPmd_CS_descriptor_ = file->message_type(52);
  static const int RequestRankRecordGmUserPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, rankname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, perpage_),
  };
  RequestRankRecordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRankRecordGmUserPmd_CS_descriptor_,
      RequestRankRecordGmUserPmd_CS::default_instance_,
      RequestRankRecordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRankRecordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRankRecordGmUserPmd_CS));
  BossRecordData_descriptor_ = file->message_type(53);
  static const int BossRecordData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, bosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, bossname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, acttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, actcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, ts_),
  };
  BossRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossRecordData_descriptor_,
      BossRecordData::default_instance_,
      BossRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossRecordData));
  RequestBossRecordGmUserPmd_CS_descriptor_ = file->message_type(54);
  static const int RequestBossRecordGmUserPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, bosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, bossname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, perpage_),
  };
  RequestBossRecordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBossRecordGmUserPmd_CS_descriptor_,
      RequestBossRecordGmUserPmd_CS::default_instance_,
      RequestBossRecordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBossRecordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBossRecordGmUserPmd_CS));
  RenameRecordData_descriptor_ = file->message_type(55);
  static const int RenameRecordData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRecordData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRecordData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRecordData, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRecordData, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRecordData, ts_),
  };
  RenameRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameRecordData_descriptor_,
      RenameRecordData::default_instance_,
      RenameRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameRecordData));
  RequestRenameRecordGmUserPmd_CS_descriptor_ = file->message_type(56);
  static const int RequestRenameRecordGmUserPmd_CS_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, perpage_),
  };
  RequestRenameRecordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRenameRecordGmUserPmd_CS_descriptor_,
      RequestRenameRecordGmUserPmd_CS::default_instance_,
      RequestRenameRecordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRenameRecordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRenameRecordGmUserPmd_CS));
  StartUpGameRequestGmPmd_C_descriptor_ = file->message_type(57);
  static const int StartUpGameRequestGmPmd_C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestGmPmd_C, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestGmPmd_C, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestGmPmd_C, compress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestGmPmd_C, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestGmPmd_C, encryptkey_),
  };
  StartUpGameRequestGmPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartUpGameRequestGmPmd_C_descriptor_,
      StartUpGameRequestGmPmd_C::default_instance_,
      StartUpGameRequestGmPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestGmPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestGmPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartUpGameRequestGmPmd_C));
  StartUpGameReturnGmPmd_S_descriptor_ = file->message_type(58);
  static const int StartUpGameReturnGmPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameReturnGmPmd_S, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameReturnGmPmd_S, retdesc_),
  };
  StartUpGameReturnGmPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartUpGameReturnGmPmd_S_descriptor_,
      StartUpGameReturnGmPmd_S::default_instance_,
      StartUpGameReturnGmPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameReturnGmPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameReturnGmPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartUpGameReturnGmPmd_S));
  SurportGameZoneRequestGmPmd_C_descriptor_ = file->message_type(59);
  static const int SurportGameZoneRequestGmPmd_C_offsets_[1] = {
  };
  SurportGameZoneRequestGmPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurportGameZoneRequestGmPmd_C_descriptor_,
      SurportGameZoneRequestGmPmd_C::default_instance_,
      SurportGameZoneRequestGmPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurportGameZoneRequestGmPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurportGameZoneRequestGmPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurportGameZoneRequestGmPmd_C));
  SurportGameZoneReturnGmPmd_S_descriptor_ = file->message_type(60);
  static const int SurportGameZoneReturnGmPmd_S_offsets_[1] = {
  };
  SurportGameZoneReturnGmPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurportGameZoneReturnGmPmd_S_descriptor_,
      SurportGameZoneReturnGmPmd_S::default_instance_,
      SurportGameZoneReturnGmPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurportGameZoneReturnGmPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurportGameZoneReturnGmPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurportGameZoneReturnGmPmd_S));
  ReconnectKickoutGmSmd_S_descriptor_ = file->message_type(61);
  static const int ReconnectKickoutGmSmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectKickoutGmSmd_S, desc_),
  };
  ReconnectKickoutGmSmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectKickoutGmSmd_S_descriptor_,
      ReconnectKickoutGmSmd_S::default_instance_,
      ReconnectKickoutGmSmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectKickoutGmSmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectKickoutGmSmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectKickoutGmSmd_S));
  GmUserInfo_descriptor_ = file->message_type(62);
  static const int GmUserInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, pri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, qmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, autorecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, workstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, bindip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, config_),
  };
  GmUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GmUserInfo_descriptor_,
      GmUserInfo::default_instance_,
      GmUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GmUserInfo));
  RequestLoginGmUserPmd_C_descriptor_ = file->message_type(63);
  static const int RequestLoginGmUserPmd_C_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, compress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, encryptkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, loginip_),
  };
  RequestLoginGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestLoginGmUserPmd_C_descriptor_,
      RequestLoginGmUserPmd_C::default_instance_,
      RequestLoginGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLoginGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestLoginGmUserPmd_C));
  ReturnLoginGmUserPmd_S_descriptor_ = file->message_type(64);
  static const int ReturnLoginGmUserPmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnLoginGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnLoginGmUserPmd_S, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnLoginGmUserPmd_S, zoneinfo_),
  };
  ReturnLoginGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnLoginGmUserPmd_S_descriptor_,
      ReturnLoginGmUserPmd_S::default_instance_,
      ReturnLoginGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnLoginGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnLoginGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnLoginGmUserPmd_S));
  SetPasswordGmUserPmd_CS_descriptor_ = file->message_type(65);
  static const int SetPasswordGmUserPmd_CS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPasswordGmUserPmd_CS, oldpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPasswordGmUserPmd_CS, newpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPasswordGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPasswordGmUserPmd_CS, retdesc_),
  };
  SetPasswordGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPasswordGmUserPmd_CS_descriptor_,
      SetPasswordGmUserPmd_CS::default_instance_,
      SetPasswordGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPasswordGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPasswordGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPasswordGmUserPmd_CS));
  AddNewGmUserPmd_CS_descriptor_ = file->message_type(66);
  static const int AddNewGmUserPmd_CS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewGmUserPmd_CS, retdesc_),
  };
  AddNewGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNewGmUserPmd_CS_descriptor_,
      AddNewGmUserPmd_CS::default_instance_,
      AddNewGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNewGmUserPmd_CS));
  GmAccountListGmUserPmd_CS_descriptor_ = file->message_type(67);
  static const int GmAccountListGmUserPmd_CS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmAccountListGmUserPmd_CS, data_),
  };
  GmAccountListGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GmAccountListGmUserPmd_CS_descriptor_,
      GmAccountListGmUserPmd_CS::default_instance_,
      GmAccountListGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmAccountListGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmAccountListGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GmAccountListGmUserPmd_CS));
  RequestDelGmUserPmd_CS_descriptor_ = file->message_type(68);
  static const int RequestDelGmUserPmd_CS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelGmUserPmd_CS, retdesc_),
  };
  RequestDelGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestDelGmUserPmd_CS_descriptor_,
      RequestDelGmUserPmd_CS::default_instance_,
      RequestDelGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestDelGmUserPmd_CS));
  RequestModifyPriGmUserPmd_CS_descriptor_ = file->message_type(69);
  static const int RequestModifyPriGmUserPmd_CS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPriGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPriGmUserPmd_CS, pri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPriGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPriGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPriGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPriGmUserPmd_CS, retdesc_),
  };
  RequestModifyPriGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestModifyPriGmUserPmd_CS_descriptor_,
      RequestModifyPriGmUserPmd_CS::default_instance_,
      RequestModifyPriGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPriGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyPriGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestModifyPriGmUserPmd_CS));
  SelectGamezoneGmUserPmd_SC_descriptor_ = file->message_type(70);
  static const int SelectGamezoneGmUserPmd_SC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectGamezoneGmUserPmd_SC, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectGamezoneGmUserPmd_SC, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectGamezoneGmUserPmd_SC, zoneid_),
  };
  SelectGamezoneGmUserPmd_SC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectGamezoneGmUserPmd_SC_descriptor_,
      SelectGamezoneGmUserPmd_SC::default_instance_,
      SelectGamezoneGmUserPmd_SC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectGamezoneGmUserPmd_SC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectGamezoneGmUserPmd_SC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectGamezoneGmUserPmd_SC));
  BroadcastInfo_descriptor_ = file->message_type(71);
  static const int BroadcastInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, intervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, recordtime_),
  };
  BroadcastInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastInfo_descriptor_,
      BroadcastInfo::default_instance_,
      BroadcastInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastInfo));
  BroadcastNewGmUserPmd_C_descriptor_ = file->message_type(72);
  static const int BroadcastNewGmUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastNewGmUserPmd_C, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastNewGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastNewGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastNewGmUserPmd_C, gmid_),
  };
  BroadcastNewGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastNewGmUserPmd_C_descriptor_,
      BroadcastNewGmUserPmd_C::default_instance_,
      BroadcastNewGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastNewGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastNewGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastNewGmUserPmd_C));
  ReturnBroadcastNewGmUserPmd_S_descriptor_ = file->message_type(73);
  static const int ReturnBroadcastNewGmUserPmd_S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastNewGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastNewGmUserPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastNewGmUserPmd_S, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastNewGmUserPmd_S, gmid_),
  };
  ReturnBroadcastNewGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnBroadcastNewGmUserPmd_S_descriptor_,
      ReturnBroadcastNewGmUserPmd_S::default_instance_,
      ReturnBroadcastNewGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastNewGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastNewGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnBroadcastNewGmUserPmd_S));
  BroadcastDeleteGmUserPmd_C_descriptor_ = file->message_type(74);
  static const int BroadcastDeleteGmUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastDeleteGmUserPmd_C, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastDeleteGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastDeleteGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastDeleteGmUserPmd_C, gmid_),
  };
  BroadcastDeleteGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastDeleteGmUserPmd_C_descriptor_,
      BroadcastDeleteGmUserPmd_C::default_instance_,
      BroadcastDeleteGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastDeleteGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastDeleteGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastDeleteGmUserPmd_C));
  ReturnBroadcastDeleteGmUserPmd_S_descriptor_ = file->message_type(75);
  static const int ReturnBroadcastDeleteGmUserPmd_S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastDeleteGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastDeleteGmUserPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastDeleteGmUserPmd_S, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastDeleteGmUserPmd_S, gmid_),
  };
  ReturnBroadcastDeleteGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnBroadcastDeleteGmUserPmd_S_descriptor_,
      ReturnBroadcastDeleteGmUserPmd_S::default_instance_,
      ReturnBroadcastDeleteGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastDeleteGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastDeleteGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnBroadcastDeleteGmUserPmd_S));
  RequestBroadcastListGmUserPmd_C_descriptor_ = file->message_type(76);
  static const int RequestBroadcastListGmUserPmd_C_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, perpage_),
  };
  RequestBroadcastListGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBroadcastListGmUserPmd_C_descriptor_,
      RequestBroadcastListGmUserPmd_C::default_instance_,
      RequestBroadcastListGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBroadcastListGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBroadcastListGmUserPmd_C));
  ReturnBroadcastListGmUserPmd_S_descriptor_ = file->message_type(77);
  static const int ReturnBroadcastListGmUserPmd_S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastListGmUserPmd_S, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastListGmUserPmd_S, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastListGmUserPmd_S, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastListGmUserPmd_S, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastListGmUserPmd_S, perpage_),
  };
  ReturnBroadcastListGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnBroadcastListGmUserPmd_S_descriptor_,
      ReturnBroadcastListGmUserPmd_S::default_instance_,
      ReturnBroadcastListGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastListGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBroadcastListGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnBroadcastListGmUserPmd_S));
  PunishUserInfo_descriptor_ = file->message_type(78);
  static const int PunishUserInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, ptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, punishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, state_),
  };
  PunishUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PunishUserInfo_descriptor_,
      PunishUserInfo::default_instance_,
      PunishUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PunishUserInfo));
  PunishUserGmUserPmd_C_descriptor_ = file->message_type(79);
  static const int PunishUserGmUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserGmUserPmd_C, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserGmUserPmd_C, gmid_),
  };
  PunishUserGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PunishUserGmUserPmd_C_descriptor_,
      PunishUserGmUserPmd_C::default_instance_,
      PunishUserGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PunishUserGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PunishUserGmUserPmd_C));
  ReturnPunishUserGmUserPmd_S_descriptor_ = file->message_type(80);
  static const int ReturnPunishUserGmUserPmd_S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishUserGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishUserGmUserPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishUserGmUserPmd_S, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishUserGmUserPmd_S, gmid_),
  };
  ReturnPunishUserGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnPunishUserGmUserPmd_S_descriptor_,
      ReturnPunishUserGmUserPmd_S::default_instance_,
      ReturnPunishUserGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishUserGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishUserGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnPunishUserGmUserPmd_S));
  DeletePunishUserGmUserPmd_C_descriptor_ = file->message_type(81);
  static const int DeletePunishUserGmUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePunishUserGmUserPmd_C, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePunishUserGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePunishUserGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePunishUserGmUserPmd_C, gmid_),
  };
  DeletePunishUserGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePunishUserGmUserPmd_C_descriptor_,
      DeletePunishUserGmUserPmd_C::default_instance_,
      DeletePunishUserGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePunishUserGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePunishUserGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePunishUserGmUserPmd_C));
  ReturnDeletePunishUserGmUserPmd_S_descriptor_ = file->message_type(82);
  static const int ReturnDeletePunishUserGmUserPmd_S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnDeletePunishUserGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnDeletePunishUserGmUserPmd_S, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnDeletePunishUserGmUserPmd_S, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnDeletePunishUserGmUserPmd_S, gmid_),
  };
  ReturnDeletePunishUserGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnDeletePunishUserGmUserPmd_S_descriptor_,
      ReturnDeletePunishUserGmUserPmd_S::default_instance_,
      ReturnDeletePunishUserGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnDeletePunishUserGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnDeletePunishUserGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnDeletePunishUserGmUserPmd_S));
  RequestPunishListGmUserPmd_C_descriptor_ = file->message_type(83);
  static const int RequestPunishListGmUserPmd_C_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, ptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, perpage_),
  };
  RequestPunishListGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPunishListGmUserPmd_C_descriptor_,
      RequestPunishListGmUserPmd_C::default_instance_,
      RequestPunishListGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPunishListGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPunishListGmUserPmd_C));
  ReturnPunishListGmUserPmd_S_descriptor_ = file->message_type(84);
  static const int ReturnPunishListGmUserPmd_S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishListGmUserPmd_S, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishListGmUserPmd_S, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishListGmUserPmd_S, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishListGmUserPmd_S, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishListGmUserPmd_S, perpage_),
  };
  ReturnPunishListGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnPunishListGmUserPmd_S_descriptor_,
      ReturnPunishListGmUserPmd_S::default_instance_,
      ReturnPunishListGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishListGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnPunishListGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnPunishListGmUserPmd_S));
  ItemInfo_descriptor_ = file->message_type(85);
  static const int ItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, itemtype_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  ItemTypeInfo_descriptor_ = file->message_type(86);
  static const int ItemTypeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeInfo, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeInfo, typename__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeInfo, data_),
  };
  ItemTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemTypeInfo_descriptor_,
      ItemTypeInfo::default_instance_,
      ItemTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemTypeInfo));
  RequestItemTypeInfoGmUserPmd_CS_descriptor_ = file->message_type(87);
  static const int RequestItemTypeInfoGmUserPmd_CS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestItemTypeInfoGmUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestItemTypeInfoGmUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestItemTypeInfoGmUserPmd_CS, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestItemTypeInfoGmUserPmd_CS, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestItemTypeInfoGmUserPmd_CS, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestItemTypeInfoGmUserPmd_CS, retdesc_),
  };
  RequestItemTypeInfoGmUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestItemTypeInfoGmUserPmd_CS_descriptor_,
      RequestItemTypeInfoGmUserPmd_CS::default_instance_,
      RequestItemTypeInfoGmUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestItemTypeInfoGmUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestItemTypeInfoGmUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestItemTypeInfoGmUserPmd_CS));
  UserInfo_descriptor_ = file->message_type(88);
  static const int UserInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, countryname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, oldzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, lastofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, lastloginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, gmlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, glodnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, totalwin_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  RequestUserInfoGmUserPmd_C_descriptor_ = file->message_type(89);
  static const int RequestUserInfoGmUserPmd_C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoGmUserPmd_C, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoGmUserPmd_C, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoGmUserPmd_C, gmid_),
  };
  RequestUserInfoGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUserInfoGmUserPmd_C_descriptor_,
      RequestUserInfoGmUserPmd_C::default_instance_,
      RequestUserInfoGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUserInfoGmUserPmd_C));
  ReturnUserInfoGmUserPmd_S_descriptor_ = file->message_type(90);
  static const int ReturnUserInfoGmUserPmd_S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfoGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfoGmUserPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfoGmUserPmd_S, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfoGmUserPmd_S, gmid_),
  };
  ReturnUserInfoGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnUserInfoGmUserPmd_S_descriptor_,
      ReturnUserInfoGmUserPmd_S::default_instance_,
      ReturnUserInfoGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfoGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserInfoGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnUserInfoGmUserPmd_S));
  RequestUserPackageGmUserPmd_C_descriptor_ = file->message_type(91);
  static const int RequestUserPackageGmUserPmd_C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserPackageGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserPackageGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserPackageGmUserPmd_C, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserPackageGmUserPmd_C, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserPackageGmUserPmd_C, gmid_),
  };
  RequestUserPackageGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUserPackageGmUserPmd_C_descriptor_,
      RequestUserPackageGmUserPmd_C::default_instance_,
      RequestUserPackageGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserPackageGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserPackageGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUserPackageGmUserPmd_C));
  ReturnUserPackageGmUserPmd_S_descriptor_ = file->message_type(92);
  static const int ReturnUserPackageGmUserPmd_S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserPackageGmUserPmd_S, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserPackageGmUserPmd_S, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserPackageGmUserPmd_S, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserPackageGmUserPmd_S, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserPackageGmUserPmd_S, gmid_),
  };
  ReturnUserPackageGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnUserPackageGmUserPmd_S_descriptor_,
      ReturnUserPackageGmUserPmd_S::default_instance_,
      ReturnUserPackageGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserPackageGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserPackageGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnUserPackageGmUserPmd_S));
  RequestModifyUserInfoGmUserPmd_C_descriptor_ = file->message_type(93);
  static const int RequestModifyUserInfoGmUserPmd_C_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, opnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, gmid_),
  };
  RequestModifyUserInfoGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestModifyUserInfoGmUserPmd_C_descriptor_,
      RequestModifyUserInfoGmUserPmd_C::default_instance_,
      RequestModifyUserInfoGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestModifyUserInfoGmUserPmd_C));
  ReturnModifyUserInfoGmUserPmd_S_descriptor_ = file->message_type(94);
  static const int ReturnModifyUserInfoGmUserPmd_S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnModifyUserInfoGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnModifyUserInfoGmUserPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnModifyUserInfoGmUserPmd_S, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnModifyUserInfoGmUserPmd_S, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnModifyUserInfoGmUserPmd_S, gmid_),
  };
  ReturnModifyUserInfoGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnModifyUserInfoGmUserPmd_S_descriptor_,
      ReturnModifyUserInfoGmUserPmd_S::default_instance_,
      ReturnModifyUserInfoGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnModifyUserInfoGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnModifyUserInfoGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnModifyUserInfoGmUserPmd_S));
  RequestUserRecordGmUserPmd_C_descriptor_ = file->message_type(95);
  static const int RequestUserRecordGmUserPmd_C_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, perpage_),
  };
  RequestUserRecordGmUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUserRecordGmUserPmd_C_descriptor_,
      RequestUserRecordGmUserPmd_C::default_instance_,
      RequestUserRecordGmUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserRecordGmUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUserRecordGmUserPmd_C));
  RecordInfo_descriptor_ = file->message_type(96);
  static const int RecordInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, endtime_),
  };
  RecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordInfo_descriptor_,
      RecordInfo::default_instance_,
      RecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordInfo));
  ReturnUserRecordGmUserPmd_S_descriptor_ = file->message_type(97);
  static const int ReturnUserRecordGmUserPmd_S_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, retdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, recordnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, maxpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, perpage_),
  };
  ReturnUserRecordGmUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnUserRecordGmUserPmd_S_descriptor_,
      ReturnUserRecordGmUserPmd_S::default_instance_,
      ReturnUserRecordGmUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserRecordGmUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnUserRecordGmUserPmd_S));
  QuestionBaseData_descriptor_ = file->message_type(98);
  static const int QuestionBaseData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, countyrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, name_),
  };
  QuestionBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionBaseData_descriptor_,
      QuestionBaseData::default_instance_,
      QuestionBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionBaseData));
  ForbidAccountData_descriptor_ = file->message_type(99);
  static const int ForbidAccountData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, forbidtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, begtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, desc_),
  };
  ForbidAccountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForbidAccountData_descriptor_,
      ForbidAccountData::default_instance_,
      ForbidAccountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidAccountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForbidAccountData));
  ForbidAccountData_ForbidType_descriptor_ = ForbidAccountData_descriptor_->enum_type(0);
  stRequestLoginGmUserCmd_descriptor_ = file->message_type(100);
  static const int stRequestLoginGmUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestLoginGmUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestLoginGmUserCmd, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestLoginGmUserCmd, version_),
  };
  stRequestLoginGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestLoginGmUserCmd_descriptor_,
      stRequestLoginGmUserCmd::default_instance_,
      stRequestLoginGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestLoginGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestLoginGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestLoginGmUserCmd));
  stReturnLoginGmUserCmd_descriptor_ = file->message_type(101);
  static const int stReturnLoginGmUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, pri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, qmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, autorecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, workstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, winnum_),
  };
  stReturnLoginGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnLoginGmUserCmd_descriptor_,
      stReturnLoginGmUserCmd::default_instance_,
      stReturnLoginGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnLoginGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnLoginGmUserCmd));
  stConfigGmUserCmd_descriptor_ = file->message_type(102);
  static const int stConfigGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConfigGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConfigGmUserCmd, config_),
  };
  stConfigGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stConfigGmUserCmd_descriptor_,
      stConfigGmUserCmd::default_instance_,
      stConfigGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConfigGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConfigGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stConfigGmUserCmd));
  stSetPasswordGmUserCmd_descriptor_ = file->message_type(103);
  static const int stSetPasswordGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetPasswordGmUserCmd, oldpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetPasswordGmUserCmd, newpasswd_),
  };
  stSetPasswordGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetPasswordGmUserCmd_descriptor_,
      stSetPasswordGmUserCmd::default_instance_,
      stSetPasswordGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetPasswordGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetPasswordGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetPasswordGmUserCmd));
  stReturnPasswordGmUserCmd_descriptor_ = file->message_type(104);
  static const int stReturnPasswordGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPasswordGmUserCmd, retcode_),
  };
  stReturnPasswordGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnPasswordGmUserCmd_descriptor_,
      stReturnPasswordGmUserCmd::default_instance_,
      stReturnPasswordGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPasswordGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPasswordGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnPasswordGmUserCmd));
  stAddNewGmUserCmd_descriptor_ = file->message_type(105);
  static const int stAddNewGmUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, pri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, qmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, autorecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, workstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, winnum_),
  };
  stAddNewGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddNewGmUserCmd_descriptor_,
      stAddNewGmUserCmd::default_instance_,
      stAddNewGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddNewGmUserCmd));
  stReturnAddNewGmUserCmd_descriptor_ = file->message_type(106);
  static const int stReturnAddNewGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnAddNewGmUserCmd, retcode_),
  };
  stReturnAddNewGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnAddNewGmUserCmd_descriptor_,
      stReturnAddNewGmUserCmd::default_instance_,
      stReturnAddNewGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnAddNewGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnAddNewGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnAddNewGmUserCmd));
  stQueryListGmUserCmd_descriptor_ = file->message_type(107);
  static const int stQueryListGmUserCmd_offsets_[1] = {
  };
  stQueryListGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQueryListGmUserCmd_descriptor_,
      stQueryListGmUserCmd::default_instance_,
      stQueryListGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryListGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryListGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQueryListGmUserCmd));
  stReturnListGmUserCmd_descriptor_ = file->message_type(108);
  static const int stReturnListGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd, data_),
  };
  stReturnListGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnListGmUserCmd_descriptor_,
      stReturnListGmUserCmd::default_instance_,
      stReturnListGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnListGmUserCmd));
  stReturnListGmUserCmd_Data_descriptor_ = stReturnListGmUserCmd_descriptor_->nested_type(0);
  static const int stReturnListGmUserCmd_Data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, pri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, qmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, autorecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, workstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, winnum_),
  };
  stReturnListGmUserCmd_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnListGmUserCmd_Data_descriptor_,
      stReturnListGmUserCmd_Data::default_instance_,
      stReturnListGmUserCmd_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnListGmUserCmd_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnListGmUserCmd_Data));
  stRequestZoneConfigGmUserCmd_descriptor_ = file->message_type(109);
  static const int stRequestZoneConfigGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestZoneConfigGmUserCmd, zoneid_),
  };
  stRequestZoneConfigGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestZoneConfigGmUserCmd_descriptor_,
      stRequestZoneConfigGmUserCmd::default_instance_,
      stRequestZoneConfigGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestZoneConfigGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestZoneConfigGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestZoneConfigGmUserCmd));
  stReturnZoneDicCountryGmUserCmd_descriptor_ = file->message_type(110);
  static const int stReturnZoneDicCountryGmUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd, data_),
  };
  stReturnZoneDicCountryGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnZoneDicCountryGmUserCmd_descriptor_,
      stReturnZoneDicCountryGmUserCmd::default_instance_,
      stReturnZoneDicCountryGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnZoneDicCountryGmUserCmd));
  stReturnZoneDicCountryGmUserCmd_Data_descriptor_ = stReturnZoneDicCountryGmUserCmd_descriptor_->nested_type(0);
  static const int stReturnZoneDicCountryGmUserCmd_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd_Data, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd_Data, name_),
  };
  stReturnZoneDicCountryGmUserCmd_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnZoneDicCountryGmUserCmd_Data_descriptor_,
      stReturnZoneDicCountryGmUserCmd_Data::default_instance_,
      stReturnZoneDicCountryGmUserCmd_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicCountryGmUserCmd_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnZoneDicCountryGmUserCmd_Data));
  stReturnZoneDicMapGmUserCmd_descriptor_ = file->message_type(111);
  static const int stReturnZoneDicMapGmUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd, data_),
  };
  stReturnZoneDicMapGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnZoneDicMapGmUserCmd_descriptor_,
      stReturnZoneDicMapGmUserCmd::default_instance_,
      stReturnZoneDicMapGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnZoneDicMapGmUserCmd));
  stReturnZoneDicMapGmUserCmd_Data_descriptor_ = stReturnZoneDicMapGmUserCmd_descriptor_->nested_type(0);
  static const int stReturnZoneDicMapGmUserCmd_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd_Data, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd_Data, name_),
  };
  stReturnZoneDicMapGmUserCmd_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnZoneDicMapGmUserCmd_Data_descriptor_,
      stReturnZoneDicMapGmUserCmd_Data::default_instance_,
      stReturnZoneDicMapGmUserCmd_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicMapGmUserCmd_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnZoneDicMapGmUserCmd_Data));
  stForwardToAllGmUserCmd_descriptor_ = file->message_type(112);
  static const int stForwardToAllGmUserCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, dwzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, wcountryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, wsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, dwprovinceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, dwcityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, data_),
  };
  stForwardToAllGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForwardToAllGmUserCmd_descriptor_,
      stForwardToAllGmUserCmd::default_instance_,
      stForwardToAllGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToAllGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForwardToAllGmUserCmd));
  stForwardToOnlyGmUserCmd_descriptor_ = file->message_type(113);
  static const int stForwardToOnlyGmUserCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, dwzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, wcountryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, wsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, dwuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, data_),
  };
  stForwardToOnlyGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForwardToOnlyGmUserCmd_descriptor_,
      stForwardToOnlyGmUserCmd::default_instance_,
      stForwardToOnlyGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardToOnlyGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForwardToOnlyGmUserCmd));
  stBroadcastNewGmUserCmd_descriptor_ = file->message_type(114);
  static const int stBroadcastNewGmUserCmd_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, dwzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, wcountryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, wsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, dwtimefrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, dwtimeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, dwintervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, bypriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, data_),
  };
  stBroadcastNewGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastNewGmUserCmd_descriptor_,
      stBroadcastNewGmUserCmd::default_instance_,
      stBroadcastNewGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastNewGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastNewGmUserCmd));
  stBroadcastDeleteGmUserCmd_descriptor_ = file->message_type(115);
  static const int stBroadcastDeleteGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastDeleteGmUserCmd, taskid_),
  };
  stBroadcastDeleteGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastDeleteGmUserCmd_descriptor_,
      stBroadcastDeleteGmUserCmd::default_instance_,
      stBroadcastDeleteGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastDeleteGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastDeleteGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastDeleteGmUserCmd));
  stBroadcastRequestGmUserCmd_descriptor_ = file->message_type(116);
  static const int stBroadcastRequestGmUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastRequestGmUserCmd, dwzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastRequestGmUserCmd, wcountryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastRequestGmUserCmd, wsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastRequestGmUserCmd, dwtimeend_),
  };
  stBroadcastRequestGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastRequestGmUserCmd_descriptor_,
      stBroadcastRequestGmUserCmd::default_instance_,
      stBroadcastRequestGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastRequestGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastRequestGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastRequestGmUserCmd));
  stRequestTimeGmUserCmd_descriptor_ = file->message_type(117);
  static const int stRequestTimeGmUserCmd_offsets_[1] = {
  };
  stRequestTimeGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestTimeGmUserCmd_descriptor_,
      stRequestTimeGmUserCmd::default_instance_,
      stRequestTimeGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestTimeGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestTimeGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestTimeGmUserCmd));
  stReturnTimeGmUserCmd_descriptor_ = file->message_type(118);
  static const int stReturnTimeGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnTimeGmUserCmd, time_),
  };
  stReturnTimeGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnTimeGmUserCmd_descriptor_,
      stReturnTimeGmUserCmd::default_instance_,
      stReturnTimeGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnTimeGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnTimeGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnTimeGmUserCmd));
  stServerShutdownGmUserCmd_descriptor_ = file->message_type(119);
  static const int stServerShutdownGmUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, time_),
  };
  stServerShutdownGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stServerShutdownGmUserCmd_descriptor_,
      stServerShutdownGmUserCmd::default_instance_,
      stServerShutdownGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerShutdownGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stServerShutdownGmUserCmd));
  stRequestZoneDicGmUserCmd_descriptor_ = file->message_type(120);
  static const int stRequestZoneDicGmUserCmd_offsets_[1] = {
  };
  stRequestZoneDicGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestZoneDicGmUserCmd_descriptor_,
      stRequestZoneDicGmUserCmd::default_instance_,
      stRequestZoneDicGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestZoneDicGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestZoneDicGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestZoneDicGmUserCmd));
  stReturnZoneDicGmUserCmd_descriptor_ = file->message_type(121);
  static const int stReturnZoneDicGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicGmUserCmd, data_),
  };
  stReturnZoneDicGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnZoneDicGmUserCmd_descriptor_,
      stReturnZoneDicGmUserCmd::default_instance_,
      stReturnZoneDicGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnZoneDicGmUserCmd));
  stReturnZoneDicGmUserCmd_Data_descriptor_ = stReturnZoneDicGmUserCmd_descriptor_->nested_type(0);
  static const int stReturnZoneDicGmUserCmd_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicGmUserCmd_Data, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicGmUserCmd_Data, name_),
  };
  stReturnZoneDicGmUserCmd_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnZoneDicGmUserCmd_Data_descriptor_,
      stReturnZoneDicGmUserCmd_Data::default_instance_,
      stReturnZoneDicGmUserCmd_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicGmUserCmd_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnZoneDicGmUserCmd_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnZoneDicGmUserCmd_Data));
  stAddChatConfigGmUserCmd_descriptor_ = file->message_type(122);
  static const int stAddChatConfigGmUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddChatConfigGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddChatConfigGmUserCmd, countyrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddChatConfigGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddChatConfigGmUserCmd, channel_),
  };
  stAddChatConfigGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddChatConfigGmUserCmd_descriptor_,
      stAddChatConfigGmUserCmd::default_instance_,
      stAddChatConfigGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddChatConfigGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddChatConfigGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddChatConfigGmUserCmd));
  stCancelChatConfigGmUserCmd_descriptor_ = file->message_type(123);
  static const int stCancelChatConfigGmUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelChatConfigGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelChatConfigGmUserCmd, countyrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelChatConfigGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelChatConfigGmUserCmd, channel_),
  };
  stCancelChatConfigGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelChatConfigGmUserCmd_descriptor_,
      stCancelChatConfigGmUserCmd::default_instance_,
      stCancelChatConfigGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelChatConfigGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelChatConfigGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelChatConfigGmUserCmd));
  stRequestChatTypesGmUserCmd_descriptor_ = file->message_type(124);
  static const int stRequestChatTypesGmUserCmd_offsets_[1] = {
  };
  stRequestChatTypesGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestChatTypesGmUserCmd_descriptor_,
      stRequestChatTypesGmUserCmd::default_instance_,
      stRequestChatTypesGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestChatTypesGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestChatTypesGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestChatTypesGmUserCmd));
  stReturnChatTypesGmUserCmd_descriptor_ = file->message_type(125);
  static const int stReturnChatTypesGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnChatTypesGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnChatTypesGmUserCmd, data_),
  };
  stReturnChatTypesGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnChatTypesGmUserCmd_descriptor_,
      stReturnChatTypesGmUserCmd::default_instance_,
      stReturnChatTypesGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnChatTypesGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnChatTypesGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnChatTypesGmUserCmd));
  stReturnChatTypesGmUserCmd_Data_descriptor_ = stReturnChatTypesGmUserCmd_descriptor_->nested_type(0);
  static const int stReturnChatTypesGmUserCmd_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnChatTypesGmUserCmd_Data, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnChatTypesGmUserCmd_Data, name_),
  };
  stReturnChatTypesGmUserCmd_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnChatTypesGmUserCmd_Data_descriptor_,
      stReturnChatTypesGmUserCmd_Data::default_instance_,
      stReturnChatTypesGmUserCmd_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnChatTypesGmUserCmd_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnChatTypesGmUserCmd_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnChatTypesGmUserCmd_Data));
  stServerStartupGmUserCmd_descriptor_ = file->message_type(126);
  static const int stServerStartupGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerStartupGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerStartupGmUserCmd, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerStartupGmUserCmd, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerStartupGmUserCmd, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerStartupGmUserCmd, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerStartupGmUserCmd, time_),
  };
  stServerStartupGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stServerStartupGmUserCmd_descriptor_,
      stServerStartupGmUserCmd::default_instance_,
      stServerStartupGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerStartupGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerStartupGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stServerStartupGmUserCmd));
  stNotifyShutdownGmUserCmd_descriptor_ = file->message_type(127);
  static const int stNotifyShutdownGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyShutdownGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyShutdownGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyShutdownGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyShutdownGmUserCmd, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyShutdownGmUserCmd, shutdowntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyShutdownGmUserCmd, data_),
  };
  stNotifyShutdownGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyShutdownGmUserCmd_descriptor_,
      stNotifyShutdownGmUserCmd::default_instance_,
      stNotifyShutdownGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyShutdownGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyShutdownGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyShutdownGmUserCmd));
  stCancelShutdownGmUserCmd_descriptor_ = file->message_type(128);
  static const int stCancelShutdownGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelShutdownGmUserCmd, zoneid_),
  };
  stCancelShutdownGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelShutdownGmUserCmd_descriptor_,
      stCancelShutdownGmUserCmd::default_instance_,
      stCancelShutdownGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelShutdownGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelShutdownGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelShutdownGmUserCmd));
  stGmServerMessageGmUserCmd_descriptor_ = file->message_type(129);
  static const int stGmServerMessageGmUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmServerMessageGmUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmServerMessageGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmServerMessageGmUserCmd, data_),
  };
  stGmServerMessageGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGmServerMessageGmUserCmd_descriptor_,
      stGmServerMessageGmUserCmd::default_instance_,
      stGmServerMessageGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmServerMessageGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmServerMessageGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGmServerMessageGmUserCmd));
  stRequestDelGmUserGmUserCmd_descriptor_ = file->message_type(130);
  static const int stRequestDelGmUserGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestDelGmUserGmUserCmd, id_),
  };
  stRequestDelGmUserGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestDelGmUserGmUserCmd_descriptor_,
      stRequestDelGmUserGmUserCmd::default_instance_,
      stRequestDelGmUserGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestDelGmUserGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestDelGmUserGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestDelGmUserGmUserCmd));
  stRequestResetGmUserPasswordGmUserCmd_descriptor_ = file->message_type(131);
  static const int stRequestResetGmUserPasswordGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmUserPasswordGmUserCmd, id_),
  };
  stRequestResetGmUserPasswordGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestResetGmUserPasswordGmUserCmd_descriptor_,
      stRequestResetGmUserPasswordGmUserCmd::default_instance_,
      stRequestResetGmUserPasswordGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmUserPasswordGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmUserPasswordGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestResetGmUserPasswordGmUserCmd));
  stQequestShutDownGmUserCmd_descriptor_ = file->message_type(132);
  static const int stQequestShutDownGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQequestShutDownGmUserCmd, zoneid_),
  };
  stQequestShutDownGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQequestShutDownGmUserCmd_descriptor_,
      stQequestShutDownGmUserCmd::default_instance_,
      stQequestShutDownGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQequestShutDownGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQequestShutDownGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQequestShutDownGmUserCmd));
  stRequestForbidAccountGmUserCmd_descriptor_ = file->message_type(133);
  static const int stRequestForbidAccountGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestForbidAccountGmUserCmd, data_),
  };
  stRequestForbidAccountGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestForbidAccountGmUserCmd_descriptor_,
      stRequestForbidAccountGmUserCmd::default_instance_,
      stRequestForbidAccountGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestForbidAccountGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestForbidAccountGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestForbidAccountGmUserCmd));
  stQueryForbidAccountGmUserCmd_descriptor_ = file->message_type(134);
  static const int stQueryForbidAccountGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryForbidAccountGmUserCmd, data_),
  };
  stQueryForbidAccountGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQueryForbidAccountGmUserCmd_descriptor_,
      stQueryForbidAccountGmUserCmd::default_instance_,
      stQueryForbidAccountGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryForbidAccountGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryForbidAccountGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQueryForbidAccountGmUserCmd));
  stReturnForbidAccountListGmUserCmd_descriptor_ = file->message_type(135);
  static const int stReturnForbidAccountListGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnForbidAccountListGmUserCmd, num_),
  };
  stReturnForbidAccountListGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnForbidAccountListGmUserCmd_descriptor_,
      stReturnForbidAccountListGmUserCmd::default_instance_,
      stReturnForbidAccountListGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnForbidAccountListGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnForbidAccountListGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnForbidAccountListGmUserCmd));
  stRequestUnForbidAccountGmUserCmd_descriptor_ = file->message_type(136);
  static const int stRequestUnForbidAccountGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestUnForbidAccountGmUserCmd, data_),
  };
  stRequestUnForbidAccountGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestUnForbidAccountGmUserCmd_descriptor_,
      stRequestUnForbidAccountGmUserCmd::default_instance_,
      stRequestUnForbidAccountGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestUnForbidAccountGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestUnForbidAccountGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestUnForbidAccountGmUserCmd));
  stBroadcastDeleteZoneGmUserCmd_descriptor_ = file->message_type(137);
  static const int stBroadcastDeleteZoneGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastDeleteZoneGmUserCmd, zoneid_),
  };
  stBroadcastDeleteZoneGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastDeleteZoneGmUserCmd_descriptor_,
      stBroadcastDeleteZoneGmUserCmd::default_instance_,
      stBroadcastDeleteZoneGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastDeleteZoneGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastDeleteZoneGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastDeleteZoneGmUserCmd));
  stRequestNameAccountGmUserCmd_descriptor_ = file->message_type(138);
  static const int stRequestNameAccountGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestNameAccountGmUserCmd, num_),
  };
  stRequestNameAccountGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestNameAccountGmUserCmd_descriptor_,
      stRequestNameAccountGmUserCmd::default_instance_,
      stRequestNameAccountGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestNameAccountGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestNameAccountGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestNameAccountGmUserCmd));
  stReturnNameAccountGmUserCmd_descriptor_ = file->message_type(139);
  static const int stReturnNameAccountGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNameAccountGmUserCmd, num_),
  };
  stReturnNameAccountGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnNameAccountGmUserCmd_descriptor_,
      stReturnNameAccountGmUserCmd::default_instance_,
      stReturnNameAccountGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNameAccountGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNameAccountGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnNameAccountGmUserCmd));
  stRequestDBConnectionConfigGmUserCmd_descriptor_ = file->message_type(140);
  static const int stRequestDBConnectionConfigGmUserCmd_offsets_[1] = {
  };
  stRequestDBConnectionConfigGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestDBConnectionConfigGmUserCmd_descriptor_,
      stRequestDBConnectionConfigGmUserCmd::default_instance_,
      stRequestDBConnectionConfigGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestDBConnectionConfigGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestDBConnectionConfigGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestDBConnectionConfigGmUserCmd));
  stReturnDBConnectionConfigGmUserCmd_descriptor_ = file->message_type(141);
  static const int stReturnDBConnectionConfigGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnDBConnectionConfigGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnDBConnectionConfigGmUserCmd, data_),
  };
  stReturnDBConnectionConfigGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnDBConnectionConfigGmUserCmd_descriptor_,
      stReturnDBConnectionConfigGmUserCmd::default_instance_,
      stReturnDBConnectionConfigGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnDBConnectionConfigGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnDBConnectionConfigGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnDBConnectionConfigGmUserCmd));
  stQueryNameExistGmUserCmd_descriptor_ = file->message_type(142);
  static const int stQueryNameExistGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryNameExistGmUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryNameExistGmUserCmd, optype_),
  };
  stQueryNameExistGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQueryNameExistGmUserCmd_descriptor_,
      stQueryNameExistGmUserCmd::default_instance_,
      stQueryNameExistGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryNameExistGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryNameExistGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQueryNameExistGmUserCmd));
  stForceInsertNameGmUserCmd_descriptor_ = file->message_type(143);
  static const int stForceInsertNameGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceInsertNameGmUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceInsertNameGmUserCmd, optype_),
  };
  stForceInsertNameGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForceInsertNameGmUserCmd_descriptor_,
      stForceInsertNameGmUserCmd::default_instance_,
      stForceInsertNameGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceInsertNameGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceInsertNameGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForceInsertNameGmUserCmd));
  stForceModifyNameGmUserCmd_descriptor_ = file->message_type(144);
  static const int stForceModifyNameGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceModifyNameGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceModifyNameGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceModifyNameGmUserCmd, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceModifyNameGmUserCmd, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceModifyNameGmUserCmd, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceModifyNameGmUserCmd, optype_),
  };
  stForceModifyNameGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForceModifyNameGmUserCmd_descriptor_,
      stForceModifyNameGmUserCmd::default_instance_,
      stForceModifyNameGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceModifyNameGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceModifyNameGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForceModifyNameGmUserCmd));
  stCheckOnlineGmUserCmd_descriptor_ = file->message_type(145);
  static const int stCheckOnlineGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCheckOnlineGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCheckOnlineGmUserCmd, name_),
  };
  stCheckOnlineGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCheckOnlineGmUserCmd_descriptor_,
      stCheckOnlineGmUserCmd::default_instance_,
      stCheckOnlineGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCheckOnlineGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCheckOnlineGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCheckOnlineGmUserCmd));
  stReturnCheckOnlineGmUserCmd_descriptor_ = file->message_type(146);
  static const int stReturnCheckOnlineGmUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnCheckOnlineGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnCheckOnlineGmUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnCheckOnlineGmUserCmd, retcode_),
  };
  stReturnCheckOnlineGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnCheckOnlineGmUserCmd_descriptor_,
      stReturnCheckOnlineGmUserCmd::default_instance_,
      stReturnCheckOnlineGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnCheckOnlineGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnCheckOnlineGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnCheckOnlineGmUserCmd));
  stPunishUserGmUserCmd_descriptor_ = file->message_type(147);
  static const int stPunishUserGmUserCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, waittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, ip_),
  };
  stPunishUserGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPunishUserGmUserCmd_descriptor_,
      stPunishUserGmUserCmd::default_instance_,
      stPunishUserGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPunishUserGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPunishUserGmUserCmd));
  stRequestUserPosUserGmUserCmd_descriptor_ = file->message_type(148);
  static const int stRequestUserPosUserGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestUserPosUserGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestUserPosUserGmUserCmd, sceneid_),
  };
  stRequestUserPosUserGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestUserPosUserGmUserCmd_descriptor_,
      stRequestUserPosUserGmUserCmd::default_instance_,
      stRequestUserPosUserGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestUserPosUserGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestUserPosUserGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestUserPosUserGmUserCmd));
  stReturnUserPosUserGmUserCmd_descriptor_ = file->message_type(149);
  static const int stReturnUserPosUserGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd, data_),
  };
  stReturnUserPosUserGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnUserPosUserGmUserCmd_descriptor_,
      stReturnUserPosUserGmUserCmd::default_instance_,
      stReturnUserPosUserGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnUserPosUserGmUserCmd));
  stReturnUserPosUserGmUserCmd_Data_descriptor_ = stReturnUserPosUserGmUserCmd_descriptor_->nested_type(0);
  static const int stReturnUserPosUserGmUserCmd_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd_Data, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd_Data, y_),
  };
  stReturnUserPosUserGmUserCmd_Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnUserPosUserGmUserCmd_Data_descriptor_,
      stReturnUserPosUserGmUserCmd_Data::default_instance_,
      stReturnUserPosUserGmUserCmd_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd_Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnUserPosUserGmUserCmd_Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnUserPosUserGmUserCmd_Data));
  stEndUserPosUserGmUserCmd_descriptor_ = file->message_type(150);
  static const int stEndUserPosUserGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEndUserPosUserGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEndUserPosUserGmUserCmd, sceneid_),
  };
  stEndUserPosUserGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEndUserPosUserGmUserCmd_descriptor_,
      stEndUserPosUserGmUserCmd::default_instance_,
      stEndUserPosUserGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEndUserPosUserGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEndUserPosUserGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEndUserPosUserGmUserCmd));
  stBroadcastReallySendGmUserCmd_descriptor_ = file->message_type(151);
  static const int stBroadcastReallySendGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastReallySendGmUserCmd, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastReallySendGmUserCmd, dwzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastReallySendGmUserCmd, wcountryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastReallySendGmUserCmd, wsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastReallySendGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastReallySendGmUserCmd, data_),
  };
  stBroadcastReallySendGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastReallySendGmUserCmd_descriptor_,
      stBroadcastReallySendGmUserCmd::default_instance_,
      stBroadcastReallySendGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastReallySendGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastReallySendGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastReallySendGmUserCmd));
  stDBQueryGmUserCmd_descriptor_ = file->message_type(152);
  static const int stDBQueryGmUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, bynolimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, timebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, sqllen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, typelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, data_),
  };
  stDBQueryGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDBQueryGmUserCmd_descriptor_,
      stDBQueryGmUserCmd::default_instance_,
      stDBQueryGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBQueryGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDBQueryGmUserCmd));
  stDBReturnDataGmUserCmd_descriptor_ = file->message_type(153);
  static const int stDBReturnDataGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBReturnDataGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBReturnDataGmUserCmd, data_),
  };
  stDBReturnDataGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDBReturnDataGmUserCmd_descriptor_,
      stDBReturnDataGmUserCmd::default_instance_,
      stDBReturnDataGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBReturnDataGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBReturnDataGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDBReturnDataGmUserCmd));
  stDBReturnEndGmUserCmd_descriptor_ = file->message_type(154);
  static const int stDBReturnEndGmUserCmd_offsets_[1] = {
  };
  stDBReturnEndGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDBReturnEndGmUserCmd_descriptor_,
      stDBReturnEndGmUserCmd::default_instance_,
      stDBReturnEndGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBReturnEndGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDBReturnEndGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDBReturnEndGmUserCmd));
  stFullForbidAccountLogDataGmUserCmd_descriptor_ = file->message_type(155);
  static const int stFullForbidAccountLogDataGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullForbidAccountLogDataGmUserCmd, byoperation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullForbidAccountLogDataGmUserCmd, data_),
  };
  stFullForbidAccountLogDataGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFullForbidAccountLogDataGmUserCmd_descriptor_,
      stFullForbidAccountLogDataGmUserCmd::default_instance_,
      stFullForbidAccountLogDataGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullForbidAccountLogDataGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullForbidAccountLogDataGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFullForbidAccountLogDataGmUserCmd));
  stFullGameGmCmdLogDataGmUserCmd_descriptor_ = file->message_type(156);
  static const int stFullGameGmCmdLogDataGmUserCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, content_),
  };
  stFullGameGmCmdLogDataGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFullGameGmCmdLogDataGmUserCmd_descriptor_,
      stFullGameGmCmdLogDataGmUserCmd::default_instance_,
      stFullGameGmCmdLogDataGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFullGameGmCmdLogDataGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFullGameGmCmdLogDataGmUserCmd));
  stRequestAddQuestionGmUserCmd_descriptor_ = file->message_type(157);
  static const int stRequestAddQuestionGmUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestAddQuestionGmUserCmd, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestAddQuestionGmUserCmd, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestAddQuestionGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestAddQuestionGmUserCmd, data_),
  };
  stRequestAddQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestAddQuestionGmUserCmd_descriptor_,
      stRequestAddQuestionGmUserCmd::default_instance_,
      stRequestAddQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestAddQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestAddQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestAddQuestionGmUserCmd));
  stReturnQuestionGmUserCmd_descriptor_ = file->message_type(158);
  static const int stReturnQuestionGmUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionGmUserCmd, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionGmUserCmd, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionGmUserCmd, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionGmUserCmd, data_),
  };
  stReturnQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnQuestionGmUserCmd_descriptor_,
      stReturnQuestionGmUserCmd::default_instance_,
      stReturnQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnQuestionGmUserCmd));
  stSequenceQuestionGmUserCmd_descriptor_ = file->message_type(159);
  static const int stSequenceQuestionGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSequenceQuestionGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSequenceQuestionGmUserCmd, seq_),
  };
  stSequenceQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSequenceQuestionGmUserCmd_descriptor_,
      stSequenceQuestionGmUserCmd::default_instance_,
      stSequenceQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSequenceQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSequenceQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSequenceQuestionGmUserCmd));
  stDeleteQuestionGmUserCmd_descriptor_ = file->message_type(160);
  static const int stDeleteQuestionGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionGmUserCmd, userid_),
  };
  stDeleteQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDeleteQuestionGmUserCmd_descriptor_,
      stDeleteQuestionGmUserCmd::default_instance_,
      stDeleteQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDeleteQuestionGmUserCmd));
  stRequestQuestionGmUserCmd_descriptor_ = file->message_type(161);
  static const int stRequestQuestionGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestQuestionGmUserCmd, userid_),
  };
  stRequestQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestQuestionGmUserCmd_descriptor_,
      stRequestQuestionGmUserCmd::default_instance_,
      stRequestQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestQuestionGmUserCmd));
  stRequestSeqQuestionGmUserCmd_descriptor_ = file->message_type(162);
  static const int stRequestSeqQuestionGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSeqQuestionGmUserCmd, userid_),
  };
  stRequestSeqQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestSeqQuestionGmUserCmd_descriptor_,
      stRequestSeqQuestionGmUserCmd::default_instance_,
      stRequestSeqQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSeqQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSeqQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestSeqQuestionGmUserCmd));
  stReturnNoneQuestionGmUserCmd_descriptor_ = file->message_type(163);
  static const int stReturnNoneQuestionGmUserCmd_offsets_[1] = {
  };
  stReturnNoneQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnNoneQuestionGmUserCmd_descriptor_,
      stReturnNoneQuestionGmUserCmd::default_instance_,
      stReturnNoneQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNoneQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNoneQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnNoneQuestionGmUserCmd));
  stUserCmdForwardGmUserCmd_descriptor_ = file->message_type(164);
  static const int stUserCmdForwardGmUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCmdForwardGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCmdForwardGmUserCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCmdForwardGmUserCmd, data_),
  };
  stUserCmdForwardGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserCmdForwardGmUserCmd_descriptor_,
      stUserCmdForwardGmUserCmd::default_instance_,
      stUserCmdForwardGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCmdForwardGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCmdForwardGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserCmdForwardGmUserCmd));
  stProcessQuestionGmUserCmd_descriptor_ = file->message_type(165);
  static const int stProcessQuestionGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessQuestionGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessQuestionGmUserCmd, gmid_),
  };
  stProcessQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stProcessQuestionGmUserCmd_descriptor_,
      stProcessQuestionGmUserCmd::default_instance_,
      stProcessQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stProcessQuestionGmUserCmd));
  stGMToolBeginQuestionGmUserCmd_descriptor_ = file->message_type(166);
  static const int stGMToolBeginQuestionGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMToolBeginQuestionGmUserCmd, gmid_),
  };
  stGMToolBeginQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGMToolBeginQuestionGmUserCmd_descriptor_,
      stGMToolBeginQuestionGmUserCmd::default_instance_,
      stGMToolBeginQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMToolBeginQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMToolBeginQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGMToolBeginQuestionGmUserCmd));
  stGMToolEndQuestionGmUserCmd_descriptor_ = file->message_type(167);
  static const int stGMToolEndQuestionGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMToolEndQuestionGmUserCmd, gmid_),
  };
  stGMToolEndQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGMToolEndQuestionGmUserCmd_descriptor_,
      stGMToolEndQuestionGmUserCmd::default_instance_,
      stGMToolEndQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMToolEndQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMToolEndQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGMToolEndQuestionGmUserCmd));
  stDisableGMChatInputGmUserCmd_descriptor_ = file->message_type(168);
  static const int stDisableGMChatInputGmUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDisableGMChatInputGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDisableGMChatInputGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDisableGMChatInputGmUserCmd, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDisableGMChatInputGmUserCmd, id_),
  };
  stDisableGMChatInputGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDisableGMChatInputGmUserCmd_descriptor_,
      stDisableGMChatInputGmUserCmd::default_instance_,
      stDisableGMChatInputGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDisableGMChatInputGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDisableGMChatInputGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDisableGMChatInputGmUserCmd));
  stDeleteQuestionByGmUserCmd_descriptor_ = file->message_type(169);
  static const int stDeleteQuestionByGmUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionByGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionByGmUserCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionByGmUserCmd, gmid_),
  };
  stDeleteQuestionByGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDeleteQuestionByGmUserCmd_descriptor_,
      stDeleteQuestionByGmUserCmd::default_instance_,
      stDeleteQuestionByGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionByGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteQuestionByGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDeleteQuestionByGmUserCmd));
  stQuestionOverGmUserCmd_descriptor_ = file->message_type(170);
  static const int stQuestionOverGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuestionOverGmUserCmd, reason_),
  };
  stQuestionOverGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQuestionOverGmUserCmd_descriptor_,
      stQuestionOverGmUserCmd::default_instance_,
      stQuestionOverGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuestionOverGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuestionOverGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQuestionOverGmUserCmd));
  stQueryQuestionLimitGmUserCmd_descriptor_ = file->message_type(171);
  static const int stQueryQuestionLimitGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryQuestionLimitGmUserCmd, gmid_),
  };
  stQueryQuestionLimitGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQueryQuestionLimitGmUserCmd_descriptor_,
      stQueryQuestionLimitGmUserCmd::default_instance_,
      stQueryQuestionLimitGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryQuestionLimitGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryQuestionLimitGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQueryQuestionLimitGmUserCmd));
  stReturnQuestionLimitGmUserCmd_descriptor_ = file->message_type(172);
  static const int stReturnQuestionLimitGmUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionLimitGmUserCmd, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionLimitGmUserCmd, maxwaittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionLimitGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionLimitGmUserCmd, data_),
  };
  stReturnQuestionLimitGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnQuestionLimitGmUserCmd_descriptor_,
      stReturnQuestionLimitGmUserCmd::default_instance_,
      stReturnQuestionLimitGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionLimitGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnQuestionLimitGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnQuestionLimitGmUserCmd));
  stResetQuestionLimitGmUserCmd_descriptor_ = file->message_type(173);
  static const int stResetQuestionLimitGmUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetQuestionLimitGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetQuestionLimitGmUserCmd, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetQuestionLimitGmUserCmd, maxwaittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetQuestionLimitGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetQuestionLimitGmUserCmd, data_),
  };
  stResetQuestionLimitGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetQuestionLimitGmUserCmd_descriptor_,
      stResetQuestionLimitGmUserCmd::default_instance_,
      stResetQuestionLimitGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetQuestionLimitGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetQuestionLimitGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetQuestionLimitGmUserCmd));
  stBroadcastToWorldGmUserCmd_descriptor_ = file->message_type(174);
  static const int stBroadcastToWorldGmUserCmd_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, provinceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, chatpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, data_),
  };
  stBroadcastToWorldGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastToWorldGmUserCmd_descriptor_,
      stBroadcastToWorldGmUserCmd::default_instance_,
      stBroadcastToWorldGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastToWorldGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastToWorldGmUserCmd));
  stSetActivityNoteGmUserCmd_descriptor_ = file->message_type(175);
  static const int stSetActivityNoteGmUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetActivityNoteGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetActivityNoteGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetActivityNoteGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetActivityNoteGmUserCmd, data_),
  };
  stSetActivityNoteGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetActivityNoteGmUserCmd_descriptor_,
      stSetActivityNoteGmUserCmd::default_instance_,
      stSetActivityNoteGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetActivityNoteGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetActivityNoteGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetActivityNoteGmUserCmd));
  stRequestRefreshUserQuestionGmUserCmd_descriptor_ = file->message_type(176);
  static const int stRequestRefreshUserQuestionGmUserCmd_offsets_[1] = {
  };
  stRequestRefreshUserQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestRefreshUserQuestionGmUserCmd_descriptor_,
      stRequestRefreshUserQuestionGmUserCmd::default_instance_,
      stRequestRefreshUserQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestRefreshUserQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestRefreshUserQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestRefreshUserQuestionGmUserCmd));
  stRequestSetUserGoldInGmUserCmd_descriptor_ = file->message_type(177);
  static const int stRequestSetUserGoldInGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSetUserGoldInGmUserCmd, szusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSetUserGoldInGmUserCmd, dwgold_),
  };
  stRequestSetUserGoldInGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestSetUserGoldInGmUserCmd_descriptor_,
      stRequestSetUserGoldInGmUserCmd::default_instance_,
      stRequestSetUserGoldInGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSetUserGoldInGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSetUserGoldInGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestSetUserGoldInGmUserCmd));
  stSetPrivilegesGmUserCmd_descriptor_ = file->message_type(178);
  static const int stSetPrivilegesGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetPrivilegesGmUserCmd, pri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetPrivilegesGmUserCmd, id_),
  };
  stSetPrivilegesGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetPrivilegesGmUserCmd_descriptor_,
      stSetPrivilegesGmUserCmd::default_instance_,
      stSetPrivilegesGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetPrivilegesGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetPrivilegesGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetPrivilegesGmUserCmd));
  stRequestSaveChatGmUserCmd_descriptor_ = file->message_type(179);
  static const int stRequestSaveChatGmUserCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, hashnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, data_),
  };
  stRequestSaveChatGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestSaveChatGmUserCmd_descriptor_,
      stRequestSaveChatGmUserCmd::default_instance_,
      stRequestSaveChatGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestSaveChatGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestSaveChatGmUserCmd));
  stGameClientMessageBoxGmUserCmd_descriptor_ = file->message_type(180);
  static const int stGameClientMessageBoxGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientMessageBoxGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientMessageBoxGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientMessageBoxGmUserCmd, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientMessageBoxGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientMessageBoxGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientMessageBoxGmUserCmd, data_),
  };
  stGameClientMessageBoxGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGameClientMessageBoxGmUserCmd_descriptor_,
      stGameClientMessageBoxGmUserCmd::default_instance_,
      stGameClientMessageBoxGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientMessageBoxGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientMessageBoxGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGameClientMessageBoxGmUserCmd));
  stGameClientChatMessageGMUserCmd_descriptor_ = file->message_type(181);
  static const int stGameClientChatMessageGMUserCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, bychattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, bychatpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, bysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, szinfo_),
  };
  stGameClientChatMessageGMUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGameClientChatMessageGMUserCmd_descriptor_,
      stGameClientChatMessageGMUserCmd::default_instance_,
      stGameClientChatMessageGMUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameClientChatMessageGMUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGameClientChatMessageGMUserCmd));
  stRequestGameClientMessageConfigGmUserCmd_descriptor_ = file->message_type(182);
  static const int stRequestGameClientMessageConfigGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestGameClientMessageConfigGmUserCmd, keyid_),
  };
  stRequestGameClientMessageConfigGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestGameClientMessageConfigGmUserCmd_descriptor_,
      stRequestGameClientMessageConfigGmUserCmd::default_instance_,
      stRequestGameClientMessageConfigGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestGameClientMessageConfigGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestGameClientMessageConfigGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestGameClientMessageConfigGmUserCmd));
  stReturnGameClientMessageConfigGmUserCmd_descriptor_ = file->message_type(183);
  static const int stReturnGameClientMessageConfigGmUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnGameClientMessageConfigGmUserCmd, keyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnGameClientMessageConfigGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnGameClientMessageConfigGmUserCmd, data_),
  };
  stReturnGameClientMessageConfigGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnGameClientMessageConfigGmUserCmd_descriptor_,
      stReturnGameClientMessageConfigGmUserCmd::default_instance_,
      stReturnGameClientMessageConfigGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnGameClientMessageConfigGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnGameClientMessageConfigGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnGameClientMessageConfigGmUserCmd));
  stPlayerSatisfactionGmUserCmd_descriptor_ = file->message_type(184);
  static const int stPlayerSatisfactionGmUserCmd_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, questionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, satisfaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, desc_),
  };
  stPlayerSatisfactionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPlayerSatisfactionGmUserCmd_descriptor_,
      stPlayerSatisfactionGmUserCmd::default_instance_,
      stPlayerSatisfactionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerSatisfactionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPlayerSatisfactionGmUserCmd));
  stRequestMyQuestionGmUserCmd_descriptor_ = file->message_type(185);
  static const int stRequestMyQuestionGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestMyQuestionGmUserCmd, userid_),
  };
  stRequestMyQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestMyQuestionGmUserCmd_descriptor_,
      stRequestMyQuestionGmUserCmd::default_instance_,
      stRequestMyQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestMyQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestMyQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestMyQuestionGmUserCmd));
  stRequestQuestionSubmitableGmUserCmd_descriptor_ = file->message_type(186);
  static const int stRequestQuestionSubmitableGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestQuestionSubmitableGmUserCmd, userid_),
  };
  stRequestQuestionSubmitableGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestQuestionSubmitableGmUserCmd_descriptor_,
      stRequestQuestionSubmitableGmUserCmd::default_instance_,
      stRequestQuestionSubmitableGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestQuestionSubmitableGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestQuestionSubmitableGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestQuestionSubmitableGmUserCmd));
  stVerifyOnlineQaGmUserCmd_descriptor_ = file->message_type(187);
  static const int stVerifyOnlineQaGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVerifyOnlineQaGmUserCmd, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVerifyOnlineQaGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVerifyOnlineQaGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVerifyOnlineQaGmUserCmd, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVerifyOnlineQaGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVerifyOnlineQaGmUserCmd, username_),
  };
  stVerifyOnlineQaGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stVerifyOnlineQaGmUserCmd_descriptor_,
      stVerifyOnlineQaGmUserCmd::default_instance_,
      stVerifyOnlineQaGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVerifyOnlineQaGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVerifyOnlineQaGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stVerifyOnlineQaGmUserCmd));
  stNewGameClientMessageBoxGmUserCmd_descriptor_ = file->message_type(188);
  static const int stNewGameClientMessageBoxGmUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, gmname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, data_),
  };
  stNewGameClientMessageBoxGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNewGameClientMessageBoxGmUserCmd_descriptor_,
      stNewGameClientMessageBoxGmUserCmd::default_instance_,
      stNewGameClientMessageBoxGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNewGameClientMessageBoxGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNewGameClientMessageBoxGmUserCmd));
  stRequestPreProcessQuestionGmUserCmd_descriptor_ = file->message_type(189);
  static const int stRequestPreProcessQuestionGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestPreProcessQuestionGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestPreProcessQuestionGmUserCmd, userid_),
  };
  stRequestPreProcessQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestPreProcessQuestionGmUserCmd_descriptor_,
      stRequestPreProcessQuestionGmUserCmd::default_instance_,
      stRequestPreProcessQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestPreProcessQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestPreProcessQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestPreProcessQuestionGmUserCmd));
  stReturnPreProcessQuestionGmUserCmd_descriptor_ = file->message_type(190);
  static const int stReturnPreProcessQuestionGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPreProcessQuestionGmUserCmd, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPreProcessQuestionGmUserCmd, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPreProcessQuestionGmUserCmd, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPreProcessQuestionGmUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPreProcessQuestionGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPreProcessQuestionGmUserCmd, data_),
  };
  stReturnPreProcessQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnPreProcessQuestionGmUserCmd_descriptor_,
      stReturnPreProcessQuestionGmUserCmd::default_instance_,
      stReturnPreProcessQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPreProcessQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnPreProcessQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnPreProcessQuestionGmUserCmd));
  stReturnNowPreProcessQusetGmUserCmd_descriptor_ = file->message_type(191);
  static const int stReturnNowPreProcessQusetGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNowPreProcessQusetGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNowPreProcessQusetGmUserCmd, userid_),
  };
  stReturnNowPreProcessQusetGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnNowPreProcessQusetGmUserCmd_descriptor_,
      stReturnNowPreProcessQusetGmUserCmd::default_instance_,
      stReturnNowPreProcessQusetGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNowPreProcessQusetGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnNowPreProcessQusetGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnNowPreProcessQusetGmUserCmd));
  stDeleteProcessedQuestionGmUserCmd_descriptor_ = file->message_type(192);
  static const int stDeleteProcessedQuestionGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteProcessedQuestionGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteProcessedQuestionGmUserCmd, userid_),
  };
  stDeleteProcessedQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDeleteProcessedQuestionGmUserCmd_descriptor_,
      stDeleteProcessedQuestionGmUserCmd::default_instance_,
      stDeleteProcessedQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteProcessedQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeleteProcessedQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDeleteProcessedQuestionGmUserCmd));
  stRequestOneQuestionGmUserCmd_descriptor_ = file->message_type(193);
  static const int stRequestOneQuestionGmUserCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestOneQuestionGmUserCmd, gmid_),
  };
  stRequestOneQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestOneQuestionGmUserCmd_descriptor_,
      stRequestOneQuestionGmUserCmd::default_instance_,
      stRequestOneQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestOneQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestOneQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestOneQuestionGmUserCmd));
  stReturnOneQuestionGmUserCmd_descriptor_ = file->message_type(194);
  static const int stReturnOneQuestionGmUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnOneQuestionGmUserCmd, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnOneQuestionGmUserCmd, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnOneQuestionGmUserCmd, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnOneQuestionGmUserCmd, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnOneQuestionGmUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnOneQuestionGmUserCmd, data_),
  };
  stReturnOneQuestionGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnOneQuestionGmUserCmd_descriptor_,
      stReturnOneQuestionGmUserCmd::default_instance_,
      stReturnOneQuestionGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnOneQuestionGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnOneQuestionGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnOneQuestionGmUserCmd));
  stRequestResetGmWorkStateGmUserCmd_descriptor_ = file->message_type(195);
  static const int stRequestResetGmWorkStateGmUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmWorkStateGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmWorkStateGmUserCmd, qmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmWorkStateGmUserCmd, autorecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmWorkStateGmUserCmd, workstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmWorkStateGmUserCmd, winnum_),
  };
  stRequestResetGmWorkStateGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestResetGmWorkStateGmUserCmd_descriptor_,
      stRequestResetGmWorkStateGmUserCmd::default_instance_,
      stRequestResetGmWorkStateGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmWorkStateGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestResetGmWorkStateGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestResetGmWorkStateGmUserCmd));
  stReturnResetGmWorkStateGmUserCmd_descriptor_ = file->message_type(196);
  static const int stReturnResetGmWorkStateGmUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnResetGmWorkStateGmUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnResetGmWorkStateGmUserCmd, qmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnResetGmWorkStateGmUserCmd, autorecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnResetGmWorkStateGmUserCmd, workstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnResetGmWorkStateGmUserCmd, winnum_),
  };
  stReturnResetGmWorkStateGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReturnResetGmWorkStateGmUserCmd_descriptor_,
      stReturnResetGmWorkStateGmUserCmd::default_instance_,
      stReturnResetGmWorkStateGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnResetGmWorkStateGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReturnResetGmWorkStateGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReturnResetGmWorkStateGmUserCmd));
  stGmCommandUserCmd_descriptor_ = file->message_type(197);
  static const int stGmCommandUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmCommandUserCmd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmCommandUserCmd, str_),
  };
  stGmCommandUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGmCommandUserCmd_descriptor_,
      stGmCommandUserCmd::default_instance_,
      stGmCommandUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmCommandUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmCommandUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGmCommandUserCmd));
  stGmCommandToSceneUserCmd_descriptor_ = file->message_type(198);
  static const int stGmCommandToSceneUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmCommandToSceneUserCmd, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmCommandToSceneUserCmd, str_),
  };
  stGmCommandToSceneUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGmCommandToSceneUserCmd_descriptor_,
      stGmCommandToSceneUserCmd::default_instance_,
      stGmCommandToSceneUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmCommandToSceneUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGmCommandToSceneUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGmCommandToSceneUserCmd));
  stForceChangeSexGmUserCmd_descriptor_ = file->message_type(199);
  static const int stForceChangeSexGmUserCmd_offsets_[1] = {
  };
  stForceChangeSexGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForceChangeSexGmUserCmd_descriptor_,
      stForceChangeSexGmUserCmd::default_instance_,
      stForceChangeSexGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceChangeSexGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForceChangeSexGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForceChangeSexGmUserCmd));
  stRequestMobileInfoGmUserCmd_descriptor_ = file->message_type(200);
  static const int stRequestMobileInfoGmUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestMobileInfoGmUserCmd, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestMobileInfoGmUserCmd, accid_),
  };
  stRequestMobileInfoGmUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRequestMobileInfoGmUserCmd_descriptor_,
      stRequestMobileInfoGmUserCmd::default_instance_,
      stRequestMobileInfoGmUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestMobileInfoGmUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRequestMobileInfoGmUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRequestMobileInfoGmUserCmd));
  GMToolRightKey_descriptor_ = file->enum_type(0);
  GMOptKey_descriptor_ = file->enum_type(1);
  UserType_descriptor_ = file->enum_type(2);
  ReturnLoginGmType_descriptor_ = file->enum_type(3);
  GmServerMessageType_descriptor_ = file->enum_type(4);
  NameOperateType_descriptor_ = file->enum_type(5);
  dbtype_descriptor_ = file->enum_type(6);
  enumQuestionOver_descriptor_ = file->enum_type(7);
  GameClientMessageType_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gmcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gm_descriptor_, &Gm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestExecGmCommandGmPmd_SC_descriptor_, &RequestExecGmCommandGmPmd_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGameZoneErrorGmPmd_S_descriptor_, &RequestGameZoneErrorGmPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHotRestartGmUserPmd_CS_descriptor_, &RequestHotRestartGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequesetScriptUpdateGmUserPmd_CS_descriptor_, &RequesetScriptUpdateGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequesetRefreshGatewaylistGmUserPmd_CS_descriptor_, &RequesetRefreshGatewaylistGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGenerateCodeGmUserPmd_C_descriptor_, &RequestGenerateCodeGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnGenerateCodeGmUserPmd_S_descriptor_, &ReturnGenerateCodeGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestOpeartorCodeGmUserPmd_C_descriptor_, &RequestOpeartorCodeGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CodeInfo_descriptor_, &CodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnOpreatorCodeGmUserPmd_S_descriptor_, &ReturnOpreatorCodeGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderInfo_descriptor_, &OrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOrderListGmUserPmd_CS_descriptor_, &GameOrderListGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPackageCodeGmUserPmd_CS_descriptor_, &QueryPackageCodeGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUsePackageCodeGmUserPmd_CS_descriptor_, &RequestUsePackageCodeGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedbackData_descriptor_, &FeedbackData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedbackGmUserPmd_CS_descriptor_, &FeedbackGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFeedbackListGmUserPmd_C_descriptor_, &RequestFeedbackListGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestDealFeedbackGmUserPmd_CS_descriptor_, &RequestDealFeedbackGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointReportData_descriptor_, &PointReportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPointReportGmUserPmd_CS_descriptor_, &RequestPointReportGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointDetailData_descriptor_, &PointDetailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPointDetailGmUserPmd_CS_descriptor_, &RequestPointDetailGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BettingDetailData_descriptor_, &BettingDetailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBettingDetailGmUserPmd_CS_descriptor_, &RequestBettingDetailGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockData_descriptor_, &StockData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStockInfoGmUserPmd_CS_descriptor_, &RequestStockInfoGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestOnlineUserInfoGmUserPmd_CS_descriptor_, &RequestOnlineUserInfoGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedPacketsInfo_descriptor_, &RedPacketsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRedPacketsGmUserPmd_CS_descriptor_, &RequestRedPacketsGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubgameList_descriptor_, &SubgameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestedSubgameListGmUserPmd_CS_descriptor_, &RequestedSubgameListGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WinLoseInfo_descriptor_, &WinLoseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestWinningListGmUserPmd_CS_descriptor_, &RequestWinningListGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlackWhitelistInfo_descriptor_, &BlackWhitelistInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBlackWhitelistGmUserPmd_CS_descriptor_, &AddBlackWhitelistGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModBlackWhitelistGmUserPmd_CS_descriptor_, &ModBlackWhitelistGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelBlackWhitelistGmUserPmd_CS_descriptor_, &DelBlackWhitelistGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBlackWhitelistGmUserPmd_CS_descriptor_, &RequestBlackWhitelistGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GmMailInfo_descriptor_, &GmMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSendMailGmUserPmd_CS_descriptor_, &RequestSendMailGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRecordData_descriptor_, &LoginRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestLoginRecordGmUserPmd_CS_descriptor_, &RequestLoginRecordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsumeRecordData_descriptor_, &ConsumeRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestConsumeRecordGmUserPmd_CS_descriptor_, &RequestConsumeRecordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionRecordData_descriptor_, &ActionRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestActionRecordGmUserPmd_CS_descriptor_, &RequestActionRecordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengthenRecordData_descriptor_, &StrengthenRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStrengthenRecordGmUserPmd_CS_descriptor_, &RequestStrengthenRecordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailRecordData_descriptor_, &MailRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMailRecordGmUserPmd_CS_descriptor_, &RequestMailRecordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankRecordData_descriptor_, &RankRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRankRecordGmUserPmd_CS_descriptor_, &RequestRankRecordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossRecordData_descriptor_, &BossRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBossRecordGmUserPmd_CS_descriptor_, &RequestBossRecordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameRecordData_descriptor_, &RenameRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRenameRecordGmUserPmd_CS_descriptor_, &RequestRenameRecordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartUpGameRequestGmPmd_C_descriptor_, &StartUpGameRequestGmPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartUpGameReturnGmPmd_S_descriptor_, &StartUpGameReturnGmPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurportGameZoneRequestGmPmd_C_descriptor_, &SurportGameZoneRequestGmPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurportGameZoneReturnGmPmd_S_descriptor_, &SurportGameZoneReturnGmPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectKickoutGmSmd_S_descriptor_, &ReconnectKickoutGmSmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GmUserInfo_descriptor_, &GmUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestLoginGmUserPmd_C_descriptor_, &RequestLoginGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnLoginGmUserPmd_S_descriptor_, &ReturnLoginGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPasswordGmUserPmd_CS_descriptor_, &SetPasswordGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNewGmUserPmd_CS_descriptor_, &AddNewGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GmAccountListGmUserPmd_CS_descriptor_, &GmAccountListGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestDelGmUserPmd_CS_descriptor_, &RequestDelGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestModifyPriGmUserPmd_CS_descriptor_, &RequestModifyPriGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectGamezoneGmUserPmd_SC_descriptor_, &SelectGamezoneGmUserPmd_SC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastInfo_descriptor_, &BroadcastInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastNewGmUserPmd_C_descriptor_, &BroadcastNewGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnBroadcastNewGmUserPmd_S_descriptor_, &ReturnBroadcastNewGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastDeleteGmUserPmd_C_descriptor_, &BroadcastDeleteGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnBroadcastDeleteGmUserPmd_S_descriptor_, &ReturnBroadcastDeleteGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBroadcastListGmUserPmd_C_descriptor_, &RequestBroadcastListGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnBroadcastListGmUserPmd_S_descriptor_, &ReturnBroadcastListGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PunishUserInfo_descriptor_, &PunishUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PunishUserGmUserPmd_C_descriptor_, &PunishUserGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnPunishUserGmUserPmd_S_descriptor_, &ReturnPunishUserGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePunishUserGmUserPmd_C_descriptor_, &DeletePunishUserGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnDeletePunishUserGmUserPmd_S_descriptor_, &ReturnDeletePunishUserGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPunishListGmUserPmd_C_descriptor_, &RequestPunishListGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnPunishListGmUserPmd_S_descriptor_, &ReturnPunishListGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemTypeInfo_descriptor_, &ItemTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestItemTypeInfoGmUserPmd_CS_descriptor_, &RequestItemTypeInfoGmUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUserInfoGmUserPmd_C_descriptor_, &RequestUserInfoGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnUserInfoGmUserPmd_S_descriptor_, &ReturnUserInfoGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUserPackageGmUserPmd_C_descriptor_, &RequestUserPackageGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnUserPackageGmUserPmd_S_descriptor_, &ReturnUserPackageGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestModifyUserInfoGmUserPmd_C_descriptor_, &RequestModifyUserInfoGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnModifyUserInfoGmUserPmd_S_descriptor_, &ReturnModifyUserInfoGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUserRecordGmUserPmd_C_descriptor_, &RequestUserRecordGmUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordInfo_descriptor_, &RecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnUserRecordGmUserPmd_S_descriptor_, &ReturnUserRecordGmUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionBaseData_descriptor_, &QuestionBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForbidAccountData_descriptor_, &ForbidAccountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestLoginGmUserCmd_descriptor_, &stRequestLoginGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnLoginGmUserCmd_descriptor_, &stReturnLoginGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stConfigGmUserCmd_descriptor_, &stConfigGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetPasswordGmUserCmd_descriptor_, &stSetPasswordGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnPasswordGmUserCmd_descriptor_, &stReturnPasswordGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddNewGmUserCmd_descriptor_, &stAddNewGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnAddNewGmUserCmd_descriptor_, &stReturnAddNewGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQueryListGmUserCmd_descriptor_, &stQueryListGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnListGmUserCmd_descriptor_, &stReturnListGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnListGmUserCmd_Data_descriptor_, &stReturnListGmUserCmd_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestZoneConfigGmUserCmd_descriptor_, &stRequestZoneConfigGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnZoneDicCountryGmUserCmd_descriptor_, &stReturnZoneDicCountryGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnZoneDicCountryGmUserCmd_Data_descriptor_, &stReturnZoneDicCountryGmUserCmd_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnZoneDicMapGmUserCmd_descriptor_, &stReturnZoneDicMapGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnZoneDicMapGmUserCmd_Data_descriptor_, &stReturnZoneDicMapGmUserCmd_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForwardToAllGmUserCmd_descriptor_, &stForwardToAllGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForwardToOnlyGmUserCmd_descriptor_, &stForwardToOnlyGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastNewGmUserCmd_descriptor_, &stBroadcastNewGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastDeleteGmUserCmd_descriptor_, &stBroadcastDeleteGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastRequestGmUserCmd_descriptor_, &stBroadcastRequestGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestTimeGmUserCmd_descriptor_, &stRequestTimeGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnTimeGmUserCmd_descriptor_, &stReturnTimeGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stServerShutdownGmUserCmd_descriptor_, &stServerShutdownGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestZoneDicGmUserCmd_descriptor_, &stRequestZoneDicGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnZoneDicGmUserCmd_descriptor_, &stReturnZoneDicGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnZoneDicGmUserCmd_Data_descriptor_, &stReturnZoneDicGmUserCmd_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddChatConfigGmUserCmd_descriptor_, &stAddChatConfigGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelChatConfigGmUserCmd_descriptor_, &stCancelChatConfigGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestChatTypesGmUserCmd_descriptor_, &stRequestChatTypesGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnChatTypesGmUserCmd_descriptor_, &stReturnChatTypesGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnChatTypesGmUserCmd_Data_descriptor_, &stReturnChatTypesGmUserCmd_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stServerStartupGmUserCmd_descriptor_, &stServerStartupGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyShutdownGmUserCmd_descriptor_, &stNotifyShutdownGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelShutdownGmUserCmd_descriptor_, &stCancelShutdownGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGmServerMessageGmUserCmd_descriptor_, &stGmServerMessageGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestDelGmUserGmUserCmd_descriptor_, &stRequestDelGmUserGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestResetGmUserPasswordGmUserCmd_descriptor_, &stRequestResetGmUserPasswordGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQequestShutDownGmUserCmd_descriptor_, &stQequestShutDownGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestForbidAccountGmUserCmd_descriptor_, &stRequestForbidAccountGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQueryForbidAccountGmUserCmd_descriptor_, &stQueryForbidAccountGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnForbidAccountListGmUserCmd_descriptor_, &stReturnForbidAccountListGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestUnForbidAccountGmUserCmd_descriptor_, &stRequestUnForbidAccountGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastDeleteZoneGmUserCmd_descriptor_, &stBroadcastDeleteZoneGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestNameAccountGmUserCmd_descriptor_, &stRequestNameAccountGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnNameAccountGmUserCmd_descriptor_, &stReturnNameAccountGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestDBConnectionConfigGmUserCmd_descriptor_, &stRequestDBConnectionConfigGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnDBConnectionConfigGmUserCmd_descriptor_, &stReturnDBConnectionConfigGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQueryNameExistGmUserCmd_descriptor_, &stQueryNameExistGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForceInsertNameGmUserCmd_descriptor_, &stForceInsertNameGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForceModifyNameGmUserCmd_descriptor_, &stForceModifyNameGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCheckOnlineGmUserCmd_descriptor_, &stCheckOnlineGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnCheckOnlineGmUserCmd_descriptor_, &stReturnCheckOnlineGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPunishUserGmUserCmd_descriptor_, &stPunishUserGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestUserPosUserGmUserCmd_descriptor_, &stRequestUserPosUserGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnUserPosUserGmUserCmd_descriptor_, &stReturnUserPosUserGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnUserPosUserGmUserCmd_Data_descriptor_, &stReturnUserPosUserGmUserCmd_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEndUserPosUserGmUserCmd_descriptor_, &stEndUserPosUserGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastReallySendGmUserCmd_descriptor_, &stBroadcastReallySendGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDBQueryGmUserCmd_descriptor_, &stDBQueryGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDBReturnDataGmUserCmd_descriptor_, &stDBReturnDataGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDBReturnEndGmUserCmd_descriptor_, &stDBReturnEndGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFullForbidAccountLogDataGmUserCmd_descriptor_, &stFullForbidAccountLogDataGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFullGameGmCmdLogDataGmUserCmd_descriptor_, &stFullGameGmCmdLogDataGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestAddQuestionGmUserCmd_descriptor_, &stRequestAddQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnQuestionGmUserCmd_descriptor_, &stReturnQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSequenceQuestionGmUserCmd_descriptor_, &stSequenceQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDeleteQuestionGmUserCmd_descriptor_, &stDeleteQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestQuestionGmUserCmd_descriptor_, &stRequestQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestSeqQuestionGmUserCmd_descriptor_, &stRequestSeqQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnNoneQuestionGmUserCmd_descriptor_, &stReturnNoneQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserCmdForwardGmUserCmd_descriptor_, &stUserCmdForwardGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stProcessQuestionGmUserCmd_descriptor_, &stProcessQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGMToolBeginQuestionGmUserCmd_descriptor_, &stGMToolBeginQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGMToolEndQuestionGmUserCmd_descriptor_, &stGMToolEndQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDisableGMChatInputGmUserCmd_descriptor_, &stDisableGMChatInputGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDeleteQuestionByGmUserCmd_descriptor_, &stDeleteQuestionByGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQuestionOverGmUserCmd_descriptor_, &stQuestionOverGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQueryQuestionLimitGmUserCmd_descriptor_, &stQueryQuestionLimitGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnQuestionLimitGmUserCmd_descriptor_, &stReturnQuestionLimitGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetQuestionLimitGmUserCmd_descriptor_, &stResetQuestionLimitGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastToWorldGmUserCmd_descriptor_, &stBroadcastToWorldGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetActivityNoteGmUserCmd_descriptor_, &stSetActivityNoteGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestRefreshUserQuestionGmUserCmd_descriptor_, &stRequestRefreshUserQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestSetUserGoldInGmUserCmd_descriptor_, &stRequestSetUserGoldInGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetPrivilegesGmUserCmd_descriptor_, &stSetPrivilegesGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestSaveChatGmUserCmd_descriptor_, &stRequestSaveChatGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGameClientMessageBoxGmUserCmd_descriptor_, &stGameClientMessageBoxGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGameClientChatMessageGMUserCmd_descriptor_, &stGameClientChatMessageGMUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestGameClientMessageConfigGmUserCmd_descriptor_, &stRequestGameClientMessageConfigGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnGameClientMessageConfigGmUserCmd_descriptor_, &stReturnGameClientMessageConfigGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPlayerSatisfactionGmUserCmd_descriptor_, &stPlayerSatisfactionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestMyQuestionGmUserCmd_descriptor_, &stRequestMyQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestQuestionSubmitableGmUserCmd_descriptor_, &stRequestQuestionSubmitableGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stVerifyOnlineQaGmUserCmd_descriptor_, &stVerifyOnlineQaGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNewGameClientMessageBoxGmUserCmd_descriptor_, &stNewGameClientMessageBoxGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestPreProcessQuestionGmUserCmd_descriptor_, &stRequestPreProcessQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnPreProcessQuestionGmUserCmd_descriptor_, &stReturnPreProcessQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnNowPreProcessQusetGmUserCmd_descriptor_, &stReturnNowPreProcessQusetGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDeleteProcessedQuestionGmUserCmd_descriptor_, &stDeleteProcessedQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestOneQuestionGmUserCmd_descriptor_, &stRequestOneQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnOneQuestionGmUserCmd_descriptor_, &stReturnOneQuestionGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestResetGmWorkStateGmUserCmd_descriptor_, &stRequestResetGmWorkStateGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReturnResetGmWorkStateGmUserCmd_descriptor_, &stReturnResetGmWorkStateGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGmCommandUserCmd_descriptor_, &stGmCommandUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGmCommandToSceneUserCmd_descriptor_, &stGmCommandToSceneUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForceChangeSexGmUserCmd_descriptor_, &stForceChangeSexGmUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRequestMobileInfoGmUserCmd_descriptor_, &stRequestMobileInfoGmUserCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gmcommand_2eproto() {
  delete Gm::default_instance_;
  delete Gm_reflection_;
  delete RequestExecGmCommandGmPmd_SC::default_instance_;
  delete RequestExecGmCommandGmPmd_SC_reflection_;
  delete RequestGameZoneErrorGmPmd_S::default_instance_;
  delete RequestGameZoneErrorGmPmd_S_reflection_;
  delete RequestHotRestartGmUserPmd_CS::default_instance_;
  delete RequestHotRestartGmUserPmd_CS_reflection_;
  delete RequesetScriptUpdateGmUserPmd_CS::default_instance_;
  delete RequesetScriptUpdateGmUserPmd_CS_reflection_;
  delete RequesetRefreshGatewaylistGmUserPmd_CS::default_instance_;
  delete RequesetRefreshGatewaylistGmUserPmd_CS_reflection_;
  delete RequestGenerateCodeGmUserPmd_C::default_instance_;
  delete RequestGenerateCodeGmUserPmd_C_reflection_;
  delete ReturnGenerateCodeGmUserPmd_S::default_instance_;
  delete ReturnGenerateCodeGmUserPmd_S_reflection_;
  delete RequestOpeartorCodeGmUserPmd_C::default_instance_;
  delete RequestOpeartorCodeGmUserPmd_C_reflection_;
  delete CodeInfo::default_instance_;
  delete CodeInfo_reflection_;
  delete ReturnOpreatorCodeGmUserPmd_S::default_instance_;
  delete ReturnOpreatorCodeGmUserPmd_S_reflection_;
  delete OrderInfo::default_instance_;
  delete OrderInfo_reflection_;
  delete GameOrderListGmUserPmd_CS::default_instance_;
  delete GameOrderListGmUserPmd_CS_reflection_;
  delete QueryPackageCodeGmUserPmd_CS::default_instance_;
  delete QueryPackageCodeGmUserPmd_CS_reflection_;
  delete RequestUsePackageCodeGmUserPmd_CS::default_instance_;
  delete RequestUsePackageCodeGmUserPmd_CS_reflection_;
  delete FeedbackData::default_instance_;
  delete FeedbackData_reflection_;
  delete FeedbackGmUserPmd_CS::default_instance_;
  delete FeedbackGmUserPmd_CS_reflection_;
  delete RequestFeedbackListGmUserPmd_C::default_instance_;
  delete RequestFeedbackListGmUserPmd_C_reflection_;
  delete RequestDealFeedbackGmUserPmd_CS::default_instance_;
  delete RequestDealFeedbackGmUserPmd_CS_reflection_;
  delete PointReportData::default_instance_;
  delete PointReportData_reflection_;
  delete RequestPointReportGmUserPmd_CS::default_instance_;
  delete RequestPointReportGmUserPmd_CS_reflection_;
  delete PointDetailData::default_instance_;
  delete PointDetailData_reflection_;
  delete RequestPointDetailGmUserPmd_CS::default_instance_;
  delete RequestPointDetailGmUserPmd_CS_reflection_;
  delete BettingDetailData::default_instance_;
  delete BettingDetailData_reflection_;
  delete RequestBettingDetailGmUserPmd_CS::default_instance_;
  delete RequestBettingDetailGmUserPmd_CS_reflection_;
  delete StockData::default_instance_;
  delete StockData_reflection_;
  delete RequestStockInfoGmUserPmd_CS::default_instance_;
  delete RequestStockInfoGmUserPmd_CS_reflection_;
  delete RequestOnlineUserInfoGmUserPmd_CS::default_instance_;
  delete RequestOnlineUserInfoGmUserPmd_CS_reflection_;
  delete RedPacketsInfo::default_instance_;
  delete RedPacketsInfo_reflection_;
  delete RequestRedPacketsGmUserPmd_CS::default_instance_;
  delete RequestRedPacketsGmUserPmd_CS_reflection_;
  delete SubgameList::default_instance_;
  delete SubgameList_reflection_;
  delete RequestedSubgameListGmUserPmd_CS::default_instance_;
  delete RequestedSubgameListGmUserPmd_CS_reflection_;
  delete WinLoseInfo::default_instance_;
  delete WinLoseInfo_reflection_;
  delete RequestWinningListGmUserPmd_CS::default_instance_;
  delete RequestWinningListGmUserPmd_CS_reflection_;
  delete BlackWhitelistInfo::default_instance_;
  delete BlackWhitelistInfo_reflection_;
  delete AddBlackWhitelistGmUserPmd_CS::default_instance_;
  delete AddBlackWhitelistGmUserPmd_CS_reflection_;
  delete ModBlackWhitelistGmUserPmd_CS::default_instance_;
  delete ModBlackWhitelistGmUserPmd_CS_reflection_;
  delete DelBlackWhitelistGmUserPmd_CS::default_instance_;
  delete DelBlackWhitelistGmUserPmd_CS_reflection_;
  delete RequestBlackWhitelistGmUserPmd_CS::default_instance_;
  delete RequestBlackWhitelistGmUserPmd_CS_reflection_;
  delete GmMailInfo::default_instance_;
  delete GmMailInfo_reflection_;
  delete RequestSendMailGmUserPmd_CS::default_instance_;
  delete RequestSendMailGmUserPmd_CS_reflection_;
  delete LoginRecordData::default_instance_;
  delete LoginRecordData_reflection_;
  delete RequestLoginRecordGmUserPmd_CS::default_instance_;
  delete RequestLoginRecordGmUserPmd_CS_reflection_;
  delete ConsumeRecordData::default_instance_;
  delete ConsumeRecordData_reflection_;
  delete RequestConsumeRecordGmUserPmd_CS::default_instance_;
  delete RequestConsumeRecordGmUserPmd_CS_reflection_;
  delete ActionRecordData::default_instance_;
  delete ActionRecordData_reflection_;
  delete RequestActionRecordGmUserPmd_CS::default_instance_;
  delete RequestActionRecordGmUserPmd_CS_reflection_;
  delete StrengthenRecordData::default_instance_;
  delete StrengthenRecordData_reflection_;
  delete RequestStrengthenRecordGmUserPmd_CS::default_instance_;
  delete RequestStrengthenRecordGmUserPmd_CS_reflection_;
  delete MailRecordData::default_instance_;
  delete MailRecordData_reflection_;
  delete RequestMailRecordGmUserPmd_CS::default_instance_;
  delete RequestMailRecordGmUserPmd_CS_reflection_;
  delete RankRecordData::default_instance_;
  delete RankRecordData_reflection_;
  delete RequestRankRecordGmUserPmd_CS::default_instance_;
  delete RequestRankRecordGmUserPmd_CS_reflection_;
  delete BossRecordData::default_instance_;
  delete BossRecordData_reflection_;
  delete RequestBossRecordGmUserPmd_CS::default_instance_;
  delete RequestBossRecordGmUserPmd_CS_reflection_;
  delete RenameRecordData::default_instance_;
  delete RenameRecordData_reflection_;
  delete RequestRenameRecordGmUserPmd_CS::default_instance_;
  delete RequestRenameRecordGmUserPmd_CS_reflection_;
  delete StartUpGameRequestGmPmd_C::default_instance_;
  delete StartUpGameRequestGmPmd_C_reflection_;
  delete StartUpGameReturnGmPmd_S::default_instance_;
  delete StartUpGameReturnGmPmd_S_reflection_;
  delete SurportGameZoneRequestGmPmd_C::default_instance_;
  delete SurportGameZoneRequestGmPmd_C_reflection_;
  delete SurportGameZoneReturnGmPmd_S::default_instance_;
  delete SurportGameZoneReturnGmPmd_S_reflection_;
  delete ReconnectKickoutGmSmd_S::default_instance_;
  delete ReconnectKickoutGmSmd_S_reflection_;
  delete GmUserInfo::default_instance_;
  delete GmUserInfo_reflection_;
  delete RequestLoginGmUserPmd_C::default_instance_;
  delete RequestLoginGmUserPmd_C_reflection_;
  delete ReturnLoginGmUserPmd_S::default_instance_;
  delete ReturnLoginGmUserPmd_S_reflection_;
  delete SetPasswordGmUserPmd_CS::default_instance_;
  delete SetPasswordGmUserPmd_CS_reflection_;
  delete AddNewGmUserPmd_CS::default_instance_;
  delete AddNewGmUserPmd_CS_reflection_;
  delete GmAccountListGmUserPmd_CS::default_instance_;
  delete GmAccountListGmUserPmd_CS_reflection_;
  delete RequestDelGmUserPmd_CS::default_instance_;
  delete RequestDelGmUserPmd_CS_reflection_;
  delete RequestModifyPriGmUserPmd_CS::default_instance_;
  delete RequestModifyPriGmUserPmd_CS_reflection_;
  delete SelectGamezoneGmUserPmd_SC::default_instance_;
  delete SelectGamezoneGmUserPmd_SC_reflection_;
  delete BroadcastInfo::default_instance_;
  delete BroadcastInfo_reflection_;
  delete BroadcastNewGmUserPmd_C::default_instance_;
  delete BroadcastNewGmUserPmd_C_reflection_;
  delete ReturnBroadcastNewGmUserPmd_S::default_instance_;
  delete ReturnBroadcastNewGmUserPmd_S_reflection_;
  delete BroadcastDeleteGmUserPmd_C::default_instance_;
  delete BroadcastDeleteGmUserPmd_C_reflection_;
  delete ReturnBroadcastDeleteGmUserPmd_S::default_instance_;
  delete ReturnBroadcastDeleteGmUserPmd_S_reflection_;
  delete RequestBroadcastListGmUserPmd_C::default_instance_;
  delete RequestBroadcastListGmUserPmd_C_reflection_;
  delete ReturnBroadcastListGmUserPmd_S::default_instance_;
  delete ReturnBroadcastListGmUserPmd_S_reflection_;
  delete PunishUserInfo::default_instance_;
  delete PunishUserInfo_reflection_;
  delete PunishUserGmUserPmd_C::default_instance_;
  delete PunishUserGmUserPmd_C_reflection_;
  delete ReturnPunishUserGmUserPmd_S::default_instance_;
  delete ReturnPunishUserGmUserPmd_S_reflection_;
  delete DeletePunishUserGmUserPmd_C::default_instance_;
  delete DeletePunishUserGmUserPmd_C_reflection_;
  delete ReturnDeletePunishUserGmUserPmd_S::default_instance_;
  delete ReturnDeletePunishUserGmUserPmd_S_reflection_;
  delete RequestPunishListGmUserPmd_C::default_instance_;
  delete RequestPunishListGmUserPmd_C_reflection_;
  delete ReturnPunishListGmUserPmd_S::default_instance_;
  delete ReturnPunishListGmUserPmd_S_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete ItemTypeInfo::default_instance_;
  delete ItemTypeInfo_reflection_;
  delete RequestItemTypeInfoGmUserPmd_CS::default_instance_;
  delete RequestItemTypeInfoGmUserPmd_CS_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete RequestUserInfoGmUserPmd_C::default_instance_;
  delete RequestUserInfoGmUserPmd_C_reflection_;
  delete ReturnUserInfoGmUserPmd_S::default_instance_;
  delete ReturnUserInfoGmUserPmd_S_reflection_;
  delete RequestUserPackageGmUserPmd_C::default_instance_;
  delete RequestUserPackageGmUserPmd_C_reflection_;
  delete ReturnUserPackageGmUserPmd_S::default_instance_;
  delete ReturnUserPackageGmUserPmd_S_reflection_;
  delete RequestModifyUserInfoGmUserPmd_C::default_instance_;
  delete RequestModifyUserInfoGmUserPmd_C_reflection_;
  delete ReturnModifyUserInfoGmUserPmd_S::default_instance_;
  delete ReturnModifyUserInfoGmUserPmd_S_reflection_;
  delete RequestUserRecordGmUserPmd_C::default_instance_;
  delete RequestUserRecordGmUserPmd_C_reflection_;
  delete RecordInfo::default_instance_;
  delete RecordInfo_reflection_;
  delete ReturnUserRecordGmUserPmd_S::default_instance_;
  delete ReturnUserRecordGmUserPmd_S_reflection_;
  delete QuestionBaseData::default_instance_;
  delete QuestionBaseData_reflection_;
  delete ForbidAccountData::default_instance_;
  delete ForbidAccountData_reflection_;
  delete stRequestLoginGmUserCmd::default_instance_;
  delete stRequestLoginGmUserCmd_reflection_;
  delete stReturnLoginGmUserCmd::default_instance_;
  delete stReturnLoginGmUserCmd_reflection_;
  delete stConfigGmUserCmd::default_instance_;
  delete stConfigGmUserCmd_reflection_;
  delete stSetPasswordGmUserCmd::default_instance_;
  delete stSetPasswordGmUserCmd_reflection_;
  delete stReturnPasswordGmUserCmd::default_instance_;
  delete stReturnPasswordGmUserCmd_reflection_;
  delete stAddNewGmUserCmd::default_instance_;
  delete stAddNewGmUserCmd_reflection_;
  delete stReturnAddNewGmUserCmd::default_instance_;
  delete stReturnAddNewGmUserCmd_reflection_;
  delete stQueryListGmUserCmd::default_instance_;
  delete stQueryListGmUserCmd_reflection_;
  delete stReturnListGmUserCmd::default_instance_;
  delete stReturnListGmUserCmd_reflection_;
  delete stReturnListGmUserCmd_Data::default_instance_;
  delete stReturnListGmUserCmd_Data_reflection_;
  delete stRequestZoneConfigGmUserCmd::default_instance_;
  delete stRequestZoneConfigGmUserCmd_reflection_;
  delete stReturnZoneDicCountryGmUserCmd::default_instance_;
  delete stReturnZoneDicCountryGmUserCmd_reflection_;
  delete stReturnZoneDicCountryGmUserCmd_Data::default_instance_;
  delete stReturnZoneDicCountryGmUserCmd_Data_reflection_;
  delete stReturnZoneDicMapGmUserCmd::default_instance_;
  delete stReturnZoneDicMapGmUserCmd_reflection_;
  delete stReturnZoneDicMapGmUserCmd_Data::default_instance_;
  delete stReturnZoneDicMapGmUserCmd_Data_reflection_;
  delete stForwardToAllGmUserCmd::default_instance_;
  delete stForwardToAllGmUserCmd_reflection_;
  delete stForwardToOnlyGmUserCmd::default_instance_;
  delete stForwardToOnlyGmUserCmd_reflection_;
  delete stBroadcastNewGmUserCmd::default_instance_;
  delete stBroadcastNewGmUserCmd_reflection_;
  delete stBroadcastDeleteGmUserCmd::default_instance_;
  delete stBroadcastDeleteGmUserCmd_reflection_;
  delete stBroadcastRequestGmUserCmd::default_instance_;
  delete stBroadcastRequestGmUserCmd_reflection_;
  delete stRequestTimeGmUserCmd::default_instance_;
  delete stRequestTimeGmUserCmd_reflection_;
  delete stReturnTimeGmUserCmd::default_instance_;
  delete stReturnTimeGmUserCmd_reflection_;
  delete stServerShutdownGmUserCmd::default_instance_;
  delete stServerShutdownGmUserCmd_reflection_;
  delete stRequestZoneDicGmUserCmd::default_instance_;
  delete stRequestZoneDicGmUserCmd_reflection_;
  delete stReturnZoneDicGmUserCmd::default_instance_;
  delete stReturnZoneDicGmUserCmd_reflection_;
  delete stReturnZoneDicGmUserCmd_Data::default_instance_;
  delete stReturnZoneDicGmUserCmd_Data_reflection_;
  delete stAddChatConfigGmUserCmd::default_instance_;
  delete stAddChatConfigGmUserCmd_reflection_;
  delete stCancelChatConfigGmUserCmd::default_instance_;
  delete stCancelChatConfigGmUserCmd_reflection_;
  delete stRequestChatTypesGmUserCmd::default_instance_;
  delete stRequestChatTypesGmUserCmd_reflection_;
  delete stReturnChatTypesGmUserCmd::default_instance_;
  delete stReturnChatTypesGmUserCmd_reflection_;
  delete stReturnChatTypesGmUserCmd_Data::default_instance_;
  delete stReturnChatTypesGmUserCmd_Data_reflection_;
  delete stServerStartupGmUserCmd::default_instance_;
  delete stServerStartupGmUserCmd_reflection_;
  delete stNotifyShutdownGmUserCmd::default_instance_;
  delete stNotifyShutdownGmUserCmd_reflection_;
  delete stCancelShutdownGmUserCmd::default_instance_;
  delete stCancelShutdownGmUserCmd_reflection_;
  delete stGmServerMessageGmUserCmd::default_instance_;
  delete stGmServerMessageGmUserCmd_reflection_;
  delete stRequestDelGmUserGmUserCmd::default_instance_;
  delete stRequestDelGmUserGmUserCmd_reflection_;
  delete stRequestResetGmUserPasswordGmUserCmd::default_instance_;
  delete stRequestResetGmUserPasswordGmUserCmd_reflection_;
  delete stQequestShutDownGmUserCmd::default_instance_;
  delete stQequestShutDownGmUserCmd_reflection_;
  delete stRequestForbidAccountGmUserCmd::default_instance_;
  delete stRequestForbidAccountGmUserCmd_reflection_;
  delete stQueryForbidAccountGmUserCmd::default_instance_;
  delete stQueryForbidAccountGmUserCmd_reflection_;
  delete stReturnForbidAccountListGmUserCmd::default_instance_;
  delete stReturnForbidAccountListGmUserCmd_reflection_;
  delete stRequestUnForbidAccountGmUserCmd::default_instance_;
  delete stRequestUnForbidAccountGmUserCmd_reflection_;
  delete stBroadcastDeleteZoneGmUserCmd::default_instance_;
  delete stBroadcastDeleteZoneGmUserCmd_reflection_;
  delete stRequestNameAccountGmUserCmd::default_instance_;
  delete stRequestNameAccountGmUserCmd_reflection_;
  delete stReturnNameAccountGmUserCmd::default_instance_;
  delete stReturnNameAccountGmUserCmd_reflection_;
  delete stRequestDBConnectionConfigGmUserCmd::default_instance_;
  delete stRequestDBConnectionConfigGmUserCmd_reflection_;
  delete stReturnDBConnectionConfigGmUserCmd::default_instance_;
  delete stReturnDBConnectionConfigGmUserCmd_reflection_;
  delete stQueryNameExistGmUserCmd::default_instance_;
  delete stQueryNameExistGmUserCmd_reflection_;
  delete stForceInsertNameGmUserCmd::default_instance_;
  delete stForceInsertNameGmUserCmd_reflection_;
  delete stForceModifyNameGmUserCmd::default_instance_;
  delete stForceModifyNameGmUserCmd_reflection_;
  delete stCheckOnlineGmUserCmd::default_instance_;
  delete stCheckOnlineGmUserCmd_reflection_;
  delete stReturnCheckOnlineGmUserCmd::default_instance_;
  delete stReturnCheckOnlineGmUserCmd_reflection_;
  delete stPunishUserGmUserCmd::default_instance_;
  delete stPunishUserGmUserCmd_reflection_;
  delete stRequestUserPosUserGmUserCmd::default_instance_;
  delete stRequestUserPosUserGmUserCmd_reflection_;
  delete stReturnUserPosUserGmUserCmd::default_instance_;
  delete stReturnUserPosUserGmUserCmd_reflection_;
  delete stReturnUserPosUserGmUserCmd_Data::default_instance_;
  delete stReturnUserPosUserGmUserCmd_Data_reflection_;
  delete stEndUserPosUserGmUserCmd::default_instance_;
  delete stEndUserPosUserGmUserCmd_reflection_;
  delete stBroadcastReallySendGmUserCmd::default_instance_;
  delete stBroadcastReallySendGmUserCmd_reflection_;
  delete stDBQueryGmUserCmd::default_instance_;
  delete stDBQueryGmUserCmd_reflection_;
  delete stDBReturnDataGmUserCmd::default_instance_;
  delete stDBReturnDataGmUserCmd_reflection_;
  delete stDBReturnEndGmUserCmd::default_instance_;
  delete stDBReturnEndGmUserCmd_reflection_;
  delete stFullForbidAccountLogDataGmUserCmd::default_instance_;
  delete stFullForbidAccountLogDataGmUserCmd_reflection_;
  delete stFullGameGmCmdLogDataGmUserCmd::default_instance_;
  delete stFullGameGmCmdLogDataGmUserCmd_reflection_;
  delete stRequestAddQuestionGmUserCmd::default_instance_;
  delete stRequestAddQuestionGmUserCmd_reflection_;
  delete stReturnQuestionGmUserCmd::default_instance_;
  delete stReturnQuestionGmUserCmd_reflection_;
  delete stSequenceQuestionGmUserCmd::default_instance_;
  delete stSequenceQuestionGmUserCmd_reflection_;
  delete stDeleteQuestionGmUserCmd::default_instance_;
  delete stDeleteQuestionGmUserCmd_reflection_;
  delete stRequestQuestionGmUserCmd::default_instance_;
  delete stRequestQuestionGmUserCmd_reflection_;
  delete stRequestSeqQuestionGmUserCmd::default_instance_;
  delete stRequestSeqQuestionGmUserCmd_reflection_;
  delete stReturnNoneQuestionGmUserCmd::default_instance_;
  delete stReturnNoneQuestionGmUserCmd_reflection_;
  delete stUserCmdForwardGmUserCmd::default_instance_;
  delete stUserCmdForwardGmUserCmd_reflection_;
  delete stProcessQuestionGmUserCmd::default_instance_;
  delete stProcessQuestionGmUserCmd_reflection_;
  delete stGMToolBeginQuestionGmUserCmd::default_instance_;
  delete stGMToolBeginQuestionGmUserCmd_reflection_;
  delete stGMToolEndQuestionGmUserCmd::default_instance_;
  delete stGMToolEndQuestionGmUserCmd_reflection_;
  delete stDisableGMChatInputGmUserCmd::default_instance_;
  delete stDisableGMChatInputGmUserCmd_reflection_;
  delete stDeleteQuestionByGmUserCmd::default_instance_;
  delete stDeleteQuestionByGmUserCmd_reflection_;
  delete stQuestionOverGmUserCmd::default_instance_;
  delete stQuestionOverGmUserCmd_reflection_;
  delete stQueryQuestionLimitGmUserCmd::default_instance_;
  delete stQueryQuestionLimitGmUserCmd_reflection_;
  delete stReturnQuestionLimitGmUserCmd::default_instance_;
  delete stReturnQuestionLimitGmUserCmd_reflection_;
  delete stResetQuestionLimitGmUserCmd::default_instance_;
  delete stResetQuestionLimitGmUserCmd_reflection_;
  delete stBroadcastToWorldGmUserCmd::default_instance_;
  delete stBroadcastToWorldGmUserCmd_reflection_;
  delete stSetActivityNoteGmUserCmd::default_instance_;
  delete stSetActivityNoteGmUserCmd_reflection_;
  delete stRequestRefreshUserQuestionGmUserCmd::default_instance_;
  delete stRequestRefreshUserQuestionGmUserCmd_reflection_;
  delete stRequestSetUserGoldInGmUserCmd::default_instance_;
  delete stRequestSetUserGoldInGmUserCmd_reflection_;
  delete stSetPrivilegesGmUserCmd::default_instance_;
  delete stSetPrivilegesGmUserCmd_reflection_;
  delete stRequestSaveChatGmUserCmd::default_instance_;
  delete stRequestSaveChatGmUserCmd_reflection_;
  delete stGameClientMessageBoxGmUserCmd::default_instance_;
  delete stGameClientMessageBoxGmUserCmd_reflection_;
  delete stGameClientChatMessageGMUserCmd::default_instance_;
  delete stGameClientChatMessageGMUserCmd_reflection_;
  delete stRequestGameClientMessageConfigGmUserCmd::default_instance_;
  delete stRequestGameClientMessageConfigGmUserCmd_reflection_;
  delete stReturnGameClientMessageConfigGmUserCmd::default_instance_;
  delete stReturnGameClientMessageConfigGmUserCmd_reflection_;
  delete stPlayerSatisfactionGmUserCmd::default_instance_;
  delete stPlayerSatisfactionGmUserCmd_reflection_;
  delete stRequestMyQuestionGmUserCmd::default_instance_;
  delete stRequestMyQuestionGmUserCmd_reflection_;
  delete stRequestQuestionSubmitableGmUserCmd::default_instance_;
  delete stRequestQuestionSubmitableGmUserCmd_reflection_;
  delete stVerifyOnlineQaGmUserCmd::default_instance_;
  delete stVerifyOnlineQaGmUserCmd_reflection_;
  delete stNewGameClientMessageBoxGmUserCmd::default_instance_;
  delete stNewGameClientMessageBoxGmUserCmd_reflection_;
  delete stRequestPreProcessQuestionGmUserCmd::default_instance_;
  delete stRequestPreProcessQuestionGmUserCmd_reflection_;
  delete stReturnPreProcessQuestionGmUserCmd::default_instance_;
  delete stReturnPreProcessQuestionGmUserCmd_reflection_;
  delete stReturnNowPreProcessQusetGmUserCmd::default_instance_;
  delete stReturnNowPreProcessQusetGmUserCmd_reflection_;
  delete stDeleteProcessedQuestionGmUserCmd::default_instance_;
  delete stDeleteProcessedQuestionGmUserCmd_reflection_;
  delete stRequestOneQuestionGmUserCmd::default_instance_;
  delete stRequestOneQuestionGmUserCmd_reflection_;
  delete stReturnOneQuestionGmUserCmd::default_instance_;
  delete stReturnOneQuestionGmUserCmd_reflection_;
  delete stRequestResetGmWorkStateGmUserCmd::default_instance_;
  delete stRequestResetGmWorkStateGmUserCmd_reflection_;
  delete stReturnResetGmWorkStateGmUserCmd::default_instance_;
  delete stReturnResetGmWorkStateGmUserCmd_reflection_;
  delete stGmCommandUserCmd::default_instance_;
  delete stGmCommandUserCmd_reflection_;
  delete stGmCommandToSceneUserCmd::default_instance_;
  delete stGmCommandToSceneUserCmd_reflection_;
  delete stForceChangeSexGmUserCmd::default_instance_;
  delete stForceChangeSexGmUserCmd_reflection_;
  delete stRequestMobileInfoGmUserCmd::default_instance_;
  delete stRequestMobileInfoGmUserCmd_reflection_;
}

void protobuf_AddDesc_gmcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Pmd::protobuf_AddDesc_pmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017gmcommand.proto\022\003Pmd\032\tpmd.proto\"\267-\n\002Gm"
    "\"\260-\n\005Param\022\035\n\031StartUpGameRequestGmPmd_C\020"
    "\001\022\034\n\030StartUpGameReturnGmPmd_S\020\002\022!\n\035Surpo"
    "rtGameZoneRequestGmPmd_C\020\003\022 \n\034SurportGam"
    "eZoneReturnGmPmd_S\020\004\022\033\n\027ReconnectKickout"
    "GmSmd_S\020\005\022\033\n\027RequestLoginGmUserPmd_C\020\006\022\032"
    "\n\026ReturnLoginGmUserPmd_S\020\007\022\033\n\027SetPasswor"
    "dGmUserPmd_CS\020\010\022\026\n\022AddNewGmUserPmd_CS\020\t\022"
    "\032\n\026RequestDelGmUserPmd_CS\020\n\022 \n\034RequestMo"
    "difyPriGmUserPmd_CS\020\013\022\033\n\027BroadcastNewGmU"
    "serPmd_C\020\022\022!\n\035ReturnBroadcastNewGmUserPm"
    "d_S\020\023\022\036\n\032BroadcastDeleteGmUserPmd_C\020\024\022$\n"
    " ReturnBroadcastDeleteGmUserPmd_S\020\025\022#\n\037R"
    "equestBroadcastListGmUserPmd_C\020\026\022\"\n\036Retu"
    "rnBroadcastListGmUserPmd_S\020\027\022\031\n\025PunishUs"
    "erGmUserPmd_C\020\030\022\037\n\033ReturnPunishUserGmUse"
    "rPmd_S\020\031\022\037\n\033DeletePunishUserGmUserPmd_C\020"
    "\032\022%\n!ReturnDeletePunishUserGmUserPmd_S\020\033"
    "\022 \n\034RequestPunishListGmUserPmd_C\020\034\022\037\n\033Re"
    "turnPunishListGmUserPmd_S\020\035\022#\n\037RequestIt"
    "emTypeInfoGmUserPmd_CS\020\036\022\036\n\032RequestUserI"
    "nfoGmUserPmd_C\020#\022\035\n\031ReturnUserInfoGmUser"
    "Pmd_S\020$\022$\n RequestModifyUserInfoGmUserPm"
    "d_C\020%\022#\n\037ReturnModifyUserInfoGmUserPmd_S"
    "\020&\022!\n\035RequestUserPackageGmUserPmd_C\020\'\022 \n"
    "\034ReturnUserPackageGmUserPmd_S\020(\022 \n\034Reque"
    "stUserRecordGmUserPmd_C\020)\022\037\n\033ReturnUserR"
    "ecordGmUserPmd_S\020*\022 \n\034RequestExecGmComma"
    "ndGmPmd_SC\020+\022\037\n\033RequestGameZoneErrorGmPm"
    "d_S\020,\022!\n\035RequestHotRestartGmUserPmd_CS\0202"
    "\022$\n RequesetScriptUpdateGmUserPmd_CS\0203\022*"
    "\n&RequesetRefreshGatewaylistGmUserPmd_CS"
    "\0204\022\"\n\036RequestGenerateCodeGmUserPmd_C\0207\022!"
    "\n\035ReturnGenerateCodeGmUserPmd_S\0208\022\"\n\036Req"
    "uestOpeartorCodeGmUserPmd_C\0209\022!\n\035ReturnO"
    "preatorCodeGmUserPmd_S\020:\022\035\n\031GameOrderLis"
    "tGmUserPmd_CS\020;\022 \n\034QueryPackageCodeGmUse"
    "rPmd_CS\020<\022%\n!RequestUsePackageCodeGmUser"
    "Pmd_CS\020=\022\030\n\024FeedbackGmUserPmd_CS\020>\022\"\n\036Re"
    "questFeedbackListGmUserPmd_C\020\?\022\"\n\036Reques"
    "tPointReportGmUserPmd_CS\020@\022\"\n\036RequestPoi"
    "ntDetailGmUserPmd_CS\020A\022$\n RequestBetting"
    "DetailGmUserPmd_CS\020B\022 \n\034RequestStockInfo"
    "GmUserPmd_CS\020C\022!\n\035RequestRedPacketsGmUse"
    "rPmd_CS\020E\022$\n RequestedSubgameListGmUserP"
    "md_CS\020F\022%\n!RequestOnlineUserInfoGmUserPm"
    "d_CS\020G\022\"\n\036RequestWinningListGmUserPmd_CS"
    "\020H\022#\n\037RequestDealFeedbackGmUserPmd_CS\020I\022"
    "!\n\035AddBlackWhitelistGmUserPmd_CS\020J\022!\n\035Mo"
    "dBlackWhitelistGmUserPmd_CS\020K\022!\n\035DelBlac"
    "kWhitelistGmUserPmd_CS\020L\022%\n!RequestBlack"
    "WhitelistGmUserPmd_CS\020M\022\037\n\033RequestSendMa"
    "ilGmUserPmd_CS\020N\022\"\n\036RequestLoginRecordGm"
    "UserPmd_CS\020O\022$\n RequestConsumeRecordGmUs"
    "erPmd_CS\020P\022#\n\037RequestActionRecordGmUserP"
    "md_CS\020Q\022\'\n#RequestStrengthenRecordGmUser"
    "Pmd_CS\020R\022!\n\035RequestMailRecordGmUserPmd_C"
    "S\020S\022!\n\035RequestRankRecordGmUserPmd_CS\020T\022!"
    "\n\035RequestBossRecordGmUserPmd_CS\020U\022#\n\037Req"
    "uestRenameRecordGmUserPmd_CS\020V\022\033\n\027stRequ"
    "estLoginGmUserCmd\020i\022\032\n\026stReturnLoginGmUs"
    "erCmd\020j\022\025\n\021stConfigGmUserCmd\020k\022\032\n\026stSetP"
    "asswordGmUserCmd\020l\022\035\n\031stReturnPasswordGm"
    "UserCmd\020m\022\025\n\021stAddNewGmUserCmd\020n\022\033\n\027stRe"
    "turnAddNewGmUserCmd\020o\022\030\n\024stQueryListGmUs"
    "erCmd\020p\022\031\n\025stReturnListGmUserCmd\020q\022 \n\034st"
    "RequestZoneConfigGmUserCmd\020r\022#\n\037stReturn"
    "ZoneDicCountryGmUserCmd\020s\022\037\n\033stReturnZon"
    "eDicMapGmUserCmd\020t\022\033\n\027stForwardToAllGmUs"
    "erCmd\020u\022\034\n\030stForwardToOnlyGmUserCmd\020v\022\033\n"
    "\027stBroadcastNewGmUserCmd\020w\022\036\n\032stBroadcas"
    "tDeleteGmUserCmd\020x\022\037\n\033stBroadcastRequest"
    "GmUserCmd\020y\022\032\n\026stRequestTimeGmUserCmd\020z\022"
    "\031\n\025stReturnTimeGmUserCmd\020{\022\035\n\031stServerSh"
    "utdownGmUserCmd\020|\022\035\n\031stRequestZoneDicGmU"
    "serCmd\020}\022\034\n\030stReturnZoneDicGmUserCmd\020~\022\034"
    "\n\030stAddChatConfigGmUserCmd\020\177\022 \n\033stCancel"
    "ChatConfigGmUserCmd\020\200\001\022 \n\033stRequestChatT"
    "ypesGmUserCmd\020\201\001\022\037\n\032stReturnChatTypesGmU"
    "serCmd\020\202\001\022\035\n\030stServerStartupGmUserCmd\020\203\001"
    "\022\036\n\031stNotifyShutdownGmUserCmd\020\204\001\022\036\n\031stCa"
    "ncelShutdownGmUserCmd\020\205\001\022\037\n\032stGmServerMe"
    "ssageGmUserCmd\020\206\001\022 \n\033stRequestDelGmUserG"
    "mUserCmd\020\207\001\022*\n%stRequestResetGmUserPassw"
    "ordGmUserCmd\020\210\001\022\037\n\032stQequestShutDownGmUs"
    "erCmd\020\211\001\022$\n\037stRequestForbidAccountGmUser"
    "Cmd\020\212\001\022\"\n\035stQueryForbidAccountGmUserCmd\020"
    "\213\001\022\'\n\"stReturnForbidAccountListGmUserCmd"
    "\020\214\001\022&\n!stRequestUnForbidAccountGmUserCmd"
    "\020\215\001\022#\n\036stBroadcastDeleteZoneGmUserCmd\020\216\001"
    "\022\"\n\035stRequestNameAccountGmUserCmd\020\217\001\022!\n\034"
    "stReturnNameAccountGmUserCmd\020\220\001\022)\n$stReq"
    "uestDBConnectionConfigGmUserCmd\020\221\001\022(\n#st"
    "ReturnDBConnectionConfigGmUserCmd\020\222\001\022\036\n\031"
    "stQueryNameExistGmUserCmd\020\223\001\022\037\n\032stForceI"
    "nsertNameGmUserCmd\020\224\001\022\037\n\032stForceModifyNa"
    "meGmUserCmd\020\225\001\022\033\n\026stCheckOnlineGmUserCmd"
    "\020\226\001\022!\n\034stReturnCheckOnlineGmUserCmd\020\227\001\022\032"
    "\n\025stPunishUserGmUserCmd\020\230\001\022\"\n\035stRequestU"
    "serPosUserGmUserCmd\020\231\001\022!\n\034stReturnUserPo"
    "sUserGmUserCmd\020\232\001\022\036\n\031stEndUserPosUserGmU"
    "serCmd\020\233\001\022#\n\036stBroadcastReallySendGmUser"
    "Cmd\020\234\001\022\027\n\022stDBQueryGmUserCmd\020\235\001\022\034\n\027stDBR"
    "eturnDataGmUserCmd\020\236\001\022\033\n\026stDBReturnEndGm"
    "UserCmd\020\237\001\022(\n#stFullForbidAccountLogData"
    "GmUserCmd\020\240\001\022$\n\037stFullGameGmCmdLogDataGm"
    "UserCmd\020\241\001\022\"\n\035stRequestAddQuestionGmUser"
    "Cmd\020\242\001\022\036\n\031stReturnQuestionGmUserCmd\020\243\001\022 "
    "\n\033stSequenceQuestionGmUserCmd\020\244\001\022\036\n\031stDe"
    "leteQuestionGmUserCmd\020\245\001\022\037\n\032stRequestQue"
    "stionGmUserCmd\020\246\001\022\"\n\035stRequestSeqQuestio"
    "nGmUserCmd\020\247\001\022\"\n\035stReturnNoneQuestionGmU"
    "serCmd\020\250\001\022\036\n\031stUserCmdForwardGmUserCmd\020\251"
    "\001\022\037\n\032stProcessQuestionGmUserCmd\020\252\001\022#\n\036st"
    "GMToolBeginQuestionGmUserCmd\020\253\001\022!\n\034stGMT"
    "oolEndQuestionGmUserCmd\020\254\001\022\"\n\035stDisableG"
    "MChatInputGmUserCmd\020\255\001\022\034\n\027stQuestionOver"
    "GmUserCmd\020\256\001\022\"\n\035stQueryQuestionLimitGmUs"
    "erCmd\020\257\001\022#\n\036stReturnQuestionLimitGmUserC"
    "md\020\260\001\022\"\n\035stResetQuestionLimitGmUserCmd\020\261"
    "\001\022 \n\033stBroadcastToWorldGmUserCmd\020\262\001\022\037\n\032s"
    "tSetActivityNoteGmUserCmd\020\263\001\022*\n%stReques"
    "tRefreshUserQuestionGmUserCmd\020\264\001\022$\n\037stRe"
    "questSetUserGoldInGmUserCmd\020\265\001\022\035\n\030stSetP"
    "rivilegesGmUserCmd\020\266\001\022\037\n\032stRequestSaveCh"
    "atGmUserCmd\020\267\001\022$\n\037stGameClientMessageBox"
    "GmUserCmd\020\270\001\022%\n stGameClientChatMessageG"
    "MUserCmd\020\271\001\022.\n)stRequestGameClientMessag"
    "eConfigGmUserCmd\020\272\001\022-\n(stReturnGameClien"
    "tMessageConfigGmUserCmd\020\273\001\022\"\n\035stPlayerSa"
    "tisfactionGmUserCmd\020\274\001\022!\n\034stRequestMyQue"
    "stionGmUserCmd\020\275\001\022)\n$stRequestQuestionSu"
    "bmitableGmUserCmd\020\276\001\022\036\n\031stVerifyOnlineQa"
    "GmUserCmd\020\277\001\022)\n$stRequestPreProcessQuest"
    "ionGmUserCmd\020\300\001\022(\n#stReturnPreProcessQue"
    "stionGmUserCmd\020\301\001\022(\n#stReturnNowPreProce"
    "ssQusetGmUserCmd\020\302\001\022\'\n\"stDeleteProcessed"
    "QuestionGmUserCmd\020\303\001\022\"\n\035stRequestOneQues"
    "tionGmUserCmd\020\304\001\022!\n\034stReturnOneQuestionG"
    "mUserCmd\020\305\001\022\'\n\"stRequestResetGmWorkState"
    "GmUserCmd\020\306\001\022&\n!stReturnResetGmWorkState"
    "GmUserCmd\020\307\001\022\027\n\022stGmCommandUserCmd\020\310\001\022\036\n"
    "\031stGmCommandToSceneUserCmd\020\311\001\022\036\n\031stForce"
    "ChangeSexGmUserCmd\020\312\001\022!\n\034stRequestMobile"
    "InfoGmUserCmd\020\313\001\022 \n\033stDeleteQuestionByGm"
    "UserCmd\020\314\001\022\'\n\"stNewGameClientMessageBoxG"
    "mUserCmd\020\315\001\"Y\n\034RequestExecGmCommandGmPmd"
    "_SC\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\014\n\004g"
    "mid\030\003 \002(\r\022\013\n\003msg\030\004 \002(\t\"M\n\033RequestGameZon"
    "eErrorGmPmd_S\022\017\n\007retcode\030\001 \002(\r\022\017\n\007retdes"
    "c\030\002 \001(\t\022\014\n\004gmid\030\003 \002(\r\"Z\n\035RequestHotResta"
    "rtGmUserPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid"
    "\030\002 \002(\r\022\014\n\004gmid\030\003 \002(\r\022\013\n\003ret\030\004 \001(\r\"]\n Req"
    "uesetScriptUpdateGmUserPmd_CS\022\016\n\006gameid\030"
    "\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\014\n\004gmid\030\003 \002(\r\022\013\n\003r"
    "et\030\004 \001(\r\"c\n&RequesetRefreshGatewaylistGm"
    "UserPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002"
    "(\r\022\014\n\004gmid\030\003 \002(\r\022\013\n\003ret\030\004 \001(\r\"\217\001\n\036Reques"
    "tGenerateCodeGmUserPmd_C\022\016\n\006gameid\030\001 \001(\r"
    "\022\016\n\006zoneid\030\002 \001(\r\022\014\n\004code\030\003 \001(\t\022\017\n\007codenu"
    "m\030\004 \001(\r\022\020\n\010codetype\030\005 \002(\r\022\016\n\006charid\030\006 \001("
    "\004\022\014\n\004gmid\030\007 \001(\r\"`\n\035ReturnGenerateCodeGmU"
    "serPmd_S\022\017\n\007retcode\030\001 \001(\r\022\017\n\007retdesc\030\002 \001"
    "(\t\022\017\n\007codenum\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\"N\n\036Req"
    "uestOpeartorCodeGmUserPmd_C\022\016\n\006gameid\030\001 "
    "\002(\r\022\014\n\004code\030\002 \002(\t\022\016\n\006optype\030\003 \002(\r\"\231\001\n\010Co"
    "deInfo\022\n\n\002id\030\001 \001(\004\022\016\n\006gameid\030\002 \001(\r\022\016\n\006zo"
    "neid\030\003 \001(\r\022\016\n\006charid\030\004 \001(\004\022\020\n\010codetype\030\005"
    " \001(\r\022\014\n\004code\030\006 \001(\t\022\022\n\ncreatetime\030\007 \001(\r\022\017"
    "\n\007endtime\030\010 \001(\r\022\014\n\004flag\030\t \001(\r\"^\n\035ReturnO"
    "preatorCodeGmUserPmd_S\022\017\n\007retcode\030\001 \002(\r\022"
    "\017\n\007retdesc\030\002 \001(\t\022\033\n\004data\030\003 \001(\0132\r.Pmd.Cod"
    "eInfo\"m\n\tOrderInfo\022\n\n\002id\030\001 \001(\004\022\016\n\006zoneid"
    "\030\002 \001(\r\022\016\n\006charid\030\003 \001(\004\022\021\n\tgameorder\030\004 \001("
    "\t\022\r\n\005money\030\005 \001(\002\022\022\n\ncreatetime\030\006 \001(\004\"\275\001\n"
    "\031GameOrderListGmUserPmd_CS\022\016\n\006gameid\030\001 \002"
    "(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006charid\030\003 \001(\004\022\014\n\004gm"
    "id\030\004 \002(\r\022\021\n\ttimestamp\030\005 \001(\004\022\034\n\004data\030\006 \003("
    "\0132\016.Pmd.OrderInfo\022\017\n\007curpage\030\007 \001(\r\022\017\n\007ma"
    "xpage\030\010 \001(\r\022\017\n\007perpage\030\t \001(\r\"\332\001\n\034QueryPa"
    "ckageCodeGmUserPmd_CS\022\016\n\006codeid\030\001 \002(\t\022\r\n"
    "\005accid\030\002 \002(\004\022\013\n\003ret\030\003 \001(\r\022\014\n\004flag\030\004 \001(\r\022"
    "\022\n\ncreatetime\030\005 \001(\004\022\020\n\010usedtime\030\006 \001(\004\022\022\n"
    "\nusedgameid\030\007 \001(\r\022\022\n\nusedzoneid\030\010 \001(\r\022\017\n"
    "\007useduid\030\t \001(\004\022\017\n\007extdata\030\n \001(\t\022\020\n\010codet"
    "ype\030\013 \001(\r\"\344\001\n!RequestUsePackageCodeGmUse"
    "rPmd_CS\022\016\n\006codeid\030\001 \002(\t\022\r\n\005accid\030\002 \002(\004\022\021"
    "\n\ttypemutex\030\003 \001(\r\022\013\n\003ret\030\004 \001(\r\022\022\n\ncreate"
    "time\030\005 \001(\004\022\020\n\010usedtime\030\006 \001(\004\022\022\n\nusedgame"
    "id\030\007 \001(\r\022\022\n\nusedzoneid\030\010 \001(\r\022\017\n\007useduid\030"
    "\t \001(\004\022\017\n\007extdata\030\n \001(\t\022\020\n\010codetype\030\013 \001(\r"
    "\"\217\002\n\014FeedbackData\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zon"
    "eid\030\002 \002(\r\022\016\n\006charid\030\003 \002(\004\022\020\n\010charname\030\004 "
    "\002(\t\022\021\n\tuserlevel\030\005 \002(\r\022\020\n\010viplevel\030\006 \002(\r"
    "\022\022\n\nfeedbackid\030\007 \001(\r\022\017\n\007subject\030\010 \001(\t\022\017\n"
    "\007content\030\t \001(\t\022\014\n\004star\030\n \002(\r\022\022\n\nrecordti"
    "me\030\013 \002(\004\022\020\n\010recordid\030\014 \001(\004\022\r\n\005state\030\r \001("
    "\r\022\r\n\005reply\030\016 \001(\t\022\020\n\010phonenum\030\017 \001(\t\"\200\001\n\024F"
    "eedbackGmUserPmd_CS\022\037\n\004data\030\001 \003(\0132\021.Pmd."
    "FeedbackData\022\024\n\014feedbacktype\030\002 \001(\r\022\017\n\007cu"
    "rpage\030\003 \001(\r\022\017\n\007maxpage\030\004 \001(\r\022\017\n\007perpage\030"
    "\005 \001(\r\"\336\001\n\036RequestFeedbackListGmUserPmd_C"
    "\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006char"
    "id\030\003 \001(\004\022\020\n\010charname\030\004 \001(\t\022\024\n\014feedbackty"
    "pe\030\005 \001(\r\022\r\n\005state\030\006 \001(\r\022\021\n\tstarttime\030\007 \001"
    "(\004\022\017\n\007endtime\030\010 \001(\004\022\017\n\007curpage\030\t \001(\r\022\017\n\007"
    "maxpage\030\n \001(\r\022\017\n\007perpage\030\013 \001(\r\"\330\001\n\037Reque"
    "stDealFeedbackGmUserPmd_CS\022\016\n\006gameid\030\001 \002"
    "(\r\022\016\n\006zoneid\030\002 \002(\r\022\020\n\010recordid\030\003 \002(\r\022\016\n\006"
    "charid\030\004 \001(\004\022\r\n\005state\030\005 \001(\r\022\017\n\007subject\030\006"
    " \001(\t\022\r\n\005reply\030\007 \001(\t\022\024\n\014feedbacktype\030\010 \001("
    "\r\022\017\n\007retcode\030\t \001(\r\022\017\n\007retdesc\030\n \001(\t\022\014\n\004g"
    "mid\030\013 \001(\r\"_\n\017PointReportData\022\022\n\nrecordda"
    "te\030\001 \002(\r\022\020\n\010redeemin\030\002 \002(\004\022\021\n\tredeemout\030"
    "\003 \002(\004\022\023\n\013redeemtotal\030\004 \001(\003\"\331\001\n\036RequestPo"
    "intReportGmUserPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n"
    "\006zoneid\030\002 \002(\r\022\016\n\006charid\030\003 \001(\004\022\021\n\tstartti"
    "me\030\004 \001(\r\022\017\n\007endtime\030\005 \001(\r\022\014\n\004gmid\030\006 \001(\r\022"
    "\017\n\007curpage\030\007 \001(\r\022\017\n\007maxpage\030\010 \001(\r\022\017\n\007per"
    "page\030\t \001(\r\022\"\n\004data\030\n \003(\0132\024.Pmd.PointRepo"
    "rtData\"\234\001\n\017PointDetailData\022\n\n\002id\030\001 \001(\004\022\022"
    "\n\nrecordtime\030\002 \002(\004\022\016\n\006charid\030\003 \002(\004\022\020\n\010ch"
    "arname\030\004 \001(\t\022\r\n\005ptype\030\005 \002(\r\022\021\n\tredeemnum"
    "\030\006 \002(\004\022\021\n\toriginnum\030\007 \001(\004\022\022\n\ncurrentnum\030"
    "\010 \001(\004\"\350\001\n\036RequestPointDetailGmUserPmd_CS"
    "\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006char"
    "id\030\003 \001(\004\022\r\n\005ptype\030\004 \001(\r\022\021\n\tstarttime\030\005 \001"
    "(\004\022\017\n\007endtime\030\006 \001(\004\022\014\n\004gmid\030\007 \001(\r\022\017\n\007cur"
    "page\030\010 \001(\r\022\017\n\007maxpage\030\t \001(\r\022\017\n\007perpage\030\n"
    " \001(\r\022\"\n\004data\030\013 \003(\0132\024.Pmd.PointDetailData"
    "\"\357\001\n\021BettingDetailData\022\n\n\002id\030\001 \001(\004\022\017\n\007ro"
    "undid\030\002 \001(\004\022\022\n\nrecordtime\030\003 \002(\004\022\016\n\006chari"
    "d\030\004 \002(\004\022\020\n\010charname\030\005 \001(\t\022\022\n\nwinlosenum\030"
    "\006 \002(\003\022\020\n\010totalnum\030\007 \001(\004\022\020\n\010dealerid\030\010 \001("
    "\004\022\021\n\tdealernum\030\t \001(\004\022\021\n\tbetdetail\030\n \001(\t\022"
    "\025\n\rlotterydetail\030\013 \001(\t\022\022\n\nopensource\030\014 \001"
    "(\r\"\247\002\n RequestBettingDetailGmUserPmd_CS\022"
    "\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006chari"
    "d\030\003 \001(\004\022\020\n\010dealerid\030\004 \001(\004\022\017\n\007roundid\030\005 \001"
    "(\004\022\021\n\tstarttime\030\006 \001(\004\022\017\n\007endtime\030\007 \001(\004\022\014"
    "\n\004gmid\030\010 \001(\r\022\021\n\tsubgameid\030\t \001(\r\022\017\n\007curpa"
    "ge\030\n \001(\r\022\017\n\007maxpage\030\013 \001(\r\022\017\n\007perpage\030\014 \001"
    "(\r\022$\n\004data\030\r \003(\0132\026.Pmd.BettingDetailData"
    "\022\022\n\nopensource\030\016 \001(\r\"m\n\tStockData\022\n\n\002id\030"
    "\001 \001(\004\022\r\n\005stock\030\002 \001(\004\022\021\n\tthreshold\030\003 \001(\004\022"
    "\017\n\007lottery\030\004 \001(\004\022\016\n\006profit\030\005 \001(\004\022\021\n\tsubg"
    "ameid\030\006 \001(\r\"}\n\034RequestStockInfoGmUserPmd"
    "_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\014\n\004g"
    "mid\030\003 \001(\r\022\034\n\004data\030\004 \003(\0132\016.Pmd.StockData\022"
    "\021\n\tsubgameid\030\005 \001(\r\"\325\001\n!RequestOnlineUser"
    "InfoGmUserPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zone"
    "id\030\002 \002(\r\022\016\n\006charid\030\003 \001(\004\022\020\n\010charname\030\004 \001"
    "(\t\022\020\n\010isonline\030\005 \002(\r\022\014\n\004gmid\030\006 \001(\r\022\017\n\007cu"
    "rpage\030\007 \001(\r\022\017\n\007maxpage\030\010 \001(\r\022\017\n\007perpage\030"
    "\t \001(\r\022\033\n\004data\030\n \003(\0132\r.Pmd.UserInfo\"\211\001\n\016R"
    "edPacketsInfo\022\n\n\002id\030\001 \002(\t\022\016\n\006srcuid\030\002 \002("
    "\004\022\023\n\013srcnickname\030\003 \002(\t\022\016\n\006desuid\030\004 \002(\004\022\023"
    "\n\013desnickname\030\005 \002(\t\022\r\n\005money\030\006 \002(\004\022\022\n\nre"
    "cordtime\030\007 \002(\004\"\373\001\n\035RequestRedPacketsGmUs"
    "erPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r"
    "\022\014\n\004gmid\030\003 \001(\r\022\021\n\tstarttime\030\004 \001(\004\022\017\n\007end"
    "time\030\005 \001(\004\022\016\n\006srcuid\030\006 \001(\004\022\016\n\006desuid\030\007 \001"
    "(\004\022\022\n\npacketcode\030\010 \001(\t\022\017\n\007curpage\030\t \001(\r\022"
    "\017\n\007maxpage\030\n \001(\r\022\017\n\007perpage\030\013 \001(\r\022!\n\004dat"
    "a\030\014 \003(\0132\023.Pmd.RedPacketsInfo\"Q\n\013SubgameL"
    "ist\022\016\n\006gameid\030\001 \002(\004\022\016\n\006zoneid\030\002 \001(\004\022\020\n\010g"
    "amename\030\003 \002(\t\022\020\n\010zonename\030\004 \001(\t\"p\n Reque"
    "stedSubgameListGmUserPmd_CS\022\016\n\006gameid\030\001 "
    "\002(\r\022\016\n\006zoneid\030\002 \002(\r\022\014\n\004gmid\030\003 \001(\r\022\036\n\004dat"
    "a\030\004 \003(\0132\020.Pmd.SubgameList\"\201\001\n\013WinLoseInf"
    "o\022\n\n\002id\030\001 \002(\r\022\016\n\006charid\030\002 \002(\004\022\020\n\010charnam"
    "e\030\003 \002(\t\022\020\n\010viplevel\030\004 \002(\r\022\020\n\010isonline\030\005 "
    "\002(\r\022\020\n\010totalnum\030\006 \002(\003\022\016\n\006curnum\030\007 \002(\004\"\307\001"
    "\n\036RequestWinningListGmUserPmd_CS\022\016\n\006game"
    "id\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\014\n\004gmid\030\003 \001(\r\022\021"
    "\n\tsubgameid\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001(\004\022\017\n\007"
    "curpage\030\006 \001(\r\022\017\n\007maxpage\030\007 \001(\r\022\017\n\007perpag"
    "e\030\010 \001(\r\022\036\n\004data\030\t \003(\0132\020.Pmd.WinLoseInfo\""
    "\226\002\n\022BlackWhitelistInfo\022\n\n\002id\030\001 \001(\r\022\016\n\006ch"
    "arid\030\002 \001(\004\022\020\n\010charname\030\003 \001(\t\022\021\n\tsubgamei"
    "d\030\004 \001(\r\022\020\n\010setchips\030\005 \001(\r\022\020\n\010curchips\030\006 "
    "\001(\r\022\017\n\007winrate\030\007 \001(\r\022\r\n\005state\030\010 \001(\r\022\014\n\004t"
    "ype\030\t \001(\r\022\020\n\010settimes\030\n \001(\r\022\020\n\010curtimes\030"
    "\013 \001(\r\022\025\n\rintervaltimes\030\014 \001(\r\022\022\n\nrecordti"
    "me\030\r \001(\004\022\016\n\006gameid\030\016 \001(\r\022\016\n\006zoneid\030\017 \001(\r"
    "\"\251\001\n\035AddBlackWhitelistGmUserPmd_CS\022\016\n\006ga"
    "meid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\021\n\tsubgameid\030"
    "\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\022%\n\004data\030\005 \003(\0132\027.Pmd."
    "BlackWhitelistInfo\022\017\n\007retcode\030\006 \001(\r\022\017\n\007r"
    "etdesc\030\007 \001(\t\"\251\001\n\035ModBlackWhitelistGmUser"
    "Pmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\021"
    "\n\tsubgameid\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\022%\n\004data\030"
    "\005 \002(\0132\027.Pmd.BlackWhitelistInfo\022\017\n\007retcod"
    "e\030\006 \001(\r\022\017\n\007retdesc\030\007 \001(\t\"\217\001\n\035DelBlackWhi"
    "telistGmUserPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zo"
    "neid\030\002 \002(\r\022\021\n\tsubgameid\030\003 \001(\r\022\014\n\004gmid\030\004 "
    "\001(\r\022\013\n\003ids\030\005 \003(\r\022\017\n\007retcode\030\006 \001(\r\022\017\n\007ret"
    "desc\030\007 \001(\t\"\220\002\n!RequestBlackWhitelistGmUs"
    "erPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r"
    "\022\021\n\tsubgameid\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\022\n\n\002id\030"
    "\005 \001(\r\022\016\n\006charid\030\006 \001(\004\022\020\n\010charname\030\007 \001(\t\022"
    "\021\n\tstarttime\030\010 \001(\004\022\017\n\007endtime\030\t \001(\004\022\017\n\007c"
    "urpage\030\n \001(\r\022\017\n\007maxpage\030\013 \001(\r\022\017\n\007perpage"
    "\030\014 \001(\r\022%\n\004data\030\r \003(\0132\027.Pmd.BlackWhitelis"
    "tInfo\"\336\001\n\nGmMailInfo\022\n\n\002id\030\001 \001(\004\022\016\n\006game"
    "id\030\002 \001(\r\022\016\n\006zoneid\030\003 \001(\r\022\014\n\004type\030\004 \001(\r\022\014"
    "\n\004gmid\030\005 \001(\r\022\016\n\006charid\030\006 \001(\004\022\020\n\010charname"
    "\030\007 \001(\t\022\017\n\007subject\030\010 \001(\t\022\017\n\007content\030\t \001(\t"
    "\022!\n\nattachment\030\n \003(\0132\r.Pmd.ItemInfo\022\r\n\005s"
    "tate\030\013 \001(\r\022\022\n\nrecordtime\030\014 \001(\r\"\214\001\n\033Reque"
    "stSendMailGmUserPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016"
    "\n\006zoneid\030\002 \002(\r\022\035\n\004data\030\003 \001(\0132\017.Pmd.GmMai"
    "lInfo\022\014\n\004gmid\030\004 \001(\r\022\017\n\007retcode\030\005 \001(\r\022\017\n\007"
    "retdesc\030\006 \001(\t\"\201\002\n\017LoginRecordData\022\n\n\002id\030"
    "\001 \001(\004\022\014\n\004type\030\002 \001(\r\022\r\n\005accid\030\003 \001(\004\022\016\n\006ch"
    "arid\030\004 \001(\004\022\020\n\010charname\030\005 \001(\t\022\021\n\tuserleve"
    "l\030\006 \001(\r\022\020\n\010viplevel\030\007 \001(\r\022\014\n\004gold\030\010 \001(\r\022"
    "\r\n\005money\030\t \001(\r\022\r\n\005power\030\n \001(\r\022\014\n\004guid\030\013 "
    "\001(\r\022\014\n\004imei\030\014 \001(\t\022\n\n\002ip\030\r \001(\t\022\013\n\003mac\030\016 \001"
    "(\t\022\n\n\002ts\030\017 \001(\004\022\021\n\tonlinemin\030\020 \001(\r\"\350\001\n\036Re"
    "questLoginRecordGmUserPmd_CS\022\016\n\006gameid\030\001"
    " \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\r\n\005accid\030\003 \001(\004\022\016\n\006c"
    "harid\030\004 \001(\004\022\021\n\tstarttime\030\005 \001(\004\022\017\n\007endtim"
    "e\030\006 \001(\004\022\"\n\004data\030\007 \003(\0132\024.Pmd.LoginRecordD"
    "ata\022\014\n\004gmid\030\010 \001(\r\022\017\n\007curpage\030\t \001(\r\022\017\n\007ma"
    "xpage\030\n \001(\r\022\017\n\007perpage\030\013 \001(\r\"\211\002\n\021Consume"
    "RecordData\022\n\n\002id\030\001 \001(\004\022\r\n\005accid\030\002 \001(\004\022\016\n"
    "\006charid\030\003 \001(\004\022\020\n\010charname\030\004 \001(\t\022\020\n\010itemt"
    "ype\030\005 \001(\r\022\016\n\006itemid\030\006 \001(\r\022\020\n\010itemname\030\007 "
    "\001(\t\022\016\n\006optype\030\010 \001(\r\022\020\n\010actionid\030\t \001(\r\022\022\n"
    "\nactionname\030\n \001(\t\022\021\n\tbeforenum\030\013 \001(\r\022\020\n\010"
    "afternum\030\014 \001(\r\022\017\n\007usednum\030\r \001(\r\022\n\n\002ts\030\016 "
    "\001(\004\022\013\n\003ext\030\017 \001(\t\"\235\002\n RequestConsumeRecor"
    "dGmUserPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030"
    "\002 \002(\r\022\016\n\006charid\030\003 \001(\004\022\014\n\004type\030\004 \002(\r\022\016\n\006i"
    "temid\030\005 \001(\r\022\016\n\006optype\030\006 \001(\r\022\020\n\010actionid\030"
    "\007 \001(\r\022\021\n\tstarttime\030\010 \001(\004\022\017\n\007endtime\030\t \001("
    "\004\022$\n\004data\030\n \003(\0132\026.Pmd.ConsumeRecordData\022"
    "\014\n\004gmid\030\013 \001(\r\022\017\n\007curpage\030\014 \001(\r\022\017\n\007maxpag"
    "e\030\r \001(\r\022\017\n\007perpage\030\016 \001(\r\"\207\002\n\020ActionRecor"
    "dData\022\n\n\002id\030\001 \001(\004\022\r\n\005accid\030\002 \001(\004\022\016\n\006char"
    "id\030\003 \001(\004\022\020\n\010charname\030\004 \001(\t\022\017\n\007acttype\030\005 "
    "\001(\r\022\020\n\010typename\030\006 \001(\t\022\020\n\010actionid\030\007 \001(\r\022"
    "\022\n\nactionname\030\010 \001(\t\022\r\n\005state\030\t \001(\r\022\r\n\005po"
    "wer\030\n \001(\r\022\017\n\007lastmin\030\013 \001(\r\022\021\n\tstarttime\030"
    "\014 \001(\004\022\017\n\007endtime\030\r \001(\004\022\014\n\004ext1\030\016 \001(\t\022\014\n\004"
    "ext2\030\017 \001(\t\"\214\002\n\037RequestActionRecordGmUser"
    "Pmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016"
    "\n\006charid\030\003 \001(\004\022\014\n\004type\030\004 \002(\r\022\017\n\007acttype\030"
    "\005 \001(\r\022\020\n\010actionid\030\006 \001(\r\022\021\n\tstarttime\030\007 \001"
    "(\004\022\017\n\007endtime\030\010 \001(\004\022#\n\004data\030\t \003(\0132\025.Pmd."
    "ActionRecordData\022\014\n\004gmid\030\n \001(\r\022\017\n\007curpag"
    "e\030\013 \001(\r\022\017\n\007maxpage\030\014 \001(\r\022\017\n\007perpage\030\r \001("
    "\r\"\353\001\n\024StrengthenRecordData\022\n\n\002id\030\001 \001(\004\022\r"
    "\n\005accid\030\002 \001(\004\022\016\n\006charid\030\003 \001(\004\022\020\n\010charnam"
    "e\030\004 \001(\t\022\020\n\010optarget\030\005 \001(\r\022\022\n\ntargetname\030"
    "\006 \001(\t\022\016\n\006optype\030\007 \001(\r\022\020\n\010typename\030\010 \001(\t\022"
    "\020\n\010opresult\030\t \001(\r\022\021\n\tbeforenum\030\n \001(\r\022\020\n\010"
    "afternum\030\013 \001(\r\022\n\n\002ts\030\014 \001(\004\022\013\n\003ext\030\r \001(\t\""
    "\224\002\n#RequestStrengthenRecordGmUserPmd_CS\022"
    "\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006chari"
    "d\030\003 \001(\004\022\020\n\010optarget\030\004 \001(\r\022\016\n\006optype\030\005 \001("
    "\r\022\r\n\005state\030\006 \001(\r\022\021\n\tstarttime\030\007 \001(\004\022\017\n\007e"
    "ndtime\030\010 \001(\004\022\'\n\004data\030\t \003(\0132\031.Pmd.Strengt"
    "henRecordData\022\014\n\004gmid\030\n \001(\r\022\017\n\007curpage\030\013"
    " \001(\r\022\017\n\007maxpage\030\014 \001(\r\022\017\n\007perpage\030\r \001(\r\"\301"
    "\001\n\016MailRecordData\022\n\n\002id\030\001 \001(\004\022\016\n\006charid\030"
    "\002 \001(\004\022\020\n\010charname\030\003 \001(\t\022\016\n\006recvid\030\004 \001(\004\022"
    "\020\n\010recvname\030\005 \001(\t\022\017\n\007subject\030\006 \001(\t\022\017\n\007co"
    "ntent\030\007 \001(\t\022\022\n\nattachment\030\010 \001(\t\022\r\n\005state"
    "\030\t \001(\r\022\n\n\002ts\030\n \001(\004\022\016\n\006optype\030\013 \001(\r\"\367\001\n\035R"
    "equestMailRecordGmUserPmd_CS\022\016\n\006gameid\030\001"
    " \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006charid\030\003 \001(\004\022\016\n\006"
    "recvid\030\004 \001(\004\022\016\n\006optype\030\005 \001(\r\022\021\n\tstarttim"
    "e\030\006 \001(\004\022\017\n\007endtime\030\007 \001(\004\022!\n\004data\030\010 \003(\0132\023"
    ".Pmd.MailRecordData\022\014\n\004gmid\030\t \001(\r\022\017\n\007cur"
    "page\030\n \001(\r\022\017\n\007maxpage\030\013 \001(\r\022\017\n\007perpage\030\014"
    " \001(\r\"\253\001\n\016RankRecordData\022\n\n\002id\030\001 \001(\004\022\016\n\006r"
    "ankid\030\002 \001(\004\022\020\n\010rankname\030\003 \001(\t\022\r\n\005accid\030\004"
    " \001(\004\022\016\n\006charid\030\005 \001(\004\022\020\n\010charname\030\006 \001(\t\022\022"
    "\n\nprofession\030\007 \001(\t\022\r\n\005power\030\010 \001(\r\022\n\n\002ts\030"
    "\t \001(\004\022\013\n\003ext\030\n \001(\t\"\353\001\n\035RequestRankRecord"
    "GmUserPmd_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002"
    " \002(\r\022\020\n\010ranktype\030\003 \001(\r\022\020\n\010rankname\030\004 \001(\t"
    "\022\021\n\tstarttime\030\005 \001(\004\022\017\n\007endtime\030\006 \001(\004\022!\n\004"
    "data\030\007 \003(\0132\023.Pmd.RankRecordData\022\014\n\004gmid\030"
    "\010 \001(\r\022\017\n\007curpage\030\t \001(\r\022\017\n\007maxpage\030\n \001(\r\022"
    "\017\n\007perpage\030\013 \001(\r\"\223\001\n\016BossRecordData\022\n\n\002i"
    "d\030\001 \001(\004\022\020\n\010bosstype\030\002 \001(\r\022\020\n\010bossname\030\003 "
    "\001(\t\022\017\n\007acttype\030\004 \001(\r\022\022\n\nactcontent\030\005 \001(\t"
    "\022\016\n\006charid\030\006 \001(\004\022\020\n\010charname\030\007 \001(\t\022\n\n\002ts"
    "\030\010 \001(\004\"\353\001\n\035RequestBossRecordGmUserPmd_CS"
    "\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\020\n\010boss"
    "type\030\003 \001(\r\022\020\n\010bossname\030\004 \001(\t\022\021\n\tstarttim"
    "e\030\005 \001(\004\022\017\n\007endtime\030\006 \001(\004\022!\n\004data\030\007 \003(\0132\023"
    ".Pmd.BossRecordData\022\014\n\004gmid\030\010 \001(\r\022\017\n\007cur"
    "page\030\t \001(\r\022\017\n\007maxpage\030\n \001(\r\022\017\n\007perpage\030\013"
    " \001(\r\"k\n\020RenameRecordData\022\n\n\002id\030\001 \001(\004\022\r\n\005"
    "accid\030\002 \001(\004\022\016\n\006charid\030\003 \001(\004\022\017\n\007oldname\030\004"
    " \001(\t\022\017\n\007newname\030\005 \001(\t\022\n\n\002ts\030\006 \001(\004\"\375\001\n\037Re"
    "questRenameRecordGmUserPmd_CS\022\016\n\006gameid\030"
    "\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006charid\030\003 \001(\004\022\017\n"
    "\007oldname\030\004 \001(\t\022\017\n\007newname\030\005 \001(\t\022\021\n\tstart"
    "time\030\006 \001(\004\022\017\n\007endtime\030\007 \001(\004\022#\n\004data\030\010 \003("
    "\0132\025.Pmd.RenameRecordData\022\014\n\004gmid\030\t \001(\r\022\017"
    "\n\007curpage\030\n \001(\r\022\017\n\007maxpage\030\013 \001(\r\022\017\n\007perp"
    "age\030\014 \001(\r\"p\n\031StartUpGameRequestGmPmd_C\022\013"
    "\n\003key\030\001 \002(\t\022\017\n\007version\030\002 \002(\r\022\020\n\010compress"
    "\030\003 \001(\t\022\017\n\007encrypt\030\004 \001(\t\022\022\n\nencryptkey\030\005 "
    "\001(\t\"8\n\030StartUpGameReturnGmPmd_S\022\013\n\003ret\030\001"
    " \002(\010\022\017\n\007retdesc\030\002 \001(\t\"\037\n\035SurportGameZone"
    "RequestGmPmd_C\"\036\n\034SurportGameZoneReturnG"
    "mPmd_S\"\'\n\027ReconnectKickoutGmSmd_S\022\014\n\004des"
    "c\030\001 \001(\t\"\315\001\n\nGmUserInfo\022\014\n\004gmid\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\013\n\003pri\030\004 \001("
    "\004\022\017\n\007qmaxnum\030\005 \001(\r\022\020\n\010autorecv\030\006 \001(\r\022\021\n\t"
    "workstate\030\007 \001(\r\022\016\n\006winnum\030\010 \001(\r\022\016\n\006gamei"
    "d\030\t \001(\r\022\016\n\006zoneid\030\n \001(\r\022\016\n\006bindip\030\013 \001(\r\022"
    "\016\n\006config\030\014 \001(\t\"\266\001\n\027RequestLoginGmUserPm"
    "d_C\022\013\n\003key\030\001 \002(\t\022\017\n\007version\030\002 \002(\r\022\020\n\010com"
    "press\030\003 \001(\t\022\017\n\007encrypt\030\004 \001(\t\022\022\n\nencryptk"
    "ey\030\005 \001(\t\022\020\n\010username\030\006 \002(\t\022\020\n\010password\030\007"
    " \002(\t\022\021\n\tlogintype\030\010 \001(\r\022\017\n\007loginip\030\t \001(\r"
    "\"m\n\026ReturnLoginGmUserPmd_S\022\017\n\007retcode\030\001 "
    "\001(\r\022\035\n\004data\030\002 \001(\0132\017.Pmd.GmUserInfo\022#\n\010zo"
    "neinfo\030\003 \003(\0132\021.Pmd.GameZoneInfo\"e\n\027SetPa"
    "sswordGmUserPmd_CS\022\023\n\013oldpassword\030\001 \002(\t\022"
    "\023\n\013newpassword\030\002 \002(\t\022\017\n\007retcode\030\003 \001(\r\022\017\n"
    "\007retdesc\030\004 \001(\t\"U\n\022AddNewGmUserPmd_CS\022\035\n\004"
    "data\030\001 \002(\0132\017.Pmd.GmUserInfo\022\017\n\007retcode\030\002"
    " \001(\r\022\017\n\007retdesc\030\003 \001(\t\":\n\031GmAccountListGm"
    "UserPmd_CS\022\035\n\004data\030\001 \003(\0132\017.Pmd.GmUserInf"
    "o\"H\n\026RequestDelGmUserPmd_CS\022\014\n\004gmid\030\001 \002("
    "\r\022\017\n\007retcode\030\002 \001(\r\022\017\n\007retdesc\030\003 \001(\t\"{\n\034R"
    "equestModifyPriGmUserPmd_CS\022\014\n\004gmid\030\001 \002("
    "\r\022\013\n\003pri\030\002 \002(\004\022\016\n\006gameid\030\003 \001(\r\022\016\n\006zoneid"
    "\030\004 \001(\r\022\017\n\007retcode\030\005 \001(\r\022\017\n\007retdesc\030\006 \001(\t"
    "\"M\n\032SelectGamezoneGmUserPmd_SC\022\017\n\007retcod"
    "e\030\001 \001(\r\022\016\n\006gameid\030\002 \002(\r\022\016\n\006zoneid\030\003 \002(\r\""
    "\337\001\n\rBroadcastInfo\022\016\n\006taskid\030\001 \001(\r\022\016\n\006gam"
    "eid\030\002 \001(\r\022\016\n\006zoneid\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\022"
    "\021\n\tcountryid\030\006 \001(\r\022\017\n\007sceneid\030\007 \001(\r\022\021\n\ts"
    "tarttime\030\010 \001(\r\022\017\n\007endtime\030\t \001(\r\022\024\n\014inter"
    "valtime\030\n \001(\r\022\r\n\005btype\030\013 \001(\r\022\017\n\007content\030"
    "\014 \001(\t\022\022\n\nrecordtime\030\r \001(\r\"i\n\027BroadcastNe"
    "wGmUserPmd_C\022 \n\004data\030\001 \002(\0132\022.Pmd.Broadca"
    "stInfo\022\016\n\006gameid\030\002 \001(\r\022\016\n\006zoneid\030\003 \001(\r\022\014"
    "\n\004gmid\030\004 \001(\r\"_\n\035ReturnBroadcastNewGmUser"
    "Pmd_S\022\017\n\007retcode\030\001 \001(\r\022\017\n\007retdesc\030\002 \001(\t\022"
    "\016\n\006taskid\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\"Z\n\032Broadca"
    "stDeleteGmUserPmd_C\022\016\n\006taskid\030\001 \001(\r\022\016\n\006g"
    "ameid\030\002 \001(\r\022\016\n\006zoneid\030\003 \001(\r\022\014\n\004gmid\030\004 \001("
    "\r\"b\n ReturnBroadcastDeleteGmUserPmd_S\022\017\n"
    "\007retcode\030\001 \001(\r\022\017\n\007retdesc\030\002 \001(\t\022\016\n\006taski"
    "d\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\"\270\001\n\037RequestBroadca"
    "stListGmUserPmd_C\022\016\n\006gameid\030\001 \001(\r\022\016\n\006zon"
    "eid\030\002 \001(\r\022\017\n\007sceneid\030\003 \001(\r\022\021\n\tcountryid\030"
    "\004 \001(\r\022\r\n\005btype\030\005 \001(\r\022\017\n\007endtime\030\006 \001(\r\022\017\n"
    "\007curpage\030\007 \001(\r\022\017\n\007maxpage\030\010 \001(\r\022\017\n\007perpa"
    "ge\030\t \001(\r\"\203\001\n\036ReturnBroadcastListGmUserPm"
    "d_S\022 \n\004data\030\001 \003(\0132\022.Pmd.BroadcastInfo\022\014\n"
    "\004gmid\030\002 \001(\r\022\017\n\007curpage\030\003 \001(\r\022\017\n\007maxpage\030"
    "\004 \001(\r\022\017\n\007perpage\030\005 \001(\r\"\342\001\n\016PunishUserInf"
    "o\022\016\n\006taskid\030\001 \001(\r\022\016\n\006gameid\030\002 \001(\r\022\016\n\006zon"
    "eid\030\003 \001(\r\022\016\n\006charid\030\004 \001(\004\022\020\n\010charname\030\005 "
    "\001(\t\022\n\n\002ip\030\006 \001(\r\022\014\n\004gmid\030\007 \001(\r\022\016\n\006reason\030"
    "\010 \001(\t\022\r\n\005ptype\030\t \001(\r\022\021\n\tstarttime\030\n \001(\004\022"
    "\017\n\007endtime\030\013 \001(\004\022\022\n\npunishtime\030\014 \001(\004\022\r\n\005"
    "state\030\r \001(\r\"h\n\025PunishUserGmUserPmd_C\022!\n\004"
    "data\030\001 \002(\0132\023.Pmd.PunishUserInfo\022\016\n\006gamei"
    "d\030\002 \001(\r\022\016\n\006zoneid\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\"]\n"
    "\033ReturnPunishUserGmUserPmd_S\022\017\n\007retcode\030"
    "\001 \001(\r\022\017\n\007retdesc\030\002 \001(\t\022\016\n\006taskid\030\003 \001(\r\022\014"
    "\n\004gmid\030\004 \001(\r\"[\n\033DeletePunishUserGmUserPm"
    "d_C\022\016\n\006taskid\030\001 \002(\r\022\016\n\006gameid\030\002 \001(\r\022\016\n\006z"
    "oneid\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\"b\n!ReturnDelet"
    "ePunishUserGmUserPmd_S\022\017\n\007retcode\030\001 \001(\r\022"
    "\016\n\006taskid\030\002 \001(\r\022\016\n\006zoneid\030\003 \001(\r\022\014\n\004gmid\030"
    "\004 \001(\r\"\343\001\n\034RequestPunishListGmUserPmd_C\022\016"
    "\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006charid"
    "\030\003 \001(\004\022\020\n\010charname\030\004 \001(\t\022\014\n\004gmid\030\005 \001(\r\022\r"
    "\n\005ptype\030\006 \001(\r\022\r\n\005state\030\007 \001(\r\022\021\n\tstarttim"
    "e\030\010 \001(\004\022\017\n\007endtime\030\t \001(\004\022\017\n\007curpage\030\n \001("
    "\r\022\017\n\007maxpage\030\013 \001(\r\022\017\n\007perpage\030\014 \001(\r\"\201\001\n\033"
    "ReturnPunishListGmUserPmd_S\022!\n\004data\030\001 \003("
    "\0132\023.Pmd.PunishUserInfo\022\014\n\004gmid\030\002 \001(\r\022\017\n\007"
    "curpage\030\003 \001(\r\022\017\n\007maxpage\030\004 \001(\r\022\017\n\007perpag"
    "e\030\005 \001(\r\"O\n\010ItemInfo\022\016\n\006itemid\030\001 \002(\r\022\020\n\010i"
    "temname\030\002 \001(\t\022\017\n\007itemnum\030\003 \001(\r\022\020\n\010itemty"
    "pe\030\004 \001(\r\"O\n\014ItemTypeInfo\022\020\n\010itemtype\030\001 \002"
    "(\r\022\020\n\010typename\030\002 \001(\t\022\033\n\004data\030\003 \003(\0132\r.Pmd"
    ".ItemInfo\"\222\001\n\037RequestItemTypeInfoGmUserP"
    "md_CS\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \001(\r\022\014\n"
    "\004gmid\030\003 \001(\r\022\037\n\004data\030\004 \003(\0132\021.Pmd.ItemType"
    "Info\022\017\n\007retcode\030\005 \001(\r\022\017\n\007retdesc\030\006 \001(\t\"\274"
    "\002\n\010UserInfo\022\016\n\006gameid\030\001 \001(\r\022\016\n\006zoneid\030\002 "
    "\001(\r\022\016\n\006charid\030\003 \001(\004\022\020\n\010charname\030\004 \001(\t\022\022\n"
    "\nprofession\030\005 \001(\t\022\023\n\013countryname\030\006 \001(\t\022\r"
    "\n\005level\030\007 \001(\r\022\020\n\010viplevel\030\010 \001(\r\022\021\n\toldzo"
    "neid\030\t \001(\r\022\023\n\013lastofftime\030\n \001(\r\022\023\n\013lastl"
    "oginip\030\013 \001(\r\022\017\n\007gmlevel\030\014 \001(\r\022\022\n\ncreatet"
    "ime\030\r \001(\r\022\020\n\010isonline\030\016 \001(\r\022\017\n\007glodnum\030\017"
    " \001(\r\022\r\n\005money\030\020 \001(\r\022\020\n\010totalwin\030\021 \001(\003\"l\n"
    "\032RequestUserInfoGmUserPmd_C\022\016\n\006gameid\030\001 "
    "\002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006charid\030\003 \001(\004\022\020\n\010c"
    "harname\030\004 \001(\t\022\014\n\004gmid\030\005 \001(\r\"h\n\031ReturnUse"
    "rInfoGmUserPmd_S\022\017\n\007retcode\030\001 \002(\r\022\017\n\007ret"
    "desc\030\002 \001(\t\022\033\n\004data\030\003 \002(\0132\r.Pmd.UserInfo\022"
    "\014\n\004gmid\030\004 \002(\r\"o\n\035RequestUserPackageGmUse"
    "rPmd_C\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016"
    "\n\006charid\030\003 \001(\004\022\020\n\010charname\030\004 \001(\t\022\014\n\004gmid"
    "\030\005 \001(\r\"}\n\034ReturnUserPackageGmUserPmd_S\022\037"
    "\n\004data\030\001 \003(\0132\021.Pmd.ItemTypeInfo\022\016\n\006gamei"
    "d\030\002 \002(\r\022\016\n\006zoneid\030\003 \002(\r\022\016\n\006charid\030\004 \002(\004\022"
    "\014\n\004gmid\030\005 \002(\r\"\221\001\n RequestModifyUserInfoG"
    "mUserPmd_C\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002"
    "(\r\022\016\n\006charid\030\003 \002(\004\022\016\n\006optype\030\004 \002(\r\022\020\n\010ch"
    "arname\030\005 \001(\t\022\r\n\005opnum\030\006 \001(\r\022\014\n\004gmid\030\007 \001("
    "\r\"q\n\037ReturnModifyUserInfoGmUserPmd_S\022\017\n\007"
    "retcode\030\001 \001(\r\022\017\n\007retdesc\030\002 \001(\t\022\016\n\006zoneid"
    "\030\003 \001(\r\022\016\n\006charid\030\004 \001(\004\022\014\n\004gmid\030\005 \001(\r\"\305\001\n"
    "\034RequestUserRecordGmUserPmd_C\022\016\n\006gameid\030"
    "\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\016\n\006charid\030\003 \001(\004\022\016\n"
    "\006optype\030\004 \002(\r\022\020\n\010charname\030\005 \001(\t\022\022\n\nrecor"
    "dtime\030\006 \001(\r\022\014\n\004gmid\030\007 \001(\r\022\017\n\007curpage\030\010 \001"
    "(\r\022\017\n\007maxpage\030\t \001(\r\022\017\n\007perpage\030\n \001(\r\"m\n\n"
    "RecordInfo\022\020\n\010recordid\030\001 \002(\r\022\r\n\005state\030\002 "
    "\002(\r\022\014\n\004gold\030\003 \001(\r\022\014\n\004coin\030\004 \001(\r\022\021\n\tstart"
    "time\030\005 \002(\r\022\017\n\007endtime\030\006 \001(\r\"\262\001\n\033ReturnUs"
    "erRecordGmUserPmd_S\022\017\n\007retcode\030\001 \002(\r\022\017\n\007"
    "retdesc\030\002 \001(\t\022\035\n\004data\030\003 \003(\0132\017.Pmd.Record"
    "Info\022\021\n\trecordnum\030\004 \001(\r\022\014\n\004gmid\030\005 \002(\r\022\017\n"
    "\007curpage\030\006 \001(\r\022\017\n\007maxpage\030\007 \001(\r\022\017\n\007perpa"
    "ge\030\010 \001(\r\"~\n\020QuestionBaseData\022\014\n\004time\030\001 \001"
    "(\r\022\n\n\002id\030\002 \001(\r\022\016\n\006userid\030\003 \001(\r\022\016\n\006zoneid"
    "\030\004 \001(\r\022\021\n\tcountyrid\030\005 \001(\r\022\017\n\007sceneid\030\006 \001"
    "(\r\022\014\n\004name\030\007 \001(\t\"\226\002\n\021ForbidAccountData\022\016"
    "\n\006zoneid\030\001 \001(\r\022\014\n\004gmid\030\002 \001(\r\022\016\n\006gmname\030\003"
    " \001(\t\022\r\n\005accid\030\004 \001(\r\022\n\n\002ip\030\005 \001(\r\022\022\n\nforbi"
    "dType\030\006 \001(\r\022\020\n\010reserved\030\007 \001(\t\022\016\n\006charid\030"
    "\010 \001(\r\022\020\n\010charname\030\t \001(\t\022\017\n\007begtime\030\n \001(\r"
    "\022\017\n\007endtime\030\013 \001(\r\022\014\n\004desc\030\014 \001(\t\"@\n\nForbi"
    "dType\022\026\n\022ForbidType_AllZone\020\000\022\032\n\026ForbidT"
    "ype_CurrentZone\020\001\"J\n\027stRequestLoginGmUse"
    "rCmd\022\014\n\004name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\017\n\007"
    "version\030\003 \001(\r\"\212\001\n\026stReturnLoginGmUserCmd"
    "\022\017\n\007retcode\030\001 \001(\r\022\014\n\004gmID\030\002 \001(\r\022\013\n\003pri\030\003"
    " \001(\r\022\017\n\007qMaxNum\030\004 \001(\r\022\020\n\010autoRecv\030\005 \001(\r\022"
    "\021\n\tworkState\030\006 \001(\r\022\016\n\006winNum\030\007 \001(\r\"0\n\021st"
    "ConfigGmUserCmd\022\013\n\003num\030\001 \001(\r\022\016\n\006config\030\002"
    " \001(\014\">\n\026stSetPasswordGmUserCmd\022\021\n\toldpas"
    "swd\030\001 \001(\t\022\021\n\tnewpasswd\030\002 \001(\t\",\n\031stReturn"
    "PasswordGmUserCmd\022\017\n\007retcode\030\001 \001(\r\"\206\001\n\021s"
    "tAddNewGmUserCmd\022\014\n\004name\030\001 \001(\t\022\020\n\010passwo"
    "rd\030\002 \001(\t\022\013\n\003pri\030\003 \001(\r\022\017\n\007qMaxNum\030\004 \001(\r\022\020"
    "\n\010autoRecv\030\005 \001(\r\022\021\n\tworkState\030\006 \001(\r\022\016\n\006w"
    "inNum\030\007 \001(\r\"*\n\027stReturnAddNewGmUserCmd\022\017"
    "\n\007retcode\030\001 \001(\r\"\026\n\024stQueryListGmUserCmd\""
    "\310\001\n\025stReturnListGmUserCmd\022\013\n\003num\030\001 \001(\r\022-"
    "\n\004data\030\002 \003(\0132\037.Pmd.stReturnListGmUserCmd"
    ".Data\032s\n\004Data\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\r\022"
    "\013\n\003pri\030\003 \001(\r\022\017\n\007qMaxNum\030\004 \001(\r\022\020\n\010autoRec"
    "v\030\005 \001(\r\022\021\n\tworkState\030\006 \001(\r\022\016\n\006winNum\030\007 \001"
    "(\r\".\n\034stRequestZoneConfigGmUserCmd\022\016\n\006zo"
    "neid\030\001 \001(\r\"\240\001\n\037stReturnZoneDicCountryGmU"
    "serCmd\022\016\n\006zoneid\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\0227\n\004d"
    "ata\030\003 \003(\0132).Pmd.stReturnZoneDicCountryGm"
    "UserCmd.Data\032\'\n\004Data\022\021\n\tcountryid\030\001 \001(\r\022"
    "\014\n\004name\030\002 \001(\r\"\226\001\n\033stReturnZoneDicMapGmUs"
    "erCmd\022\016\n\006zoneid\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\0223\n\004da"
    "ta\030\003 \003(\0132%.Pmd.stReturnZoneDicMapGmUserC"
    "md.Data\032%\n\004Data\022\017\n\007sceneid\030\001 \001(\r\022\014\n\004name"
    "\030\002 \001(\r\"\270\001\n\027stForwardToAllGmUserCmd\022\020\n\010dw"
    "ZoneID\030\001 \001(\r\022\022\n\nwCountryID\030\002 \001(\r\022\020\n\010wSce"
    "neID\030\003 \001(\r\022\020\n\010dwUserID\030\004 \001(\r\022\024\n\014dwProvin"
    "ceID\030\005 \001(\r\022\020\n\010dwCityID\030\006 \001(\r\022\020\n\010userName"
    "\030\007 \001(\t\022\013\n\003num\030\010 \001(\r\022\014\n\004data\030\t \001(\014\"\257\001\n\030st"
    "ForwardToOnlyGmUserCmd\022\020\n\010dwZoneID\030\001 \001(\r"
    "\022\022\n\nwCountryID\030\002 \001(\r\022\020\n\010wSceneID\030\003 \001(\r\022\020"
    "\n\010dwUserID\030\004 \001(\r\022\020\n\010userName\030\005 \001(\t\022\014\n\004gm"
    "ID\030\006 \001(\r\022\016\n\006gmName\030\007 \001(\t\022\013\n\003num\030\010 \001(\r\022\014\n"
    "\004data\030\t \001(\014\"\355\001\n\027stBroadcastNewGmUserCmd\022"
    "\016\n\006taskID\030\001 \001(\r\022\014\n\004gmID\030\002 \001(\r\022\016\n\006gmName\030"
    "\003 \001(\t\022\020\n\010dwZoneID\030\004 \001(\r\022\022\n\nwCountryID\030\005 "
    "\001(\r\022\020\n\010wSceneID\030\006 \001(\r\022\022\n\ndwTimeFrom\030\007 \001("
    "\r\022\021\n\tdwTimeEnd\030\010 \001(\r\022\026\n\016dwIntervalTime\030\t"
    " \001(\r\022\022\n\nbyPriority\030\n \001(\r\022\013\n\003num\030\013 \001(\r\022\014\n"
    "\004data\030\014 \001(\014\",\n\032stBroadcastDeleteGmUserCm"
    "d\022\016\n\006taskID\030\001 \001(\r\"h\n\033stBroadcastRequestG"
    "mUserCmd\022\020\n\010dwZoneID\030\001 \001(\r\022\022\n\nwCountryID"
    "\030\002 \001(\r\022\020\n\010wSceneID\030\003 \001(\r\022\021\n\tdwTimeEnd\030\004 "
    "\001(\r\"\030\n\026stRequestTimeGmUserCmd\"%\n\025stRetur"
    "nTimeGmUserCmd\022\014\n\004time\030\001 \001(\r\"\226\001\n\031stServe"
    "rShutdownGmUserCmd\022\016\n\006zoneid\030\001 \001(\r\022\020\n\010se"
    "rverid\030\002 \001(\r\022\022\n\nservertype\030\003 \001(\r\022\022\n\nserv"
    "ername\030\004 \001(\t\022\020\n\010serverip\030\005 \001(\r\022\017\n\007usernu"
    "m\030\006 \001(\r\022\014\n\004time\030\007 \001(\r\"\033\n\031stRequestZoneDi"
    "cGmUserCmd\"\177\n\030stReturnZoneDicGmUserCmd\022\013"
    "\n\003num\030\001 \001(\r\0220\n\004data\030\002 \003(\0132\".Pmd.stReturn"
    "ZoneDicGmUserCmd.Data\032$\n\004Data\022\016\n\006zoneid\030"
    "\001 \001(\r\022\014\n\004name\030\002 \001(\r\"_\n\030stAddChatConfigGm"
    "UserCmd\022\016\n\006zoneid\030\001 \001(\r\022\021\n\tcountyrid\030\002 \001"
    "(\r\022\017\n\007sceneid\030\003 \001(\r\022\017\n\007channel\030\004 \001(\r\"b\n\033"
    "stCancelChatConfigGmUserCmd\022\016\n\006zoneid\030\001 "
    "\001(\r\022\021\n\tcountyrid\030\002 \001(\r\022\017\n\007sceneid\030\003 \001(\r\022"
    "\017\n\007channel\030\004 \001(\r\"\035\n\033stRequestChatTypesGm"
    "UserCmd\"\205\001\n\032stReturnChatTypesGmUserCmd\022\013"
    "\n\003num\030\001 \001(\r\0222\n\004data\030\002 \003(\0132$.Pmd.stReturn"
    "ChatTypesGmUserCmd.Data\032&\n\004Data\022\020\n\010chatT"
    "ype\030\001 \001(\r\022\014\n\004name\030\002 \001(\r\"\204\001\n\030stServerStar"
    "tupGmUserCmd\022\016\n\006zoneid\030\001 \001(\r\022\020\n\010serverid"
    "\030\002 \001(\r\022\022\n\nservertype\030\003 \001(\r\022\022\n\nservername"
    "\030\004 \001(\t\022\020\n\010serverip\030\005 \001(\r\022\014\n\004time\030\006 \001(\r\"\177"
    "\n\031stNotifyShutdownGmUserCmd\022\014\n\004gmid\030\001 \001("
    "\r\022\016\n\006gmName\030\002 \001(\t\022\016\n\006zoneid\030\003 \001(\r\022\020\n\010lef"
    "tTime\030\004 \001(\r\022\024\n\014shutdownTime\030\005 \001(\r\022\014\n\004dat"
    "a\030\006 \001(\t\"+\n\031stCancelShutdownGmUserCmd\022\016\n\006"
    "zoneid\030\001 \001(\r\"F\n\032stGmServerMessageGmUserC"
    "md\022\014\n\004type\030\001 \001(\r\022\014\n\004gmid\030\002 \001(\r\022\014\n\004data\030\003"
    " \001(\014\")\n\033stRequestDelGmUserGmUserCmd\022\n\n\002i"
    "d\030\001 \001(\r\"3\n%stRequestResetGmUserPasswordG"
    "mUserCmd\022\n\n\002id\030\001 \001(\r\",\n\032stQequestShutDow"
    "nGmUserCmd\022\016\n\006zoneid\030\001 \001(\r\"G\n\037stRequestF"
    "orbidAccountGmUserCmd\022$\n\004data\030\001 \001(\0132\026.Pm"
    "d.ForbidAccountData\"E\n\035stQueryForbidAcco"
    "untGmUserCmd\022$\n\004data\030\001 \001(\0132\026.Pmd.ForbidA"
    "ccountData\"1\n\"stReturnForbidAccountListG"
    "mUserCmd\022\013\n\003num\030\001 \001(\r\"I\n!stRequestUnForb"
    "idAccountGmUserCmd\022$\n\004data\030\001 \001(\0132\026.Pmd.F"
    "orbidAccountData\"0\n\036stBroadcastDeleteZon"
    "eGmUserCmd\022\016\n\006zoneID\030\001 \001(\r\",\n\035stRequestN"
    "ameAccountGmUserCmd\022\013\n\003num\030\001 \001(\r\"+\n\034stRe"
    "turnNameAccountGmUserCmd\022\013\n\003num\030\001 \001(\r\"&\n"
    "$stRequestDBConnectionConfigGmUserCmd\"@\n"
    "#stReturnDBConnectionConfigGmUserCmd\022\013\n\003"
    "num\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"9\n\031stQueryNameEx"
    "istGmUserCmd\022\014\n\004name\030\001 \001(\t\022\016\n\006optype\030\002 \001"
    "(\r\":\n\032stForceInsertNameGmUserCmd\022\014\n\004name"
    "\030\001 \001(\t\022\016\n\006optype\030\002 \001(\r\"z\n\032stForceModifyN"
    "ameGmUserCmd\022\014\n\004gmid\030\001 \001(\r\022\016\n\006zoneid\030\002 \001"
    "(\r\022\014\n\004opid\030\003 \001(\r\022\017\n\007oldname\030\004 \001(\t\022\017\n\007new"
    "name\030\005 \001(\t\022\016\n\006optype\030\006 \001(\r\"6\n\026stCheckOnl"
    "ineGmUserCmd\022\016\n\006zoneid\030\001 \001(\r\022\014\n\004name\030\002 \001"
    "(\t\"M\n\034stReturnCheckOnlineGmUserCmd\022\016\n\006zo"
    "neid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007retcode\030\003 \001("
    "\r\"\224\001\n\025stPunishUserGmUserCmd\022\020\n\010userName\030"
    "\001 \001(\t\022\n\n\002GM\030\002 \001(\t\022\016\n\006reason\030\003 \001(\t\022\021\n\tope"
    "ration\030\004 \001(\r\022\r\n\005delay\030\005 \001(\r\022\020\n\010waitTime\030"
    "\006 \001(\r\022\r\n\005accid\030\007 \001(\r\022\n\n\002ip\030\010 \001(\r\"@\n\035stRe"
    "questUserPosUserGmUserCmd\022\016\n\006zoneid\030\001 \001("
    "\r\022\017\n\007sceneid\030\002 \001(\r\"\277\001\n\034stReturnUserPosUs"
    "erGmUserCmd\022\013\n\003num\030\001 \001(\r\022\016\n\006zoneid\030\002 \001(\r"
    "\022\017\n\007sceneid\030\003 \001(\r\022\r\n\005width\030\004 \001(\r\022\016\n\006heig"
    "ht\030\005 \001(\r\0224\n\004data\030\006 \003(\0132&.Pmd.stReturnUse"
    "rPosUserGmUserCmd.Data\032\034\n\004Data\022\t\n\001x\030\001 \001("
    "\r\022\t\n\001y\030\002 \001(\r\"<\n\031stEndUserPosUserGmUserCm"
    "d\022\016\n\006zoneid\030\001 \001(\r\022\017\n\007sceneid\030\002 \001(\r\"\203\001\n\036s"
    "tBroadcastReallySendGmUserCmd\022\016\n\006taskID\030"
    "\001 \001(\r\022\020\n\010dwZoneID\030\002 \001(\r\022\022\n\nwCountryID\030\003 "
    "\001(\r\022\020\n\010wSceneID\030\004 \001(\r\022\013\n\003num\030\005 \001(\r\022\014\n\004da"
    "ta\030\006 \001(\014\"\215\001\n\022stDBQueryGmUserCmd\022\021\n\tbyNoL"
    "imit\030\001 \001(\r\022\021\n\ttablename\030\002 \001(\t\022\021\n\ttimebeg"
    "in\030\003 \001(\r\022\017\n\007timeend\030\004 \001(\r\022\016\n\006sqllen\030\005 \001("
    "\r\022\017\n\007typelen\030\006 \001(\r\022\014\n\004data\030\007 \001(\014\"4\n\027stDB"
    "ReturnDataGmUserCmd\022\013\n\003num\030\001 \001(\r\022\014\n\004data"
    "\030\002 \001(\014\"\030\n\026stDBReturnEndGmUserCmd\"`\n#stFu"
    "llForbidAccountLogDataGmUserCmd\022\023\n\013byOpe"
    "ration\030\001 \001(\r\022$\n\004data\030\002 \001(\0132\026.Pmd.ForbidA"
    "ccountData\"\242\001\n\037stFullGameGmCmdLogDataGmU"
    "serCmd\022\r\n\005accID\030\001 \001(\r\022\016\n\006charID\030\002 \001(\r\022\016\n"
    "\006gmName\030\003 \001(\t\022\016\n\006zoneID\030\004 \001(\r\022\021\n\tcountry"
    "ID\030\005 \001(\r\022\017\n\007sceneID\030\006 \001(\r\022\013\n\003cmd\030\007 \001(\t\022\017"
    "\n\007content\030\010 \001(\t\"m\n\035stRequestAddQuestionG"
    "mUserCmd\022#\n\004head\030\001 \001(\0132\025.Pmd.QuestionBas"
    "eData\022\014\n\004desc\030\002 \001(\t\022\013\n\003num\030\003 \001(\r\022\014\n\004data"
    "\030\004 \001(\014\"v\n\031stReturnQuestionGmUserCmd\022#\n\004h"
    "ead\030\001 \001(\0132\025.Pmd.QuestionBaseData\022\014\n\004desc"
    "\030\002 \001(\t\022\013\n\003seq\030\003 \001(\r\022\013\n\003num\030\004 \001(\r\022\014\n\004data"
    "\030\005 \001(\014\"6\n\033stSequenceQuestionGmUserCmd\022\n\n"
    "\002id\030\001 \001(\r\022\013\n\003seq\030\002 \001(\r\"7\n\031stDeleteQuesti"
    "onGmUserCmd\022\n\n\002id\030\001 \001(\r\022\016\n\006userid\030\002 \001(\r\""
    ",\n\032stRequestQuestionGmUserCmd\022\016\n\006userid\030"
    "\001 \001(\r\"/\n\035stRequestSeqQuestionGmUserCmd\022\016"
    "\n\006userid\030\001 \001(\r\"\037\n\035stReturnNoneQuestionGm"
    "UserCmd\"F\n\031stUserCmdForwardGmUserCmd\022\013\n\003"
    "num\030\001 \001(\r\022\016\n\006userid\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\""
    "6\n\032stProcessQuestionGmUserCmd\022\n\n\002id\030\001 \001("
    "\r\022\014\n\004gmid\030\002 \001(\r\".\n\036stGMToolBeginQuestion"
    "GmUserCmd\022\014\n\004gmid\030\001 \001(\r\",\n\034stGMToolEndQu"
    "estionGmUserCmd\022\014\n\004gmid\030\001 \001(\r\"[\n\035stDisab"
    "leGMChatInputGmUserCmd\022\014\n\004gmid\030\001 \001(\r\022\016\n\006"
    "gmname\030\002 \001(\t\022\020\n\010rolename\030\003 \001(\t\022\n\n\002id\030\004 \001"
    "(\r\"G\n\033stDeleteQuestionByGmUserCmd\022\n\n\002id\030"
    "\001 \001(\r\022\016\n\006userid\030\002 \001(\r\022\014\n\004gmid\030\003 \001(\r\")\n\027s"
    "tQuestionOverGmUserCmd\022\016\n\006reason\030\001 \001(\r\"-"
    "\n\035stQueryQuestionLimitGmUserCmd\022\014\n\004gmid\030"
    "\001 \001(\r\"]\n\036stReturnQuestionLimitGmUserCmd\022"
    "\013\n\003max\030\001 \001(\r\022\023\n\013maxWaitTime\030\002 \001(\r\022\013\n\003num"
    "\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\"j\n\035stResetQuestionL"
    "imitGmUserCmd\022\014\n\004gmid\030\001 \001(\r\022\013\n\003max\030\002 \001(\r"
    "\022\023\n\013maxWaitTime\030\003 \001(\r\022\013\n\003num\030\004 \001(\r\022\014\n\004da"
    "ta\030\005 \001(\014\"\320\001\n\033stBroadcastToWorldGmUserCmd"
    "\022\014\n\004name\030\001 \001(\t\022\016\n\006zoneid\030\002 \001(\r\022\021\n\tcountr"
    "yid\030\003 \001(\r\022\017\n\007sceneid\030\004 \001(\r\022\022\n\nprovinceid"
    "\030\005 \001(\r\022\016\n\006cityid\030\006 \001(\r\022\020\n\010chatType\030\007 \001(\r"
    "\022\017\n\007chatpos\030\010 \001(\r\022\r\n\005color\030\t \001(\r\022\013\n\003num\030"
    "\n \001(\r\022\014\n\004data\030\013 \001(\014\"W\n\032stSetActivityNote"
    "GmUserCmd\022\016\n\006gmname\030\001 \001(\t\022\016\n\006zoneid\030\002 \001("
    "\r\022\013\n\003num\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\"\'\n%stReques"
    "tRefreshUserQuestionGmUserCmd\"E\n\037stReque"
    "stSetUserGoldInGmUserCmd\022\022\n\nszUserName\030\001"
    " \001(\t\022\016\n\006dwGold\030\002 \001(\r\"3\n\030stSetPrivilegesG"
    "mUserCmd\022\013\n\003pri\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"\263\001\n\032st"
    "RequestSaveChatGmUserCmd\022\022\n\nhashnumber\030\001"
    " \001(\r\022\016\n\006gmname\030\002 \001(\t\022\020\n\010chattype\030\003 \001(\r\022\016"
    "\n\006zoneid\030\004 \001(\r\022\021\n\tcountryid\030\005 \001(\r\022\017\n\007sce"
    "neid\030\006 \001(\r\022\020\n\010rolename\030\007 \001(\t\022\013\n\003num\030\010 \001("
    "\r\022\014\n\004data\030\t \001(\014\"\200\001\n\037stGameClientMessageB"
    "oxGmUserCmd\022\016\n\006gmname\030\001 \001(\t\022\016\n\006zoneid\030\002 "
    "\001(\r\022\021\n\tcountryid\030\003 \001(\r\022\017\n\007sceneid\030\004 \001(\r\022"
    "\013\n\003num\030\005 \001(\r\022\014\n\004data\030\006 \001(\014\"\316\001\n stGameCli"
    "entChatMessageGMUserCmd\022\016\n\006gmname\030\001 \001(\t\022"
    "\020\n\010username\030\002 \001(\t\022\016\n\006zoneid\030\003 \001(\r\022\021\n\tcou"
    "ntryid\030\004 \001(\r\022\017\n\007sceneid\030\005 \001(\r\022\022\n\nbyChatT"
    "ype\030\006 \001(\r\022\021\n\tbyChatPos\030\007 \001(\r\022\r\n\005color\030\010 "
    "\001(\r\022\016\n\006bySize\030\t \001(\r\022\016\n\006szInfo\030\n \001(\014\":\n)s"
    "tRequestGameClientMessageConfigGmUserCmd"
    "\022\r\n\005keyID\030\001 \001(\r\"T\n(stReturnGameClientMes"
    "sageConfigGmUserCmd\022\r\n\005keyID\030\001 \001(\r\022\013\n\003nu"
    "m\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\"\275\001\n\035stPlayerSatisf"
    "actionGmUserCmd\022\016\n\006gmname\030\001 \001(\t\022\020\n\010charn"
    "ame\030\002 \001(\t\022\016\n\006charid\030\003 \001(\r\022\016\n\006zoneid\030\004 \001("
    "\r\022\021\n\tcountryid\030\005 \001(\r\022\017\n\007sceneid\030\006 \001(\r\022\022\n"
    "\nquestionid\030\007 \001(\r\022\024\n\014satisfaction\030\010 \001(\r\022"
    "\014\n\004desc\030\t \001(\t\".\n\034stRequestMyQuestionGmUs"
    "erCmd\022\016\n\006userid\030\001 \001(\r\"6\n$stRequestQuesti"
    "onSubmitableGmUserCmd\022\016\n\006userid\030\001 \001(\r\"\200\001"
    "\n\031stVerifyOnlineQaGmUserCmd\022\r\n\005stamp\030\001 \001"
    "(\r\022\016\n\006zoneid\030\002 \001(\r\022\017\n\007sceneid\030\003 \001(\r\022\021\n\tc"
    "ountryid\030\004 \001(\r\022\016\n\006gmname\030\005 \001(\t\022\020\n\010userna"
    "me\030\006 \001(\t\"\221\001\n\"stNewGameClientMessageBoxGm"
    "UserCmd\022\016\n\006gmname\030\001 \001(\t\022\016\n\006zoneid\030\002 \001(\r\022"
    "\021\n\tcountryid\030\003 \001(\r\022\017\n\007sceneid\030\004 \001(\r\022\013\n\003n"
    "um\030\005 \001(\r\022\014\n\004type\030\006 \001(\r\022\014\n\004data\030\007 \001(\014\"B\n$"
    "stRequestPreProcessQuestionGmUserCmd\022\n\n\002"
    "id\030\001 \001(\r\022\016\n\006userid\030\002 \001(\r\"\216\001\n#stReturnPre"
    "ProcessQuestionGmUserCmd\022#\n\004head\030\001 \001(\0132\025"
    ".Pmd.QuestionBaseData\022\014\n\004desc\030\002 \001(\t\022\013\n\003s"
    "eq\030\003 \001(\r\022\014\n\004gmid\030\004 \001(\r\022\013\n\003num\030\005 \001(\r\022\014\n\004d"
    "ata\030\006 \001(\014\"A\n#stReturnNowPreProcessQusetG"
    "mUserCmd\022\n\n\002id\030\001 \001(\r\022\016\n\006userid\030\002 \001(\r\"@\n\""
    "stDeleteProcessedQuestionGmUserCmd\022\n\n\002id"
    "\030\001 \001(\r\022\016\n\006userid\030\002 \001(\r\"-\n\035stRequestOneQu"
    "estionGmUserCmd\022\014\n\004gmid\030\001 \001(\r\"\207\001\n\034stRetu"
    "rnOneQuestionGmUserCmd\022\014\n\004flag\030\001 \001(\r\022#\n\004"
    "head\030\002 \001(\0132\025.Pmd.QuestionBaseData\022\014\n\004des"
    "c\030\003 \001(\t\022\013\n\003seq\030\004 \001(\r\022\013\n\003num\030\005 \001(\r\022\014\n\004dat"
    "a\030\006 \001(\014\"v\n\"stRequestResetGmWorkStateGmUs"
    "erCmd\022\n\n\002id\030\001 \001(\r\022\017\n\007qMaxNum\030\002 \001(\r\022\020\n\010au"
    "toRecv\030\003 \001(\r\022\021\n\tworkState\030\004 \001(\r\022\016\n\006winNu"
    "m\030\005 \001(\r\"u\n!stReturnResetGmWorkStateGmUse"
    "rCmd\022\n\n\002id\030\001 \001(\r\022\017\n\007qMaxNum\030\002 \001(\r\022\020\n\010aut"
    "oRecv\030\003 \001(\r\022\021\n\tworkState\030\004 \001(\r\022\016\n\006winNum"
    "\030\005 \001(\r\".\n\022stGmCommandUserCmd\022\013\n\003num\030\001 \001("
    "\r\022\013\n\003str\030\002 \001(\014\"6\n\031stGmCommandToSceneUser"
    "Cmd\022\014\n\004gmid\030\001 \001(\r\022\013\n\003str\030\002 \001(\014\"\033\n\031stForc"
    "eChangeSexGmUserCmd\"=\n\034stRequestMobileIn"
    "foGmUserCmd\022\016\n\006mobile\030\001 \001(\004\022\r\n\005accid\030\002 \001"
    "(\r*\372\002\n\016GMToolRightKey\022\022\n\016RightKey_Login\020"
    "\001\022\032\n\026RightKey_AccountManage\020\002\022\026\n\022RightKe"
    "y_Broadcast\020\004\022\030\n\024RightKey_ChatMonitor\020\010\022"
    "\033\n\027RightKey_ShutDownNotify\020\020\022\023\n\017RightKey"
    "_Punish\020 \022\027\n\023RightKey_PlayerInfo\020@\022\026\n\021Ri"
    "ghtKey_LogQuery\020\200\001\022\026\n\021RightKey_OnlineQA\020"
    "\200\002\022\036\n\031RightKey_ProductionCenter\020\200\004\022\031\n\024Ri"
    "ghtKey_Namecontrol\020\200\010\022\035\n\030RightKey_SetRec"
    "vQuestion\020\200\020\022\030\n\023RightKey_NewVersion\020\200 \022\027"
    "\n\022RightKey_GMCommand\020\200@*r\n\010GMOptKey\022\017\n\013A"
    "ccountNone\020\000\022\021\n\rAccountCreate\020\001\022\021\n\rAccou"
    "ntDelete\020\002\022\031\n\025AccountPasswordModify\020\003\022\024\n"
    "\020AccountPriModify\020\004*V\n\010UserType\022\021\n\rUserT"
    "ype_None\020\000\022\021\n\rUserType_VIP1\020\001\022\021\n\rUserTyp"
    "e_VIP2\020\002\022\021\n\rUserType_VIP3\020\003*\372\001\n\021ReturnLo"
    "ginGmType\022\030\n\024ReturnLoginGmType_OK\020\000\022\"\n\036R"
    "eturnLoginGmType_Error_Passwd\020\001\022\"\n\036Retur"
    "nLoginGmType_Error_NoUser\020\002\022 \n\034ReturnLog"
    "inGmType_Error_None\020\003\022!\n\035ReturnLoginGmTy"
    "pe_Error_Using\020\004\022#\n\037ReturnLoginGmType_Er"
    "ror_Version\020\005\022\031\n\025ReturnLoginGmType_End\020\006"
    "*s\n\023GmServerMessageType\022\034\n\030GmServerMessa"
    "geType_Info\020\000\022\037\n\033GmServerMessageType_War"
    "ning\020\001\022\035\n\031GmServerMessageType_Error\020\002*d\n"
    "\017NameOperateType\022\034\n\030NameOperateType_Role"
    "name\020\000\022\030\n\024NameOperateType_Army\020\001\022\031\n\025Name"
    "OperateType_Corps\020\002*X\n\006dbtype\022\n\n\006dbbyte\020"
    "\001\022\014\n\010dbushort\020\002\022\n\n\006dbuint\020\003\022\r\n\tdbvarstr4"
    "\020\010\022\031\n\025dbfixstr_MAX_NAMESIZE\020\t*\255\001\n\020enumQu"
    "estionOver\022\034\n\030enumQuestionOver_unknown\020\000"
    "\022\034\n\030enumQuestionOver_userDel\020\001\022\032\n\026enumQu"
    "estionOver_gmDel\020\002\022\036\n\032enumQuestionOver_g"
    "mProcess\020\003\022!\n\035enumQuestionOver_gmPreProc"
    "ess\020\004*F\n\025GameClientMessageType\022\023\n\017Messag"
    "eType_Box\020\000\022\030\n\024MessageType_MiniSize\020\001", 32117);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gmcommand.proto", &protobuf_RegisterTypes);
  Gm::default_instance_ = new Gm();
  RequestExecGmCommandGmPmd_SC::default_instance_ = new RequestExecGmCommandGmPmd_SC();
  RequestGameZoneErrorGmPmd_S::default_instance_ = new RequestGameZoneErrorGmPmd_S();
  RequestHotRestartGmUserPmd_CS::default_instance_ = new RequestHotRestartGmUserPmd_CS();
  RequesetScriptUpdateGmUserPmd_CS::default_instance_ = new RequesetScriptUpdateGmUserPmd_CS();
  RequesetRefreshGatewaylistGmUserPmd_CS::default_instance_ = new RequesetRefreshGatewaylistGmUserPmd_CS();
  RequestGenerateCodeGmUserPmd_C::default_instance_ = new RequestGenerateCodeGmUserPmd_C();
  ReturnGenerateCodeGmUserPmd_S::default_instance_ = new ReturnGenerateCodeGmUserPmd_S();
  RequestOpeartorCodeGmUserPmd_C::default_instance_ = new RequestOpeartorCodeGmUserPmd_C();
  CodeInfo::default_instance_ = new CodeInfo();
  ReturnOpreatorCodeGmUserPmd_S::default_instance_ = new ReturnOpreatorCodeGmUserPmd_S();
  OrderInfo::default_instance_ = new OrderInfo();
  GameOrderListGmUserPmd_CS::default_instance_ = new GameOrderListGmUserPmd_CS();
  QueryPackageCodeGmUserPmd_CS::default_instance_ = new QueryPackageCodeGmUserPmd_CS();
  RequestUsePackageCodeGmUserPmd_CS::default_instance_ = new RequestUsePackageCodeGmUserPmd_CS();
  FeedbackData::default_instance_ = new FeedbackData();
  FeedbackGmUserPmd_CS::default_instance_ = new FeedbackGmUserPmd_CS();
  RequestFeedbackListGmUserPmd_C::default_instance_ = new RequestFeedbackListGmUserPmd_C();
  RequestDealFeedbackGmUserPmd_CS::default_instance_ = new RequestDealFeedbackGmUserPmd_CS();
  PointReportData::default_instance_ = new PointReportData();
  RequestPointReportGmUserPmd_CS::default_instance_ = new RequestPointReportGmUserPmd_CS();
  PointDetailData::default_instance_ = new PointDetailData();
  RequestPointDetailGmUserPmd_CS::default_instance_ = new RequestPointDetailGmUserPmd_CS();
  BettingDetailData::default_instance_ = new BettingDetailData();
  RequestBettingDetailGmUserPmd_CS::default_instance_ = new RequestBettingDetailGmUserPmd_CS();
  StockData::default_instance_ = new StockData();
  RequestStockInfoGmUserPmd_CS::default_instance_ = new RequestStockInfoGmUserPmd_CS();
  RequestOnlineUserInfoGmUserPmd_CS::default_instance_ = new RequestOnlineUserInfoGmUserPmd_CS();
  RedPacketsInfo::default_instance_ = new RedPacketsInfo();
  RequestRedPacketsGmUserPmd_CS::default_instance_ = new RequestRedPacketsGmUserPmd_CS();
  SubgameList::default_instance_ = new SubgameList();
  RequestedSubgameListGmUserPmd_CS::default_instance_ = new RequestedSubgameListGmUserPmd_CS();
  WinLoseInfo::default_instance_ = new WinLoseInfo();
  RequestWinningListGmUserPmd_CS::default_instance_ = new RequestWinningListGmUserPmd_CS();
  BlackWhitelistInfo::default_instance_ = new BlackWhitelistInfo();
  AddBlackWhitelistGmUserPmd_CS::default_instance_ = new AddBlackWhitelistGmUserPmd_CS();
  ModBlackWhitelistGmUserPmd_CS::default_instance_ = new ModBlackWhitelistGmUserPmd_CS();
  DelBlackWhitelistGmUserPmd_CS::default_instance_ = new DelBlackWhitelistGmUserPmd_CS();
  RequestBlackWhitelistGmUserPmd_CS::default_instance_ = new RequestBlackWhitelistGmUserPmd_CS();
  GmMailInfo::default_instance_ = new GmMailInfo();
  RequestSendMailGmUserPmd_CS::default_instance_ = new RequestSendMailGmUserPmd_CS();
  LoginRecordData::default_instance_ = new LoginRecordData();
  RequestLoginRecordGmUserPmd_CS::default_instance_ = new RequestLoginRecordGmUserPmd_CS();
  ConsumeRecordData::default_instance_ = new ConsumeRecordData();
  RequestConsumeRecordGmUserPmd_CS::default_instance_ = new RequestConsumeRecordGmUserPmd_CS();
  ActionRecordData::default_instance_ = new ActionRecordData();
  RequestActionRecordGmUserPmd_CS::default_instance_ = new RequestActionRecordGmUserPmd_CS();
  StrengthenRecordData::default_instance_ = new StrengthenRecordData();
  RequestStrengthenRecordGmUserPmd_CS::default_instance_ = new RequestStrengthenRecordGmUserPmd_CS();
  MailRecordData::default_instance_ = new MailRecordData();
  RequestMailRecordGmUserPmd_CS::default_instance_ = new RequestMailRecordGmUserPmd_CS();
  RankRecordData::default_instance_ = new RankRecordData();
  RequestRankRecordGmUserPmd_CS::default_instance_ = new RequestRankRecordGmUserPmd_CS();
  BossRecordData::default_instance_ = new BossRecordData();
  RequestBossRecordGmUserPmd_CS::default_instance_ = new RequestBossRecordGmUserPmd_CS();
  RenameRecordData::default_instance_ = new RenameRecordData();
  RequestRenameRecordGmUserPmd_CS::default_instance_ = new RequestRenameRecordGmUserPmd_CS();
  StartUpGameRequestGmPmd_C::default_instance_ = new StartUpGameRequestGmPmd_C();
  StartUpGameReturnGmPmd_S::default_instance_ = new StartUpGameReturnGmPmd_S();
  SurportGameZoneRequestGmPmd_C::default_instance_ = new SurportGameZoneRequestGmPmd_C();
  SurportGameZoneReturnGmPmd_S::default_instance_ = new SurportGameZoneReturnGmPmd_S();
  ReconnectKickoutGmSmd_S::default_instance_ = new ReconnectKickoutGmSmd_S();
  GmUserInfo::default_instance_ = new GmUserInfo();
  RequestLoginGmUserPmd_C::default_instance_ = new RequestLoginGmUserPmd_C();
  ReturnLoginGmUserPmd_S::default_instance_ = new ReturnLoginGmUserPmd_S();
  SetPasswordGmUserPmd_CS::default_instance_ = new SetPasswordGmUserPmd_CS();
  AddNewGmUserPmd_CS::default_instance_ = new AddNewGmUserPmd_CS();
  GmAccountListGmUserPmd_CS::default_instance_ = new GmAccountListGmUserPmd_CS();
  RequestDelGmUserPmd_CS::default_instance_ = new RequestDelGmUserPmd_CS();
  RequestModifyPriGmUserPmd_CS::default_instance_ = new RequestModifyPriGmUserPmd_CS();
  SelectGamezoneGmUserPmd_SC::default_instance_ = new SelectGamezoneGmUserPmd_SC();
  BroadcastInfo::default_instance_ = new BroadcastInfo();
  BroadcastNewGmUserPmd_C::default_instance_ = new BroadcastNewGmUserPmd_C();
  ReturnBroadcastNewGmUserPmd_S::default_instance_ = new ReturnBroadcastNewGmUserPmd_S();
  BroadcastDeleteGmUserPmd_C::default_instance_ = new BroadcastDeleteGmUserPmd_C();
  ReturnBroadcastDeleteGmUserPmd_S::default_instance_ = new ReturnBroadcastDeleteGmUserPmd_S();
  RequestBroadcastListGmUserPmd_C::default_instance_ = new RequestBroadcastListGmUserPmd_C();
  ReturnBroadcastListGmUserPmd_S::default_instance_ = new ReturnBroadcastListGmUserPmd_S();
  PunishUserInfo::default_instance_ = new PunishUserInfo();
  PunishUserGmUserPmd_C::default_instance_ = new PunishUserGmUserPmd_C();
  ReturnPunishUserGmUserPmd_S::default_instance_ = new ReturnPunishUserGmUserPmd_S();
  DeletePunishUserGmUserPmd_C::default_instance_ = new DeletePunishUserGmUserPmd_C();
  ReturnDeletePunishUserGmUserPmd_S::default_instance_ = new ReturnDeletePunishUserGmUserPmd_S();
  RequestPunishListGmUserPmd_C::default_instance_ = new RequestPunishListGmUserPmd_C();
  ReturnPunishListGmUserPmd_S::default_instance_ = new ReturnPunishListGmUserPmd_S();
  ItemInfo::default_instance_ = new ItemInfo();
  ItemTypeInfo::default_instance_ = new ItemTypeInfo();
  RequestItemTypeInfoGmUserPmd_CS::default_instance_ = new RequestItemTypeInfoGmUserPmd_CS();
  UserInfo::default_instance_ = new UserInfo();
  RequestUserInfoGmUserPmd_C::default_instance_ = new RequestUserInfoGmUserPmd_C();
  ReturnUserInfoGmUserPmd_S::default_instance_ = new ReturnUserInfoGmUserPmd_S();
  RequestUserPackageGmUserPmd_C::default_instance_ = new RequestUserPackageGmUserPmd_C();
  ReturnUserPackageGmUserPmd_S::default_instance_ = new ReturnUserPackageGmUserPmd_S();
  RequestModifyUserInfoGmUserPmd_C::default_instance_ = new RequestModifyUserInfoGmUserPmd_C();
  ReturnModifyUserInfoGmUserPmd_S::default_instance_ = new ReturnModifyUserInfoGmUserPmd_S();
  RequestUserRecordGmUserPmd_C::default_instance_ = new RequestUserRecordGmUserPmd_C();
  RecordInfo::default_instance_ = new RecordInfo();
  ReturnUserRecordGmUserPmd_S::default_instance_ = new ReturnUserRecordGmUserPmd_S();
  QuestionBaseData::default_instance_ = new QuestionBaseData();
  ForbidAccountData::default_instance_ = new ForbidAccountData();
  stRequestLoginGmUserCmd::default_instance_ = new stRequestLoginGmUserCmd();
  stReturnLoginGmUserCmd::default_instance_ = new stReturnLoginGmUserCmd();
  stConfigGmUserCmd::default_instance_ = new stConfigGmUserCmd();
  stSetPasswordGmUserCmd::default_instance_ = new stSetPasswordGmUserCmd();
  stReturnPasswordGmUserCmd::default_instance_ = new stReturnPasswordGmUserCmd();
  stAddNewGmUserCmd::default_instance_ = new stAddNewGmUserCmd();
  stReturnAddNewGmUserCmd::default_instance_ = new stReturnAddNewGmUserCmd();
  stQueryListGmUserCmd::default_instance_ = new stQueryListGmUserCmd();
  stReturnListGmUserCmd::default_instance_ = new stReturnListGmUserCmd();
  stReturnListGmUserCmd_Data::default_instance_ = new stReturnListGmUserCmd_Data();
  stRequestZoneConfigGmUserCmd::default_instance_ = new stRequestZoneConfigGmUserCmd();
  stReturnZoneDicCountryGmUserCmd::default_instance_ = new stReturnZoneDicCountryGmUserCmd();
  stReturnZoneDicCountryGmUserCmd_Data::default_instance_ = new stReturnZoneDicCountryGmUserCmd_Data();
  stReturnZoneDicMapGmUserCmd::default_instance_ = new stReturnZoneDicMapGmUserCmd();
  stReturnZoneDicMapGmUserCmd_Data::default_instance_ = new stReturnZoneDicMapGmUserCmd_Data();
  stForwardToAllGmUserCmd::default_instance_ = new stForwardToAllGmUserCmd();
  stForwardToOnlyGmUserCmd::default_instance_ = new stForwardToOnlyGmUserCmd();
  stBroadcastNewGmUserCmd::default_instance_ = new stBroadcastNewGmUserCmd();
  stBroadcastDeleteGmUserCmd::default_instance_ = new stBroadcastDeleteGmUserCmd();
  stBroadcastRequestGmUserCmd::default_instance_ = new stBroadcastRequestGmUserCmd();
  stRequestTimeGmUserCmd::default_instance_ = new stRequestTimeGmUserCmd();
  stReturnTimeGmUserCmd::default_instance_ = new stReturnTimeGmUserCmd();
  stServerShutdownGmUserCmd::default_instance_ = new stServerShutdownGmUserCmd();
  stRequestZoneDicGmUserCmd::default_instance_ = new stRequestZoneDicGmUserCmd();
  stReturnZoneDicGmUserCmd::default_instance_ = new stReturnZoneDicGmUserCmd();
  stReturnZoneDicGmUserCmd_Data::default_instance_ = new stReturnZoneDicGmUserCmd_Data();
  stAddChatConfigGmUserCmd::default_instance_ = new stAddChatConfigGmUserCmd();
  stCancelChatConfigGmUserCmd::default_instance_ = new stCancelChatConfigGmUserCmd();
  stRequestChatTypesGmUserCmd::default_instance_ = new stRequestChatTypesGmUserCmd();
  stReturnChatTypesGmUserCmd::default_instance_ = new stReturnChatTypesGmUserCmd();
  stReturnChatTypesGmUserCmd_Data::default_instance_ = new stReturnChatTypesGmUserCmd_Data();
  stServerStartupGmUserCmd::default_instance_ = new stServerStartupGmUserCmd();
  stNotifyShutdownGmUserCmd::default_instance_ = new stNotifyShutdownGmUserCmd();
  stCancelShutdownGmUserCmd::default_instance_ = new stCancelShutdownGmUserCmd();
  stGmServerMessageGmUserCmd::default_instance_ = new stGmServerMessageGmUserCmd();
  stRequestDelGmUserGmUserCmd::default_instance_ = new stRequestDelGmUserGmUserCmd();
  stRequestResetGmUserPasswordGmUserCmd::default_instance_ = new stRequestResetGmUserPasswordGmUserCmd();
  stQequestShutDownGmUserCmd::default_instance_ = new stQequestShutDownGmUserCmd();
  stRequestForbidAccountGmUserCmd::default_instance_ = new stRequestForbidAccountGmUserCmd();
  stQueryForbidAccountGmUserCmd::default_instance_ = new stQueryForbidAccountGmUserCmd();
  stReturnForbidAccountListGmUserCmd::default_instance_ = new stReturnForbidAccountListGmUserCmd();
  stRequestUnForbidAccountGmUserCmd::default_instance_ = new stRequestUnForbidAccountGmUserCmd();
  stBroadcastDeleteZoneGmUserCmd::default_instance_ = new stBroadcastDeleteZoneGmUserCmd();
  stRequestNameAccountGmUserCmd::default_instance_ = new stRequestNameAccountGmUserCmd();
  stReturnNameAccountGmUserCmd::default_instance_ = new stReturnNameAccountGmUserCmd();
  stRequestDBConnectionConfigGmUserCmd::default_instance_ = new stRequestDBConnectionConfigGmUserCmd();
  stReturnDBConnectionConfigGmUserCmd::default_instance_ = new stReturnDBConnectionConfigGmUserCmd();
  stQueryNameExistGmUserCmd::default_instance_ = new stQueryNameExistGmUserCmd();
  stForceInsertNameGmUserCmd::default_instance_ = new stForceInsertNameGmUserCmd();
  stForceModifyNameGmUserCmd::default_instance_ = new stForceModifyNameGmUserCmd();
  stCheckOnlineGmUserCmd::default_instance_ = new stCheckOnlineGmUserCmd();
  stReturnCheckOnlineGmUserCmd::default_instance_ = new stReturnCheckOnlineGmUserCmd();
  stPunishUserGmUserCmd::default_instance_ = new stPunishUserGmUserCmd();
  stRequestUserPosUserGmUserCmd::default_instance_ = new stRequestUserPosUserGmUserCmd();
  stReturnUserPosUserGmUserCmd::default_instance_ = new stReturnUserPosUserGmUserCmd();
  stReturnUserPosUserGmUserCmd_Data::default_instance_ = new stReturnUserPosUserGmUserCmd_Data();
  stEndUserPosUserGmUserCmd::default_instance_ = new stEndUserPosUserGmUserCmd();
  stBroadcastReallySendGmUserCmd::default_instance_ = new stBroadcastReallySendGmUserCmd();
  stDBQueryGmUserCmd::default_instance_ = new stDBQueryGmUserCmd();
  stDBReturnDataGmUserCmd::default_instance_ = new stDBReturnDataGmUserCmd();
  stDBReturnEndGmUserCmd::default_instance_ = new stDBReturnEndGmUserCmd();
  stFullForbidAccountLogDataGmUserCmd::default_instance_ = new stFullForbidAccountLogDataGmUserCmd();
  stFullGameGmCmdLogDataGmUserCmd::default_instance_ = new stFullGameGmCmdLogDataGmUserCmd();
  stRequestAddQuestionGmUserCmd::default_instance_ = new stRequestAddQuestionGmUserCmd();
  stReturnQuestionGmUserCmd::default_instance_ = new stReturnQuestionGmUserCmd();
  stSequenceQuestionGmUserCmd::default_instance_ = new stSequenceQuestionGmUserCmd();
  stDeleteQuestionGmUserCmd::default_instance_ = new stDeleteQuestionGmUserCmd();
  stRequestQuestionGmUserCmd::default_instance_ = new stRequestQuestionGmUserCmd();
  stRequestSeqQuestionGmUserCmd::default_instance_ = new stRequestSeqQuestionGmUserCmd();
  stReturnNoneQuestionGmUserCmd::default_instance_ = new stReturnNoneQuestionGmUserCmd();
  stUserCmdForwardGmUserCmd::default_instance_ = new stUserCmdForwardGmUserCmd();
  stProcessQuestionGmUserCmd::default_instance_ = new stProcessQuestionGmUserCmd();
  stGMToolBeginQuestionGmUserCmd::default_instance_ = new stGMToolBeginQuestionGmUserCmd();
  stGMToolEndQuestionGmUserCmd::default_instance_ = new stGMToolEndQuestionGmUserCmd();
  stDisableGMChatInputGmUserCmd::default_instance_ = new stDisableGMChatInputGmUserCmd();
  stDeleteQuestionByGmUserCmd::default_instance_ = new stDeleteQuestionByGmUserCmd();
  stQuestionOverGmUserCmd::default_instance_ = new stQuestionOverGmUserCmd();
  stQueryQuestionLimitGmUserCmd::default_instance_ = new stQueryQuestionLimitGmUserCmd();
  stReturnQuestionLimitGmUserCmd::default_instance_ = new stReturnQuestionLimitGmUserCmd();
  stResetQuestionLimitGmUserCmd::default_instance_ = new stResetQuestionLimitGmUserCmd();
  stBroadcastToWorldGmUserCmd::default_instance_ = new stBroadcastToWorldGmUserCmd();
  stSetActivityNoteGmUserCmd::default_instance_ = new stSetActivityNoteGmUserCmd();
  stRequestRefreshUserQuestionGmUserCmd::default_instance_ = new stRequestRefreshUserQuestionGmUserCmd();
  stRequestSetUserGoldInGmUserCmd::default_instance_ = new stRequestSetUserGoldInGmUserCmd();
  stSetPrivilegesGmUserCmd::default_instance_ = new stSetPrivilegesGmUserCmd();
  stRequestSaveChatGmUserCmd::default_instance_ = new stRequestSaveChatGmUserCmd();
  stGameClientMessageBoxGmUserCmd::default_instance_ = new stGameClientMessageBoxGmUserCmd();
  stGameClientChatMessageGMUserCmd::default_instance_ = new stGameClientChatMessageGMUserCmd();
  stRequestGameClientMessageConfigGmUserCmd::default_instance_ = new stRequestGameClientMessageConfigGmUserCmd();
  stReturnGameClientMessageConfigGmUserCmd::default_instance_ = new stReturnGameClientMessageConfigGmUserCmd();
  stPlayerSatisfactionGmUserCmd::default_instance_ = new stPlayerSatisfactionGmUserCmd();
  stRequestMyQuestionGmUserCmd::default_instance_ = new stRequestMyQuestionGmUserCmd();
  stRequestQuestionSubmitableGmUserCmd::default_instance_ = new stRequestQuestionSubmitableGmUserCmd();
  stVerifyOnlineQaGmUserCmd::default_instance_ = new stVerifyOnlineQaGmUserCmd();
  stNewGameClientMessageBoxGmUserCmd::default_instance_ = new stNewGameClientMessageBoxGmUserCmd();
  stRequestPreProcessQuestionGmUserCmd::default_instance_ = new stRequestPreProcessQuestionGmUserCmd();
  stReturnPreProcessQuestionGmUserCmd::default_instance_ = new stReturnPreProcessQuestionGmUserCmd();
  stReturnNowPreProcessQusetGmUserCmd::default_instance_ = new stReturnNowPreProcessQusetGmUserCmd();
  stDeleteProcessedQuestionGmUserCmd::default_instance_ = new stDeleteProcessedQuestionGmUserCmd();
  stRequestOneQuestionGmUserCmd::default_instance_ = new stRequestOneQuestionGmUserCmd();
  stReturnOneQuestionGmUserCmd::default_instance_ = new stReturnOneQuestionGmUserCmd();
  stRequestResetGmWorkStateGmUserCmd::default_instance_ = new stRequestResetGmWorkStateGmUserCmd();
  stReturnResetGmWorkStateGmUserCmd::default_instance_ = new stReturnResetGmWorkStateGmUserCmd();
  stGmCommandUserCmd::default_instance_ = new stGmCommandUserCmd();
  stGmCommandToSceneUserCmd::default_instance_ = new stGmCommandToSceneUserCmd();
  stForceChangeSexGmUserCmd::default_instance_ = new stForceChangeSexGmUserCmd();
  stRequestMobileInfoGmUserCmd::default_instance_ = new stRequestMobileInfoGmUserCmd();
  Gm::default_instance_->InitAsDefaultInstance();
  RequestExecGmCommandGmPmd_SC::default_instance_->InitAsDefaultInstance();
  RequestGameZoneErrorGmPmd_S::default_instance_->InitAsDefaultInstance();
  RequestHotRestartGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequesetScriptUpdateGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequesetRefreshGatewaylistGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestGenerateCodeGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnGenerateCodeGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  RequestOpeartorCodeGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  CodeInfo::default_instance_->InitAsDefaultInstance();
  ReturnOpreatorCodeGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  OrderInfo::default_instance_->InitAsDefaultInstance();
  GameOrderListGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  QueryPackageCodeGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestUsePackageCodeGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  FeedbackData::default_instance_->InitAsDefaultInstance();
  FeedbackGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestFeedbackListGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  RequestDealFeedbackGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  PointReportData::default_instance_->InitAsDefaultInstance();
  RequestPointReportGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  PointDetailData::default_instance_->InitAsDefaultInstance();
  RequestPointDetailGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  BettingDetailData::default_instance_->InitAsDefaultInstance();
  RequestBettingDetailGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  StockData::default_instance_->InitAsDefaultInstance();
  RequestStockInfoGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestOnlineUserInfoGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RedPacketsInfo::default_instance_->InitAsDefaultInstance();
  RequestRedPacketsGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  SubgameList::default_instance_->InitAsDefaultInstance();
  RequestedSubgameListGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  WinLoseInfo::default_instance_->InitAsDefaultInstance();
  RequestWinningListGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  BlackWhitelistInfo::default_instance_->InitAsDefaultInstance();
  AddBlackWhitelistGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  ModBlackWhitelistGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  DelBlackWhitelistGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestBlackWhitelistGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  GmMailInfo::default_instance_->InitAsDefaultInstance();
  RequestSendMailGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  LoginRecordData::default_instance_->InitAsDefaultInstance();
  RequestLoginRecordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  ConsumeRecordData::default_instance_->InitAsDefaultInstance();
  RequestConsumeRecordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  ActionRecordData::default_instance_->InitAsDefaultInstance();
  RequestActionRecordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  StrengthenRecordData::default_instance_->InitAsDefaultInstance();
  RequestStrengthenRecordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  MailRecordData::default_instance_->InitAsDefaultInstance();
  RequestMailRecordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RankRecordData::default_instance_->InitAsDefaultInstance();
  RequestRankRecordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  BossRecordData::default_instance_->InitAsDefaultInstance();
  RequestBossRecordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RenameRecordData::default_instance_->InitAsDefaultInstance();
  RequestRenameRecordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  StartUpGameRequestGmPmd_C::default_instance_->InitAsDefaultInstance();
  StartUpGameReturnGmPmd_S::default_instance_->InitAsDefaultInstance();
  SurportGameZoneRequestGmPmd_C::default_instance_->InitAsDefaultInstance();
  SurportGameZoneReturnGmPmd_S::default_instance_->InitAsDefaultInstance();
  ReconnectKickoutGmSmd_S::default_instance_->InitAsDefaultInstance();
  GmUserInfo::default_instance_->InitAsDefaultInstance();
  RequestLoginGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnLoginGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  SetPasswordGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  AddNewGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  GmAccountListGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestDelGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestModifyPriGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  SelectGamezoneGmUserPmd_SC::default_instance_->InitAsDefaultInstance();
  BroadcastInfo::default_instance_->InitAsDefaultInstance();
  BroadcastNewGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnBroadcastNewGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  BroadcastDeleteGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnBroadcastDeleteGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  RequestBroadcastListGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnBroadcastListGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  PunishUserInfo::default_instance_->InitAsDefaultInstance();
  PunishUserGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnPunishUserGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  DeletePunishUserGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnDeletePunishUserGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  RequestPunishListGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnPunishListGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  ItemTypeInfo::default_instance_->InitAsDefaultInstance();
  RequestItemTypeInfoGmUserPmd_CS::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  RequestUserInfoGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnUserInfoGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  RequestUserPackageGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnUserPackageGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  RequestModifyUserInfoGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnModifyUserInfoGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  RequestUserRecordGmUserPmd_C::default_instance_->InitAsDefaultInstance();
  RecordInfo::default_instance_->InitAsDefaultInstance();
  ReturnUserRecordGmUserPmd_S::default_instance_->InitAsDefaultInstance();
  QuestionBaseData::default_instance_->InitAsDefaultInstance();
  ForbidAccountData::default_instance_->InitAsDefaultInstance();
  stRequestLoginGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnLoginGmUserCmd::default_instance_->InitAsDefaultInstance();
  stConfigGmUserCmd::default_instance_->InitAsDefaultInstance();
  stSetPasswordGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnPasswordGmUserCmd::default_instance_->InitAsDefaultInstance();
  stAddNewGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnAddNewGmUserCmd::default_instance_->InitAsDefaultInstance();
  stQueryListGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnListGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnListGmUserCmd_Data::default_instance_->InitAsDefaultInstance();
  stRequestZoneConfigGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnZoneDicCountryGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnZoneDicCountryGmUserCmd_Data::default_instance_->InitAsDefaultInstance();
  stReturnZoneDicMapGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnZoneDicMapGmUserCmd_Data::default_instance_->InitAsDefaultInstance();
  stForwardToAllGmUserCmd::default_instance_->InitAsDefaultInstance();
  stForwardToOnlyGmUserCmd::default_instance_->InitAsDefaultInstance();
  stBroadcastNewGmUserCmd::default_instance_->InitAsDefaultInstance();
  stBroadcastDeleteGmUserCmd::default_instance_->InitAsDefaultInstance();
  stBroadcastRequestGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestTimeGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnTimeGmUserCmd::default_instance_->InitAsDefaultInstance();
  stServerShutdownGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestZoneDicGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnZoneDicGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnZoneDicGmUserCmd_Data::default_instance_->InitAsDefaultInstance();
  stAddChatConfigGmUserCmd::default_instance_->InitAsDefaultInstance();
  stCancelChatConfigGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestChatTypesGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnChatTypesGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnChatTypesGmUserCmd_Data::default_instance_->InitAsDefaultInstance();
  stServerStartupGmUserCmd::default_instance_->InitAsDefaultInstance();
  stNotifyShutdownGmUserCmd::default_instance_->InitAsDefaultInstance();
  stCancelShutdownGmUserCmd::default_instance_->InitAsDefaultInstance();
  stGmServerMessageGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestDelGmUserGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestResetGmUserPasswordGmUserCmd::default_instance_->InitAsDefaultInstance();
  stQequestShutDownGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestForbidAccountGmUserCmd::default_instance_->InitAsDefaultInstance();
  stQueryForbidAccountGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnForbidAccountListGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestUnForbidAccountGmUserCmd::default_instance_->InitAsDefaultInstance();
  stBroadcastDeleteZoneGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestNameAccountGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnNameAccountGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestDBConnectionConfigGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnDBConnectionConfigGmUserCmd::default_instance_->InitAsDefaultInstance();
  stQueryNameExistGmUserCmd::default_instance_->InitAsDefaultInstance();
  stForceInsertNameGmUserCmd::default_instance_->InitAsDefaultInstance();
  stForceModifyNameGmUserCmd::default_instance_->InitAsDefaultInstance();
  stCheckOnlineGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnCheckOnlineGmUserCmd::default_instance_->InitAsDefaultInstance();
  stPunishUserGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestUserPosUserGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnUserPosUserGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnUserPosUserGmUserCmd_Data::default_instance_->InitAsDefaultInstance();
  stEndUserPosUserGmUserCmd::default_instance_->InitAsDefaultInstance();
  stBroadcastReallySendGmUserCmd::default_instance_->InitAsDefaultInstance();
  stDBQueryGmUserCmd::default_instance_->InitAsDefaultInstance();
  stDBReturnDataGmUserCmd::default_instance_->InitAsDefaultInstance();
  stDBReturnEndGmUserCmd::default_instance_->InitAsDefaultInstance();
  stFullForbidAccountLogDataGmUserCmd::default_instance_->InitAsDefaultInstance();
  stFullGameGmCmdLogDataGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestAddQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stSequenceQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stDeleteQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestSeqQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnNoneQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stUserCmdForwardGmUserCmd::default_instance_->InitAsDefaultInstance();
  stProcessQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stGMToolBeginQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stGMToolEndQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stDisableGMChatInputGmUserCmd::default_instance_->InitAsDefaultInstance();
  stDeleteQuestionByGmUserCmd::default_instance_->InitAsDefaultInstance();
  stQuestionOverGmUserCmd::default_instance_->InitAsDefaultInstance();
  stQueryQuestionLimitGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnQuestionLimitGmUserCmd::default_instance_->InitAsDefaultInstance();
  stResetQuestionLimitGmUserCmd::default_instance_->InitAsDefaultInstance();
  stBroadcastToWorldGmUserCmd::default_instance_->InitAsDefaultInstance();
  stSetActivityNoteGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestRefreshUserQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestSetUserGoldInGmUserCmd::default_instance_->InitAsDefaultInstance();
  stSetPrivilegesGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestSaveChatGmUserCmd::default_instance_->InitAsDefaultInstance();
  stGameClientMessageBoxGmUserCmd::default_instance_->InitAsDefaultInstance();
  stGameClientChatMessageGMUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestGameClientMessageConfigGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnGameClientMessageConfigGmUserCmd::default_instance_->InitAsDefaultInstance();
  stPlayerSatisfactionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestMyQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestQuestionSubmitableGmUserCmd::default_instance_->InitAsDefaultInstance();
  stVerifyOnlineQaGmUserCmd::default_instance_->InitAsDefaultInstance();
  stNewGameClientMessageBoxGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestPreProcessQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnPreProcessQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnNowPreProcessQusetGmUserCmd::default_instance_->InitAsDefaultInstance();
  stDeleteProcessedQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestOneQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnOneQuestionGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestResetGmWorkStateGmUserCmd::default_instance_->InitAsDefaultInstance();
  stReturnResetGmWorkStateGmUserCmd::default_instance_->InitAsDefaultInstance();
  stGmCommandUserCmd::default_instance_->InitAsDefaultInstance();
  stGmCommandToSceneUserCmd::default_instance_->InitAsDefaultInstance();
  stForceChangeSexGmUserCmd::default_instance_->InitAsDefaultInstance();
  stRequestMobileInfoGmUserCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gmcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gmcommand_2eproto {
  StaticDescriptorInitializer_gmcommand_2eproto() {
    protobuf_AddDesc_gmcommand_2eproto();
  }
} static_descriptor_initializer_gmcommand_2eproto_;
const ::google::protobuf::EnumDescriptor* GMToolRightKey_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToolRightKey_descriptor_;
}
bool GMToolRightKey_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GMOptKey_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMOptKey_descriptor_;
}
bool GMOptKey_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserType_descriptor_;
}
bool UserType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReturnLoginGmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnLoginGmType_descriptor_;
}
bool ReturnLoginGmType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GmServerMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GmServerMessageType_descriptor_;
}
bool GmServerMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NameOperateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameOperateType_descriptor_;
}
bool NameOperateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* dbtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbtype_descriptor_;
}
bool dbtype_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enumQuestionOver_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumQuestionOver_descriptor_;
}
bool enumQuestionOver_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameClientMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameClientMessageType_descriptor_;
}
bool GameClientMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Gm_Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gm_Param_descriptor_;
}
bool Gm_Param_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 50:
    case 51:
    case 52:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Gm_Param Gm::StartUpGameRequestGmPmd_C;
const Gm_Param Gm::StartUpGameReturnGmPmd_S;
const Gm_Param Gm::SurportGameZoneRequestGmPmd_C;
const Gm_Param Gm::SurportGameZoneReturnGmPmd_S;
const Gm_Param Gm::ReconnectKickoutGmSmd_S;
const Gm_Param Gm::RequestLoginGmUserPmd_C;
const Gm_Param Gm::ReturnLoginGmUserPmd_S;
const Gm_Param Gm::SetPasswordGmUserPmd_CS;
const Gm_Param Gm::AddNewGmUserPmd_CS;
const Gm_Param Gm::RequestDelGmUserPmd_CS;
const Gm_Param Gm::RequestModifyPriGmUserPmd_CS;
const Gm_Param Gm::BroadcastNewGmUserPmd_C;
const Gm_Param Gm::ReturnBroadcastNewGmUserPmd_S;
const Gm_Param Gm::BroadcastDeleteGmUserPmd_C;
const Gm_Param Gm::ReturnBroadcastDeleteGmUserPmd_S;
const Gm_Param Gm::RequestBroadcastListGmUserPmd_C;
const Gm_Param Gm::ReturnBroadcastListGmUserPmd_S;
const Gm_Param Gm::PunishUserGmUserPmd_C;
const Gm_Param Gm::ReturnPunishUserGmUserPmd_S;
const Gm_Param Gm::DeletePunishUserGmUserPmd_C;
const Gm_Param Gm::ReturnDeletePunishUserGmUserPmd_S;
const Gm_Param Gm::RequestPunishListGmUserPmd_C;
const Gm_Param Gm::ReturnPunishListGmUserPmd_S;
const Gm_Param Gm::RequestItemTypeInfoGmUserPmd_CS;
const Gm_Param Gm::RequestUserInfoGmUserPmd_C;
const Gm_Param Gm::ReturnUserInfoGmUserPmd_S;
const Gm_Param Gm::RequestModifyUserInfoGmUserPmd_C;
const Gm_Param Gm::ReturnModifyUserInfoGmUserPmd_S;
const Gm_Param Gm::RequestUserPackageGmUserPmd_C;
const Gm_Param Gm::ReturnUserPackageGmUserPmd_S;
const Gm_Param Gm::RequestUserRecordGmUserPmd_C;
const Gm_Param Gm::ReturnUserRecordGmUserPmd_S;
const Gm_Param Gm::RequestExecGmCommandGmPmd_SC;
const Gm_Param Gm::RequestGameZoneErrorGmPmd_S;
const Gm_Param Gm::RequestHotRestartGmUserPmd_CS;
const Gm_Param Gm::RequesetScriptUpdateGmUserPmd_CS;
const Gm_Param Gm::RequesetRefreshGatewaylistGmUserPmd_CS;
const Gm_Param Gm::RequestGenerateCodeGmUserPmd_C;
const Gm_Param Gm::ReturnGenerateCodeGmUserPmd_S;
const Gm_Param Gm::RequestOpeartorCodeGmUserPmd_C;
const Gm_Param Gm::ReturnOpreatorCodeGmUserPmd_S;
const Gm_Param Gm::GameOrderListGmUserPmd_CS;
const Gm_Param Gm::QueryPackageCodeGmUserPmd_CS;
const Gm_Param Gm::RequestUsePackageCodeGmUserPmd_CS;
const Gm_Param Gm::FeedbackGmUserPmd_CS;
const Gm_Param Gm::RequestFeedbackListGmUserPmd_C;
const Gm_Param Gm::RequestPointReportGmUserPmd_CS;
const Gm_Param Gm::RequestPointDetailGmUserPmd_CS;
const Gm_Param Gm::RequestBettingDetailGmUserPmd_CS;
const Gm_Param Gm::RequestStockInfoGmUserPmd_CS;
const Gm_Param Gm::RequestRedPacketsGmUserPmd_CS;
const Gm_Param Gm::RequestedSubgameListGmUserPmd_CS;
const Gm_Param Gm::RequestOnlineUserInfoGmUserPmd_CS;
const Gm_Param Gm::RequestWinningListGmUserPmd_CS;
const Gm_Param Gm::RequestDealFeedbackGmUserPmd_CS;
const Gm_Param Gm::AddBlackWhitelistGmUserPmd_CS;
const Gm_Param Gm::ModBlackWhitelistGmUserPmd_CS;
const Gm_Param Gm::DelBlackWhitelistGmUserPmd_CS;
const Gm_Param Gm::RequestBlackWhitelistGmUserPmd_CS;
const Gm_Param Gm::RequestSendMailGmUserPmd_CS;
const Gm_Param Gm::RequestLoginRecordGmUserPmd_CS;
const Gm_Param Gm::RequestConsumeRecordGmUserPmd_CS;
const Gm_Param Gm::RequestActionRecordGmUserPmd_CS;
const Gm_Param Gm::RequestStrengthenRecordGmUserPmd_CS;
const Gm_Param Gm::RequestMailRecordGmUserPmd_CS;
const Gm_Param Gm::RequestRankRecordGmUserPmd_CS;
const Gm_Param Gm::RequestBossRecordGmUserPmd_CS;
const Gm_Param Gm::RequestRenameRecordGmUserPmd_CS;
const Gm_Param Gm::stRequestLoginGmUserCmd;
const Gm_Param Gm::stReturnLoginGmUserCmd;
const Gm_Param Gm::stConfigGmUserCmd;
const Gm_Param Gm::stSetPasswordGmUserCmd;
const Gm_Param Gm::stReturnPasswordGmUserCmd;
const Gm_Param Gm::stAddNewGmUserCmd;
const Gm_Param Gm::stReturnAddNewGmUserCmd;
const Gm_Param Gm::stQueryListGmUserCmd;
const Gm_Param Gm::stReturnListGmUserCmd;
const Gm_Param Gm::stRequestZoneConfigGmUserCmd;
const Gm_Param Gm::stReturnZoneDicCountryGmUserCmd;
const Gm_Param Gm::stReturnZoneDicMapGmUserCmd;
const Gm_Param Gm::stForwardToAllGmUserCmd;
const Gm_Param Gm::stForwardToOnlyGmUserCmd;
const Gm_Param Gm::stBroadcastNewGmUserCmd;
const Gm_Param Gm::stBroadcastDeleteGmUserCmd;
const Gm_Param Gm::stBroadcastRequestGmUserCmd;
const Gm_Param Gm::stRequestTimeGmUserCmd;
const Gm_Param Gm::stReturnTimeGmUserCmd;
const Gm_Param Gm::stServerShutdownGmUserCmd;
const Gm_Param Gm::stRequestZoneDicGmUserCmd;
const Gm_Param Gm::stReturnZoneDicGmUserCmd;
const Gm_Param Gm::stAddChatConfigGmUserCmd;
const Gm_Param Gm::stCancelChatConfigGmUserCmd;
const Gm_Param Gm::stRequestChatTypesGmUserCmd;
const Gm_Param Gm::stReturnChatTypesGmUserCmd;
const Gm_Param Gm::stServerStartupGmUserCmd;
const Gm_Param Gm::stNotifyShutdownGmUserCmd;
const Gm_Param Gm::stCancelShutdownGmUserCmd;
const Gm_Param Gm::stGmServerMessageGmUserCmd;
const Gm_Param Gm::stRequestDelGmUserGmUserCmd;
const Gm_Param Gm::stRequestResetGmUserPasswordGmUserCmd;
const Gm_Param Gm::stQequestShutDownGmUserCmd;
const Gm_Param Gm::stRequestForbidAccountGmUserCmd;
const Gm_Param Gm::stQueryForbidAccountGmUserCmd;
const Gm_Param Gm::stReturnForbidAccountListGmUserCmd;
const Gm_Param Gm::stRequestUnForbidAccountGmUserCmd;
const Gm_Param Gm::stBroadcastDeleteZoneGmUserCmd;
const Gm_Param Gm::stRequestNameAccountGmUserCmd;
const Gm_Param Gm::stReturnNameAccountGmUserCmd;
const Gm_Param Gm::stRequestDBConnectionConfigGmUserCmd;
const Gm_Param Gm::stReturnDBConnectionConfigGmUserCmd;
const Gm_Param Gm::stQueryNameExistGmUserCmd;
const Gm_Param Gm::stForceInsertNameGmUserCmd;
const Gm_Param Gm::stForceModifyNameGmUserCmd;
const Gm_Param Gm::stCheckOnlineGmUserCmd;
const Gm_Param Gm::stReturnCheckOnlineGmUserCmd;
const Gm_Param Gm::stPunishUserGmUserCmd;
const Gm_Param Gm::stRequestUserPosUserGmUserCmd;
const Gm_Param Gm::stReturnUserPosUserGmUserCmd;
const Gm_Param Gm::stEndUserPosUserGmUserCmd;
const Gm_Param Gm::stBroadcastReallySendGmUserCmd;
const Gm_Param Gm::stDBQueryGmUserCmd;
const Gm_Param Gm::stDBReturnDataGmUserCmd;
const Gm_Param Gm::stDBReturnEndGmUserCmd;
const Gm_Param Gm::stFullForbidAccountLogDataGmUserCmd;
const Gm_Param Gm::stFullGameGmCmdLogDataGmUserCmd;
const Gm_Param Gm::stRequestAddQuestionGmUserCmd;
const Gm_Param Gm::stReturnQuestionGmUserCmd;
const Gm_Param Gm::stSequenceQuestionGmUserCmd;
const Gm_Param Gm::stDeleteQuestionGmUserCmd;
const Gm_Param Gm::stRequestQuestionGmUserCmd;
const Gm_Param Gm::stRequestSeqQuestionGmUserCmd;
const Gm_Param Gm::stReturnNoneQuestionGmUserCmd;
const Gm_Param Gm::stUserCmdForwardGmUserCmd;
const Gm_Param Gm::stProcessQuestionGmUserCmd;
const Gm_Param Gm::stGMToolBeginQuestionGmUserCmd;
const Gm_Param Gm::stGMToolEndQuestionGmUserCmd;
const Gm_Param Gm::stDisableGMChatInputGmUserCmd;
const Gm_Param Gm::stQuestionOverGmUserCmd;
const Gm_Param Gm::stQueryQuestionLimitGmUserCmd;
const Gm_Param Gm::stReturnQuestionLimitGmUserCmd;
const Gm_Param Gm::stResetQuestionLimitGmUserCmd;
const Gm_Param Gm::stBroadcastToWorldGmUserCmd;
const Gm_Param Gm::stSetActivityNoteGmUserCmd;
const Gm_Param Gm::stRequestRefreshUserQuestionGmUserCmd;
const Gm_Param Gm::stRequestSetUserGoldInGmUserCmd;
const Gm_Param Gm::stSetPrivilegesGmUserCmd;
const Gm_Param Gm::stRequestSaveChatGmUserCmd;
const Gm_Param Gm::stGameClientMessageBoxGmUserCmd;
const Gm_Param Gm::stGameClientChatMessageGMUserCmd;
const Gm_Param Gm::stRequestGameClientMessageConfigGmUserCmd;
const Gm_Param Gm::stReturnGameClientMessageConfigGmUserCmd;
const Gm_Param Gm::stPlayerSatisfactionGmUserCmd;
const Gm_Param Gm::stRequestMyQuestionGmUserCmd;
const Gm_Param Gm::stRequestQuestionSubmitableGmUserCmd;
const Gm_Param Gm::stVerifyOnlineQaGmUserCmd;
const Gm_Param Gm::stRequestPreProcessQuestionGmUserCmd;
const Gm_Param Gm::stReturnPreProcessQuestionGmUserCmd;
const Gm_Param Gm::stReturnNowPreProcessQusetGmUserCmd;
const Gm_Param Gm::stDeleteProcessedQuestionGmUserCmd;
const Gm_Param Gm::stRequestOneQuestionGmUserCmd;
const Gm_Param Gm::stReturnOneQuestionGmUserCmd;
const Gm_Param Gm::stRequestResetGmWorkStateGmUserCmd;
const Gm_Param Gm::stReturnResetGmWorkStateGmUserCmd;
const Gm_Param Gm::stGmCommandUserCmd;
const Gm_Param Gm::stGmCommandToSceneUserCmd;
const Gm_Param Gm::stForceChangeSexGmUserCmd;
const Gm_Param Gm::stRequestMobileInfoGmUserCmd;
const Gm_Param Gm::stDeleteQuestionByGmUserCmd;
const Gm_Param Gm::stNewGameClientMessageBoxGmUserCmd;
const Gm_Param Gm::Param_MIN;
const Gm_Param Gm::Param_MAX;
const int Gm::Param_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Gm::Gm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.Gm)
}

void Gm::InitAsDefaultInstance() {
}

Gm::Gm(const Gm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.Gm)
}

void Gm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gm::~Gm() {
  // @@protoc_insertion_point(destructor:Pmd.Gm)
  SharedDtor();
}

void Gm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gm_descriptor_;
}

const Gm& Gm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

Gm* Gm::default_instance_ = NULL;

Gm* Gm::New() const {
  return new Gm;
}

void Gm::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.Gm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.Gm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.Gm)
  return false;
#undef DO_
}

void Gm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.Gm)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.Gm)
}

::google::protobuf::uint8* Gm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.Gm)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.Gm)
  return target;
}

int Gm::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gm::MergeFrom(const Gm& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gm::CopyFrom(const Gm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gm::IsInitialized() const {

  return true;
}

void Gm::Swap(Gm* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gm_descriptor_;
  metadata.reflection = Gm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestExecGmCommandGmPmd_SC::kGameidFieldNumber;
const int RequestExecGmCommandGmPmd_SC::kZoneidFieldNumber;
const int RequestExecGmCommandGmPmd_SC::kGmidFieldNumber;
const int RequestExecGmCommandGmPmd_SC::kMsgFieldNumber;
#endif  // !_MSC_VER

RequestExecGmCommandGmPmd_SC::RequestExecGmCommandGmPmd_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestExecGmCommandGmPmd_SC)
}

void RequestExecGmCommandGmPmd_SC::InitAsDefaultInstance() {
}

RequestExecGmCommandGmPmd_SC::RequestExecGmCommandGmPmd_SC(const RequestExecGmCommandGmPmd_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestExecGmCommandGmPmd_SC)
}

void RequestExecGmCommandGmPmd_SC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestExecGmCommandGmPmd_SC::~RequestExecGmCommandGmPmd_SC() {
  // @@protoc_insertion_point(destructor:Pmd.RequestExecGmCommandGmPmd_SC)
  SharedDtor();
}

void RequestExecGmCommandGmPmd_SC::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void RequestExecGmCommandGmPmd_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestExecGmCommandGmPmd_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestExecGmCommandGmPmd_SC_descriptor_;
}

const RequestExecGmCommandGmPmd_SC& RequestExecGmCommandGmPmd_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestExecGmCommandGmPmd_SC* RequestExecGmCommandGmPmd_SC::default_instance_ = NULL;

RequestExecGmCommandGmPmd_SC* RequestExecGmCommandGmPmd_SC::New() const {
  return new RequestExecGmCommandGmPmd_SC;
}

void RequestExecGmCommandGmPmd_SC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestExecGmCommandGmPmd_SC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gameid_, zoneid_);
    gmid_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestExecGmCommandGmPmd_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestExecGmCommandGmPmd_SC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // required string msg = 4;
      case 4: {
        if (tag == 34) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestExecGmCommandGmPmd_SC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestExecGmCommandGmPmd_SC)
  return false;
#undef DO_
}

void RequestExecGmCommandGmPmd_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestExecGmCommandGmPmd_SC)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // required string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestExecGmCommandGmPmd_SC)
}

::google::protobuf::uint8* RequestExecGmCommandGmPmd_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestExecGmCommandGmPmd_SC)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // required string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestExecGmCommandGmPmd_SC)
  return target;
}

int RequestExecGmCommandGmPmd_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // required string msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestExecGmCommandGmPmd_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestExecGmCommandGmPmd_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestExecGmCommandGmPmd_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestExecGmCommandGmPmd_SC::MergeFrom(const RequestExecGmCommandGmPmd_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestExecGmCommandGmPmd_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestExecGmCommandGmPmd_SC::CopyFrom(const RequestExecGmCommandGmPmd_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestExecGmCommandGmPmd_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestExecGmCommandGmPmd_SC::Swap(RequestExecGmCommandGmPmd_SC* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestExecGmCommandGmPmd_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestExecGmCommandGmPmd_SC_descriptor_;
  metadata.reflection = RequestExecGmCommandGmPmd_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGameZoneErrorGmPmd_S::kRetcodeFieldNumber;
const int RequestGameZoneErrorGmPmd_S::kRetdescFieldNumber;
const int RequestGameZoneErrorGmPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

RequestGameZoneErrorGmPmd_S::RequestGameZoneErrorGmPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestGameZoneErrorGmPmd_S)
}

void RequestGameZoneErrorGmPmd_S::InitAsDefaultInstance() {
}

RequestGameZoneErrorGmPmd_S::RequestGameZoneErrorGmPmd_S(const RequestGameZoneErrorGmPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestGameZoneErrorGmPmd_S)
}

void RequestGameZoneErrorGmPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGameZoneErrorGmPmd_S::~RequestGameZoneErrorGmPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.RequestGameZoneErrorGmPmd_S)
  SharedDtor();
}

void RequestGameZoneErrorGmPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void RequestGameZoneErrorGmPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGameZoneErrorGmPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGameZoneErrorGmPmd_S_descriptor_;
}

const RequestGameZoneErrorGmPmd_S& RequestGameZoneErrorGmPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestGameZoneErrorGmPmd_S* RequestGameZoneErrorGmPmd_S::default_instance_ = NULL;

RequestGameZoneErrorGmPmd_S* RequestGameZoneErrorGmPmd_S::New() const {
  return new RequestGameZoneErrorGmPmd_S;
}

void RequestGameZoneErrorGmPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGameZoneErrorGmPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(retcode_, gmid_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGameZoneErrorGmPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestGameZoneErrorGmPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestGameZoneErrorGmPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestGameZoneErrorGmPmd_S)
  return false;
#undef DO_
}

void RequestGameZoneErrorGmPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestGameZoneErrorGmPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestGameZoneErrorGmPmd_S)
}

::google::protobuf::uint8* RequestGameZoneErrorGmPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestGameZoneErrorGmPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestGameZoneErrorGmPmd_S)
  return target;
}

int RequestGameZoneErrorGmPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // required uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGameZoneErrorGmPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGameZoneErrorGmPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGameZoneErrorGmPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGameZoneErrorGmPmd_S::MergeFrom(const RequestGameZoneErrorGmPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGameZoneErrorGmPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGameZoneErrorGmPmd_S::CopyFrom(const RequestGameZoneErrorGmPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGameZoneErrorGmPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void RequestGameZoneErrorGmPmd_S::Swap(RequestGameZoneErrorGmPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGameZoneErrorGmPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGameZoneErrorGmPmd_S_descriptor_;
  metadata.reflection = RequestGameZoneErrorGmPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHotRestartGmUserPmd_CS::kGameidFieldNumber;
const int RequestHotRestartGmUserPmd_CS::kZoneidFieldNumber;
const int RequestHotRestartGmUserPmd_CS::kGmidFieldNumber;
const int RequestHotRestartGmUserPmd_CS::kRetFieldNumber;
#endif  // !_MSC_VER

RequestHotRestartGmUserPmd_CS::RequestHotRestartGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestHotRestartGmUserPmd_CS)
}

void RequestHotRestartGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestHotRestartGmUserPmd_CS::RequestHotRestartGmUserPmd_CS(const RequestHotRestartGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestHotRestartGmUserPmd_CS)
}

void RequestHotRestartGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHotRestartGmUserPmd_CS::~RequestHotRestartGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestHotRestartGmUserPmd_CS)
  SharedDtor();
}

void RequestHotRestartGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestHotRestartGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHotRestartGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHotRestartGmUserPmd_CS_descriptor_;
}

const RequestHotRestartGmUserPmd_CS& RequestHotRestartGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestHotRestartGmUserPmd_CS* RequestHotRestartGmUserPmd_CS::default_instance_ = NULL;

RequestHotRestartGmUserPmd_CS* RequestHotRestartGmUserPmd_CS::New() const {
  return new RequestHotRestartGmUserPmd_CS;
}

void RequestHotRestartGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestHotRestartGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gameid_, ret_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHotRestartGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestHotRestartGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestHotRestartGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestHotRestartGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestHotRestartGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestHotRestartGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestHotRestartGmUserPmd_CS)
}

::google::protobuf::uint8* RequestHotRestartGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestHotRestartGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestHotRestartGmUserPmd_CS)
  return target;
}

int RequestHotRestartGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHotRestartGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHotRestartGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHotRestartGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHotRestartGmUserPmd_CS::MergeFrom(const RequestHotRestartGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHotRestartGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHotRestartGmUserPmd_CS::CopyFrom(const RequestHotRestartGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHotRestartGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestHotRestartGmUserPmd_CS::Swap(RequestHotRestartGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHotRestartGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHotRestartGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestHotRestartGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequesetScriptUpdateGmUserPmd_CS::kGameidFieldNumber;
const int RequesetScriptUpdateGmUserPmd_CS::kZoneidFieldNumber;
const int RequesetScriptUpdateGmUserPmd_CS::kGmidFieldNumber;
const int RequesetScriptUpdateGmUserPmd_CS::kRetFieldNumber;
#endif  // !_MSC_VER

RequesetScriptUpdateGmUserPmd_CS::RequesetScriptUpdateGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequesetScriptUpdateGmUserPmd_CS)
}

void RequesetScriptUpdateGmUserPmd_CS::InitAsDefaultInstance() {
}

RequesetScriptUpdateGmUserPmd_CS::RequesetScriptUpdateGmUserPmd_CS(const RequesetScriptUpdateGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequesetScriptUpdateGmUserPmd_CS)
}

void RequesetScriptUpdateGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequesetScriptUpdateGmUserPmd_CS::~RequesetScriptUpdateGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequesetScriptUpdateGmUserPmd_CS)
  SharedDtor();
}

void RequesetScriptUpdateGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequesetScriptUpdateGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequesetScriptUpdateGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequesetScriptUpdateGmUserPmd_CS_descriptor_;
}

const RequesetScriptUpdateGmUserPmd_CS& RequesetScriptUpdateGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequesetScriptUpdateGmUserPmd_CS* RequesetScriptUpdateGmUserPmd_CS::default_instance_ = NULL;

RequesetScriptUpdateGmUserPmd_CS* RequesetScriptUpdateGmUserPmd_CS::New() const {
  return new RequesetScriptUpdateGmUserPmd_CS;
}

void RequesetScriptUpdateGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequesetScriptUpdateGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gameid_, ret_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequesetScriptUpdateGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequesetScriptUpdateGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequesetScriptUpdateGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequesetScriptUpdateGmUserPmd_CS)
  return false;
#undef DO_
}

void RequesetScriptUpdateGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequesetScriptUpdateGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequesetScriptUpdateGmUserPmd_CS)
}

::google::protobuf::uint8* RequesetScriptUpdateGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequesetScriptUpdateGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequesetScriptUpdateGmUserPmd_CS)
  return target;
}

int RequesetScriptUpdateGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequesetScriptUpdateGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequesetScriptUpdateGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequesetScriptUpdateGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequesetScriptUpdateGmUserPmd_CS::MergeFrom(const RequesetScriptUpdateGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequesetScriptUpdateGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequesetScriptUpdateGmUserPmd_CS::CopyFrom(const RequesetScriptUpdateGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequesetScriptUpdateGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequesetScriptUpdateGmUserPmd_CS::Swap(RequesetScriptUpdateGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequesetScriptUpdateGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequesetScriptUpdateGmUserPmd_CS_descriptor_;
  metadata.reflection = RequesetScriptUpdateGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequesetRefreshGatewaylistGmUserPmd_CS::kGameidFieldNumber;
const int RequesetRefreshGatewaylistGmUserPmd_CS::kZoneidFieldNumber;
const int RequesetRefreshGatewaylistGmUserPmd_CS::kGmidFieldNumber;
const int RequesetRefreshGatewaylistGmUserPmd_CS::kRetFieldNumber;
#endif  // !_MSC_VER

RequesetRefreshGatewaylistGmUserPmd_CS::RequesetRefreshGatewaylistGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
}

void RequesetRefreshGatewaylistGmUserPmd_CS::InitAsDefaultInstance() {
}

RequesetRefreshGatewaylistGmUserPmd_CS::RequesetRefreshGatewaylistGmUserPmd_CS(const RequesetRefreshGatewaylistGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
}

void RequesetRefreshGatewaylistGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequesetRefreshGatewaylistGmUserPmd_CS::~RequesetRefreshGatewaylistGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
  SharedDtor();
}

void RequesetRefreshGatewaylistGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequesetRefreshGatewaylistGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequesetRefreshGatewaylistGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequesetRefreshGatewaylistGmUserPmd_CS_descriptor_;
}

const RequesetRefreshGatewaylistGmUserPmd_CS& RequesetRefreshGatewaylistGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequesetRefreshGatewaylistGmUserPmd_CS* RequesetRefreshGatewaylistGmUserPmd_CS::default_instance_ = NULL;

RequesetRefreshGatewaylistGmUserPmd_CS* RequesetRefreshGatewaylistGmUserPmd_CS::New() const {
  return new RequesetRefreshGatewaylistGmUserPmd_CS;
}

void RequesetRefreshGatewaylistGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequesetRefreshGatewaylistGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gameid_, ret_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequesetRefreshGatewaylistGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
  return false;
#undef DO_
}

void RequesetRefreshGatewaylistGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
}

::google::protobuf::uint8* RequesetRefreshGatewaylistGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequesetRefreshGatewaylistGmUserPmd_CS)
  return target;
}

int RequesetRefreshGatewaylistGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequesetRefreshGatewaylistGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequesetRefreshGatewaylistGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequesetRefreshGatewaylistGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequesetRefreshGatewaylistGmUserPmd_CS::MergeFrom(const RequesetRefreshGatewaylistGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequesetRefreshGatewaylistGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequesetRefreshGatewaylistGmUserPmd_CS::CopyFrom(const RequesetRefreshGatewaylistGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequesetRefreshGatewaylistGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequesetRefreshGatewaylistGmUserPmd_CS::Swap(RequesetRefreshGatewaylistGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequesetRefreshGatewaylistGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequesetRefreshGatewaylistGmUserPmd_CS_descriptor_;
  metadata.reflection = RequesetRefreshGatewaylistGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGenerateCodeGmUserPmd_C::kGameidFieldNumber;
const int RequestGenerateCodeGmUserPmd_C::kZoneidFieldNumber;
const int RequestGenerateCodeGmUserPmd_C::kCodeFieldNumber;
const int RequestGenerateCodeGmUserPmd_C::kCodenumFieldNumber;
const int RequestGenerateCodeGmUserPmd_C::kCodetypeFieldNumber;
const int RequestGenerateCodeGmUserPmd_C::kCharidFieldNumber;
const int RequestGenerateCodeGmUserPmd_C::kGmidFieldNumber;
#endif  // !_MSC_VER

RequestGenerateCodeGmUserPmd_C::RequestGenerateCodeGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestGenerateCodeGmUserPmd_C)
}

void RequestGenerateCodeGmUserPmd_C::InitAsDefaultInstance() {
}

RequestGenerateCodeGmUserPmd_C::RequestGenerateCodeGmUserPmd_C(const RequestGenerateCodeGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestGenerateCodeGmUserPmd_C)
}

void RequestGenerateCodeGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codenum_ = 0u;
  codetype_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGenerateCodeGmUserPmd_C::~RequestGenerateCodeGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestGenerateCodeGmUserPmd_C)
  SharedDtor();
}

void RequestGenerateCodeGmUserPmd_C::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void RequestGenerateCodeGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGenerateCodeGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGenerateCodeGmUserPmd_C_descriptor_;
}

const RequestGenerateCodeGmUserPmd_C& RequestGenerateCodeGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestGenerateCodeGmUserPmd_C* RequestGenerateCodeGmUserPmd_C::default_instance_ = NULL;

RequestGenerateCodeGmUserPmd_C* RequestGenerateCodeGmUserPmd_C::New() const {
  return new RequestGenerateCodeGmUserPmd_C;
}

void RequestGenerateCodeGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestGenerateCodeGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gameid_, zoneid_);
    ZR_(codenum_, gmid_);
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGenerateCodeGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestGenerateCodeGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // optional string code = 3;
      case 3: {
        if (tag == 26) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_codenum;
        break;
      }

      // optional uint32 codenum = 4;
      case 4: {
        if (tag == 32) {
         parse_codenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codenum_)));
          set_has_codenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_codetype;
        break;
      }

      // required uint32 codetype = 5;
      case 5: {
        if (tag == 40) {
         parse_codetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codetype_)));
          set_has_codetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6;
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 7;
      case 7: {
        if (tag == 56) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestGenerateCodeGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestGenerateCodeGmUserPmd_C)
  return false;
#undef DO_
}

void RequestGenerateCodeGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestGenerateCodeGmUserPmd_C)
  // optional uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  // optional uint32 codenum = 4;
  if (has_codenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->codenum(), output);
  }

  // required uint32 codetype = 5;
  if (has_codetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->codetype(), output);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestGenerateCodeGmUserPmd_C)
}

::google::protobuf::uint8* RequestGenerateCodeGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestGenerateCodeGmUserPmd_C)
  // optional uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  // optional uint32 codenum = 4;
  if (has_codenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->codenum(), target);
  }

  // required uint32 codetype = 5;
  if (has_codetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->codetype(), target);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestGenerateCodeGmUserPmd_C)
  return target;
}

int RequestGenerateCodeGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint32 codenum = 4;
    if (has_codenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codenum());
    }

    // required uint32 codetype = 5;
    if (has_codetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codetype());
    }

    // optional uint64 charid = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 gmid = 7;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGenerateCodeGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGenerateCodeGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGenerateCodeGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGenerateCodeGmUserPmd_C::MergeFrom(const RequestGenerateCodeGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_codenum()) {
      set_codenum(from.codenum());
    }
    if (from.has_codetype()) {
      set_codetype(from.codetype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGenerateCodeGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGenerateCodeGmUserPmd_C::CopyFrom(const RequestGenerateCodeGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGenerateCodeGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void RequestGenerateCodeGmUserPmd_C::Swap(RequestGenerateCodeGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(code_, other->code_);
    std::swap(codenum_, other->codenum_);
    std::swap(codetype_, other->codetype_);
    std::swap(charid_, other->charid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGenerateCodeGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGenerateCodeGmUserPmd_C_descriptor_;
  metadata.reflection = RequestGenerateCodeGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnGenerateCodeGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnGenerateCodeGmUserPmd_S::kRetdescFieldNumber;
const int ReturnGenerateCodeGmUserPmd_S::kCodenumFieldNumber;
const int ReturnGenerateCodeGmUserPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

ReturnGenerateCodeGmUserPmd_S::ReturnGenerateCodeGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnGenerateCodeGmUserPmd_S)
}

void ReturnGenerateCodeGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnGenerateCodeGmUserPmd_S::ReturnGenerateCodeGmUserPmd_S(const ReturnGenerateCodeGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnGenerateCodeGmUserPmd_S)
}

void ReturnGenerateCodeGmUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codenum_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnGenerateCodeGmUserPmd_S::~ReturnGenerateCodeGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnGenerateCodeGmUserPmd_S)
  SharedDtor();
}

void ReturnGenerateCodeGmUserPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void ReturnGenerateCodeGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnGenerateCodeGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnGenerateCodeGmUserPmd_S_descriptor_;
}

const ReturnGenerateCodeGmUserPmd_S& ReturnGenerateCodeGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnGenerateCodeGmUserPmd_S* ReturnGenerateCodeGmUserPmd_S::default_instance_ = NULL;

ReturnGenerateCodeGmUserPmd_S* ReturnGenerateCodeGmUserPmd_S::New() const {
  return new ReturnGenerateCodeGmUserPmd_S;
}

void ReturnGenerateCodeGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnGenerateCodeGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(retcode_, gmid_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnGenerateCodeGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnGenerateCodeGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_codenum;
        break;
      }

      // optional uint32 codenum = 3;
      case 3: {
        if (tag == 24) {
         parse_codenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codenum_)));
          set_has_codenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnGenerateCodeGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnGenerateCodeGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnGenerateCodeGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnGenerateCodeGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // optional uint32 codenum = 3;
  if (has_codenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->codenum(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnGenerateCodeGmUserPmd_S)
}

::google::protobuf::uint8* ReturnGenerateCodeGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnGenerateCodeGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // optional uint32 codenum = 3;
  if (has_codenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->codenum(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnGenerateCodeGmUserPmd_S)
  return target;
}

int ReturnGenerateCodeGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // optional uint32 codenum = 3;
    if (has_codenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codenum());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnGenerateCodeGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnGenerateCodeGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnGenerateCodeGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnGenerateCodeGmUserPmd_S::MergeFrom(const ReturnGenerateCodeGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_codenum()) {
      set_codenum(from.codenum());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnGenerateCodeGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnGenerateCodeGmUserPmd_S::CopyFrom(const ReturnGenerateCodeGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnGenerateCodeGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnGenerateCodeGmUserPmd_S::Swap(ReturnGenerateCodeGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(codenum_, other->codenum_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnGenerateCodeGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnGenerateCodeGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnGenerateCodeGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOpeartorCodeGmUserPmd_C::kGameidFieldNumber;
const int RequestOpeartorCodeGmUserPmd_C::kCodeFieldNumber;
const int RequestOpeartorCodeGmUserPmd_C::kOptypeFieldNumber;
#endif  // !_MSC_VER

RequestOpeartorCodeGmUserPmd_C::RequestOpeartorCodeGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestOpeartorCodeGmUserPmd_C)
}

void RequestOpeartorCodeGmUserPmd_C::InitAsDefaultInstance() {
}

RequestOpeartorCodeGmUserPmd_C::RequestOpeartorCodeGmUserPmd_C(const RequestOpeartorCodeGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestOpeartorCodeGmUserPmd_C)
}

void RequestOpeartorCodeGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOpeartorCodeGmUserPmd_C::~RequestOpeartorCodeGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestOpeartorCodeGmUserPmd_C)
  SharedDtor();
}

void RequestOpeartorCodeGmUserPmd_C::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void RequestOpeartorCodeGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOpeartorCodeGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOpeartorCodeGmUserPmd_C_descriptor_;
}

const RequestOpeartorCodeGmUserPmd_C& RequestOpeartorCodeGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestOpeartorCodeGmUserPmd_C* RequestOpeartorCodeGmUserPmd_C::default_instance_ = NULL;

RequestOpeartorCodeGmUserPmd_C* RequestOpeartorCodeGmUserPmd_C::New() const {
  return new RequestOpeartorCodeGmUserPmd_C;
}

void RequestOpeartorCodeGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestOpeartorCodeGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gameid_, optype_);
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestOpeartorCodeGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestOpeartorCodeGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // required string code = 2;
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_optype;
        break;
      }

      // required uint32 optype = 3;
      case 3: {
        if (tag == 24) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestOpeartorCodeGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestOpeartorCodeGmUserPmd_C)
  return false;
#undef DO_
}

void RequestOpeartorCodeGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestOpeartorCodeGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required uint32 optype = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestOpeartorCodeGmUserPmd_C)
}

::google::protobuf::uint8* RequestOpeartorCodeGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestOpeartorCodeGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required uint32 optype = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestOpeartorCodeGmUserPmd_C)
  return target;
}

int RequestOpeartorCodeGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // required uint32 optype = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOpeartorCodeGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestOpeartorCodeGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestOpeartorCodeGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestOpeartorCodeGmUserPmd_C::MergeFrom(const RequestOpeartorCodeGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestOpeartorCodeGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOpeartorCodeGmUserPmd_C::CopyFrom(const RequestOpeartorCodeGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOpeartorCodeGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestOpeartorCodeGmUserPmd_C::Swap(RequestOpeartorCodeGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(code_, other->code_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestOpeartorCodeGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOpeartorCodeGmUserPmd_C_descriptor_;
  metadata.reflection = RequestOpeartorCodeGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CodeInfo::kIdFieldNumber;
const int CodeInfo::kGameidFieldNumber;
const int CodeInfo::kZoneidFieldNumber;
const int CodeInfo::kCharidFieldNumber;
const int CodeInfo::kCodetypeFieldNumber;
const int CodeInfo::kCodeFieldNumber;
const int CodeInfo::kCreatetimeFieldNumber;
const int CodeInfo::kEndtimeFieldNumber;
const int CodeInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

CodeInfo::CodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.CodeInfo)
}

void CodeInfo::InitAsDefaultInstance() {
}

CodeInfo::CodeInfo(const CodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.CodeInfo)
}

void CodeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  codetype_ = 0u;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = 0u;
  endtime_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CodeInfo::~CodeInfo() {
  // @@protoc_insertion_point(destructor:Pmd.CodeInfo)
  SharedDtor();
}

void CodeInfo::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CodeInfo_descriptor_;
}

const CodeInfo& CodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

CodeInfo* CodeInfo::default_instance_ = NULL;

CodeInfo* CodeInfo::New() const {
  return new CodeInfo;
}

void CodeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CodeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    ZR_(codetype_, endtime_);
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  flag_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.CodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_codetype;
        break;
      }

      // optional uint32 codetype = 5;
      case 5: {
        if (tag == 40) {
         parse_codetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codetype_)));
          set_has_codetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_code;
        break;
      }

      // optional string code = 6;
      case 6: {
        if (tag == 50) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 7;
      case 7: {
        if (tag == 56) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 8;
      case 8: {
        if (tag == 64) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 9;
      case 9: {
        if (tag == 72) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.CodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.CodeInfo)
  return false;
#undef DO_
}

void CodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.CodeInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint32 codetype = 5;
  if (has_codetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->codetype(), output);
  }

  // optional string code = 6;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  // optional uint32 createtime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->createtime(), output);
  }

  // optional uint32 endtime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endtime(), output);
  }

  // optional uint32 flag = 9;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.CodeInfo)
}

::google::protobuf::uint8* CodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.CodeInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint32 codetype = 5;
  if (has_codetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->codetype(), target);
  }

  // optional string code = 6;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->code(), target);
  }

  // optional uint32 createtime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->createtime(), target);
  }

  // optional uint32 endtime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->endtime(), target);
  }

  // optional uint32 flag = 9;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.CodeInfo)
  return target;
}

int CodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 codetype = 5;
    if (has_codetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codetype());
    }

    // optional string code = 6;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint32 createtime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 endtime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 flag = 9;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CodeInfo::MergeFrom(const CodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_codetype()) {
      set_codetype(from.codetype());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeInfo::CopyFrom(const CodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeInfo::IsInitialized() const {

  return true;
}

void CodeInfo::Swap(CodeInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(codetype_, other->codetype_);
    std::swap(code_, other->code_);
    std::swap(createtime_, other->createtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CodeInfo_descriptor_;
  metadata.reflection = CodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnOpreatorCodeGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnOpreatorCodeGmUserPmd_S::kRetdescFieldNumber;
const int ReturnOpreatorCodeGmUserPmd_S::kDataFieldNumber;
#endif  // !_MSC_VER

ReturnOpreatorCodeGmUserPmd_S::ReturnOpreatorCodeGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnOpreatorCodeGmUserPmd_S)
}

void ReturnOpreatorCodeGmUserPmd_S::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::CodeInfo*>(&::Pmd::CodeInfo::default_instance());
}

ReturnOpreatorCodeGmUserPmd_S::ReturnOpreatorCodeGmUserPmd_S(const ReturnOpreatorCodeGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnOpreatorCodeGmUserPmd_S)
}

void ReturnOpreatorCodeGmUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnOpreatorCodeGmUserPmd_S::~ReturnOpreatorCodeGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnOpreatorCodeGmUserPmd_S)
  SharedDtor();
}

void ReturnOpreatorCodeGmUserPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void ReturnOpreatorCodeGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnOpreatorCodeGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnOpreatorCodeGmUserPmd_S_descriptor_;
}

const ReturnOpreatorCodeGmUserPmd_S& ReturnOpreatorCodeGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnOpreatorCodeGmUserPmd_S* ReturnOpreatorCodeGmUserPmd_S::default_instance_ = NULL;

ReturnOpreatorCodeGmUserPmd_S* ReturnOpreatorCodeGmUserPmd_S::New() const {
  return new ReturnOpreatorCodeGmUserPmd_S;
}

void ReturnOpreatorCodeGmUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    retcode_ = 0u;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::CodeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnOpreatorCodeGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnOpreatorCodeGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Pmd.CodeInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnOpreatorCodeGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnOpreatorCodeGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnOpreatorCodeGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnOpreatorCodeGmUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // optional .Pmd.CodeInfo data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnOpreatorCodeGmUserPmd_S)
}

::google::protobuf::uint8* ReturnOpreatorCodeGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnOpreatorCodeGmUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // optional .Pmd.CodeInfo data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnOpreatorCodeGmUserPmd_S)
  return target;
}

int ReturnOpreatorCodeGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // optional .Pmd.CodeInfo data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnOpreatorCodeGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnOpreatorCodeGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnOpreatorCodeGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnOpreatorCodeGmUserPmd_S::MergeFrom(const ReturnOpreatorCodeGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_data()) {
      mutable_data()->::Pmd::CodeInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnOpreatorCodeGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnOpreatorCodeGmUserPmd_S::CopyFrom(const ReturnOpreatorCodeGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnOpreatorCodeGmUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReturnOpreatorCodeGmUserPmd_S::Swap(ReturnOpreatorCodeGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnOpreatorCodeGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnOpreatorCodeGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnOpreatorCodeGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderInfo::kIdFieldNumber;
const int OrderInfo::kZoneidFieldNumber;
const int OrderInfo::kCharidFieldNumber;
const int OrderInfo::kGameorderFieldNumber;
const int OrderInfo::kMoneyFieldNumber;
const int OrderInfo::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

OrderInfo::OrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.OrderInfo)
}

void OrderInfo::InitAsDefaultInstance() {
}

OrderInfo::OrderInfo(const OrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.OrderInfo)
}

void OrderInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  gameorder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  money_ = 0;
  createtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderInfo::~OrderInfo() {
  // @@protoc_insertion_point(destructor:Pmd.OrderInfo)
  SharedDtor();
}

void OrderInfo::SharedDtor() {
  if (gameorder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameorder_;
  }
  if (this != default_instance_) {
  }
}

void OrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderInfo_descriptor_;
}

const OrderInfo& OrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

OrderInfo* OrderInfo::default_instance_ = NULL;

OrderInfo* OrderInfo::New() const {
  return new OrderInfo;
}

void OrderInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, money_);
    if (has_gameorder()) {
      if (gameorder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gameorder_->clear();
      }
    }
    createtime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.OrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gameorder;
        break;
      }

      // optional string gameorder = 4;
      case 4: {
        if (tag == 34) {
         parse_gameorder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameorder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameorder().data(), this->gameorder().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gameorder");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_money;
        break;
      }

      // optional float money = 5;
      case 5: {
        if (tag == 45) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 6;
      case 6: {
        if (tag == 48) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.OrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.OrderInfo)
  return false;
#undef DO_
}

void OrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.OrderInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string gameorder = 4;
  if (has_gameorder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameorder().data(), this->gameorder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameorder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gameorder(), output);
  }

  // optional float money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->money(), output);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.OrderInfo)
}

::google::protobuf::uint8* OrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.OrderInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string gameorder = 4;
  if (has_gameorder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameorder().data(), this->gameorder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gameorder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gameorder(), target);
  }

  // optional float money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->money(), target);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.OrderInfo)
  return target;
}

int OrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string gameorder = 4;
    if (has_gameorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameorder());
    }

    // optional float money = 5;
    if (has_money()) {
      total_size += 1 + 4;
    }

    // optional uint64 createtime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderInfo::MergeFrom(const OrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gameorder()) {
      set_gameorder(from.gameorder());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderInfo::CopyFrom(const OrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfo::IsInitialized() const {

  return true;
}

void OrderInfo::Swap(OrderInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(gameorder_, other->gameorder_);
    std::swap(money_, other->money_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderInfo_descriptor_;
  metadata.reflection = OrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOrderListGmUserPmd_CS::kGameidFieldNumber;
const int GameOrderListGmUserPmd_CS::kZoneidFieldNumber;
const int GameOrderListGmUserPmd_CS::kCharidFieldNumber;
const int GameOrderListGmUserPmd_CS::kGmidFieldNumber;
const int GameOrderListGmUserPmd_CS::kTimestampFieldNumber;
const int GameOrderListGmUserPmd_CS::kDataFieldNumber;
const int GameOrderListGmUserPmd_CS::kCurpageFieldNumber;
const int GameOrderListGmUserPmd_CS::kMaxpageFieldNumber;
const int GameOrderListGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

GameOrderListGmUserPmd_CS::GameOrderListGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GameOrderListGmUserPmd_CS)
}

void GameOrderListGmUserPmd_CS::InitAsDefaultInstance() {
}

GameOrderListGmUserPmd_CS::GameOrderListGmUserPmd_CS(const GameOrderListGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GameOrderListGmUserPmd_CS)
}

void GameOrderListGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOrderListGmUserPmd_CS::~GameOrderListGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.GameOrderListGmUserPmd_CS)
  SharedDtor();
}

void GameOrderListGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOrderListGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOrderListGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOrderListGmUserPmd_CS_descriptor_;
}

const GameOrderListGmUserPmd_CS& GameOrderListGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

GameOrderListGmUserPmd_CS* GameOrderListGmUserPmd_CS::default_instance_ = NULL;

GameOrderListGmUserPmd_CS* GameOrderListGmUserPmd_CS::New() const {
  return new GameOrderListGmUserPmd_CS;
}

void GameOrderListGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameOrderListGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(gameid_, curpage_);
    maxpage_ = 0u;
  }
  perpage_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOrderListGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GameOrderListGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .Pmd.OrderInfo data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectTag(56)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 7;
      case 7: {
        if (tag == 56) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 8;
      case 8: {
        if (tag == 64) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 9;
      case 9: {
        if (tag == 72) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GameOrderListGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GameOrderListGmUserPmd_CS)
  return false;
#undef DO_
}

void GameOrderListGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GameOrderListGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // repeated .Pmd.OrderInfo data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  // optional uint32 curpage = 7;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curpage(), output);
  }

  // optional uint32 maxpage = 8;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxpage(), output);
  }

  // optional uint32 perpage = 9;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GameOrderListGmUserPmd_CS)
}

::google::protobuf::uint8* GameOrderListGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GameOrderListGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // repeated .Pmd.OrderInfo data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  // optional uint32 curpage = 7;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curpage(), target);
  }

  // optional uint32 maxpage = 8;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxpage(), target);
  }

  // optional uint32 perpage = 9;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GameOrderListGmUserPmd_CS)
  return target;
}

int GameOrderListGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 curpage = 7;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 8;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 perpage = 9;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.OrderInfo data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOrderListGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOrderListGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOrderListGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOrderListGmUserPmd_CS::MergeFrom(const GameOrderListGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOrderListGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOrderListGmUserPmd_CS::CopyFrom(const GameOrderListGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOrderListGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void GameOrderListGmUserPmd_CS::Swap(GameOrderListGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(gmid_, other->gmid_);
    std::swap(timestamp_, other->timestamp_);
    data_.Swap(&other->data_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOrderListGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOrderListGmUserPmd_CS_descriptor_;
  metadata.reflection = GameOrderListGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPackageCodeGmUserPmd_CS::kCodeidFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kAccidFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kRetFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kFlagFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kCreatetimeFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kUsedtimeFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kUsedgameidFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kUsedzoneidFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kUseduidFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kExtdataFieldNumber;
const int QueryPackageCodeGmUserPmd_CS::kCodetypeFieldNumber;
#endif  // !_MSC_VER

QueryPackageCodeGmUserPmd_CS::QueryPackageCodeGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.QueryPackageCodeGmUserPmd_CS)
}

void QueryPackageCodeGmUserPmd_CS::InitAsDefaultInstance() {
}

QueryPackageCodeGmUserPmd_CS::QueryPackageCodeGmUserPmd_CS(const QueryPackageCodeGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.QueryPackageCodeGmUserPmd_CS)
}

void QueryPackageCodeGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  flag_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  usedtime_ = GOOGLE_ULONGLONG(0);
  usedgameid_ = 0u;
  usedzoneid_ = 0u;
  useduid_ = GOOGLE_ULONGLONG(0);
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPackageCodeGmUserPmd_CS::~QueryPackageCodeGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.QueryPackageCodeGmUserPmd_CS)
  SharedDtor();
}

void QueryPackageCodeGmUserPmd_CS::SharedDtor() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (this != default_instance_) {
  }
}

void QueryPackageCodeGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPackageCodeGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPackageCodeGmUserPmd_CS_descriptor_;
}

const QueryPackageCodeGmUserPmd_CS& QueryPackageCodeGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

QueryPackageCodeGmUserPmd_CS* QueryPackageCodeGmUserPmd_CS::default_instance_ = NULL;

QueryPackageCodeGmUserPmd_CS* QueryPackageCodeGmUserPmd_CS::New() const {
  return new QueryPackageCodeGmUserPmd_CS;
}

void QueryPackageCodeGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryPackageCodeGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accid_, usedzoneid_);
    if (has_codeid()) {
      if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codeid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    useduid_ = GOOGLE_ULONGLONG(0);
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
    codetype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPackageCodeGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.QueryPackageCodeGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string codeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codeid().data(), this->codeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // required uint64 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 5;
      case 5: {
        if (tag == 40) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_usedtime;
        break;
      }

      // optional uint64 usedtime = 6;
      case 6: {
        if (tag == 48) {
         parse_usedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedtime_)));
          set_has_usedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usedgameid;
        break;
      }

      // optional uint32 usedgameid = 7;
      case 7: {
        if (tag == 56) {
         parse_usedgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedgameid_)));
          set_has_usedgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_usedzoneid;
        break;
      }

      // optional uint32 usedzoneid = 8;
      case 8: {
        if (tag == 64) {
         parse_usedzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedzoneid_)));
          set_has_usedzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_useduid;
        break;
      }

      // optional uint64 useduid = 9;
      case 9: {
        if (tag == 72) {
         parse_useduid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &useduid_)));
          set_has_useduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_extdata;
        break;
      }

      // optional string extdata = 10;
      case 10: {
        if (tag == 82) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_codetype;
        break;
      }

      // optional uint32 codetype = 11;
      case 11: {
        if (tag == 88) {
         parse_codetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codetype_)));
          set_has_codetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.QueryPackageCodeGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.QueryPackageCodeGmUserPmd_CS)
  return false;
#undef DO_
}

void QueryPackageCodeGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.QueryPackageCodeGmUserPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codeid(), output);
  }

  // required uint64 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->createtime(), output);
  }

  // optional uint64 usedtime = 6;
  if (has_usedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->usedtime(), output);
  }

  // optional uint32 usedgameid = 7;
  if (has_usedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->usedgameid(), output);
  }

  // optional uint32 usedzoneid = 8;
  if (has_usedzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->usedzoneid(), output);
  }

  // optional uint64 useduid = 9;
  if (has_useduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->useduid(), output);
  }

  // optional string extdata = 10;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->extdata(), output);
  }

  // optional uint32 codetype = 11;
  if (has_codetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->codetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.QueryPackageCodeGmUserPmd_CS)
}

::google::protobuf::uint8* QueryPackageCodeGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.QueryPackageCodeGmUserPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codeid(), target);
  }

  // required uint64 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->createtime(), target);
  }

  // optional uint64 usedtime = 6;
  if (has_usedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->usedtime(), target);
  }

  // optional uint32 usedgameid = 7;
  if (has_usedgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->usedgameid(), target);
  }

  // optional uint32 usedzoneid = 8;
  if (has_usedzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->usedzoneid(), target);
  }

  // optional uint64 useduid = 9;
  if (has_useduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->useduid(), target);
  }

  // optional string extdata = 10;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->extdata(), target);
  }

  // optional uint32 codetype = 11;
  if (has_codetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->codetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.QueryPackageCodeGmUserPmd_CS)
  return target;
}

int QueryPackageCodeGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string codeid = 1;
    if (has_codeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codeid());
    }

    // required uint64 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint64 createtime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 usedtime = 6;
    if (has_usedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usedtime());
    }

    // optional uint32 usedgameid = 7;
    if (has_usedgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedgameid());
    }

    // optional uint32 usedzoneid = 8;
    if (has_usedzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedzoneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 useduid = 9;
    if (has_useduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->useduid());
    }

    // optional string extdata = 10;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional uint32 codetype = 11;
    if (has_codetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPackageCodeGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPackageCodeGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPackageCodeGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPackageCodeGmUserPmd_CS::MergeFrom(const QueryPackageCodeGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_codeid()) {
      set_codeid(from.codeid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_usedtime()) {
      set_usedtime(from.usedtime());
    }
    if (from.has_usedgameid()) {
      set_usedgameid(from.usedgameid());
    }
    if (from.has_usedzoneid()) {
      set_usedzoneid(from.usedzoneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_useduid()) {
      set_useduid(from.useduid());
    }
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
    if (from.has_codetype()) {
      set_codetype(from.codetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPackageCodeGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPackageCodeGmUserPmd_CS::CopyFrom(const QueryPackageCodeGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPackageCodeGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryPackageCodeGmUserPmd_CS::Swap(QueryPackageCodeGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(codeid_, other->codeid_);
    std::swap(accid_, other->accid_);
    std::swap(ret_, other->ret_);
    std::swap(flag_, other->flag_);
    std::swap(createtime_, other->createtime_);
    std::swap(usedtime_, other->usedtime_);
    std::swap(usedgameid_, other->usedgameid_);
    std::swap(usedzoneid_, other->usedzoneid_);
    std::swap(useduid_, other->useduid_);
    std::swap(extdata_, other->extdata_);
    std::swap(codetype_, other->codetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPackageCodeGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPackageCodeGmUserPmd_CS_descriptor_;
  metadata.reflection = QueryPackageCodeGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUsePackageCodeGmUserPmd_CS::kCodeidFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kAccidFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kTypemutexFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kRetFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kCreatetimeFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kUsedtimeFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kUsedgameidFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kUsedzoneidFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kUseduidFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kExtdataFieldNumber;
const int RequestUsePackageCodeGmUserPmd_CS::kCodetypeFieldNumber;
#endif  // !_MSC_VER

RequestUsePackageCodeGmUserPmd_CS::RequestUsePackageCodeGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestUsePackageCodeGmUserPmd_CS)
}

void RequestUsePackageCodeGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestUsePackageCodeGmUserPmd_CS::RequestUsePackageCodeGmUserPmd_CS(const RequestUsePackageCodeGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestUsePackageCodeGmUserPmd_CS)
}

void RequestUsePackageCodeGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = GOOGLE_ULONGLONG(0);
  typemutex_ = 0u;
  ret_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  usedtime_ = GOOGLE_ULONGLONG(0);
  usedgameid_ = 0u;
  usedzoneid_ = 0u;
  useduid_ = GOOGLE_ULONGLONG(0);
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUsePackageCodeGmUserPmd_CS::~RequestUsePackageCodeGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestUsePackageCodeGmUserPmd_CS)
  SharedDtor();
}

void RequestUsePackageCodeGmUserPmd_CS::SharedDtor() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (this != default_instance_) {
  }
}

void RequestUsePackageCodeGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUsePackageCodeGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUsePackageCodeGmUserPmd_CS_descriptor_;
}

const RequestUsePackageCodeGmUserPmd_CS& RequestUsePackageCodeGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestUsePackageCodeGmUserPmd_CS* RequestUsePackageCodeGmUserPmd_CS::default_instance_ = NULL;

RequestUsePackageCodeGmUserPmd_CS* RequestUsePackageCodeGmUserPmd_CS::New() const {
  return new RequestUsePackageCodeGmUserPmd_CS;
}

void RequestUsePackageCodeGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUsePackageCodeGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accid_, usedzoneid_);
    if (has_codeid()) {
      if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codeid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    useduid_ = GOOGLE_ULONGLONG(0);
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
    codetype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUsePackageCodeGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestUsePackageCodeGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string codeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codeid().data(), this->codeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // required uint64 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_typemutex;
        break;
      }

      // optional uint32 typemutex = 3;
      case 3: {
        if (tag == 24) {
         parse_typemutex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typemutex_)));
          set_has_typemutex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 5;
      case 5: {
        if (tag == 40) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_usedtime;
        break;
      }

      // optional uint64 usedtime = 6;
      case 6: {
        if (tag == 48) {
         parse_usedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedtime_)));
          set_has_usedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usedgameid;
        break;
      }

      // optional uint32 usedgameid = 7;
      case 7: {
        if (tag == 56) {
         parse_usedgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedgameid_)));
          set_has_usedgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_usedzoneid;
        break;
      }

      // optional uint32 usedzoneid = 8;
      case 8: {
        if (tag == 64) {
         parse_usedzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedzoneid_)));
          set_has_usedzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_useduid;
        break;
      }

      // optional uint64 useduid = 9;
      case 9: {
        if (tag == 72) {
         parse_useduid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &useduid_)));
          set_has_useduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_extdata;
        break;
      }

      // optional string extdata = 10;
      case 10: {
        if (tag == 82) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_codetype;
        break;
      }

      // optional uint32 codetype = 11;
      case 11: {
        if (tag == 88) {
         parse_codetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codetype_)));
          set_has_codetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestUsePackageCodeGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestUsePackageCodeGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestUsePackageCodeGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestUsePackageCodeGmUserPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codeid(), output);
  }

  // required uint64 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint32 typemutex = 3;
  if (has_typemutex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->typemutex(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->createtime(), output);
  }

  // optional uint64 usedtime = 6;
  if (has_usedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->usedtime(), output);
  }

  // optional uint32 usedgameid = 7;
  if (has_usedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->usedgameid(), output);
  }

  // optional uint32 usedzoneid = 8;
  if (has_usedzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->usedzoneid(), output);
  }

  // optional uint64 useduid = 9;
  if (has_useduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->useduid(), output);
  }

  // optional string extdata = 10;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->extdata(), output);
  }

  // optional uint32 codetype = 11;
  if (has_codetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->codetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestUsePackageCodeGmUserPmd_CS)
}

::google::protobuf::uint8* RequestUsePackageCodeGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestUsePackageCodeGmUserPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codeid(), target);
  }

  // required uint64 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint32 typemutex = 3;
  if (has_typemutex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->typemutex(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->createtime(), target);
  }

  // optional uint64 usedtime = 6;
  if (has_usedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->usedtime(), target);
  }

  // optional uint32 usedgameid = 7;
  if (has_usedgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->usedgameid(), target);
  }

  // optional uint32 usedzoneid = 8;
  if (has_usedzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->usedzoneid(), target);
  }

  // optional uint64 useduid = 9;
  if (has_useduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->useduid(), target);
  }

  // optional string extdata = 10;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->extdata(), target);
  }

  // optional uint32 codetype = 11;
  if (has_codetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->codetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestUsePackageCodeGmUserPmd_CS)
  return target;
}

int RequestUsePackageCodeGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string codeid = 1;
    if (has_codeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codeid());
    }

    // required uint64 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 typemutex = 3;
    if (has_typemutex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typemutex());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 createtime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 usedtime = 6;
    if (has_usedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usedtime());
    }

    // optional uint32 usedgameid = 7;
    if (has_usedgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedgameid());
    }

    // optional uint32 usedzoneid = 8;
    if (has_usedzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedzoneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 useduid = 9;
    if (has_useduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->useduid());
    }

    // optional string extdata = 10;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional uint32 codetype = 11;
    if (has_codetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUsePackageCodeGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUsePackageCodeGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUsePackageCodeGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUsePackageCodeGmUserPmd_CS::MergeFrom(const RequestUsePackageCodeGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_codeid()) {
      set_codeid(from.codeid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_typemutex()) {
      set_typemutex(from.typemutex());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_usedtime()) {
      set_usedtime(from.usedtime());
    }
    if (from.has_usedgameid()) {
      set_usedgameid(from.usedgameid());
    }
    if (from.has_usedzoneid()) {
      set_usedzoneid(from.usedzoneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_useduid()) {
      set_useduid(from.useduid());
    }
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
    if (from.has_codetype()) {
      set_codetype(from.codetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUsePackageCodeGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUsePackageCodeGmUserPmd_CS::CopyFrom(const RequestUsePackageCodeGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUsePackageCodeGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestUsePackageCodeGmUserPmd_CS::Swap(RequestUsePackageCodeGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(codeid_, other->codeid_);
    std::swap(accid_, other->accid_);
    std::swap(typemutex_, other->typemutex_);
    std::swap(ret_, other->ret_);
    std::swap(createtime_, other->createtime_);
    std::swap(usedtime_, other->usedtime_);
    std::swap(usedgameid_, other->usedgameid_);
    std::swap(usedzoneid_, other->usedzoneid_);
    std::swap(useduid_, other->useduid_);
    std::swap(extdata_, other->extdata_);
    std::swap(codetype_, other->codetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUsePackageCodeGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUsePackageCodeGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestUsePackageCodeGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedbackData::kGameidFieldNumber;
const int FeedbackData::kZoneidFieldNumber;
const int FeedbackData::kCharidFieldNumber;
const int FeedbackData::kCharnameFieldNumber;
const int FeedbackData::kUserlevelFieldNumber;
const int FeedbackData::kViplevelFieldNumber;
const int FeedbackData::kFeedbackidFieldNumber;
const int FeedbackData::kSubjectFieldNumber;
const int FeedbackData::kContentFieldNumber;
const int FeedbackData::kStarFieldNumber;
const int FeedbackData::kRecordtimeFieldNumber;
const int FeedbackData::kRecordidFieldNumber;
const int FeedbackData::kStateFieldNumber;
const int FeedbackData::kReplyFieldNumber;
const int FeedbackData::kPhonenumFieldNumber;
#endif  // !_MSC_VER

FeedbackData::FeedbackData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.FeedbackData)
}

void FeedbackData::InitAsDefaultInstance() {
}

FeedbackData::FeedbackData(const FeedbackData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.FeedbackData)
}

void FeedbackData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userlevel_ = 0u;
  viplevel_ = 0u;
  feedbackid_ = 0u;
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  star_ = 0u;
  recordtime_ = GOOGLE_ULONGLONG(0);
  recordid_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  reply_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedbackData::~FeedbackData() {
  // @@protoc_insertion_point(destructor:Pmd.FeedbackData)
  SharedDtor();
}

void FeedbackData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (reply_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reply_;
  }
  if (phonenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenum_;
  }
  if (this != default_instance_) {
  }
}

void FeedbackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedbackData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedbackData_descriptor_;
}

const FeedbackData& FeedbackData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

FeedbackData* FeedbackData::default_instance_ = NULL;

FeedbackData* FeedbackData::New() const {
  return new FeedbackData;
}

void FeedbackData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeedbackData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, charid_);
    ZR_(userlevel_, viplevel_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    feedbackid_ = 0u;
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(recordtime_, recordid_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    star_ = 0u;
    state_ = 0u;
    if (has_reply()) {
      if (reply_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reply_->clear();
      }
    }
    if (has_phonenum()) {
      if (phonenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenum_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedbackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.FeedbackData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // required string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_userlevel;
        break;
      }

      // required uint32 userlevel = 5;
      case 5: {
        if (tag == 40) {
         parse_userlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_viplevel;
        break;
      }

      // required uint32 viplevel = 6;
      case 6: {
        if (tag == 48) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_feedbackid;
        break;
      }

      // optional uint32 feedbackid = 7;
      case 7: {
        if (tag == 56) {
         parse_feedbackid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feedbackid_)));
          set_has_feedbackid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_subject;
        break;
      }

      // optional string subject = 8;
      case 8: {
        if (tag == 66) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_content;
        break;
      }

      // optional string content = 9;
      case 9: {
        if (tag == 74) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_star;
        break;
      }

      // required uint32 star = 10;
      case 10: {
        if (tag == 80) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_recordtime;
        break;
      }

      // required uint64 recordtime = 11;
      case 11: {
        if (tag == 88) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_recordid;
        break;
      }

      // optional uint64 recordid = 12;
      case 12: {
        if (tag == 96) {
         parse_recordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_state;
        break;
      }

      // optional uint32 state = 13;
      case 13: {
        if (tag == 104) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_reply;
        break;
      }

      // optional string reply = 14;
      case 14: {
        if (tag == 114) {
         parse_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reply().data(), this->reply().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reply");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_phonenum;
        break;
      }

      // optional string phonenum = 15;
      case 15: {
        if (tag == 122) {
         parse_phonenum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenum().data(), this->phonenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonenum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.FeedbackData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.FeedbackData)
  return false;
#undef DO_
}

void FeedbackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.FeedbackData)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // required uint32 userlevel = 5;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->userlevel(), output);
  }

  // required uint32 viplevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplevel(), output);
  }

  // optional uint32 feedbackid = 7;
  if (has_feedbackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->feedbackid(), output);
  }

  // optional string subject = 8;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subject(), output);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->content(), output);
  }

  // required uint32 star = 10;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->star(), output);
  }

  // required uint64 recordtime = 11;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->recordtime(), output);
  }

  // optional uint64 recordid = 12;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->recordid(), output);
  }

  // optional uint32 state = 13;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->state(), output);
  }

  // optional string reply = 14;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reply().data(), this->reply().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reply");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->reply(), output);
  }

  // optional string phonenum = 15;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->phonenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.FeedbackData)
}

::google::protobuf::uint8* FeedbackData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.FeedbackData)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // required uint32 userlevel = 5;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->userlevel(), target);
  }

  // required uint32 viplevel = 6;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplevel(), target);
  }

  // optional uint32 feedbackid = 7;
  if (has_feedbackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->feedbackid(), target);
  }

  // optional string subject = 8;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subject(), target);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->content(), target);
  }

  // required uint32 star = 10;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->star(), target);
  }

  // required uint64 recordtime = 11;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->recordtime(), target);
  }

  // optional uint64 recordid = 12;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->recordid(), target);
  }

  // optional uint32 state = 13;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->state(), target);
  }

  // optional string reply = 14;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reply().data(), this->reply().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reply");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->reply(), target);
  }

  // optional string phonenum = 15;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenum().data(), this->phonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->phonenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.FeedbackData)
  return target;
}

int FeedbackData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required uint32 userlevel = 5;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlevel());
    }

    // required uint32 viplevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint32 feedbackid = 7;
    if (has_feedbackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feedbackid());
    }

    // optional string subject = 8;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string content = 9;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required uint32 star = 10;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint64 recordtime = 11;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional uint64 recordid = 12;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional uint32 state = 13;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional string reply = 14;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reply());
    }

    // optional string phonenum = 15;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedbackData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedbackData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedbackData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedbackData::MergeFrom(const FeedbackData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_feedbackid()) {
      set_feedbackid(from.feedbackid());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedbackData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedbackData::CopyFrom(const FeedbackData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedbackData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000063f) != 0x0000063f) return false;

  return true;
}

void FeedbackData::Swap(FeedbackData* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(feedbackid_, other->feedbackid_);
    std::swap(subject_, other->subject_);
    std::swap(content_, other->content_);
    std::swap(star_, other->star_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(recordid_, other->recordid_);
    std::swap(state_, other->state_);
    std::swap(reply_, other->reply_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedbackData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedbackData_descriptor_;
  metadata.reflection = FeedbackData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedbackGmUserPmd_CS::kDataFieldNumber;
const int FeedbackGmUserPmd_CS::kFeedbacktypeFieldNumber;
const int FeedbackGmUserPmd_CS::kCurpageFieldNumber;
const int FeedbackGmUserPmd_CS::kMaxpageFieldNumber;
const int FeedbackGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

FeedbackGmUserPmd_CS::FeedbackGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.FeedbackGmUserPmd_CS)
}

void FeedbackGmUserPmd_CS::InitAsDefaultInstance() {
}

FeedbackGmUserPmd_CS::FeedbackGmUserPmd_CS(const FeedbackGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.FeedbackGmUserPmd_CS)
}

void FeedbackGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  feedbacktype_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedbackGmUserPmd_CS::~FeedbackGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.FeedbackGmUserPmd_CS)
  SharedDtor();
}

void FeedbackGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeedbackGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedbackGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedbackGmUserPmd_CS_descriptor_;
}

const FeedbackGmUserPmd_CS& FeedbackGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

FeedbackGmUserPmd_CS* FeedbackGmUserPmd_CS::default_instance_ = NULL;

FeedbackGmUserPmd_CS* FeedbackGmUserPmd_CS::New() const {
  return new FeedbackGmUserPmd_CS;
}

void FeedbackGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeedbackGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(feedbacktype_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedbackGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.FeedbackGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.FeedbackData data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_feedbacktype;
        break;
      }

      // optional uint32 feedbacktype = 2;
      case 2: {
        if (tag == 16) {
         parse_feedbacktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feedbacktype_)));
          set_has_feedbacktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 3;
      case 3: {
        if (tag == 24) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 4;
      case 4: {
        if (tag == 32) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 5;
      case 5: {
        if (tag == 40) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.FeedbackGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.FeedbackGmUserPmd_CS)
  return false;
#undef DO_
}

void FeedbackGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.FeedbackGmUserPmd_CS)
  // repeated .Pmd.FeedbackData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 feedbacktype = 2;
  if (has_feedbacktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->feedbacktype(), output);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpage(), output);
  }

  // optional uint32 maxpage = 4;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxpage(), output);
  }

  // optional uint32 perpage = 5;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.FeedbackGmUserPmd_CS)
}

::google::protobuf::uint8* FeedbackGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.FeedbackGmUserPmd_CS)
  // repeated .Pmd.FeedbackData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 feedbacktype = 2;
  if (has_feedbacktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->feedbacktype(), target);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpage(), target);
  }

  // optional uint32 maxpage = 4;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxpage(), target);
  }

  // optional uint32 perpage = 5;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.FeedbackGmUserPmd_CS)
  return target;
}

int FeedbackGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 feedbacktype = 2;
    if (has_feedbacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feedbacktype());
    }

    // optional uint32 curpage = 3;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 4;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 5;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.FeedbackData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedbackGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedbackGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedbackGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedbackGmUserPmd_CS::MergeFrom(const FeedbackGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_feedbacktype()) {
      set_feedbacktype(from.feedbacktype());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedbackGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedbackGmUserPmd_CS::CopyFrom(const FeedbackGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedbackGmUserPmd_CS::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void FeedbackGmUserPmd_CS::Swap(FeedbackGmUserPmd_CS* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(feedbacktype_, other->feedbacktype_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedbackGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedbackGmUserPmd_CS_descriptor_;
  metadata.reflection = FeedbackGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFeedbackListGmUserPmd_C::kGameidFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kZoneidFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kCharidFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kCharnameFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kFeedbacktypeFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kStateFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kStarttimeFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kEndtimeFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kCurpageFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kMaxpageFieldNumber;
const int RequestFeedbackListGmUserPmd_C::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestFeedbackListGmUserPmd_C::RequestFeedbackListGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestFeedbackListGmUserPmd_C)
}

void RequestFeedbackListGmUserPmd_C::InitAsDefaultInstance() {
}

RequestFeedbackListGmUserPmd_C::RequestFeedbackListGmUserPmd_C(const RequestFeedbackListGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestFeedbackListGmUserPmd_C)
}

void RequestFeedbackListGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedbacktype_ = 0u;
  state_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFeedbackListGmUserPmd_C::~RequestFeedbackListGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestFeedbackListGmUserPmd_C)
  SharedDtor();
}

void RequestFeedbackListGmUserPmd_C::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestFeedbackListGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFeedbackListGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFeedbackListGmUserPmd_C_descriptor_;
}

const RequestFeedbackListGmUserPmd_C& RequestFeedbackListGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestFeedbackListGmUserPmd_C* RequestFeedbackListGmUserPmd_C::default_instance_ = NULL;

RequestFeedbackListGmUserPmd_C* RequestFeedbackListGmUserPmd_C::New() const {
  return new RequestFeedbackListGmUserPmd_C;
}

void RequestFeedbackListGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestFeedbackListGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, charid_);
    ZR_(feedbacktype_, endtime_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  ZR_(curpage_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFeedbackListGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestFeedbackListGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_feedbacktype;
        break;
      }

      // optional uint32 feedbacktype = 5;
      case 5: {
        if (tag == 40) {
         parse_feedbacktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feedbacktype_)));
          set_has_feedbacktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional uint32 state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 7;
      case 7: {
        if (tag == 56) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 8;
      case 8: {
        if (tag == 64) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 9;
      case 9: {
        if (tag == 72) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 10;
      case 10: {
        if (tag == 80) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 11;
      case 11: {
        if (tag == 88) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestFeedbackListGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestFeedbackListGmUserPmd_C)
  return false;
#undef DO_
}

void RequestFeedbackListGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestFeedbackListGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 feedbacktype = 5;
  if (has_feedbacktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->feedbacktype(), output);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }

  // optional uint64 starttime = 7;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->starttime(), output);
  }

  // optional uint64 endtime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->endtime(), output);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curpage(), output);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxpage(), output);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestFeedbackListGmUserPmd_C)
}

::google::protobuf::uint8* RequestFeedbackListGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestFeedbackListGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional uint32 feedbacktype = 5;
  if (has_feedbacktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->feedbacktype(), target);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->state(), target);
  }

  // optional uint64 starttime = 7;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->starttime(), target);
  }

  // optional uint64 endtime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->endtime(), target);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curpage(), target);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxpage(), target);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestFeedbackListGmUserPmd_C)
  return target;
}

int RequestFeedbackListGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 feedbacktype = 5;
    if (has_feedbacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feedbacktype());
    }

    // optional uint32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 starttime = 7;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 curpage = 9;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 10;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 11;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFeedbackListGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFeedbackListGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFeedbackListGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFeedbackListGmUserPmd_C::MergeFrom(const RequestFeedbackListGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_feedbacktype()) {
      set_feedbacktype(from.feedbacktype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFeedbackListGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFeedbackListGmUserPmd_C::CopyFrom(const RequestFeedbackListGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFeedbackListGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestFeedbackListGmUserPmd_C::Swap(RequestFeedbackListGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(feedbacktype_, other->feedbacktype_);
    std::swap(state_, other->state_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFeedbackListGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFeedbackListGmUserPmd_C_descriptor_;
  metadata.reflection = RequestFeedbackListGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestDealFeedbackGmUserPmd_CS::kGameidFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kZoneidFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kRecordidFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kCharidFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kStateFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kSubjectFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kReplyFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kFeedbacktypeFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kRetcodeFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kRetdescFieldNumber;
const int RequestDealFeedbackGmUserPmd_CS::kGmidFieldNumber;
#endif  // !_MSC_VER

RequestDealFeedbackGmUserPmd_CS::RequestDealFeedbackGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestDealFeedbackGmUserPmd_CS)
}

void RequestDealFeedbackGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestDealFeedbackGmUserPmd_CS::RequestDealFeedbackGmUserPmd_CS(const RequestDealFeedbackGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestDealFeedbackGmUserPmd_CS)
}

void RequestDealFeedbackGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  recordid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reply_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedbacktype_ = 0u;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDealFeedbackGmUserPmd_CS::~RequestDealFeedbackGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestDealFeedbackGmUserPmd_CS)
  SharedDtor();
}

void RequestDealFeedbackGmUserPmd_CS::SharedDtor() {
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (reply_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reply_;
  }
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void RequestDealFeedbackGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDealFeedbackGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDealFeedbackGmUserPmd_CS_descriptor_;
}

const RequestDealFeedbackGmUserPmd_CS& RequestDealFeedbackGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestDealFeedbackGmUserPmd_CS* RequestDealFeedbackGmUserPmd_CS::default_instance_ = NULL;

RequestDealFeedbackGmUserPmd_CS* RequestDealFeedbackGmUserPmd_CS::New() const {
  return new RequestDealFeedbackGmUserPmd_CS;
}

void RequestDealFeedbackGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestDealFeedbackGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, state_);
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_reply()) {
      if (reply_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reply_->clear();
      }
    }
    feedbacktype_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    retcode_ = 0u;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
    gmid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestDealFeedbackGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestDealFeedbackGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recordid;
        break;
      }

      // required uint32 recordid = 3;
      case 3: {
        if (tag == 24) {
         parse_recordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional uint32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_subject;
        break;
      }

      // optional string subject = 6;
      case 6: {
        if (tag == 50) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reply;
        break;
      }

      // optional string reply = 7;
      case 7: {
        if (tag == 58) {
         parse_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reply().data(), this->reply().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reply");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_feedbacktype;
        break;
      }

      // optional uint32 feedbacktype = 8;
      case 8: {
        if (tag == 64) {
         parse_feedbacktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feedbacktype_)));
          set_has_feedbacktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 9;
      case 9: {
        if (tag == 72) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 10;
      case 10: {
        if (tag == 82) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 11;
      case 11: {
        if (tag == 88) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestDealFeedbackGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestDealFeedbackGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestDealFeedbackGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestDealFeedbackGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint32 recordid = 3;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recordid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  // optional string subject = 6;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->subject(), output);
  }

  // optional string reply = 7;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reply().data(), this->reply().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reply");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reply(), output);
  }

  // optional uint32 feedbacktype = 8;
  if (has_feedbacktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feedbacktype(), output);
  }

  // optional uint32 retcode = 9;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->retcode(), output);
  }

  // optional string retdesc = 10;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->retdesc(), output);
  }

  // optional uint32 gmid = 11;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestDealFeedbackGmUserPmd_CS)
}

::google::protobuf::uint8* RequestDealFeedbackGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestDealFeedbackGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint32 recordid = 3;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recordid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state(), target);
  }

  // optional string subject = 6;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subject(), target);
  }

  // optional string reply = 7;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reply().data(), this->reply().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reply");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->reply(), target);
  }

  // optional uint32 feedbacktype = 8;
  if (has_feedbacktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feedbacktype(), target);
  }

  // optional uint32 retcode = 9;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->retcode(), target);
  }

  // optional string retdesc = 10;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->retdesc(), target);
  }

  // optional uint32 gmid = 11;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestDealFeedbackGmUserPmd_CS)
  return target;
}

int RequestDealFeedbackGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 recordid = 3;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional string subject = 6;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional string reply = 7;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reply());
    }

    // optional uint32 feedbacktype = 8;
    if (has_feedbacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feedbacktype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 retcode = 9;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 10;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // optional uint32 gmid = 11;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDealFeedbackGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestDealFeedbackGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestDealFeedbackGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestDealFeedbackGmUserPmd_CS::MergeFrom(const RequestDealFeedbackGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_feedbacktype()) {
      set_feedbacktype(from.feedbacktype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestDealFeedbackGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDealFeedbackGmUserPmd_CS::CopyFrom(const RequestDealFeedbackGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDealFeedbackGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestDealFeedbackGmUserPmd_CS::Swap(RequestDealFeedbackGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(recordid_, other->recordid_);
    std::swap(charid_, other->charid_);
    std::swap(state_, other->state_);
    std::swap(subject_, other->subject_);
    std::swap(reply_, other->reply_);
    std::swap(feedbacktype_, other->feedbacktype_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestDealFeedbackGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDealFeedbackGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestDealFeedbackGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointReportData::kRecorddateFieldNumber;
const int PointReportData::kRedeeminFieldNumber;
const int PointReportData::kRedeemoutFieldNumber;
const int PointReportData::kRedeemtotalFieldNumber;
#endif  // !_MSC_VER

PointReportData::PointReportData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PointReportData)
}

void PointReportData::InitAsDefaultInstance() {
}

PointReportData::PointReportData(const PointReportData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PointReportData)
}

void PointReportData::SharedCtor() {
  _cached_size_ = 0;
  recorddate_ = 0u;
  redeemin_ = GOOGLE_ULONGLONG(0);
  redeemout_ = GOOGLE_ULONGLONG(0);
  redeemtotal_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointReportData::~PointReportData() {
  // @@protoc_insertion_point(destructor:Pmd.PointReportData)
  SharedDtor();
}

void PointReportData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointReportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointReportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointReportData_descriptor_;
}

const PointReportData& PointReportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

PointReportData* PointReportData::default_instance_ = NULL;

PointReportData* PointReportData::New() const {
  return new PointReportData;
}

void PointReportData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointReportData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(redeemin_, recorddate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointReportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PointReportData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 recorddate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recorddate_)));
          set_has_recorddate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_redeemin;
        break;
      }

      // required uint64 redeemin = 2;
      case 2: {
        if (tag == 16) {
         parse_redeemin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &redeemin_)));
          set_has_redeemin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_redeemout;
        break;
      }

      // required uint64 redeemout = 3;
      case 3: {
        if (tag == 24) {
         parse_redeemout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &redeemout_)));
          set_has_redeemout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_redeemtotal;
        break;
      }

      // optional int64 redeemtotal = 4;
      case 4: {
        if (tag == 32) {
         parse_redeemtotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &redeemtotal_)));
          set_has_redeemtotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PointReportData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PointReportData)
  return false;
#undef DO_
}

void PointReportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PointReportData)
  // required uint32 recorddate = 1;
  if (has_recorddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recorddate(), output);
  }

  // required uint64 redeemin = 2;
  if (has_redeemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->redeemin(), output);
  }

  // required uint64 redeemout = 3;
  if (has_redeemout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->redeemout(), output);
  }

  // optional int64 redeemtotal = 4;
  if (has_redeemtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->redeemtotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PointReportData)
}

::google::protobuf::uint8* PointReportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PointReportData)
  // required uint32 recorddate = 1;
  if (has_recorddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recorddate(), target);
  }

  // required uint64 redeemin = 2;
  if (has_redeemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->redeemin(), target);
  }

  // required uint64 redeemout = 3;
  if (has_redeemout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->redeemout(), target);
  }

  // optional int64 redeemtotal = 4;
  if (has_redeemtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->redeemtotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PointReportData)
  return target;
}

int PointReportData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 recorddate = 1;
    if (has_recorddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recorddate());
    }

    // required uint64 redeemin = 2;
    if (has_redeemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->redeemin());
    }

    // required uint64 redeemout = 3;
    if (has_redeemout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->redeemout());
    }

    // optional int64 redeemtotal = 4;
    if (has_redeemtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->redeemtotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointReportData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointReportData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointReportData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointReportData::MergeFrom(const PointReportData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recorddate()) {
      set_recorddate(from.recorddate());
    }
    if (from.has_redeemin()) {
      set_redeemin(from.redeemin());
    }
    if (from.has_redeemout()) {
      set_redeemout(from.redeemout());
    }
    if (from.has_redeemtotal()) {
      set_redeemtotal(from.redeemtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointReportData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointReportData::CopyFrom(const PointReportData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointReportData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PointReportData::Swap(PointReportData* other) {
  if (other != this) {
    std::swap(recorddate_, other->recorddate_);
    std::swap(redeemin_, other->redeemin_);
    std::swap(redeemout_, other->redeemout_);
    std::swap(redeemtotal_, other->redeemtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointReportData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointReportData_descriptor_;
  metadata.reflection = PointReportData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPointReportGmUserPmd_CS::kGameidFieldNumber;
const int RequestPointReportGmUserPmd_CS::kZoneidFieldNumber;
const int RequestPointReportGmUserPmd_CS::kCharidFieldNumber;
const int RequestPointReportGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestPointReportGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestPointReportGmUserPmd_CS::kGmidFieldNumber;
const int RequestPointReportGmUserPmd_CS::kCurpageFieldNumber;
const int RequestPointReportGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestPointReportGmUserPmd_CS::kPerpageFieldNumber;
const int RequestPointReportGmUserPmd_CS::kDataFieldNumber;
#endif  // !_MSC_VER

RequestPointReportGmUserPmd_CS::RequestPointReportGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestPointReportGmUserPmd_CS)
}

void RequestPointReportGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestPointReportGmUserPmd_CS::RequestPointReportGmUserPmd_CS(const RequestPointReportGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestPointReportGmUserPmd_CS)
}

void RequestPointReportGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  starttime_ = 0u;
  endtime_ = 0u;
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPointReportGmUserPmd_CS::~RequestPointReportGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestPointReportGmUserPmd_CS)
  SharedDtor();
}

void RequestPointReportGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPointReportGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPointReportGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPointReportGmUserPmd_CS_descriptor_;
}

const RequestPointReportGmUserPmd_CS& RequestPointReportGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestPointReportGmUserPmd_CS* RequestPointReportGmUserPmd_CS::default_instance_ = NULL;

RequestPointReportGmUserPmd_CS* RequestPointReportGmUserPmd_CS::New() const {
  return new RequestPointReportGmUserPmd_CS;
}

void RequestPointReportGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestPointReportGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, maxpage_);
  }
  perpage_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPointReportGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestPointReportGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 4;
      case 4: {
        if (tag == 32) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 5;
      case 5: {
        if (tag == 40) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 6;
      case 6: {
        if (tag == 48) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 7;
      case 7: {
        if (tag == 56) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 8;
      case 8: {
        if (tag == 64) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 9;
      case 9: {
        if (tag == 72) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_data;
        break;
      }

      // repeated .Pmd.PointReportData data = 10;
      case 10: {
        if (tag == 82) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestPointReportGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestPointReportGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestPointReportGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestPointReportGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 starttime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starttime(), output);
  }

  // optional uint32 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  // optional uint32 gmid = 6;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gmid(), output);
  }

  // optional uint32 curpage = 7;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curpage(), output);
  }

  // optional uint32 maxpage = 8;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxpage(), output);
  }

  // optional uint32 perpage = 9;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->perpage(), output);
  }

  // repeated .Pmd.PointReportData data = 10;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestPointReportGmUserPmd_CS)
}

::google::protobuf::uint8* RequestPointReportGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestPointReportGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 starttime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starttime(), target);
  }

  // optional uint32 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  // optional uint32 gmid = 6;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gmid(), target);
  }

  // optional uint32 curpage = 7;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curpage(), target);
  }

  // optional uint32 maxpage = 8;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxpage(), target);
  }

  // optional uint32 perpage = 9;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->perpage(), target);
  }

  // repeated .Pmd.PointReportData data = 10;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestPointReportGmUserPmd_CS)
  return target;
}

int RequestPointReportGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 starttime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 gmid = 6;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 7;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 8;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 perpage = 9;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.PointReportData data = 10;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPointReportGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPointReportGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPointReportGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPointReportGmUserPmd_CS::MergeFrom(const RequestPointReportGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPointReportGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPointReportGmUserPmd_CS::CopyFrom(const RequestPointReportGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPointReportGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestPointReportGmUserPmd_CS::Swap(RequestPointReportGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPointReportGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPointReportGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestPointReportGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointDetailData::kIdFieldNumber;
const int PointDetailData::kRecordtimeFieldNumber;
const int PointDetailData::kCharidFieldNumber;
const int PointDetailData::kCharnameFieldNumber;
const int PointDetailData::kPtypeFieldNumber;
const int PointDetailData::kRedeemnumFieldNumber;
const int PointDetailData::kOriginnumFieldNumber;
const int PointDetailData::kCurrentnumFieldNumber;
#endif  // !_MSC_VER

PointDetailData::PointDetailData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PointDetailData)
}

void PointDetailData::InitAsDefaultInstance() {
}

PointDetailData::PointDetailData(const PointDetailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PointDetailData)
}

void PointDetailData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  recordtime_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptype_ = 0u;
  redeemnum_ = GOOGLE_ULONGLONG(0);
  originnum_ = GOOGLE_ULONGLONG(0);
  currentnum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointDetailData::~PointDetailData() {
  // @@protoc_insertion_point(destructor:Pmd.PointDetailData)
  SharedDtor();
}

void PointDetailData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void PointDetailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointDetailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointDetailData_descriptor_;
}

const PointDetailData& PointDetailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

PointDetailData* PointDetailData::default_instance_ = NULL;

PointDetailData* PointDetailData::New() const {
  return new PointDetailData;
}

void PointDetailData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointDetailData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    ZR_(redeemnum_, ptype_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointDetailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PointDetailData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recordtime;
        break;
      }

      // required uint64 recordtime = 2;
      case 2: {
        if (tag == 16) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ptype;
        break;
      }

      // required uint32 ptype = 5;
      case 5: {
        if (tag == 40) {
         parse_ptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ptype_)));
          set_has_ptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_redeemnum;
        break;
      }

      // required uint64 redeemnum = 6;
      case 6: {
        if (tag == 48) {
         parse_redeemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &redeemnum_)));
          set_has_redeemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_originnum;
        break;
      }

      // optional uint64 originnum = 7;
      case 7: {
        if (tag == 56) {
         parse_originnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &originnum_)));
          set_has_originnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_currentnum;
        break;
      }

      // optional uint64 currentnum = 8;
      case 8: {
        if (tag == 64) {
         parse_currentnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currentnum_)));
          set_has_currentnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PointDetailData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PointDetailData)
  return false;
#undef DO_
}

void PointDetailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PointDetailData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint64 recordtime = 2;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->recordtime(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // required uint32 ptype = 5;
  if (has_ptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ptype(), output);
  }

  // required uint64 redeemnum = 6;
  if (has_redeemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->redeemnum(), output);
  }

  // optional uint64 originnum = 7;
  if (has_originnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->originnum(), output);
  }

  // optional uint64 currentnum = 8;
  if (has_currentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->currentnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PointDetailData)
}

::google::protobuf::uint8* PointDetailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PointDetailData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint64 recordtime = 2;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->recordtime(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // required uint32 ptype = 5;
  if (has_ptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ptype(), target);
  }

  // required uint64 redeemnum = 6;
  if (has_redeemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->redeemnum(), target);
  }

  // optional uint64 originnum = 7;
  if (has_originnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->originnum(), target);
  }

  // optional uint64 currentnum = 8;
  if (has_currentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->currentnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PointDetailData)
  return target;
}

int PointDetailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint64 recordtime = 2;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required uint32 ptype = 5;
    if (has_ptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ptype());
    }

    // required uint64 redeemnum = 6;
    if (has_redeemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->redeemnum());
    }

    // optional uint64 originnum = 7;
    if (has_originnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->originnum());
    }

    // optional uint64 currentnum = 8;
    if (has_currentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currentnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointDetailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointDetailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointDetailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointDetailData::MergeFrom(const PointDetailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_ptype()) {
      set_ptype(from.ptype());
    }
    if (from.has_redeemnum()) {
      set_redeemnum(from.redeemnum());
    }
    if (from.has_originnum()) {
      set_originnum(from.originnum());
    }
    if (from.has_currentnum()) {
      set_currentnum(from.currentnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointDetailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointDetailData::CopyFrom(const PointDetailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointDetailData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000036) != 0x00000036) return false;

  return true;
}

void PointDetailData::Swap(PointDetailData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(ptype_, other->ptype_);
    std::swap(redeemnum_, other->redeemnum_);
    std::swap(originnum_, other->originnum_);
    std::swap(currentnum_, other->currentnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointDetailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointDetailData_descriptor_;
  metadata.reflection = PointDetailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPointDetailGmUserPmd_CS::kGameidFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kZoneidFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kCharidFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kPtypeFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kGmidFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kCurpageFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kPerpageFieldNumber;
const int RequestPointDetailGmUserPmd_CS::kDataFieldNumber;
#endif  // !_MSC_VER

RequestPointDetailGmUserPmd_CS::RequestPointDetailGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestPointDetailGmUserPmd_CS)
}

void RequestPointDetailGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestPointDetailGmUserPmd_CS::RequestPointDetailGmUserPmd_CS(const RequestPointDetailGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestPointDetailGmUserPmd_CS)
}

void RequestPointDetailGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ptype_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPointDetailGmUserPmd_CS::~RequestPointDetailGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestPointDetailGmUserPmd_CS)
  SharedDtor();
}

void RequestPointDetailGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPointDetailGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPointDetailGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPointDetailGmUserPmd_CS_descriptor_;
}

const RequestPointDetailGmUserPmd_CS& RequestPointDetailGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestPointDetailGmUserPmd_CS* RequestPointDetailGmUserPmd_CS::default_instance_ = NULL;

RequestPointDetailGmUserPmd_CS* RequestPointDetailGmUserPmd_CS::New() const {
  return new RequestPointDetailGmUserPmd_CS;
}

void RequestPointDetailGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestPointDetailGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, curpage_);
  }
  if (_has_bits_[8 / 32] & 768) {
    maxpage_ = 0u;
    perpage_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPointDetailGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestPointDetailGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ptype;
        break;
      }

      // optional uint32 ptype = 4;
      case 4: {
        if (tag == 32) {
         parse_ptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ptype_)));
          set_has_ptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 5;
      case 5: {
        if (tag == 40) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 6;
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 7;
      case 7: {
        if (tag == 56) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 8;
      case 8: {
        if (tag == 64) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 9;
      case 9: {
        if (tag == 72) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 10;
      case 10: {
        if (tag == 80) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data;
        break;
      }

      // repeated .Pmd.PointDetailData data = 11;
      case 11: {
        if (tag == 90) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestPointDetailGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestPointDetailGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestPointDetailGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestPointDetailGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 ptype = 4;
  if (has_ptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ptype(), output);
  }

  // optional uint64 starttime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->starttime(), output);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->endtime(), output);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gmid(), output);
  }

  // optional uint32 curpage = 8;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->curpage(), output);
  }

  // optional uint32 maxpage = 9;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->maxpage(), output);
  }

  // optional uint32 perpage = 10;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->perpage(), output);
  }

  // repeated .Pmd.PointDetailData data = 11;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestPointDetailGmUserPmd_CS)
}

::google::protobuf::uint8* RequestPointDetailGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestPointDetailGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 ptype = 4;
  if (has_ptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ptype(), target);
  }

  // optional uint64 starttime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->starttime(), target);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->endtime(), target);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gmid(), target);
  }

  // optional uint32 curpage = 8;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->curpage(), target);
  }

  // optional uint32 maxpage = 9;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->maxpage(), target);
  }

  // optional uint32 perpage = 10;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->perpage(), target);
  }

  // repeated .Pmd.PointDetailData data = 11;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestPointDetailGmUserPmd_CS)
  return target;
}

int RequestPointDetailGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 ptype = 4;
    if (has_ptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ptype());
    }

    // optional uint64 starttime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 gmid = 7;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 8;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 maxpage = 9;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 10;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.PointDetailData data = 11;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPointDetailGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPointDetailGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPointDetailGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPointDetailGmUserPmd_CS::MergeFrom(const RequestPointDetailGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ptype()) {
      set_ptype(from.ptype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPointDetailGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPointDetailGmUserPmd_CS::CopyFrom(const RequestPointDetailGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPointDetailGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestPointDetailGmUserPmd_CS::Swap(RequestPointDetailGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(ptype_, other->ptype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPointDetailGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPointDetailGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestPointDetailGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BettingDetailData::kIdFieldNumber;
const int BettingDetailData::kRoundidFieldNumber;
const int BettingDetailData::kRecordtimeFieldNumber;
const int BettingDetailData::kCharidFieldNumber;
const int BettingDetailData::kCharnameFieldNumber;
const int BettingDetailData::kWinlosenumFieldNumber;
const int BettingDetailData::kTotalnumFieldNumber;
const int BettingDetailData::kDealeridFieldNumber;
const int BettingDetailData::kDealernumFieldNumber;
const int BettingDetailData::kBetdetailFieldNumber;
const int BettingDetailData::kLotterydetailFieldNumber;
const int BettingDetailData::kOpensourceFieldNumber;
#endif  // !_MSC_VER

BettingDetailData::BettingDetailData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.BettingDetailData)
}

void BettingDetailData::InitAsDefaultInstance() {
}

BettingDetailData::BettingDetailData(const BettingDetailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.BettingDetailData)
}

void BettingDetailData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  roundid_ = GOOGLE_ULONGLONG(0);
  recordtime_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winlosenum_ = GOOGLE_LONGLONG(0);
  totalnum_ = GOOGLE_ULONGLONG(0);
  dealerid_ = GOOGLE_ULONGLONG(0);
  dealernum_ = GOOGLE_ULONGLONG(0);
  betdetail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lotterydetail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opensource_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BettingDetailData::~BettingDetailData() {
  // @@protoc_insertion_point(destructor:Pmd.BettingDetailData)
  SharedDtor();
}

void BettingDetailData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (betdetail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete betdetail_;
  }
  if (lotterydetail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lotterydetail_;
  }
  if (this != default_instance_) {
  }
}

void BettingDetailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BettingDetailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BettingDetailData_descriptor_;
}

const BettingDetailData& BettingDetailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

BettingDetailData* BettingDetailData::default_instance_ = NULL;

BettingDetailData* BettingDetailData::New() const {
  return new BettingDetailData;
}

void BettingDetailData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BettingDetailData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    ZR_(winlosenum_, dealerid_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    dealernum_ = GOOGLE_ULONGLONG(0);
    if (has_betdetail()) {
      if (betdetail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        betdetail_->clear();
      }
    }
    if (has_lotterydetail()) {
      if (lotterydetail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lotterydetail_->clear();
      }
    }
    opensource_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BettingDetailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.BettingDetailData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roundid;
        break;
      }

      // optional uint64 roundid = 2;
      case 2: {
        if (tag == 16) {
         parse_roundid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundid_)));
          set_has_roundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recordtime;
        break;
      }

      // required uint64 recordtime = 3;
      case 3: {
        if (tag == 24) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // required uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charname;
        break;
      }

      // optional string charname = 5;
      case 5: {
        if (tag == 42) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_winlosenum;
        break;
      }

      // required int64 winlosenum = 6;
      case 6: {
        if (tag == 48) {
         parse_winlosenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winlosenum_)));
          set_has_winlosenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_totalnum;
        break;
      }

      // optional uint64 totalnum = 7;
      case 7: {
        if (tag == 56) {
         parse_totalnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dealerid;
        break;
      }

      // optional uint64 dealerid = 8;
      case 8: {
        if (tag == 64) {
         parse_dealerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dealerid_)));
          set_has_dealerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dealernum;
        break;
      }

      // optional uint64 dealernum = 9;
      case 9: {
        if (tag == 72) {
         parse_dealernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dealernum_)));
          set_has_dealernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_betdetail;
        break;
      }

      // optional string betdetail = 10;
      case 10: {
        if (tag == 82) {
         parse_betdetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betdetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->betdetail().data(), this->betdetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "betdetail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_lotterydetail;
        break;
      }

      // optional string lotterydetail = 11;
      case 11: {
        if (tag == 90) {
         parse_lotterydetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lotterydetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lotterydetail().data(), this->lotterydetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lotterydetail");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_opensource;
        break;
      }

      // optional uint32 opensource = 12;
      case 12: {
        if (tag == 96) {
         parse_opensource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opensource_)));
          set_has_opensource();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.BettingDetailData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.BettingDetailData)
  return false;
#undef DO_
}

void BettingDetailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.BettingDetailData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 roundid = 2;
  if (has_roundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roundid(), output);
  }

  // required uint64 recordtime = 3;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recordtime(), output);
  }

  // required uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->charname(), output);
  }

  // required int64 winlosenum = 6;
  if (has_winlosenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->winlosenum(), output);
  }

  // optional uint64 totalnum = 7;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->totalnum(), output);
  }

  // optional uint64 dealerid = 8;
  if (has_dealerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->dealerid(), output);
  }

  // optional uint64 dealernum = 9;
  if (has_dealernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->dealernum(), output);
  }

  // optional string betdetail = 10;
  if (has_betdetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->betdetail().data(), this->betdetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "betdetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->betdetail(), output);
  }

  // optional string lotterydetail = 11;
  if (has_lotterydetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lotterydetail().data(), this->lotterydetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lotterydetail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->lotterydetail(), output);
  }

  // optional uint32 opensource = 12;
  if (has_opensource()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->opensource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.BettingDetailData)
}

::google::protobuf::uint8* BettingDetailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.BettingDetailData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 roundid = 2;
  if (has_roundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roundid(), target);
  }

  // required uint64 recordtime = 3;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recordtime(), target);
  }

  // required uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->charname(), target);
  }

  // required int64 winlosenum = 6;
  if (has_winlosenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->winlosenum(), target);
  }

  // optional uint64 totalnum = 7;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->totalnum(), target);
  }

  // optional uint64 dealerid = 8;
  if (has_dealerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->dealerid(), target);
  }

  // optional uint64 dealernum = 9;
  if (has_dealernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->dealernum(), target);
  }

  // optional string betdetail = 10;
  if (has_betdetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->betdetail().data(), this->betdetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "betdetail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->betdetail(), target);
  }

  // optional string lotterydetail = 11;
  if (has_lotterydetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lotterydetail().data(), this->lotterydetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lotterydetail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lotterydetail(), target);
  }

  // optional uint32 opensource = 12;
  if (has_opensource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->opensource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.BettingDetailData)
  return target;
}

int BettingDetailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 roundid = 2;
    if (has_roundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundid());
    }

    // required uint64 recordtime = 3;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // required uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 5;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required int64 winlosenum = 6;
    if (has_winlosenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winlosenum());
    }

    // optional uint64 totalnum = 7;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalnum());
    }

    // optional uint64 dealerid = 8;
    if (has_dealerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dealerid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 dealernum = 9;
    if (has_dealernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dealernum());
    }

    // optional string betdetail = 10;
    if (has_betdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->betdetail());
    }

    // optional string lotterydetail = 11;
    if (has_lotterydetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lotterydetail());
    }

    // optional uint32 opensource = 12;
    if (has_opensource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opensource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BettingDetailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BettingDetailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BettingDetailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BettingDetailData::MergeFrom(const BettingDetailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roundid()) {
      set_roundid(from.roundid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_winlosenum()) {
      set_winlosenum(from.winlosenum());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
    if (from.has_dealerid()) {
      set_dealerid(from.dealerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dealernum()) {
      set_dealernum(from.dealernum());
    }
    if (from.has_betdetail()) {
      set_betdetail(from.betdetail());
    }
    if (from.has_lotterydetail()) {
      set_lotterydetail(from.lotterydetail());
    }
    if (from.has_opensource()) {
      set_opensource(from.opensource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BettingDetailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BettingDetailData::CopyFrom(const BettingDetailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BettingDetailData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002c) != 0x0000002c) return false;

  return true;
}

void BettingDetailData::Swap(BettingDetailData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(roundid_, other->roundid_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(winlosenum_, other->winlosenum_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(dealerid_, other->dealerid_);
    std::swap(dealernum_, other->dealernum_);
    std::swap(betdetail_, other->betdetail_);
    std::swap(lotterydetail_, other->lotterydetail_);
    std::swap(opensource_, other->opensource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BettingDetailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BettingDetailData_descriptor_;
  metadata.reflection = BettingDetailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBettingDetailGmUserPmd_CS::kGameidFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kZoneidFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kCharidFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kDealeridFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kRoundidFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kGmidFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kSubgameidFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kCurpageFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kPerpageFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kDataFieldNumber;
const int RequestBettingDetailGmUserPmd_CS::kOpensourceFieldNumber;
#endif  // !_MSC_VER

RequestBettingDetailGmUserPmd_CS::RequestBettingDetailGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestBettingDetailGmUserPmd_CS)
}

void RequestBettingDetailGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestBettingDetailGmUserPmd_CS::RequestBettingDetailGmUserPmd_CS(const RequestBettingDetailGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestBettingDetailGmUserPmd_CS)
}

void RequestBettingDetailGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  dealerid_ = GOOGLE_ULONGLONG(0);
  roundid_ = GOOGLE_ULONGLONG(0);
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  subgameid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  opensource_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBettingDetailGmUserPmd_CS::~RequestBettingDetailGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestBettingDetailGmUserPmd_CS)
  SharedDtor();
}

void RequestBettingDetailGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestBettingDetailGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBettingDetailGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBettingDetailGmUserPmd_CS_descriptor_;
}

const RequestBettingDetailGmUserPmd_CS& RequestBettingDetailGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestBettingDetailGmUserPmd_CS* RequestBettingDetailGmUserPmd_CS::default_instance_ = NULL;

RequestBettingDetailGmUserPmd_CS* RequestBettingDetailGmUserPmd_CS::New() const {
  return new RequestBettingDetailGmUserPmd_CS;
}

void RequestBettingDetailGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestBettingDetailGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, gmid_);
  }
  if (_has_bits_[8 / 32] & 12032) {
    ZR_(subgameid_, maxpage_);
    ZR_(perpage_, opensource_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBettingDetailGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestBettingDetailGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dealerid;
        break;
      }

      // optional uint64 dealerid = 4;
      case 4: {
        if (tag == 32) {
         parse_dealerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dealerid_)));
          set_has_dealerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_roundid;
        break;
      }

      // optional uint64 roundid = 5;
      case 5: {
        if (tag == 40) {
         parse_roundid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roundid_)));
          set_has_roundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 6;
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 7;
      case 7: {
        if (tag == 56) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 8;
      case 8: {
        if (tag == 64) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 9;
      case 9: {
        if (tag == 72) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 10;
      case 10: {
        if (tag == 80) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 11;
      case 11: {
        if (tag == 88) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 12;
      case 12: {
        if (tag == 96) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_data;
        break;
      }

      // repeated .Pmd.BettingDetailData data = 13;
      case 13: {
        if (tag == 106) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_data;
        if (input->ExpectTag(112)) goto parse_opensource;
        break;
      }

      // optional uint32 opensource = 14;
      case 14: {
        if (tag == 112) {
         parse_opensource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opensource_)));
          set_has_opensource();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestBettingDetailGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestBettingDetailGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestBettingDetailGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestBettingDetailGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 dealerid = 4;
  if (has_dealerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dealerid(), output);
  }

  // optional uint64 roundid = 5;
  if (has_roundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->roundid(), output);
  }

  // optional uint64 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->starttime(), output);
  }

  // optional uint64 endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->endtime(), output);
  }

  // optional uint32 gmid = 8;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gmid(), output);
  }

  // optional uint32 subgameid = 9;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->subgameid(), output);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curpage(), output);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maxpage(), output);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->perpage(), output);
  }

  // repeated .Pmd.BettingDetailData data = 13;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->data(i), output);
  }

  // optional uint32 opensource = 14;
  if (has_opensource()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->opensource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestBettingDetailGmUserPmd_CS)
}

::google::protobuf::uint8* RequestBettingDetailGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestBettingDetailGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 dealerid = 4;
  if (has_dealerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dealerid(), target);
  }

  // optional uint64 roundid = 5;
  if (has_roundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->roundid(), target);
  }

  // optional uint64 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->starttime(), target);
  }

  // optional uint64 endtime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->endtime(), target);
  }

  // optional uint32 gmid = 8;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gmid(), target);
  }

  // optional uint32 subgameid = 9;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->subgameid(), target);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curpage(), target);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->maxpage(), target);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->perpage(), target);
  }

  // repeated .Pmd.BettingDetailData data = 13;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->data(i), target);
  }

  // optional uint32 opensource = 14;
  if (has_opensource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->opensource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestBettingDetailGmUserPmd_CS)
  return target;
}

int RequestBettingDetailGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 dealerid = 4;
    if (has_dealerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dealerid());
    }

    // optional uint64 roundid = 5;
    if (has_roundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roundid());
    }

    // optional uint64 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 gmid = 8;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 subgameid = 9;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

    // optional uint32 curpage = 10;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 11;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 12;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

    // optional uint32 opensource = 14;
    if (has_opensource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opensource());
    }

  }
  // repeated .Pmd.BettingDetailData data = 13;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBettingDetailGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBettingDetailGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBettingDetailGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBettingDetailGmUserPmd_CS::MergeFrom(const RequestBettingDetailGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dealerid()) {
      set_dealerid(from.dealerid());
    }
    if (from.has_roundid()) {
      set_roundid(from.roundid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
    if (from.has_opensource()) {
      set_opensource(from.opensource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBettingDetailGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBettingDetailGmUserPmd_CS::CopyFrom(const RequestBettingDetailGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBettingDetailGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestBettingDetailGmUserPmd_CS::Swap(RequestBettingDetailGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(dealerid_, other->dealerid_);
    std::swap(roundid_, other->roundid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(gmid_, other->gmid_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    data_.Swap(&other->data_);
    std::swap(opensource_, other->opensource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBettingDetailGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBettingDetailGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestBettingDetailGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockData::kIdFieldNumber;
const int StockData::kStockFieldNumber;
const int StockData::kThresholdFieldNumber;
const int StockData::kLotteryFieldNumber;
const int StockData::kProfitFieldNumber;
const int StockData::kSubgameidFieldNumber;
#endif  // !_MSC_VER

StockData::StockData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StockData)
}

void StockData::InitAsDefaultInstance() {
}

StockData::StockData(const StockData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StockData)
}

void StockData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  stock_ = GOOGLE_ULONGLONG(0);
  threshold_ = GOOGLE_ULONGLONG(0);
  lottery_ = GOOGLE_ULONGLONG(0);
  profit_ = GOOGLE_ULONGLONG(0);
  subgameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockData::~StockData() {
  // @@protoc_insertion_point(destructor:Pmd.StockData)
  SharedDtor();
}

void StockData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockData_descriptor_;
}

const StockData& StockData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

StockData* StockData::default_instance_ = NULL;

StockData* StockData::New() const {
  return new StockData;
}

void StockData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StockData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, subgameid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StockData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stock;
        break;
      }

      // optional uint64 stock = 2;
      case 2: {
        if (tag == 16) {
         parse_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stock_)));
          set_has_stock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_threshold;
        break;
      }

      // optional uint64 threshold = 3;
      case 3: {
        if (tag == 24) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lottery;
        break;
      }

      // optional uint64 lottery = 4;
      case 4: {
        if (tag == 32) {
         parse_lottery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lottery_)));
          set_has_lottery();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_profit;
        break;
      }

      // optional uint64 profit = 5;
      case 5: {
        if (tag == 40) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 6;
      case 6: {
        if (tag == 48) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StockData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StockData)
  return false;
#undef DO_
}

void StockData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StockData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 stock = 2;
  if (has_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stock(), output);
  }

  // optional uint64 threshold = 3;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->threshold(), output);
  }

  // optional uint64 lottery = 4;
  if (has_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lottery(), output);
  }

  // optional uint64 profit = 5;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->profit(), output);
  }

  // optional uint32 subgameid = 6;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->subgameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StockData)
}

::google::protobuf::uint8* StockData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StockData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 stock = 2;
  if (has_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stock(), target);
  }

  // optional uint64 threshold = 3;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->threshold(), target);
  }

  // optional uint64 lottery = 4;
  if (has_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lottery(), target);
  }

  // optional uint64 profit = 5;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->profit(), target);
  }

  // optional uint32 subgameid = 6;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->subgameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StockData)
  return target;
}

int StockData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 stock = 2;
    if (has_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stock());
    }

    // optional uint64 threshold = 3;
    if (has_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->threshold());
    }

    // optional uint64 lottery = 4;
    if (has_lottery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lottery());
    }

    // optional uint64 profit = 5;
    if (has_profit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->profit());
    }

    // optional uint32 subgameid = 6;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockData::MergeFrom(const StockData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stock()) {
      set_stock(from.stock());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
    if (from.has_lottery()) {
      set_lottery(from.lottery());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockData::CopyFrom(const StockData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockData::IsInitialized() const {

  return true;
}

void StockData::Swap(StockData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stock_, other->stock_);
    std::swap(threshold_, other->threshold_);
    std::swap(lottery_, other->lottery_);
    std::swap(profit_, other->profit_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockData_descriptor_;
  metadata.reflection = StockData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestStockInfoGmUserPmd_CS::kGameidFieldNumber;
const int RequestStockInfoGmUserPmd_CS::kZoneidFieldNumber;
const int RequestStockInfoGmUserPmd_CS::kGmidFieldNumber;
const int RequestStockInfoGmUserPmd_CS::kDataFieldNumber;
const int RequestStockInfoGmUserPmd_CS::kSubgameidFieldNumber;
#endif  // !_MSC_VER

RequestStockInfoGmUserPmd_CS::RequestStockInfoGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestStockInfoGmUserPmd_CS)
}

void RequestStockInfoGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestStockInfoGmUserPmd_CS::RequestStockInfoGmUserPmd_CS(const RequestStockInfoGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestStockInfoGmUserPmd_CS)
}

void RequestStockInfoGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  subgameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStockInfoGmUserPmd_CS::~RequestStockInfoGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestStockInfoGmUserPmd_CS)
  SharedDtor();
}

void RequestStockInfoGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestStockInfoGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStockInfoGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStockInfoGmUserPmd_CS_descriptor_;
}

const RequestStockInfoGmUserPmd_CS& RequestStockInfoGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestStockInfoGmUserPmd_CS* RequestStockInfoGmUserPmd_CS::default_instance_ = NULL;

RequestStockInfoGmUserPmd_CS* RequestStockInfoGmUserPmd_CS::New() const {
  return new RequestStockInfoGmUserPmd_CS;
}

void RequestStockInfoGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestStockInfoGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gameid_, zoneid_);
  ZR_(gmid_, subgameid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStockInfoGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestStockInfoGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .Pmd.StockData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(40)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 5;
      case 5: {
        if (tag == 40) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestStockInfoGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestStockInfoGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestStockInfoGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestStockInfoGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // repeated .Pmd.StockData data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // optional uint32 subgameid = 5;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subgameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestStockInfoGmUserPmd_CS)
}

::google::protobuf::uint8* RequestStockInfoGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestStockInfoGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // repeated .Pmd.StockData data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // optional uint32 subgameid = 5;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subgameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestStockInfoGmUserPmd_CS)
  return target;
}

int RequestStockInfoGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 subgameid = 5;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

  }
  // repeated .Pmd.StockData data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStockInfoGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStockInfoGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStockInfoGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStockInfoGmUserPmd_CS::MergeFrom(const RequestStockInfoGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStockInfoGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStockInfoGmUserPmd_CS::CopyFrom(const RequestStockInfoGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStockInfoGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestStockInfoGmUserPmd_CS::Swap(RequestStockInfoGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    data_.Swap(&other->data_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStockInfoGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStockInfoGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestStockInfoGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOnlineUserInfoGmUserPmd_CS::kGameidFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kZoneidFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kCharidFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kCharnameFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kIsonlineFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kGmidFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kCurpageFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kPerpageFieldNumber;
const int RequestOnlineUserInfoGmUserPmd_CS::kDataFieldNumber;
#endif  // !_MSC_VER

RequestOnlineUserInfoGmUserPmd_CS::RequestOnlineUserInfoGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
}

void RequestOnlineUserInfoGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestOnlineUserInfoGmUserPmd_CS::RequestOnlineUserInfoGmUserPmd_CS(const RequestOnlineUserInfoGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
}

void RequestOnlineUserInfoGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isonline_ = 0u;
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOnlineUserInfoGmUserPmd_CS::~RequestOnlineUserInfoGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
  SharedDtor();
}

void RequestOnlineUserInfoGmUserPmd_CS::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestOnlineUserInfoGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOnlineUserInfoGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOnlineUserInfoGmUserPmd_CS_descriptor_;
}

const RequestOnlineUserInfoGmUserPmd_CS& RequestOnlineUserInfoGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestOnlineUserInfoGmUserPmd_CS* RequestOnlineUserInfoGmUserPmd_CS::default_instance_ = NULL;

RequestOnlineUserInfoGmUserPmd_CS* RequestOnlineUserInfoGmUserPmd_CS::New() const {
  return new RequestOnlineUserInfoGmUserPmd_CS;
}

void RequestOnlineUserInfoGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestOnlineUserInfoGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, charid_);
    ZR_(isonline_, maxpage_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  perpage_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestOnlineUserInfoGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isonline;
        break;
      }

      // required uint32 isonline = 5;
      case 5: {
        if (tag == 40) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 6;
      case 6: {
        if (tag == 48) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 7;
      case 7: {
        if (tag == 56) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 8;
      case 8: {
        if (tag == 64) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 9;
      case 9: {
        if (tag == 72) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_data;
        break;
      }

      // repeated .Pmd.UserInfo data = 10;
      case 10: {
        if (tag == 82) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestOnlineUserInfoGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // required uint32 isonline = 5;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isonline(), output);
  }

  // optional uint32 gmid = 6;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gmid(), output);
  }

  // optional uint32 curpage = 7;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curpage(), output);
  }

  // optional uint32 maxpage = 8;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxpage(), output);
  }

  // optional uint32 perpage = 9;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->perpage(), output);
  }

  // repeated .Pmd.UserInfo data = 10;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
}

::google::protobuf::uint8* RequestOnlineUserInfoGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // required uint32 isonline = 5;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isonline(), target);
  }

  // optional uint32 gmid = 6;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gmid(), target);
  }

  // optional uint32 curpage = 7;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curpage(), target);
  }

  // optional uint32 maxpage = 8;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxpage(), target);
  }

  // optional uint32 perpage = 9;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->perpage(), target);
  }

  // repeated .Pmd.UserInfo data = 10;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestOnlineUserInfoGmUserPmd_CS)
  return target;
}

int RequestOnlineUserInfoGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required uint32 isonline = 5;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isonline());
    }

    // optional uint32 gmid = 6;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 7;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 8;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 perpage = 9;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.UserInfo data = 10;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOnlineUserInfoGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestOnlineUserInfoGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestOnlineUserInfoGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestOnlineUserInfoGmUserPmd_CS::MergeFrom(const RequestOnlineUserInfoGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestOnlineUserInfoGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOnlineUserInfoGmUserPmd_CS::CopyFrom(const RequestOnlineUserInfoGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOnlineUserInfoGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void RequestOnlineUserInfoGmUserPmd_CS::Swap(RequestOnlineUserInfoGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(isonline_, other->isonline_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestOnlineUserInfoGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOnlineUserInfoGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestOnlineUserInfoGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedPacketsInfo::kIdFieldNumber;
const int RedPacketsInfo::kSrcuidFieldNumber;
const int RedPacketsInfo::kSrcnicknameFieldNumber;
const int RedPacketsInfo::kDesuidFieldNumber;
const int RedPacketsInfo::kDesnicknameFieldNumber;
const int RedPacketsInfo::kMoneyFieldNumber;
const int RedPacketsInfo::kRecordtimeFieldNumber;
#endif  // !_MSC_VER

RedPacketsInfo::RedPacketsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RedPacketsInfo)
}

void RedPacketsInfo::InitAsDefaultInstance() {
}

RedPacketsInfo::RedPacketsInfo(const RedPacketsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RedPacketsInfo)
}

void RedPacketsInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcuid_ = GOOGLE_ULONGLONG(0);
  srcnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desuid_ = GOOGLE_ULONGLONG(0);
  desnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  money_ = GOOGLE_ULONGLONG(0);
  recordtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedPacketsInfo::~RedPacketsInfo() {
  // @@protoc_insertion_point(destructor:Pmd.RedPacketsInfo)
  SharedDtor();
}

void RedPacketsInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (srcnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete srcnickname_;
  }
  if (desnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desnickname_;
  }
  if (this != default_instance_) {
  }
}

void RedPacketsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedPacketsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedPacketsInfo_descriptor_;
}

const RedPacketsInfo& RedPacketsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RedPacketsInfo* RedPacketsInfo::default_instance_ = NULL;

RedPacketsInfo* RedPacketsInfo::New() const {
  return new RedPacketsInfo;
}

void RedPacketsInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RedPacketsInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(money_, recordtime_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    srcuid_ = GOOGLE_ULONGLONG(0);
    if (has_srcnickname()) {
      if (srcnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        srcnickname_->clear();
      }
    }
    desuid_ = GOOGLE_ULONGLONG(0);
    if (has_desnickname()) {
      if (desnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desnickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedPacketsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RedPacketsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_srcuid;
        break;
      }

      // required uint64 srcuid = 2;
      case 2: {
        if (tag == 16) {
         parse_srcuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcuid_)));
          set_has_srcuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_srcnickname;
        break;
      }

      // required string srcnickname = 3;
      case 3: {
        if (tag == 26) {
         parse_srcnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->srcnickname().data(), this->srcnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "srcnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_desuid;
        break;
      }

      // required uint64 desuid = 4;
      case 4: {
        if (tag == 32) {
         parse_desuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &desuid_)));
          set_has_desuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_desnickname;
        break;
      }

      // required string desnickname = 5;
      case 5: {
        if (tag == 42) {
         parse_desnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desnickname().data(), this->desnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // required uint64 money = 6;
      case 6: {
        if (tag == 48) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recordtime;
        break;
      }

      // required uint64 recordtime = 7;
      case 7: {
        if (tag == 56) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RedPacketsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RedPacketsInfo)
  return false;
#undef DO_
}

void RedPacketsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RedPacketsInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required uint64 srcuid = 2;
  if (has_srcuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->srcuid(), output);
  }

  // required string srcnickname = 3;
  if (has_srcnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srcnickname().data(), this->srcnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srcnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->srcnickname(), output);
  }

  // required uint64 desuid = 4;
  if (has_desuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->desuid(), output);
  }

  // required string desnickname = 5;
  if (has_desnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desnickname().data(), this->desnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->desnickname(), output);
  }

  // required uint64 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->money(), output);
  }

  // required uint64 recordtime = 7;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->recordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RedPacketsInfo)
}

::google::protobuf::uint8* RedPacketsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RedPacketsInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint64 srcuid = 2;
  if (has_srcuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->srcuid(), target);
  }

  // required string srcnickname = 3;
  if (has_srcnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->srcnickname().data(), this->srcnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "srcnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->srcnickname(), target);
  }

  // required uint64 desuid = 4;
  if (has_desuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->desuid(), target);
  }

  // required string desnickname = 5;
  if (has_desnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desnickname().data(), this->desnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desnickname(), target);
  }

  // required uint64 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->money(), target);
  }

  // required uint64 recordtime = 7;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->recordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RedPacketsInfo)
  return target;
}

int RedPacketsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint64 srcuid = 2;
    if (has_srcuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcuid());
    }

    // required string srcnickname = 3;
    if (has_srcnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srcnickname());
    }

    // required uint64 desuid = 4;
    if (has_desuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->desuid());
    }

    // required string desnickname = 5;
    if (has_desnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desnickname());
    }

    // required uint64 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->money());
    }

    // required uint64 recordtime = 7;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedPacketsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedPacketsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedPacketsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedPacketsInfo::MergeFrom(const RedPacketsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_srcuid()) {
      set_srcuid(from.srcuid());
    }
    if (from.has_srcnickname()) {
      set_srcnickname(from.srcnickname());
    }
    if (from.has_desuid()) {
      set_desuid(from.desuid());
    }
    if (from.has_desnickname()) {
      set_desnickname(from.desnickname());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedPacketsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedPacketsInfo::CopyFrom(const RedPacketsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedPacketsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void RedPacketsInfo::Swap(RedPacketsInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(srcuid_, other->srcuid_);
    std::swap(srcnickname_, other->srcnickname_);
    std::swap(desuid_, other->desuid_);
    std::swap(desnickname_, other->desnickname_);
    std::swap(money_, other->money_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedPacketsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedPacketsInfo_descriptor_;
  metadata.reflection = RedPacketsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRedPacketsGmUserPmd_CS::kGameidFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kZoneidFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kGmidFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kSrcuidFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kDesuidFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kPacketcodeFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kCurpageFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kPerpageFieldNumber;
const int RequestRedPacketsGmUserPmd_CS::kDataFieldNumber;
#endif  // !_MSC_VER

RequestRedPacketsGmUserPmd_CS::RequestRedPacketsGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestRedPacketsGmUserPmd_CS)
}

void RequestRedPacketsGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestRedPacketsGmUserPmd_CS::RequestRedPacketsGmUserPmd_CS(const RequestRedPacketsGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestRedPacketsGmUserPmd_CS)
}

void RequestRedPacketsGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  srcuid_ = GOOGLE_ULONGLONG(0);
  desuid_ = GOOGLE_ULONGLONG(0);
  packetcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRedPacketsGmUserPmd_CS::~RequestRedPacketsGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestRedPacketsGmUserPmd_CS)
  SharedDtor();
}

void RequestRedPacketsGmUserPmd_CS::SharedDtor() {
  if (packetcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packetcode_;
  }
  if (this != default_instance_) {
  }
}

void RequestRedPacketsGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRedPacketsGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRedPacketsGmUserPmd_CS_descriptor_;
}

const RequestRedPacketsGmUserPmd_CS& RequestRedPacketsGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestRedPacketsGmUserPmd_CS* RequestRedPacketsGmUserPmd_CS::default_instance_ = NULL;

RequestRedPacketsGmUserPmd_CS* RequestRedPacketsGmUserPmd_CS::New() const {
  return new RequestRedPacketsGmUserPmd_CS;
}

void RequestRedPacketsGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRedPacketsGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, gmid_);
    desuid_ = GOOGLE_ULONGLONG(0);
    if (has_packetcode()) {
      if (packetcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        packetcode_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(maxpage_, perpage_);
    curpage_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRedPacketsGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestRedPacketsGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 4;
      case 4: {
        if (tag == 32) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 5;
      case 5: {
        if (tag == 40) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_srcuid;
        break;
      }

      // optional uint64 srcuid = 6;
      case 6: {
        if (tag == 48) {
         parse_srcuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcuid_)));
          set_has_srcuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_desuid;
        break;
      }

      // optional uint64 desuid = 7;
      case 7: {
        if (tag == 56) {
         parse_desuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &desuid_)));
          set_has_desuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_packetcode;
        break;
      }

      // optional string packetcode = 8;
      case 8: {
        if (tag == 66) {
         parse_packetcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packetcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packetcode().data(), this->packetcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "packetcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 9;
      case 9: {
        if (tag == 72) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 10;
      case 10: {
        if (tag == 80) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 11;
      case 11: {
        if (tag == 88) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_data;
        break;
      }

      // repeated .Pmd.RedPacketsInfo data = 12;
      case 12: {
        if (tag == 98) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestRedPacketsGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestRedPacketsGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestRedPacketsGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestRedPacketsGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // optional uint64 starttime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->starttime(), output);
  }

  // optional uint64 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->endtime(), output);
  }

  // optional uint64 srcuid = 6;
  if (has_srcuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->srcuid(), output);
  }

  // optional uint64 desuid = 7;
  if (has_desuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->desuid(), output);
  }

  // optional string packetcode = 8;
  if (has_packetcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packetcode().data(), this->packetcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "packetcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->packetcode(), output);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curpage(), output);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxpage(), output);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->perpage(), output);
  }

  // repeated .Pmd.RedPacketsInfo data = 12;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestRedPacketsGmUserPmd_CS)
}

::google::protobuf::uint8* RequestRedPacketsGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestRedPacketsGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // optional uint64 starttime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->starttime(), target);
  }

  // optional uint64 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->endtime(), target);
  }

  // optional uint64 srcuid = 6;
  if (has_srcuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->srcuid(), target);
  }

  // optional uint64 desuid = 7;
  if (has_desuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->desuid(), target);
  }

  // optional string packetcode = 8;
  if (has_packetcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packetcode().data(), this->packetcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "packetcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->packetcode(), target);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curpage(), target);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxpage(), target);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->perpage(), target);
  }

  // repeated .Pmd.RedPacketsInfo data = 12;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestRedPacketsGmUserPmd_CS)
  return target;
}

int RequestRedPacketsGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint64 starttime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 srcuid = 6;
    if (has_srcuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srcuid());
    }

    // optional uint64 desuid = 7;
    if (has_desuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->desuid());
    }

    // optional string packetcode = 8;
    if (has_packetcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packetcode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 curpage = 9;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 10;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 11;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.RedPacketsInfo data = 12;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRedPacketsGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRedPacketsGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRedPacketsGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRedPacketsGmUserPmd_CS::MergeFrom(const RequestRedPacketsGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_srcuid()) {
      set_srcuid(from.srcuid());
    }
    if (from.has_desuid()) {
      set_desuid(from.desuid());
    }
    if (from.has_packetcode()) {
      set_packetcode(from.packetcode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRedPacketsGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRedPacketsGmUserPmd_CS::CopyFrom(const RequestRedPacketsGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRedPacketsGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestRedPacketsGmUserPmd_CS::Swap(RequestRedPacketsGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(srcuid_, other->srcuid_);
    std::swap(desuid_, other->desuid_);
    std::swap(packetcode_, other->packetcode_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRedPacketsGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRedPacketsGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestRedPacketsGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubgameList::kGameidFieldNumber;
const int SubgameList::kZoneidFieldNumber;
const int SubgameList::kGamenameFieldNumber;
const int SubgameList::kZonenameFieldNumber;
#endif  // !_MSC_VER

SubgameList::SubgameList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.SubgameList)
}

void SubgameList::InitAsDefaultInstance() {
}

SubgameList::SubgameList(const SubgameList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.SubgameList)
}

void SubgameList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = GOOGLE_ULONGLONG(0);
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubgameList::~SubgameList() {
  // @@protoc_insertion_point(destructor:Pmd.SubgameList)
  SharedDtor();
}

void SubgameList::SharedDtor() {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (zonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zonename_;
  }
  if (this != default_instance_) {
  }
}

void SubgameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubgameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubgameList_descriptor_;
}

const SubgameList& SubgameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

SubgameList* SubgameList::default_instance_ = NULL;

SubgameList* SubgameList::New() const {
  return new SubgameList;
}

void SubgameList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubgameList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gameid_, zoneid_);
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gamename_->clear();
      }
    }
    if (has_zonename()) {
      if (zonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        zonename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubgameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.SubgameList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint64 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gamename;
        break;
      }

      // required string gamename = 3;
      case 3: {
        if (tag == 26) {
         parse_gamename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gamename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_zonename;
        break;
      }

      // optional string zonename = 4;
      case 4: {
        if (tag == 34) {
         parse_zonename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zonename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zonename().data(), this->zonename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.SubgameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.SubgameList)
  return false;
#undef DO_
}

void SubgameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.SubgameList)
  // required uint64 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gameid(), output);
  }

  // optional uint64 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->zoneid(), output);
  }

  // required string gamename = 3;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gamename(), output);
  }

  // optional string zonename = 4;
  if (has_zonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zonename().data(), this->zonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->zonename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.SubgameList)
}

::google::protobuf::uint8* SubgameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.SubgameList)
  // required uint64 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gameid(), target);
  }

  // optional uint64 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->zoneid(), target);
  }

  // required string gamename = 3;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gamename(), target);
  }

  // optional string zonename = 4;
  if (has_zonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zonename().data(), this->zonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->zonename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.SubgameList)
  return target;
}

int SubgameList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint64 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zoneid());
    }

    // required string gamename = 3;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }

    // optional string zonename = 4;
    if (has_zonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zonename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubgameList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubgameList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubgameList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubgameList::MergeFrom(const SubgameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_zonename()) {
      set_zonename(from.zonename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubgameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubgameList::CopyFrom(const SubgameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubgameList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void SubgameList::Swap(SubgameList* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gamename_, other->gamename_);
    std::swap(zonename_, other->zonename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubgameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubgameList_descriptor_;
  metadata.reflection = SubgameList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestedSubgameListGmUserPmd_CS::kGameidFieldNumber;
const int RequestedSubgameListGmUserPmd_CS::kZoneidFieldNumber;
const int RequestedSubgameListGmUserPmd_CS::kGmidFieldNumber;
const int RequestedSubgameListGmUserPmd_CS::kDataFieldNumber;
#endif  // !_MSC_VER

RequestedSubgameListGmUserPmd_CS::RequestedSubgameListGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestedSubgameListGmUserPmd_CS)
}

void RequestedSubgameListGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestedSubgameListGmUserPmd_CS::RequestedSubgameListGmUserPmd_CS(const RequestedSubgameListGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestedSubgameListGmUserPmd_CS)
}

void RequestedSubgameListGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestedSubgameListGmUserPmd_CS::~RequestedSubgameListGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestedSubgameListGmUserPmd_CS)
  SharedDtor();
}

void RequestedSubgameListGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestedSubgameListGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestedSubgameListGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestedSubgameListGmUserPmd_CS_descriptor_;
}

const RequestedSubgameListGmUserPmd_CS& RequestedSubgameListGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestedSubgameListGmUserPmd_CS* RequestedSubgameListGmUserPmd_CS::default_instance_ = NULL;

RequestedSubgameListGmUserPmd_CS* RequestedSubgameListGmUserPmd_CS::New() const {
  return new RequestedSubgameListGmUserPmd_CS;
}

void RequestedSubgameListGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestedSubgameListGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gameid_, zoneid_);
    gmid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestedSubgameListGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestedSubgameListGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .Pmd.SubgameList data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestedSubgameListGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestedSubgameListGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestedSubgameListGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestedSubgameListGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // repeated .Pmd.SubgameList data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestedSubgameListGmUserPmd_CS)
}

::google::protobuf::uint8* RequestedSubgameListGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestedSubgameListGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // repeated .Pmd.SubgameList data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestedSubgameListGmUserPmd_CS)
  return target;
}

int RequestedSubgameListGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  // repeated .Pmd.SubgameList data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestedSubgameListGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestedSubgameListGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestedSubgameListGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestedSubgameListGmUserPmd_CS::MergeFrom(const RequestedSubgameListGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestedSubgameListGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestedSubgameListGmUserPmd_CS::CopyFrom(const RequestedSubgameListGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestedSubgameListGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestedSubgameListGmUserPmd_CS::Swap(RequestedSubgameListGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestedSubgameListGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestedSubgameListGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestedSubgameListGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WinLoseInfo::kIdFieldNumber;
const int WinLoseInfo::kCharidFieldNumber;
const int WinLoseInfo::kCharnameFieldNumber;
const int WinLoseInfo::kViplevelFieldNumber;
const int WinLoseInfo::kIsonlineFieldNumber;
const int WinLoseInfo::kTotalnumFieldNumber;
const int WinLoseInfo::kCurnumFieldNumber;
#endif  // !_MSC_VER

WinLoseInfo::WinLoseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.WinLoseInfo)
}

void WinLoseInfo::InitAsDefaultInstance() {
}

WinLoseInfo::WinLoseInfo(const WinLoseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.WinLoseInfo)
}

void WinLoseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viplevel_ = 0u;
  isonline_ = 0u;
  totalnum_ = GOOGLE_LONGLONG(0);
  curnum_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WinLoseInfo::~WinLoseInfo() {
  // @@protoc_insertion_point(destructor:Pmd.WinLoseInfo)
  SharedDtor();
}

void WinLoseInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void WinLoseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinLoseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WinLoseInfo_descriptor_;
}

const WinLoseInfo& WinLoseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

WinLoseInfo* WinLoseInfo::default_instance_ = NULL;

WinLoseInfo* WinLoseInfo::New() const {
  return new WinLoseInfo;
}

void WinLoseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WinLoseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(charid_, viplevel_);
    ZR_(totalnum_, isonline_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WinLoseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.WinLoseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // required string charname = 3;
      case 3: {
        if (tag == 26) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_viplevel;
        break;
      }

      // required uint32 viplevel = 4;
      case 4: {
        if (tag == 32) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isonline;
        break;
      }

      // required uint32 isonline = 5;
      case 5: {
        if (tag == 40) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_totalnum;
        break;
      }

      // required int64 totalnum = 6;
      case 6: {
        if (tag == 48) {
         parse_totalnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_curnum;
        break;
      }

      // required uint64 curnum = 7;
      case 7: {
        if (tag == 56) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curnum_)));
          set_has_curnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.WinLoseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.WinLoseInfo)
  return false;
#undef DO_
}

void WinLoseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.WinLoseInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // required string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->charname(), output);
  }

  // required uint32 viplevel = 4;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->viplevel(), output);
  }

  // required uint32 isonline = 5;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isonline(), output);
  }

  // required int64 totalnum = 6;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->totalnum(), output);
  }

  // required uint64 curnum = 7;
  if (has_curnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->curnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.WinLoseInfo)
}

::google::protobuf::uint8* WinLoseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.WinLoseInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // required string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // required uint32 viplevel = 4;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->viplevel(), target);
  }

  // required uint32 isonline = 5;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isonline(), target);
  }

  // required int64 totalnum = 6;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->totalnum(), target);
  }

  // required uint64 curnum = 7;
  if (has_curnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->curnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.WinLoseInfo)
  return target;
}

int WinLoseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required uint32 viplevel = 4;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 isonline = 5;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isonline());
    }

    // required int64 totalnum = 6;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalnum());
    }

    // required uint64 curnum = 7;
    if (has_curnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinLoseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WinLoseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WinLoseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WinLoseInfo::MergeFrom(const WinLoseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
    if (from.has_curnum()) {
      set_curnum(from.curnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WinLoseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinLoseInfo::CopyFrom(const WinLoseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinLoseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void WinLoseInfo::Swap(WinLoseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(isonline_, other->isonline_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(curnum_, other->curnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WinLoseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WinLoseInfo_descriptor_;
  metadata.reflection = WinLoseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestWinningListGmUserPmd_CS::kGameidFieldNumber;
const int RequestWinningListGmUserPmd_CS::kZoneidFieldNumber;
const int RequestWinningListGmUserPmd_CS::kGmidFieldNumber;
const int RequestWinningListGmUserPmd_CS::kSubgameidFieldNumber;
const int RequestWinningListGmUserPmd_CS::kTimestampFieldNumber;
const int RequestWinningListGmUserPmd_CS::kCurpageFieldNumber;
const int RequestWinningListGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestWinningListGmUserPmd_CS::kPerpageFieldNumber;
const int RequestWinningListGmUserPmd_CS::kDataFieldNumber;
#endif  // !_MSC_VER

RequestWinningListGmUserPmd_CS::RequestWinningListGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestWinningListGmUserPmd_CS)
}

void RequestWinningListGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestWinningListGmUserPmd_CS::RequestWinningListGmUserPmd_CS(const RequestWinningListGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestWinningListGmUserPmd_CS)
}

void RequestWinningListGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  subgameid_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestWinningListGmUserPmd_CS::~RequestWinningListGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestWinningListGmUserPmd_CS)
  SharedDtor();
}

void RequestWinningListGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestWinningListGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestWinningListGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestWinningListGmUserPmd_CS_descriptor_;
}

const RequestWinningListGmUserPmd_CS& RequestWinningListGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestWinningListGmUserPmd_CS* RequestWinningListGmUserPmd_CS::default_instance_ = NULL;

RequestWinningListGmUserPmd_CS* RequestWinningListGmUserPmd_CS::New() const {
  return new RequestWinningListGmUserPmd_CS;
}

void RequestWinningListGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestWinningListGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, maxpage_);
    perpage_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestWinningListGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestWinningListGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 4;
      case 4: {
        if (tag == 32) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 6;
      case 6: {
        if (tag == 48) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 7;
      case 7: {
        if (tag == 56) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 8;
      case 8: {
        if (tag == 64) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // repeated .Pmd.WinLoseInfo data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestWinningListGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestWinningListGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestWinningListGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestWinningListGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // optional uint32 subgameid = 4;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subgameid(), output);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // optional uint32 curpage = 6;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->curpage(), output);
  }

  // optional uint32 maxpage = 7;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxpage(), output);
  }

  // optional uint32 perpage = 8;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->perpage(), output);
  }

  // repeated .Pmd.WinLoseInfo data = 9;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestWinningListGmUserPmd_CS)
}

::google::protobuf::uint8* RequestWinningListGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestWinningListGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // optional uint32 subgameid = 4;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subgameid(), target);
  }

  // optional uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // optional uint32 curpage = 6;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->curpage(), target);
  }

  // optional uint32 maxpage = 7;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxpage(), target);
  }

  // optional uint32 perpage = 8;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->perpage(), target);
  }

  // repeated .Pmd.WinLoseInfo data = 9;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestWinningListGmUserPmd_CS)
  return target;
}

int RequestWinningListGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 subgameid = 4;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 curpage = 6;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 7;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 8;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.WinLoseInfo data = 9;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestWinningListGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestWinningListGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestWinningListGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestWinningListGmUserPmd_CS::MergeFrom(const RequestWinningListGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestWinningListGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestWinningListGmUserPmd_CS::CopyFrom(const RequestWinningListGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestWinningListGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestWinningListGmUserPmd_CS::Swap(RequestWinningListGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestWinningListGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestWinningListGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestWinningListGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlackWhitelistInfo::kIdFieldNumber;
const int BlackWhitelistInfo::kCharidFieldNumber;
const int BlackWhitelistInfo::kCharnameFieldNumber;
const int BlackWhitelistInfo::kSubgameidFieldNumber;
const int BlackWhitelistInfo::kSetchipsFieldNumber;
const int BlackWhitelistInfo::kCurchipsFieldNumber;
const int BlackWhitelistInfo::kWinrateFieldNumber;
const int BlackWhitelistInfo::kStateFieldNumber;
const int BlackWhitelistInfo::kTypeFieldNumber;
const int BlackWhitelistInfo::kSettimesFieldNumber;
const int BlackWhitelistInfo::kCurtimesFieldNumber;
const int BlackWhitelistInfo::kIntervaltimesFieldNumber;
const int BlackWhitelistInfo::kRecordtimeFieldNumber;
const int BlackWhitelistInfo::kGameidFieldNumber;
const int BlackWhitelistInfo::kZoneidFieldNumber;
#endif  // !_MSC_VER

BlackWhitelistInfo::BlackWhitelistInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.BlackWhitelistInfo)
}

void BlackWhitelistInfo::InitAsDefaultInstance() {
}

BlackWhitelistInfo::BlackWhitelistInfo(const BlackWhitelistInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.BlackWhitelistInfo)
}

void BlackWhitelistInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subgameid_ = 0u;
  setchips_ = 0u;
  curchips_ = 0u;
  winrate_ = 0u;
  state_ = 0u;
  type_ = 0u;
  settimes_ = 0u;
  curtimes_ = 0u;
  intervaltimes_ = 0u;
  recordtime_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackWhitelistInfo::~BlackWhitelistInfo() {
  // @@protoc_insertion_point(destructor:Pmd.BlackWhitelistInfo)
  SharedDtor();
}

void BlackWhitelistInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void BlackWhitelistInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackWhitelistInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackWhitelistInfo_descriptor_;
}

const BlackWhitelistInfo& BlackWhitelistInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

BlackWhitelistInfo* BlackWhitelistInfo::default_instance_ = NULL;

BlackWhitelistInfo* BlackWhitelistInfo::New() const {
  return new BlackWhitelistInfo;
}

void BlackWhitelistInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlackWhitelistInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, subgameid_);
    ZR_(setchips_, state_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(type_, zoneid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlackWhitelistInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.BlackWhitelistInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (tag == 26) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 4;
      case 4: {
        if (tag == 32) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_setchips;
        break;
      }

      // optional uint32 setchips = 5;
      case 5: {
        if (tag == 40) {
         parse_setchips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setchips_)));
          set_has_setchips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_curchips;
        break;
      }

      // optional uint32 curchips = 6;
      case 6: {
        if (tag == 48) {
         parse_curchips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curchips_)));
          set_has_curchips();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_winrate;
        break;
      }

      // optional uint32 winrate = 7;
      case 7: {
        if (tag == 56) {
         parse_winrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winrate_)));
          set_has_winrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional uint32 state = 8;
      case 8: {
        if (tag == 64) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional uint32 type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_settimes;
        break;
      }

      // optional uint32 settimes = 10;
      case 10: {
        if (tag == 80) {
         parse_settimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settimes_)));
          set_has_settimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_curtimes;
        break;
      }

      // optional uint32 curtimes = 11;
      case 11: {
        if (tag == 88) {
         parse_curtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtimes_)));
          set_has_curtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_intervaltimes;
        break;
      }

      // optional uint32 intervaltimes = 12;
      case 12: {
        if (tag == 96) {
         parse_intervaltimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intervaltimes_)));
          set_has_intervaltimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_recordtime;
        break;
      }

      // optional uint64 recordtime = 13;
      case 13: {
        if (tag == 104) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 14;
      case 14: {
        if (tag == 112) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 15;
      case 15: {
        if (tag == 120) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.BlackWhitelistInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.BlackWhitelistInfo)
  return false;
#undef DO_
}

void BlackWhitelistInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.BlackWhitelistInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->charname(), output);
  }

  // optional uint32 subgameid = 4;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subgameid(), output);
  }

  // optional uint32 setchips = 5;
  if (has_setchips()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->setchips(), output);
  }

  // optional uint32 curchips = 6;
  if (has_curchips()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->curchips(), output);
  }

  // optional uint32 winrate = 7;
  if (has_winrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->winrate(), output);
  }

  // optional uint32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->state(), output);
  }

  // optional uint32 type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->type(), output);
  }

  // optional uint32 settimes = 10;
  if (has_settimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->settimes(), output);
  }

  // optional uint32 curtimes = 11;
  if (has_curtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->curtimes(), output);
  }

  // optional uint32 intervaltimes = 12;
  if (has_intervaltimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->intervaltimes(), output);
  }

  // optional uint64 recordtime = 13;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->recordtime(), output);
  }

  // optional uint32 gameid = 14;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gameid(), output);
  }

  // optional uint32 zoneid = 15;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.BlackWhitelistInfo)
}

::google::protobuf::uint8* BlackWhitelistInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.BlackWhitelistInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional uint32 subgameid = 4;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subgameid(), target);
  }

  // optional uint32 setchips = 5;
  if (has_setchips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->setchips(), target);
  }

  // optional uint32 curchips = 6;
  if (has_curchips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->curchips(), target);
  }

  // optional uint32 winrate = 7;
  if (has_winrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->winrate(), target);
  }

  // optional uint32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->state(), target);
  }

  // optional uint32 type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->type(), target);
  }

  // optional uint32 settimes = 10;
  if (has_settimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->settimes(), target);
  }

  // optional uint32 curtimes = 11;
  if (has_curtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->curtimes(), target);
  }

  // optional uint32 intervaltimes = 12;
  if (has_intervaltimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->intervaltimes(), target);
  }

  // optional uint64 recordtime = 13;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->recordtime(), target);
  }

  // optional uint32 gameid = 14;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gameid(), target);
  }

  // optional uint32 zoneid = 15;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.BlackWhitelistInfo)
  return target;
}

int BlackWhitelistInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 subgameid = 4;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

    // optional uint32 setchips = 5;
    if (has_setchips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setchips());
    }

    // optional uint32 curchips = 6;
    if (has_curchips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curchips());
    }

    // optional uint32 winrate = 7;
    if (has_winrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winrate());
    }

    // optional uint32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 settimes = 10;
    if (has_settimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settimes());
    }

    // optional uint32 curtimes = 11;
    if (has_curtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtimes());
    }

    // optional uint32 intervaltimes = 12;
    if (has_intervaltimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intervaltimes());
    }

    // optional uint64 recordtime = 13;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional uint32 gameid = 14;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 15;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackWhitelistInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlackWhitelistInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlackWhitelistInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlackWhitelistInfo::MergeFrom(const BlackWhitelistInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_setchips()) {
      set_setchips(from.setchips());
    }
    if (from.has_curchips()) {
      set_curchips(from.curchips());
    }
    if (from.has_winrate()) {
      set_winrate(from.winrate());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_settimes()) {
      set_settimes(from.settimes());
    }
    if (from.has_curtimes()) {
      set_curtimes(from.curtimes());
    }
    if (from.has_intervaltimes()) {
      set_intervaltimes(from.intervaltimes());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlackWhitelistInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackWhitelistInfo::CopyFrom(const BlackWhitelistInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackWhitelistInfo::IsInitialized() const {

  return true;
}

void BlackWhitelistInfo::Swap(BlackWhitelistInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(setchips_, other->setchips_);
    std::swap(curchips_, other->curchips_);
    std::swap(winrate_, other->winrate_);
    std::swap(state_, other->state_);
    std::swap(type_, other->type_);
    std::swap(settimes_, other->settimes_);
    std::swap(curtimes_, other->curtimes_);
    std::swap(intervaltimes_, other->intervaltimes_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlackWhitelistInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlackWhitelistInfo_descriptor_;
  metadata.reflection = BlackWhitelistInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlackWhitelistGmUserPmd_CS::kGameidFieldNumber;
const int AddBlackWhitelistGmUserPmd_CS::kZoneidFieldNumber;
const int AddBlackWhitelistGmUserPmd_CS::kSubgameidFieldNumber;
const int AddBlackWhitelistGmUserPmd_CS::kGmidFieldNumber;
const int AddBlackWhitelistGmUserPmd_CS::kDataFieldNumber;
const int AddBlackWhitelistGmUserPmd_CS::kRetcodeFieldNumber;
const int AddBlackWhitelistGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

AddBlackWhitelistGmUserPmd_CS::AddBlackWhitelistGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.AddBlackWhitelistGmUserPmd_CS)
}

void AddBlackWhitelistGmUserPmd_CS::InitAsDefaultInstance() {
}

AddBlackWhitelistGmUserPmd_CS::AddBlackWhitelistGmUserPmd_CS(const AddBlackWhitelistGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.AddBlackWhitelistGmUserPmd_CS)
}

void AddBlackWhitelistGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  subgameid_ = 0u;
  gmid_ = 0u;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlackWhitelistGmUserPmd_CS::~AddBlackWhitelistGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.AddBlackWhitelistGmUserPmd_CS)
  SharedDtor();
}

void AddBlackWhitelistGmUserPmd_CS::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void AddBlackWhitelistGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBlackWhitelistGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBlackWhitelistGmUserPmd_CS_descriptor_;
}

const AddBlackWhitelistGmUserPmd_CS& AddBlackWhitelistGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

AddBlackWhitelistGmUserPmd_CS* AddBlackWhitelistGmUserPmd_CS::default_instance_ = NULL;

AddBlackWhitelistGmUserPmd_CS* AddBlackWhitelistGmUserPmd_CS::New() const {
  return new AddBlackWhitelistGmUserPmd_CS;
}

void AddBlackWhitelistGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddBlackWhitelistGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(gameid_, gmid_);
    retcode_ = 0u;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBlackWhitelistGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.AddBlackWhitelistGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 3;
      case 3: {
        if (tag == 24) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .Pmd.BlackWhitelistInfo data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectTag(48)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 6;
      case 6: {
        if (tag == 48) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 7;
      case 7: {
        if (tag == 58) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.AddBlackWhitelistGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.AddBlackWhitelistGmUserPmd_CS)
  return false;
#undef DO_
}

void AddBlackWhitelistGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.AddBlackWhitelistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 subgameid = 3;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subgameid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  // repeated .Pmd.BlackWhitelistInfo data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  // optional uint32 retcode = 6;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->retcode(), output);
  }

  // optional string retdesc = 7;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.AddBlackWhitelistGmUserPmd_CS)
}

::google::protobuf::uint8* AddBlackWhitelistGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.AddBlackWhitelistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 subgameid = 3;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subgameid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  // repeated .Pmd.BlackWhitelistInfo data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  // optional uint32 retcode = 6;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->retcode(), target);
  }

  // optional string retdesc = 7;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.AddBlackWhitelistGmUserPmd_CS)
  return target;
}

int AddBlackWhitelistGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 subgameid = 3;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 retcode = 6;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 7;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  // repeated .Pmd.BlackWhitelistInfo data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlackWhitelistGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBlackWhitelistGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBlackWhitelistGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBlackWhitelistGmUserPmd_CS::MergeFrom(const AddBlackWhitelistGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBlackWhitelistGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlackWhitelistGmUserPmd_CS::CopyFrom(const AddBlackWhitelistGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlackWhitelistGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddBlackWhitelistGmUserPmd_CS::Swap(AddBlackWhitelistGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(gmid_, other->gmid_);
    data_.Swap(&other->data_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBlackWhitelistGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBlackWhitelistGmUserPmd_CS_descriptor_;
  metadata.reflection = AddBlackWhitelistGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModBlackWhitelistGmUserPmd_CS::kGameidFieldNumber;
const int ModBlackWhitelistGmUserPmd_CS::kZoneidFieldNumber;
const int ModBlackWhitelistGmUserPmd_CS::kSubgameidFieldNumber;
const int ModBlackWhitelistGmUserPmd_CS::kGmidFieldNumber;
const int ModBlackWhitelistGmUserPmd_CS::kDataFieldNumber;
const int ModBlackWhitelistGmUserPmd_CS::kRetcodeFieldNumber;
const int ModBlackWhitelistGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

ModBlackWhitelistGmUserPmd_CS::ModBlackWhitelistGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ModBlackWhitelistGmUserPmd_CS)
}

void ModBlackWhitelistGmUserPmd_CS::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::BlackWhitelistInfo*>(&::Pmd::BlackWhitelistInfo::default_instance());
}

ModBlackWhitelistGmUserPmd_CS::ModBlackWhitelistGmUserPmd_CS(const ModBlackWhitelistGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ModBlackWhitelistGmUserPmd_CS)
}

void ModBlackWhitelistGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  subgameid_ = 0u;
  gmid_ = 0u;
  data_ = NULL;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModBlackWhitelistGmUserPmd_CS::~ModBlackWhitelistGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.ModBlackWhitelistGmUserPmd_CS)
  SharedDtor();
}

void ModBlackWhitelistGmUserPmd_CS::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void ModBlackWhitelistGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModBlackWhitelistGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModBlackWhitelistGmUserPmd_CS_descriptor_;
}

const ModBlackWhitelistGmUserPmd_CS& ModBlackWhitelistGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ModBlackWhitelistGmUserPmd_CS* ModBlackWhitelistGmUserPmd_CS::default_instance_ = NULL;

ModBlackWhitelistGmUserPmd_CS* ModBlackWhitelistGmUserPmd_CS::New() const {
  return new ModBlackWhitelistGmUserPmd_CS;
}

void ModBlackWhitelistGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ModBlackWhitelistGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gameid_, gmid_);
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::BlackWhitelistInfo::Clear();
    }
    retcode_ = 0u;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModBlackWhitelistGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ModBlackWhitelistGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 3;
      case 3: {
        if (tag == 24) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // required .Pmd.BlackWhitelistInfo data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 6;
      case 6: {
        if (tag == 48) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 7;
      case 7: {
        if (tag == 58) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ModBlackWhitelistGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ModBlackWhitelistGmUserPmd_CS)
  return false;
#undef DO_
}

void ModBlackWhitelistGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ModBlackWhitelistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 subgameid = 3;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subgameid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  // required .Pmd.BlackWhitelistInfo data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  // optional uint32 retcode = 6;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->retcode(), output);
  }

  // optional string retdesc = 7;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ModBlackWhitelistGmUserPmd_CS)
}

::google::protobuf::uint8* ModBlackWhitelistGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ModBlackWhitelistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 subgameid = 3;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subgameid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  // required .Pmd.BlackWhitelistInfo data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  // optional uint32 retcode = 6;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->retcode(), target);
  }

  // optional string retdesc = 7;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ModBlackWhitelistGmUserPmd_CS)
  return target;
}

int ModBlackWhitelistGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 subgameid = 3;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // required .Pmd.BlackWhitelistInfo data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 retcode = 6;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 7;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModBlackWhitelistGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModBlackWhitelistGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModBlackWhitelistGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModBlackWhitelistGmUserPmd_CS::MergeFrom(const ModBlackWhitelistGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_data()) {
      mutable_data()->::Pmd::BlackWhitelistInfo::MergeFrom(from.data());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModBlackWhitelistGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModBlackWhitelistGmUserPmd_CS::CopyFrom(const ModBlackWhitelistGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModBlackWhitelistGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void ModBlackWhitelistGmUserPmd_CS::Swap(ModBlackWhitelistGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(gmid_, other->gmid_);
    std::swap(data_, other->data_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModBlackWhitelistGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModBlackWhitelistGmUserPmd_CS_descriptor_;
  metadata.reflection = ModBlackWhitelistGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelBlackWhitelistGmUserPmd_CS::kGameidFieldNumber;
const int DelBlackWhitelistGmUserPmd_CS::kZoneidFieldNumber;
const int DelBlackWhitelistGmUserPmd_CS::kSubgameidFieldNumber;
const int DelBlackWhitelistGmUserPmd_CS::kGmidFieldNumber;
const int DelBlackWhitelistGmUserPmd_CS::kIdsFieldNumber;
const int DelBlackWhitelistGmUserPmd_CS::kRetcodeFieldNumber;
const int DelBlackWhitelistGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

DelBlackWhitelistGmUserPmd_CS::DelBlackWhitelistGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.DelBlackWhitelistGmUserPmd_CS)
}

void DelBlackWhitelistGmUserPmd_CS::InitAsDefaultInstance() {
}

DelBlackWhitelistGmUserPmd_CS::DelBlackWhitelistGmUserPmd_CS(const DelBlackWhitelistGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.DelBlackWhitelistGmUserPmd_CS)
}

void DelBlackWhitelistGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  subgameid_ = 0u;
  gmid_ = 0u;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelBlackWhitelistGmUserPmd_CS::~DelBlackWhitelistGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.DelBlackWhitelistGmUserPmd_CS)
  SharedDtor();
}

void DelBlackWhitelistGmUserPmd_CS::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void DelBlackWhitelistGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelBlackWhitelistGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelBlackWhitelistGmUserPmd_CS_descriptor_;
}

const DelBlackWhitelistGmUserPmd_CS& DelBlackWhitelistGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

DelBlackWhitelistGmUserPmd_CS* DelBlackWhitelistGmUserPmd_CS::default_instance_ = NULL;

DelBlackWhitelistGmUserPmd_CS* DelBlackWhitelistGmUserPmd_CS::New() const {
  return new DelBlackWhitelistGmUserPmd_CS;
}

void DelBlackWhitelistGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DelBlackWhitelistGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(gameid_, gmid_);
    retcode_ = 0u;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelBlackWhitelistGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.DelBlackWhitelistGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 3;
      case 3: {
        if (tag == 24) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ids;
        break;
      }

      // repeated uint32 ids = 5;
      case 5: {
        if (tag == 40) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ids;
        if (input->ExpectTag(48)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 6;
      case 6: {
        if (tag == 48) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 7;
      case 7: {
        if (tag == 58) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.DelBlackWhitelistGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.DelBlackWhitelistGmUserPmd_CS)
  return false;
#undef DO_
}

void DelBlackWhitelistGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.DelBlackWhitelistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 subgameid = 3;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subgameid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  // repeated uint32 ids = 5;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->ids(i), output);
  }

  // optional uint32 retcode = 6;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->retcode(), output);
  }

  // optional string retdesc = 7;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.DelBlackWhitelistGmUserPmd_CS)
}

::google::protobuf::uint8* DelBlackWhitelistGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.DelBlackWhitelistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 subgameid = 3;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subgameid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  // repeated uint32 ids = 5;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->ids(i), target);
  }

  // optional uint32 retcode = 6;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->retcode(), target);
  }

  // optional string retdesc = 7;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.DelBlackWhitelistGmUserPmd_CS)
  return target;
}

int DelBlackWhitelistGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 subgameid = 3;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 retcode = 6;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 7;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  // repeated uint32 ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelBlackWhitelistGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelBlackWhitelistGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelBlackWhitelistGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelBlackWhitelistGmUserPmd_CS::MergeFrom(const DelBlackWhitelistGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelBlackWhitelistGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelBlackWhitelistGmUserPmd_CS::CopyFrom(const DelBlackWhitelistGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelBlackWhitelistGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DelBlackWhitelistGmUserPmd_CS::Swap(DelBlackWhitelistGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(gmid_, other->gmid_);
    ids_.Swap(&other->ids_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelBlackWhitelistGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelBlackWhitelistGmUserPmd_CS_descriptor_;
  metadata.reflection = DelBlackWhitelistGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBlackWhitelistGmUserPmd_CS::kGameidFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kZoneidFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kSubgameidFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kGmidFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kIdFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kCharidFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kCharnameFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kCurpageFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kPerpageFieldNumber;
const int RequestBlackWhitelistGmUserPmd_CS::kDataFieldNumber;
#endif  // !_MSC_VER

RequestBlackWhitelistGmUserPmd_CS::RequestBlackWhitelistGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestBlackWhitelistGmUserPmd_CS)
}

void RequestBlackWhitelistGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestBlackWhitelistGmUserPmd_CS::RequestBlackWhitelistGmUserPmd_CS(const RequestBlackWhitelistGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestBlackWhitelistGmUserPmd_CS)
}

void RequestBlackWhitelistGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  subgameid_ = 0u;
  gmid_ = 0u;
  id_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBlackWhitelistGmUserPmd_CS::~RequestBlackWhitelistGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestBlackWhitelistGmUserPmd_CS)
  SharedDtor();
}

void RequestBlackWhitelistGmUserPmd_CS::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestBlackWhitelistGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBlackWhitelistGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBlackWhitelistGmUserPmd_CS_descriptor_;
}

const RequestBlackWhitelistGmUserPmd_CS& RequestBlackWhitelistGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestBlackWhitelistGmUserPmd_CS* RequestBlackWhitelistGmUserPmd_CS::default_instance_ = NULL;

RequestBlackWhitelistGmUserPmd_CS* RequestBlackWhitelistGmUserPmd_CS::New() const {
  return new RequestBlackWhitelistGmUserPmd_CS;
}

void RequestBlackWhitelistGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestBlackWhitelistGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, charid_);
    id_ = 0u;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    starttime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(endtime_, perpage_);
    curpage_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBlackWhitelistGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestBlackWhitelistGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subgameid;
        break;
      }

      // optional uint32 subgameid = 3;
      case 3: {
        if (tag == 24) {
         parse_subgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subgameid_)));
          set_has_subgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint32 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6;
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_charname;
        break;
      }

      // optional string charname = 7;
      case 7: {
        if (tag == 58) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 8;
      case 8: {
        if (tag == 64) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 9;
      case 9: {
        if (tag == 72) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 10;
      case 10: {
        if (tag == 80) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 11;
      case 11: {
        if (tag == 88) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 12;
      case 12: {
        if (tag == 96) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_data;
        break;
      }

      // repeated .Pmd.BlackWhitelistInfo data = 13;
      case 13: {
        if (tag == 106) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestBlackWhitelistGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestBlackWhitelistGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestBlackWhitelistGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestBlackWhitelistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 subgameid = 3;
  if (has_subgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subgameid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  // optional uint32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // optional string charname = 7;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->charname(), output);
  }

  // optional uint64 starttime = 8;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->starttime(), output);
  }

  // optional uint64 endtime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->endtime(), output);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curpage(), output);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maxpage(), output);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->perpage(), output);
  }

  // repeated .Pmd.BlackWhitelistInfo data = 13;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestBlackWhitelistGmUserPmd_CS)
}

::google::protobuf::uint8* RequestBlackWhitelistGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestBlackWhitelistGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 subgameid = 3;
  if (has_subgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subgameid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  // optional uint32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // optional string charname = 7;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->charname(), target);
  }

  // optional uint64 starttime = 8;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->starttime(), target);
  }

  // optional uint64 endtime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->endtime(), target);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curpage(), target);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->maxpage(), target);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->perpage(), target);
  }

  // repeated .Pmd.BlackWhitelistInfo data = 13;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestBlackWhitelistGmUserPmd_CS)
  return target;
}

int RequestBlackWhitelistGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 subgameid = 3;
    if (has_subgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subgameid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 charid = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 7;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint64 starttime = 8;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 endtime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 curpage = 10;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 11;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 12;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.BlackWhitelistInfo data = 13;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBlackWhitelistGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBlackWhitelistGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBlackWhitelistGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBlackWhitelistGmUserPmd_CS::MergeFrom(const RequestBlackWhitelistGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_subgameid()) {
      set_subgameid(from.subgameid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBlackWhitelistGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBlackWhitelistGmUserPmd_CS::CopyFrom(const RequestBlackWhitelistGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBlackWhitelistGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestBlackWhitelistGmUserPmd_CS::Swap(RequestBlackWhitelistGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(subgameid_, other->subgameid_);
    std::swap(gmid_, other->gmid_);
    std::swap(id_, other->id_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBlackWhitelistGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBlackWhitelistGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestBlackWhitelistGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GmMailInfo::kIdFieldNumber;
const int GmMailInfo::kGameidFieldNumber;
const int GmMailInfo::kZoneidFieldNumber;
const int GmMailInfo::kTypeFieldNumber;
const int GmMailInfo::kGmidFieldNumber;
const int GmMailInfo::kCharidFieldNumber;
const int GmMailInfo::kCharnameFieldNumber;
const int GmMailInfo::kSubjectFieldNumber;
const int GmMailInfo::kContentFieldNumber;
const int GmMailInfo::kAttachmentFieldNumber;
const int GmMailInfo::kStateFieldNumber;
const int GmMailInfo::kRecordtimeFieldNumber;
#endif  // !_MSC_VER

GmMailInfo::GmMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GmMailInfo)
}

void GmMailInfo::InitAsDefaultInstance() {
}

GmMailInfo::GmMailInfo(const GmMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GmMailInfo)
}

void GmMailInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0u;
  zoneid_ = 0u;
  type_ = 0u;
  gmid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0u;
  recordtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GmMailInfo::~GmMailInfo() {
  // @@protoc_insertion_point(destructor:Pmd.GmMailInfo)
  SharedDtor();
}

void GmMailInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GmMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GmMailInfo_descriptor_;
}

const GmMailInfo& GmMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

GmMailInfo* GmMailInfo::default_instance_ = NULL;

GmMailInfo* GmMailInfo::New() const {
  return new GmMailInfo;
}

void GmMailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GmMailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3328) {
    ZR_(state_, recordtime_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attachment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GmMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GmMailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 5;
      case 5: {
        if (tag == 40) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6;
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_charname;
        break;
      }

      // optional string charname = 7;
      case 7: {
        if (tag == 58) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_subject;
        break;
      }

      // optional string subject = 8;
      case 8: {
        if (tag == 66) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_content;
        break;
      }

      // optional string content = 9;
      case 9: {
        if (tag == 74) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_attachment;
        break;
      }

      // repeated .Pmd.ItemInfo attachment = 10;
      case 10: {
        if (tag == 82) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_attachment;
        if (input->ExpectTag(88)) goto parse_state;
        break;
      }

      // optional uint32 state = 11;
      case 11: {
        if (tag == 88) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_recordtime;
        break;
      }

      // optional uint32 recordtime = 12;
      case 12: {
        if (tag == 96) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GmMailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GmMailInfo)
  return false;
#undef DO_
}

void GmMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GmMailInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gmid(), output);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // optional string charname = 7;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->charname(), output);
  }

  // optional string subject = 8;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subject(), output);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->content(), output);
  }

  // repeated .Pmd.ItemInfo attachment = 10;
  for (int i = 0; i < this->attachment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->attachment(i), output);
  }

  // optional uint32 state = 11;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->state(), output);
  }

  // optional uint32 recordtime = 12;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->recordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GmMailInfo)
}

::google::protobuf::uint8* GmMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GmMailInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gmid(), target);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // optional string charname = 7;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->charname(), target);
  }

  // optional string subject = 8;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subject(), target);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->content(), target);
  }

  // repeated .Pmd.ItemInfo attachment = 10;
  for (int i = 0; i < this->attachment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->attachment(i), target);
  }

  // optional uint32 state = 11;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->state(), target);
  }

  // optional uint32 recordtime = 12;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->recordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GmMailInfo)
  return target;
}

int GmMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 gmid = 5;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint64 charid = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 7;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional string subject = 8;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string content = 9;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 state = 11;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 recordtime = 12;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordtime());
    }

  }
  // repeated .Pmd.ItemInfo attachment = 10;
  total_size += 1 * this->attachment_size();
  for (int i = 0; i < this->attachment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GmMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GmMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GmMailInfo::MergeFrom(const GmMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachment_.MergeFrom(from.attachment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GmMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmMailInfo::CopyFrom(const GmMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmMailInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attachment())) return false;
  return true;
}

void GmMailInfo::Swap(GmMailInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(type_, other->type_);
    std::swap(gmid_, other->gmid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(subject_, other->subject_);
    std::swap(content_, other->content_);
    attachment_.Swap(&other->attachment_);
    std::swap(state_, other->state_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GmMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GmMailInfo_descriptor_;
  metadata.reflection = GmMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSendMailGmUserPmd_CS::kGameidFieldNumber;
const int RequestSendMailGmUserPmd_CS::kZoneidFieldNumber;
const int RequestSendMailGmUserPmd_CS::kDataFieldNumber;
const int RequestSendMailGmUserPmd_CS::kGmidFieldNumber;
const int RequestSendMailGmUserPmd_CS::kRetcodeFieldNumber;
const int RequestSendMailGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

RequestSendMailGmUserPmd_CS::RequestSendMailGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestSendMailGmUserPmd_CS)
}

void RequestSendMailGmUserPmd_CS::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::GmMailInfo*>(&::Pmd::GmMailInfo::default_instance());
}

RequestSendMailGmUserPmd_CS::RequestSendMailGmUserPmd_CS(const RequestSendMailGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestSendMailGmUserPmd_CS)
}

void RequestSendMailGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  data_ = NULL;
  gmid_ = 0u;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendMailGmUserPmd_CS::~RequestSendMailGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestSendMailGmUserPmd_CS)
  SharedDtor();
}

void RequestSendMailGmUserPmd_CS::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void RequestSendMailGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSendMailGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSendMailGmUserPmd_CS_descriptor_;
}

const RequestSendMailGmUserPmd_CS& RequestSendMailGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestSendMailGmUserPmd_CS* RequestSendMailGmUserPmd_CS::default_instance_ = NULL;

RequestSendMailGmUserPmd_CS* RequestSendMailGmUserPmd_CS::New() const {
  return new RequestSendMailGmUserPmd_CS;
}

void RequestSendMailGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestSendMailGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gameid_, zoneid_);
    ZR_(gmid_, retcode_);
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::GmMailInfo::Clear();
    }
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSendMailGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestSendMailGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Pmd.GmMailInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 5;
      case 5: {
        if (tag == 40) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 6;
      case 6: {
        if (tag == 50) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestSendMailGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestSendMailGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestSendMailGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestSendMailGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional .Pmd.GmMailInfo data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  // optional uint32 retcode = 5;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->retcode(), output);
  }

  // optional string retdesc = 6;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestSendMailGmUserPmd_CS)
}

::google::protobuf::uint8* RequestSendMailGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestSendMailGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional .Pmd.GmMailInfo data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  // optional uint32 retcode = 5;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->retcode(), target);
  }

  // optional string retdesc = 6;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestSendMailGmUserPmd_CS)
  return target;
}

int RequestSendMailGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional .Pmd.GmMailInfo data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 retcode = 5;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 6;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendMailGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSendMailGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSendMailGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSendMailGmUserPmd_CS::MergeFrom(const RequestSendMailGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_data()) {
      mutable_data()->::Pmd::GmMailInfo::MergeFrom(from.data());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSendMailGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSendMailGmUserPmd_CS::CopyFrom(const RequestSendMailGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendMailGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void RequestSendMailGmUserPmd_CS::Swap(RequestSendMailGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(data_, other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSendMailGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSendMailGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestSendMailGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRecordData::kIdFieldNumber;
const int LoginRecordData::kTypeFieldNumber;
const int LoginRecordData::kAccidFieldNumber;
const int LoginRecordData::kCharidFieldNumber;
const int LoginRecordData::kCharnameFieldNumber;
const int LoginRecordData::kUserlevelFieldNumber;
const int LoginRecordData::kViplevelFieldNumber;
const int LoginRecordData::kGoldFieldNumber;
const int LoginRecordData::kMoneyFieldNumber;
const int LoginRecordData::kPowerFieldNumber;
const int LoginRecordData::kGuidFieldNumber;
const int LoginRecordData::kImeiFieldNumber;
const int LoginRecordData::kIpFieldNumber;
const int LoginRecordData::kMacFieldNumber;
const int LoginRecordData::kTsFieldNumber;
const int LoginRecordData::kOnlineminFieldNumber;
#endif  // !_MSC_VER

LoginRecordData::LoginRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.LoginRecordData)
}

void LoginRecordData::InitAsDefaultInstance() {
}

LoginRecordData::LoginRecordData(const LoginRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.LoginRecordData)
}

void LoginRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userlevel_ = 0u;
  viplevel_ = 0u;
  gold_ = 0u;
  money_ = 0u;
  power_ = 0u;
  guid_ = 0u;
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_ULONGLONG(0);
  onlinemin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRecordData::~LoginRecordData() {
  // @@protoc_insertion_point(destructor:Pmd.LoginRecordData)
  SharedDtor();
}

void LoginRecordData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (this != default_instance_) {
  }
}

void LoginRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRecordData_descriptor_;
}

const LoginRecordData& LoginRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

LoginRecordData* LoginRecordData::default_instance_ = NULL;

LoginRecordData* LoginRecordData::New() const {
  return new LoginRecordData;
}

void LoginRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, userlevel_);
    ZR_(viplevel_, gold_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(money_, power_);
    ZR_(guid_, onlinemin_);
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    ts_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.LoginRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3;
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charname;
        break;
      }

      // optional string charname = 5;
      case 5: {
        if (tag == 42) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_userlevel;
        break;
      }

      // optional uint32 userlevel = 6;
      case 6: {
        if (tag == 48) {
         parse_userlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_viplevel;
        break;
      }

      // optional uint32 viplevel = 7;
      case 7: {
        if (tag == 56) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 8;
      case 8: {
        if (tag == 64) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_money;
        break;
      }

      // optional uint32 money = 9;
      case 9: {
        if (tag == 72) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_power;
        break;
      }

      // optional uint32 power = 10;
      case 10: {
        if (tag == 80) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_guid;
        break;
      }

      // optional uint32 guid = 11;
      case 11: {
        if (tag == 88) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_imei;
        break;
      }

      // optional string imei = 12;
      case 12: {
        if (tag == 98) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ip;
        break;
      }

      // optional string ip = 13;
      case 13: {
        if (tag == 106) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_mac;
        break;
      }

      // optional string mac = 14;
      case 14: {
        if (tag == 114) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 15;
      case 15: {
        if (tag == 120) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_onlinemin;
        break;
      }

      // optional uint32 onlinemin = 16;
      case 16: {
        if (tag == 128) {
         parse_onlinemin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinemin_)));
          set_has_onlinemin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.LoginRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.LoginRecordData)
  return false;
#undef DO_
}

void LoginRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.LoginRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 accid = 3;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->charname(), output);
  }

  // optional uint32 userlevel = 6;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->userlevel(), output);
  }

  // optional uint32 viplevel = 7;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viplevel(), output);
  }

  // optional uint32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gold(), output);
  }

  // optional uint32 money = 9;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->money(), output);
  }

  // optional uint32 power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->power(), output);
  }

  // optional uint32 guid = 11;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->guid(), output);
  }

  // optional string imei = 12;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->imei(), output);
  }

  // optional string ip = 13;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ip(), output);
  }

  // optional string mac = 14;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->mac(), output);
  }

  // optional uint64 ts = 15;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->ts(), output);
  }

  // optional uint32 onlinemin = 16;
  if (has_onlinemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->onlinemin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.LoginRecordData)
}

::google::protobuf::uint8* LoginRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.LoginRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 accid = 3;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->charname(), target);
  }

  // optional uint32 userlevel = 6;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->userlevel(), target);
  }

  // optional uint32 viplevel = 7;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viplevel(), target);
  }

  // optional uint32 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gold(), target);
  }

  // optional uint32 money = 9;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->money(), target);
  }

  // optional uint32 power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->power(), target);
  }

  // optional uint32 guid = 11;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->guid(), target);
  }

  // optional string imei = 12;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->imei(), target);
  }

  // optional string ip = 13;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ip(), target);
  }

  // optional string mac = 14;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->mac(), target);
  }

  // optional uint64 ts = 15;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->ts(), target);
  }

  // optional uint32 onlinemin = 16;
  if (has_onlinemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->onlinemin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.LoginRecordData)
  return target;
}

int LoginRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 accid = 3;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 5;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 userlevel = 6;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlevel());
    }

    // optional uint32 viplevel = 7;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 money = 9;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 power = 10;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 guid = 11;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

    // optional string imei = 12;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string ip = 13;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string mac = 14;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional uint64 ts = 15;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

    // optional uint32 onlinemin = 16;
    if (has_onlinemin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinemin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRecordData::MergeFrom(const LoginRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_onlinemin()) {
      set_onlinemin(from.onlinemin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRecordData::CopyFrom(const LoginRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRecordData::IsInitialized() const {

  return true;
}

void LoginRecordData::Swap(LoginRecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(gold_, other->gold_);
    std::swap(money_, other->money_);
    std::swap(power_, other->power_);
    std::swap(guid_, other->guid_);
    std::swap(imei_, other->imei_);
    std::swap(ip_, other->ip_);
    std::swap(mac_, other->mac_);
    std::swap(ts_, other->ts_);
    std::swap(onlinemin_, other->onlinemin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRecordData_descriptor_;
  metadata.reflection = LoginRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLoginRecordGmUserPmd_CS::kGameidFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kZoneidFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kAccidFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kCharidFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kDataFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kGmidFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kCurpageFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestLoginRecordGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestLoginRecordGmUserPmd_CS::RequestLoginRecordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestLoginRecordGmUserPmd_CS)
}

void RequestLoginRecordGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestLoginRecordGmUserPmd_CS::RequestLoginRecordGmUserPmd_CS(const RequestLoginRecordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestLoginRecordGmUserPmd_CS)
}

void RequestLoginRecordGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLoginRecordGmUserPmd_CS::~RequestLoginRecordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestLoginRecordGmUserPmd_CS)
  SharedDtor();
}

void RequestLoginRecordGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestLoginRecordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLoginRecordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestLoginRecordGmUserPmd_CS_descriptor_;
}

const RequestLoginRecordGmUserPmd_CS& RequestLoginRecordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestLoginRecordGmUserPmd_CS* RequestLoginRecordGmUserPmd_CS::default_instance_ = NULL;

RequestLoginRecordGmUserPmd_CS* RequestLoginRecordGmUserPmd_CS::New() const {
  return new RequestLoginRecordGmUserPmd_CS;
}

void RequestLoginRecordGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestLoginRecordGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(gameid_, endtime_);
    gmid_ = 0u;
  }
  ZR_(curpage_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestLoginRecordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestLoginRecordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3;
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 5;
      case 5: {
        if (tag == 40) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 6;
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // repeated .Pmd.LoginRecordData data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectTag(64)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 8;
      case 8: {
        if (tag == 64) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 9;
      case 9: {
        if (tag == 72) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 10;
      case 10: {
        if (tag == 80) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 11;
      case 11: {
        if (tag == 88) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestLoginRecordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestLoginRecordGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestLoginRecordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestLoginRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 accid = 3;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint64 starttime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->starttime(), output);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->endtime(), output);
  }

  // repeated .Pmd.LoginRecordData data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  // optional uint32 gmid = 8;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gmid(), output);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curpage(), output);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxpage(), output);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestLoginRecordGmUserPmd_CS)
}

::google::protobuf::uint8* RequestLoginRecordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestLoginRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 accid = 3;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint64 starttime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->starttime(), target);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->endtime(), target);
  }

  // repeated .Pmd.LoginRecordData data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  // optional uint32 gmid = 8;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gmid(), target);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curpage(), target);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxpage(), target);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestLoginRecordGmUserPmd_CS)
  return target;
}

int RequestLoginRecordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 accid = 3;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 starttime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 gmid = 8;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 curpage = 9;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 10;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 11;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.LoginRecordData data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLoginRecordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestLoginRecordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestLoginRecordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestLoginRecordGmUserPmd_CS::MergeFrom(const RequestLoginRecordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestLoginRecordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLoginRecordGmUserPmd_CS::CopyFrom(const RequestLoginRecordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLoginRecordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestLoginRecordGmUserPmd_CS::Swap(RequestLoginRecordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestLoginRecordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestLoginRecordGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestLoginRecordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumeRecordData::kIdFieldNumber;
const int ConsumeRecordData::kAccidFieldNumber;
const int ConsumeRecordData::kCharidFieldNumber;
const int ConsumeRecordData::kCharnameFieldNumber;
const int ConsumeRecordData::kItemtypeFieldNumber;
const int ConsumeRecordData::kItemidFieldNumber;
const int ConsumeRecordData::kItemnameFieldNumber;
const int ConsumeRecordData::kOptypeFieldNumber;
const int ConsumeRecordData::kActionidFieldNumber;
const int ConsumeRecordData::kActionnameFieldNumber;
const int ConsumeRecordData::kBeforenumFieldNumber;
const int ConsumeRecordData::kAfternumFieldNumber;
const int ConsumeRecordData::kUsednumFieldNumber;
const int ConsumeRecordData::kTsFieldNumber;
const int ConsumeRecordData::kExtFieldNumber;
#endif  // !_MSC_VER

ConsumeRecordData::ConsumeRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ConsumeRecordData)
}

void ConsumeRecordData::InitAsDefaultInstance() {
}

ConsumeRecordData::ConsumeRecordData(const ConsumeRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ConsumeRecordData)
}

void ConsumeRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemtype_ = 0u;
  itemid_ = 0u;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optype_ = 0u;
  actionid_ = 0u;
  actionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beforenum_ = 0u;
  afternum_ = 0u;
  usednum_ = 0u;
  ts_ = GOOGLE_ULONGLONG(0);
  ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumeRecordData::~ConsumeRecordData() {
  // @@protoc_insertion_point(destructor:Pmd.ConsumeRecordData)
  SharedDtor();
}

void ConsumeRecordData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (actionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete actionname_;
  }
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext_;
  }
  if (this != default_instance_) {
  }
}

void ConsumeRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumeRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsumeRecordData_descriptor_;
}

const ConsumeRecordData& ConsumeRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ConsumeRecordData* ConsumeRecordData::default_instance_ = NULL;

ConsumeRecordData* ConsumeRecordData::New() const {
  return new ConsumeRecordData;
}

void ConsumeRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConsumeRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    ZR_(itemtype_, itemid_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
    optype_ = 0u;
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(beforenum_, ts_);
    actionid_ = 0u;
    if (has_actionname()) {
      if (actionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        actionname_->clear();
      }
    }
    usednum_ = 0u;
    if (has_ext()) {
      if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsumeRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ConsumeRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemtype;
        break;
      }

      // optional uint32 itemtype = 5;
      case 5: {
        if (tag == 40) {
         parse_itemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 6;
      case 6: {
        if (tag == 48) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_itemname;
        break;
      }

      // optional string itemname = 7;
      case 7: {
        if (tag == 58) {
         parse_itemname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 8;
      case 8: {
        if (tag == 64) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_actionid;
        break;
      }

      // optional uint32 actionid = 9;
      case 9: {
        if (tag == 72) {
         parse_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_actionname;
        break;
      }

      // optional string actionname = 10;
      case 10: {
        if (tag == 82) {
         parse_actionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actionname().data(), this->actionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "actionname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_beforenum;
        break;
      }

      // optional uint32 beforenum = 11;
      case 11: {
        if (tag == 88) {
         parse_beforenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beforenum_)));
          set_has_beforenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_afternum;
        break;
      }

      // optional uint32 afternum = 12;
      case 12: {
        if (tag == 96) {
         parse_afternum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &afternum_)));
          set_has_afternum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_usednum;
        break;
      }

      // optional uint32 usednum = 13;
      case 13: {
        if (tag == 104) {
         parse_usednum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usednum_)));
          set_has_usednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 14;
      case 14: {
        if (tag == 112) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_ext;
        break;
      }

      // optional string ext = 15;
      case 15: {
        if (tag == 122) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ConsumeRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ConsumeRecordData)
  return false;
#undef DO_
}

void ConsumeRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ConsumeRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 itemtype = 5;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemtype(), output);
  }

  // optional uint32 itemid = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->itemid(), output);
  }

  // optional string itemname = 7;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->itemname(), output);
  }

  // optional uint32 optype = 8;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->optype(), output);
  }

  // optional uint32 actionid = 9;
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->actionid(), output);
  }

  // optional string actionname = 10;
  if (has_actionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actionname().data(), this->actionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actionname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->actionname(), output);
  }

  // optional uint32 beforenum = 11;
  if (has_beforenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->beforenum(), output);
  }

  // optional uint32 afternum = 12;
  if (has_afternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->afternum(), output);
  }

  // optional uint32 usednum = 13;
  if (has_usednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->usednum(), output);
  }

  // optional uint64 ts = 14;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->ts(), output);
  }

  // optional string ext = 15;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ConsumeRecordData)
}

::google::protobuf::uint8* ConsumeRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ConsumeRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional uint32 itemtype = 5;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemtype(), target);
  }

  // optional uint32 itemid = 6;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->itemid(), target);
  }

  // optional string itemname = 7;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->itemname(), target);
  }

  // optional uint32 optype = 8;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->optype(), target);
  }

  // optional uint32 actionid = 9;
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->actionid(), target);
  }

  // optional string actionname = 10;
  if (has_actionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actionname().data(), this->actionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actionname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->actionname(), target);
  }

  // optional uint32 beforenum = 11;
  if (has_beforenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->beforenum(), target);
  }

  // optional uint32 afternum = 12;
  if (has_afternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->afternum(), target);
  }

  // optional uint32 usednum = 13;
  if (has_usednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->usednum(), target);
  }

  // optional uint64 ts = 14;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->ts(), target);
  }

  // optional string ext = 15;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ConsumeRecordData)
  return target;
}

int ConsumeRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 itemtype = 5;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

    // optional uint32 itemid = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string itemname = 7;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional uint32 optype = 8;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 actionid = 9;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actionid());
    }

    // optional string actionname = 10;
    if (has_actionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actionname());
    }

    // optional uint32 beforenum = 11;
    if (has_beforenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beforenum());
    }

    // optional uint32 afternum = 12;
    if (has_afternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->afternum());
    }

    // optional uint32 usednum = 13;
    if (has_usednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usednum());
    }

    // optional uint64 ts = 14;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

    // optional string ext = 15;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsumeRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsumeRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsumeRecordData::MergeFrom(const ConsumeRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_actionname()) {
      set_actionname(from.actionname());
    }
    if (from.has_beforenum()) {
      set_beforenum(from.beforenum());
    }
    if (from.has_afternum()) {
      set_afternum(from.afternum());
    }
    if (from.has_usednum()) {
      set_usednum(from.usednum());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_ext()) {
      set_ext(from.ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsumeRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeRecordData::CopyFrom(const ConsumeRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeRecordData::IsInitialized() const {

  return true;
}

void ConsumeRecordData::Swap(ConsumeRecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemname_, other->itemname_);
    std::swap(optype_, other->optype_);
    std::swap(actionid_, other->actionid_);
    std::swap(actionname_, other->actionname_);
    std::swap(beforenum_, other->beforenum_);
    std::swap(afternum_, other->afternum_);
    std::swap(usednum_, other->usednum_);
    std::swap(ts_, other->ts_);
    std::swap(ext_, other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsumeRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsumeRecordData_descriptor_;
  metadata.reflection = ConsumeRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestConsumeRecordGmUserPmd_CS::kGameidFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kZoneidFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kCharidFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kTypeFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kItemidFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kOptypeFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kActionidFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kDataFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kGmidFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kCurpageFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestConsumeRecordGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestConsumeRecordGmUserPmd_CS::RequestConsumeRecordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestConsumeRecordGmUserPmd_CS)
}

void RequestConsumeRecordGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestConsumeRecordGmUserPmd_CS::RequestConsumeRecordGmUserPmd_CS(const RequestConsumeRecordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestConsumeRecordGmUserPmd_CS)
}

void RequestConsumeRecordGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  itemid_ = 0u;
  optype_ = 0u;
  actionid_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestConsumeRecordGmUserPmd_CS::~RequestConsumeRecordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestConsumeRecordGmUserPmd_CS)
  SharedDtor();
}

void RequestConsumeRecordGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestConsumeRecordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestConsumeRecordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestConsumeRecordGmUserPmd_CS_descriptor_;
}

const RequestConsumeRecordGmUserPmd_CS& RequestConsumeRecordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestConsumeRecordGmUserPmd_CS* RequestConsumeRecordGmUserPmd_CS::default_instance_ = NULL;

RequestConsumeRecordGmUserPmd_CS* RequestConsumeRecordGmUserPmd_CS::New() const {
  return new RequestConsumeRecordGmUserPmd_CS;
}

void RequestConsumeRecordGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestConsumeRecordGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, starttime_);
  }
  if (_has_bits_[8 / 32] & 15616) {
    ZR_(gmid_, perpage_);
    endtime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestConsumeRecordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestConsumeRecordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 5;
      case 5: {
        if (tag == 40) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 6;
      case 6: {
        if (tag == 48) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_actionid;
        break;
      }

      // optional uint32 actionid = 7;
      case 7: {
        if (tag == 56) {
         parse_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 8;
      case 8: {
        if (tag == 64) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 9;
      case 9: {
        if (tag == 72) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_data;
        break;
      }

      // repeated .Pmd.ConsumeRecordData data = 10;
      case 10: {
        if (tag == 82) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_data;
        if (input->ExpectTag(88)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 11;
      case 11: {
        if (tag == 88) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 12;
      case 12: {
        if (tag == 96) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 13;
      case 13: {
        if (tag == 104) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 14;
      case 14: {
        if (tag == 112) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestConsumeRecordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestConsumeRecordGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestConsumeRecordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestConsumeRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional uint32 optype = 6;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->optype(), output);
  }

  // optional uint32 actionid = 7;
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->actionid(), output);
  }

  // optional uint64 starttime = 8;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->starttime(), output);
  }

  // optional uint64 endtime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->endtime(), output);
  }

  // repeated .Pmd.ConsumeRecordData data = 10;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->data(i), output);
  }

  // optional uint32 gmid = 11;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gmid(), output);
  }

  // optional uint32 curpage = 12;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->curpage(), output);
  }

  // optional uint32 maxpage = 13;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->maxpage(), output);
  }

  // optional uint32 perpage = 14;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestConsumeRecordGmUserPmd_CS)
}

::google::protobuf::uint8* RequestConsumeRecordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestConsumeRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional uint32 optype = 6;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->optype(), target);
  }

  // optional uint32 actionid = 7;
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->actionid(), target);
  }

  // optional uint64 starttime = 8;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->starttime(), target);
  }

  // optional uint64 endtime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->endtime(), target);
  }

  // repeated .Pmd.ConsumeRecordData data = 10;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->data(i), target);
  }

  // optional uint32 gmid = 11;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gmid(), target);
  }

  // optional uint32 curpage = 12;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->curpage(), target);
  }

  // optional uint32 maxpage = 13;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->maxpage(), target);
  }

  // optional uint32 perpage = 14;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestConsumeRecordGmUserPmd_CS)
  return target;
}

int RequestConsumeRecordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 optype = 6;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional uint32 actionid = 7;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actionid());
    }

    // optional uint64 starttime = 8;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 endtime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 gmid = 11;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 12;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 13;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 14;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.ConsumeRecordData data = 10;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestConsumeRecordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestConsumeRecordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestConsumeRecordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestConsumeRecordGmUserPmd_CS::MergeFrom(const RequestConsumeRecordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestConsumeRecordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestConsumeRecordGmUserPmd_CS::CopyFrom(const RequestConsumeRecordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestConsumeRecordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void RequestConsumeRecordGmUserPmd_CS::Swap(RequestConsumeRecordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(optype_, other->optype_);
    std::swap(actionid_, other->actionid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestConsumeRecordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestConsumeRecordGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestConsumeRecordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionRecordData::kIdFieldNumber;
const int ActionRecordData::kAccidFieldNumber;
const int ActionRecordData::kCharidFieldNumber;
const int ActionRecordData::kCharnameFieldNumber;
const int ActionRecordData::kActtypeFieldNumber;
const int ActionRecordData::kTypenameFieldNumber;
const int ActionRecordData::kActionidFieldNumber;
const int ActionRecordData::kActionnameFieldNumber;
const int ActionRecordData::kStateFieldNumber;
const int ActionRecordData::kPowerFieldNumber;
const int ActionRecordData::kLastminFieldNumber;
const int ActionRecordData::kStarttimeFieldNumber;
const int ActionRecordData::kEndtimeFieldNumber;
const int ActionRecordData::kExt1FieldNumber;
const int ActionRecordData::kExt2FieldNumber;
#endif  // !_MSC_VER

ActionRecordData::ActionRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ActionRecordData)
}

void ActionRecordData::InitAsDefaultInstance() {
}

ActionRecordData::ActionRecordData(const ActionRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ActionRecordData)
}

void ActionRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acttype_ = 0u;
  typename__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionid_ = 0u;
  actionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0u;
  power_ = 0u;
  lastmin_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ext1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionRecordData::~ActionRecordData() {
  // @@protoc_insertion_point(destructor:Pmd.ActionRecordData)
  SharedDtor();
}

void ActionRecordData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (typename__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typename__;
  }
  if (actionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete actionname_;
  }
  if (ext1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext1_;
  }
  if (ext2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext2_;
  }
  if (this != default_instance_) {
  }
}

void ActionRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRecordData_descriptor_;
}

const ActionRecordData& ActionRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ActionRecordData* ActionRecordData::default_instance_ = NULL;

ActionRecordData* ActionRecordData::New() const {
  return new ActionRecordData;
}

void ActionRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActionRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    ZR_(acttype_, actionid_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_typename_()) {
      if (typename__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typename__->clear();
      }
    }
    if (has_actionname()) {
      if (actionname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        actionname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(state_, endtime_);
    lastmin_ = 0u;
    if (has_ext1()) {
      if (ext1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ext1_->clear();
      }
    }
    if (has_ext2()) {
      if (ext2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ext2_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ActionRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_acttype;
        break;
      }

      // optional uint32 acttype = 5;
      case 5: {
        if (tag == 40) {
         parse_acttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_typename;
        break;
      }

      // optional string typename = 6;
      case 6: {
        if (tag == 50) {
         parse_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typename_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typename_().data(), this->typename_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typename_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_actionid;
        break;
      }

      // optional uint32 actionid = 7;
      case 7: {
        if (tag == 56) {
         parse_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_actionname;
        break;
      }

      // optional string actionname = 8;
      case 8: {
        if (tag == 66) {
         parse_actionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actionname().data(), this->actionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "actionname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }

      // optional uint32 state = 9;
      case 9: {
        if (tag == 72) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_power;
        break;
      }

      // optional uint32 power = 10;
      case 10: {
        if (tag == 80) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lastmin;
        break;
      }

      // optional uint32 lastmin = 11;
      case 11: {
        if (tag == 88) {
         parse_lastmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastmin_)));
          set_has_lastmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 12;
      case 12: {
        if (tag == 96) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 13;
      case 13: {
        if (tag == 104) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_ext1;
        break;
      }

      // optional string ext1 = 14;
      case 14: {
        if (tag == 114) {
         parse_ext1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext1().data(), this->ext1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ext1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_ext2;
        break;
      }

      // optional string ext2 = 15;
      case 15: {
        if (tag == 122) {
         parse_ext2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext2().data(), this->ext2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ext2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ActionRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ActionRecordData)
  return false;
#undef DO_
}

void ActionRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ActionRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 acttype = 5;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->acttype(), output);
  }

  // optional string typename = 6;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typename_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->typename_(), output);
  }

  // optional uint32 actionid = 7;
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->actionid(), output);
  }

  // optional string actionname = 8;
  if (has_actionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actionname().data(), this->actionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actionname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->actionname(), output);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->state(), output);
  }

  // optional uint32 power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->power(), output);
  }

  // optional uint32 lastmin = 11;
  if (has_lastmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lastmin(), output);
  }

  // optional uint64 starttime = 12;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->starttime(), output);
  }

  // optional uint64 endtime = 13;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->endtime(), output);
  }

  // optional string ext1 = 14;
  if (has_ext1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext1().data(), this->ext1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->ext1(), output);
  }

  // optional string ext2 = 15;
  if (has_ext2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext2().data(), this->ext2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->ext2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ActionRecordData)
}

::google::protobuf::uint8* ActionRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ActionRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional uint32 acttype = 5;
  if (has_acttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->acttype(), target);
  }

  // optional string typename = 6;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typename_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->typename_(), target);
  }

  // optional uint32 actionid = 7;
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->actionid(), target);
  }

  // optional string actionname = 8;
  if (has_actionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actionname().data(), this->actionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actionname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->actionname(), target);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->state(), target);
  }

  // optional uint32 power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->power(), target);
  }

  // optional uint32 lastmin = 11;
  if (has_lastmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lastmin(), target);
  }

  // optional uint64 starttime = 12;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->starttime(), target);
  }

  // optional uint64 endtime = 13;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->endtime(), target);
  }

  // optional string ext1 = 14;
  if (has_ext1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext1().data(), this->ext1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->ext1(), target);
  }

  // optional string ext2 = 15;
  if (has_ext2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext2().data(), this->ext2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->ext2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ActionRecordData)
  return target;
}

int ActionRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 acttype = 5;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acttype());
    }

    // optional string typename = 6;
    if (has_typename_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typename_());
    }

    // optional uint32 actionid = 7;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actionid());
    }

    // optional string actionname = 8;
    if (has_actionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actionname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 state = 9;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 power = 10;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 lastmin = 11;
    if (has_lastmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastmin());
    }

    // optional uint64 starttime = 12;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 13;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional string ext1 = 14;
    if (has_ext1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext1());
    }

    // optional string ext2 = 15;
    if (has_ext2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionRecordData::MergeFrom(const ActionRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
    if (from.has_typename_()) {
      set_typename_(from.typename_());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_actionname()) {
      set_actionname(from.actionname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_lastmin()) {
      set_lastmin(from.lastmin());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_ext1()) {
      set_ext1(from.ext1());
    }
    if (from.has_ext2()) {
      set_ext2(from.ext2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRecordData::CopyFrom(const ActionRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRecordData::IsInitialized() const {

  return true;
}

void ActionRecordData::Swap(ActionRecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(acttype_, other->acttype_);
    std::swap(typename__, other->typename__);
    std::swap(actionid_, other->actionid_);
    std::swap(actionname_, other->actionname_);
    std::swap(state_, other->state_);
    std::swap(power_, other->power_);
    std::swap(lastmin_, other->lastmin_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(ext1_, other->ext1_);
    std::swap(ext2_, other->ext2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRecordData_descriptor_;
  metadata.reflection = ActionRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestActionRecordGmUserPmd_CS::kGameidFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kZoneidFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kCharidFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kTypeFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kActtypeFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kActionidFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kDataFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kGmidFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kCurpageFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestActionRecordGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestActionRecordGmUserPmd_CS::RequestActionRecordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestActionRecordGmUserPmd_CS)
}

void RequestActionRecordGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestActionRecordGmUserPmd_CS::RequestActionRecordGmUserPmd_CS(const RequestActionRecordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestActionRecordGmUserPmd_CS)
}

void RequestActionRecordGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  acttype_ = 0u;
  actionid_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestActionRecordGmUserPmd_CS::~RequestActionRecordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestActionRecordGmUserPmd_CS)
  SharedDtor();
}

void RequestActionRecordGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestActionRecordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestActionRecordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestActionRecordGmUserPmd_CS_descriptor_;
}

const RequestActionRecordGmUserPmd_CS& RequestActionRecordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestActionRecordGmUserPmd_CS* RequestActionRecordGmUserPmd_CS::default_instance_ = NULL;

RequestActionRecordGmUserPmd_CS* RequestActionRecordGmUserPmd_CS::New() const {
  return new RequestActionRecordGmUserPmd_CS;
}

void RequestActionRecordGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestActionRecordGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, actionid_);
  }
  if (_has_bits_[8 / 32] & 7680) {
    ZR_(curpage_, perpage_);
    gmid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestActionRecordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestActionRecordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_acttype;
        break;
      }

      // optional uint32 acttype = 5;
      case 5: {
        if (tag == 40) {
         parse_acttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_actionid;
        break;
      }

      // optional uint32 actionid = 6;
      case 6: {
        if (tag == 48) {
         parse_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 7;
      case 7: {
        if (tag == 56) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 8;
      case 8: {
        if (tag == 64) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // repeated .Pmd.ActionRecordData data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        if (input->ExpectTag(80)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 10;
      case 10: {
        if (tag == 80) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 11;
      case 11: {
        if (tag == 88) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 12;
      case 12: {
        if (tag == 96) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 13;
      case 13: {
        if (tag == 104) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestActionRecordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestActionRecordGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestActionRecordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestActionRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 acttype = 5;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->acttype(), output);
  }

  // optional uint32 actionid = 6;
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->actionid(), output);
  }

  // optional uint64 starttime = 7;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->starttime(), output);
  }

  // optional uint64 endtime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->endtime(), output);
  }

  // repeated .Pmd.ActionRecordData data = 9;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(i), output);
  }

  // optional uint32 gmid = 10;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gmid(), output);
  }

  // optional uint32 curpage = 11;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->curpage(), output);
  }

  // optional uint32 maxpage = 12;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->maxpage(), output);
  }

  // optional uint32 perpage = 13;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestActionRecordGmUserPmd_CS)
}

::google::protobuf::uint8* RequestActionRecordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestActionRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 acttype = 5;
  if (has_acttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->acttype(), target);
  }

  // optional uint32 actionid = 6;
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->actionid(), target);
  }

  // optional uint64 starttime = 7;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->starttime(), target);
  }

  // optional uint64 endtime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->endtime(), target);
  }

  // repeated .Pmd.ActionRecordData data = 9;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(i), target);
  }

  // optional uint32 gmid = 10;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gmid(), target);
  }

  // optional uint32 curpage = 11;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->curpage(), target);
  }

  // optional uint32 maxpage = 12;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->maxpage(), target);
  }

  // optional uint32 perpage = 13;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestActionRecordGmUserPmd_CS)
  return target;
}

int RequestActionRecordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 acttype = 5;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acttype());
    }

    // optional uint32 actionid = 6;
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actionid());
    }

    // optional uint64 starttime = 7;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 gmid = 10;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 11;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 12;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 13;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.ActionRecordData data = 9;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestActionRecordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestActionRecordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestActionRecordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestActionRecordGmUserPmd_CS::MergeFrom(const RequestActionRecordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestActionRecordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestActionRecordGmUserPmd_CS::CopyFrom(const RequestActionRecordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestActionRecordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void RequestActionRecordGmUserPmd_CS::Swap(RequestActionRecordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(acttype_, other->acttype_);
    std::swap(actionid_, other->actionid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestActionRecordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestActionRecordGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestActionRecordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrengthenRecordData::kIdFieldNumber;
const int StrengthenRecordData::kAccidFieldNumber;
const int StrengthenRecordData::kCharidFieldNumber;
const int StrengthenRecordData::kCharnameFieldNumber;
const int StrengthenRecordData::kOptargetFieldNumber;
const int StrengthenRecordData::kTargetnameFieldNumber;
const int StrengthenRecordData::kOptypeFieldNumber;
const int StrengthenRecordData::kTypenameFieldNumber;
const int StrengthenRecordData::kOpresultFieldNumber;
const int StrengthenRecordData::kBeforenumFieldNumber;
const int StrengthenRecordData::kAfternumFieldNumber;
const int StrengthenRecordData::kTsFieldNumber;
const int StrengthenRecordData::kExtFieldNumber;
#endif  // !_MSC_VER

StrengthenRecordData::StrengthenRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StrengthenRecordData)
}

void StrengthenRecordData::InitAsDefaultInstance() {
}

StrengthenRecordData::StrengthenRecordData(const StrengthenRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StrengthenRecordData)
}

void StrengthenRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optarget_ = 0u;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optype_ = 0u;
  typename__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opresult_ = 0u;
  beforenum_ = 0u;
  afternum_ = 0u;
  ts_ = GOOGLE_ULONGLONG(0);
  ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengthenRecordData::~StrengthenRecordData() {
  // @@protoc_insertion_point(destructor:Pmd.StrengthenRecordData)
  SharedDtor();
}

void StrengthenRecordData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (targetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetname_;
  }
  if (typename__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typename__;
  }
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext_;
  }
  if (this != default_instance_) {
  }
}

void StrengthenRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengthenRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengthenRecordData_descriptor_;
}

const StrengthenRecordData& StrengthenRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

StrengthenRecordData* StrengthenRecordData::default_instance_ = NULL;

StrengthenRecordData* StrengthenRecordData::New() const {
  return new StrengthenRecordData;
}

void StrengthenRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StrengthenRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    ZR_(optarget_, optype_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetname_->clear();
      }
    }
    if (has_typename_()) {
      if (typename__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typename__->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(opresult_, ts_);
    afternum_ = 0u;
    if (has_ext()) {
      if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengthenRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StrengthenRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_optarget;
        break;
      }

      // optional uint32 optarget = 5;
      case 5: {
        if (tag == 40) {
         parse_optarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optarget_)));
          set_has_optarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_targetname;
        break;
      }

      // optional string targetname = 6;
      case 6: {
        if (tag == 50) {
         parse_targetname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 7;
      case 7: {
        if (tag == 56) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_typename;
        break;
      }

      // optional string typename = 8;
      case 8: {
        if (tag == 66) {
         parse_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typename_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typename_().data(), this->typename_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typename_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_opresult;
        break;
      }

      // optional uint32 opresult = 9;
      case 9: {
        if (tag == 72) {
         parse_opresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opresult_)));
          set_has_opresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_beforenum;
        break;
      }

      // optional uint32 beforenum = 10;
      case 10: {
        if (tag == 80) {
         parse_beforenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beforenum_)));
          set_has_beforenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_afternum;
        break;
      }

      // optional uint32 afternum = 11;
      case 11: {
        if (tag == 88) {
         parse_afternum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &afternum_)));
          set_has_afternum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 12;
      case 12: {
        if (tag == 96) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ext;
        break;
      }

      // optional string ext = 13;
      case 13: {
        if (tag == 106) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StrengthenRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StrengthenRecordData)
  return false;
#undef DO_
}

void StrengthenRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StrengthenRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 optarget = 5;
  if (has_optarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->optarget(), output);
  }

  // optional string targetname = 6;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->targetname(), output);
  }

  // optional uint32 optype = 7;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->optype(), output);
  }

  // optional string typename = 8;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typename_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->typename_(), output);
  }

  // optional uint32 opresult = 9;
  if (has_opresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->opresult(), output);
  }

  // optional uint32 beforenum = 10;
  if (has_beforenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->beforenum(), output);
  }

  // optional uint32 afternum = 11;
  if (has_afternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->afternum(), output);
  }

  // optional uint64 ts = 12;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ts(), output);
  }

  // optional string ext = 13;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StrengthenRecordData)
}

::google::protobuf::uint8* StrengthenRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StrengthenRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional uint32 optarget = 5;
  if (has_optarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->optarget(), target);
  }

  // optional string targetname = 6;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->targetname(), target);
  }

  // optional uint32 optype = 7;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->optype(), target);
  }

  // optional string typename = 8;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typename_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->typename_(), target);
  }

  // optional uint32 opresult = 9;
  if (has_opresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->opresult(), target);
  }

  // optional uint32 beforenum = 10;
  if (has_beforenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->beforenum(), target);
  }

  // optional uint32 afternum = 11;
  if (has_afternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->afternum(), target);
  }

  // optional uint64 ts = 12;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ts(), target);
  }

  // optional string ext = 13;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StrengthenRecordData)
  return target;
}

int StrengthenRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 optarget = 5;
    if (has_optarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optarget());
    }

    // optional string targetname = 6;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetname());
    }

    // optional uint32 optype = 7;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional string typename = 8;
    if (has_typename_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typename_());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 opresult = 9;
    if (has_opresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opresult());
    }

    // optional uint32 beforenum = 10;
    if (has_beforenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beforenum());
    }

    // optional uint32 afternum = 11;
    if (has_afternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->afternum());
    }

    // optional uint64 ts = 12;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

    // optional string ext = 13;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengthenRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengthenRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengthenRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengthenRecordData::MergeFrom(const StrengthenRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_optarget()) {
      set_optarget(from.optarget());
    }
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_typename_()) {
      set_typename_(from.typename_());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opresult()) {
      set_opresult(from.opresult());
    }
    if (from.has_beforenum()) {
      set_beforenum(from.beforenum());
    }
    if (from.has_afternum()) {
      set_afternum(from.afternum());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_ext()) {
      set_ext(from.ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengthenRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengthenRecordData::CopyFrom(const StrengthenRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengthenRecordData::IsInitialized() const {

  return true;
}

void StrengthenRecordData::Swap(StrengthenRecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(optarget_, other->optarget_);
    std::swap(targetname_, other->targetname_);
    std::swap(optype_, other->optype_);
    std::swap(typename__, other->typename__);
    std::swap(opresult_, other->opresult_);
    std::swap(beforenum_, other->beforenum_);
    std::swap(afternum_, other->afternum_);
    std::swap(ts_, other->ts_);
    std::swap(ext_, other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengthenRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengthenRecordData_descriptor_;
  metadata.reflection = StrengthenRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestStrengthenRecordGmUserPmd_CS::kGameidFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kZoneidFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kCharidFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kOptargetFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kOptypeFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kStateFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kDataFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kGmidFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kCurpageFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestStrengthenRecordGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestStrengthenRecordGmUserPmd_CS::RequestStrengthenRecordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestStrengthenRecordGmUserPmd_CS)
}

void RequestStrengthenRecordGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestStrengthenRecordGmUserPmd_CS::RequestStrengthenRecordGmUserPmd_CS(const RequestStrengthenRecordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestStrengthenRecordGmUserPmd_CS)
}

void RequestStrengthenRecordGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  optarget_ = 0u;
  optype_ = 0u;
  state_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStrengthenRecordGmUserPmd_CS::~RequestStrengthenRecordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestStrengthenRecordGmUserPmd_CS)
  SharedDtor();
}

void RequestStrengthenRecordGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestStrengthenRecordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStrengthenRecordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStrengthenRecordGmUserPmd_CS_descriptor_;
}

const RequestStrengthenRecordGmUserPmd_CS& RequestStrengthenRecordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestStrengthenRecordGmUserPmd_CS* RequestStrengthenRecordGmUserPmd_CS::default_instance_ = NULL;

RequestStrengthenRecordGmUserPmd_CS* RequestStrengthenRecordGmUserPmd_CS::New() const {
  return new RequestStrengthenRecordGmUserPmd_CS;
}

void RequestStrengthenRecordGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestStrengthenRecordGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, state_);
  }
  if (_has_bits_[8 / 32] & 7680) {
    ZR_(curpage_, perpage_);
    gmid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStrengthenRecordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestStrengthenRecordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optarget;
        break;
      }

      // optional uint32 optarget = 4;
      case 4: {
        if (tag == 32) {
         parse_optarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optarget_)));
          set_has_optarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 5;
      case 5: {
        if (tag == 40) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional uint32 state = 6;
      case 6: {
        if (tag == 48) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 7;
      case 7: {
        if (tag == 56) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 8;
      case 8: {
        if (tag == 64) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // repeated .Pmd.StrengthenRecordData data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        if (input->ExpectTag(80)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 10;
      case 10: {
        if (tag == 80) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 11;
      case 11: {
        if (tag == 88) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 12;
      case 12: {
        if (tag == 96) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 13;
      case 13: {
        if (tag == 104) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestStrengthenRecordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestStrengthenRecordGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestStrengthenRecordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestStrengthenRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 optarget = 4;
  if (has_optarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->optarget(), output);
  }

  // optional uint32 optype = 5;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->optype(), output);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }

  // optional uint64 starttime = 7;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->starttime(), output);
  }

  // optional uint64 endtime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->endtime(), output);
  }

  // repeated .Pmd.StrengthenRecordData data = 9;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(i), output);
  }

  // optional uint32 gmid = 10;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gmid(), output);
  }

  // optional uint32 curpage = 11;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->curpage(), output);
  }

  // optional uint32 maxpage = 12;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->maxpage(), output);
  }

  // optional uint32 perpage = 13;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestStrengthenRecordGmUserPmd_CS)
}

::google::protobuf::uint8* RequestStrengthenRecordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestStrengthenRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 optarget = 4;
  if (has_optarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->optarget(), target);
  }

  // optional uint32 optype = 5;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->optype(), target);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->state(), target);
  }

  // optional uint64 starttime = 7;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->starttime(), target);
  }

  // optional uint64 endtime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->endtime(), target);
  }

  // repeated .Pmd.StrengthenRecordData data = 9;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(i), target);
  }

  // optional uint32 gmid = 10;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gmid(), target);
  }

  // optional uint32 curpage = 11;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->curpage(), target);
  }

  // optional uint32 maxpage = 12;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->maxpage(), target);
  }

  // optional uint32 perpage = 13;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestStrengthenRecordGmUserPmd_CS)
  return target;
}

int RequestStrengthenRecordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 optarget = 4;
    if (has_optarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optarget());
    }

    // optional uint32 optype = 5;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional uint32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 starttime = 7;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 gmid = 10;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 11;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 12;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 13;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.StrengthenRecordData data = 9;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStrengthenRecordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStrengthenRecordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStrengthenRecordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStrengthenRecordGmUserPmd_CS::MergeFrom(const RequestStrengthenRecordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_optarget()) {
      set_optarget(from.optarget());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStrengthenRecordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStrengthenRecordGmUserPmd_CS::CopyFrom(const RequestStrengthenRecordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStrengthenRecordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestStrengthenRecordGmUserPmd_CS::Swap(RequestStrengthenRecordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(optarget_, other->optarget_);
    std::swap(optype_, other->optype_);
    std::swap(state_, other->state_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStrengthenRecordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStrengthenRecordGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestStrengthenRecordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailRecordData::kIdFieldNumber;
const int MailRecordData::kCharidFieldNumber;
const int MailRecordData::kCharnameFieldNumber;
const int MailRecordData::kRecvidFieldNumber;
const int MailRecordData::kRecvnameFieldNumber;
const int MailRecordData::kSubjectFieldNumber;
const int MailRecordData::kContentFieldNumber;
const int MailRecordData::kAttachmentFieldNumber;
const int MailRecordData::kStateFieldNumber;
const int MailRecordData::kTsFieldNumber;
const int MailRecordData::kOptypeFieldNumber;
#endif  // !_MSC_VER

MailRecordData::MailRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.MailRecordData)
}

void MailRecordData::InitAsDefaultInstance() {
}

MailRecordData::MailRecordData(const MailRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.MailRecordData)
}

void MailRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvid_ = GOOGLE_ULONGLONG(0);
  recvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attachment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0u;
  ts_ = GOOGLE_ULONGLONG(0);
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailRecordData::~MailRecordData() {
  // @@protoc_insertion_point(destructor:Pmd.MailRecordData)
  SharedDtor();
}

void MailRecordData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (recvname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recvname_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (attachment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attachment_;
  }
  if (this != default_instance_) {
  }
}

void MailRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailRecordData_descriptor_;
}

const MailRecordData& MailRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

MailRecordData* MailRecordData::default_instance_ = NULL;

MailRecordData* MailRecordData::New() const {
  return new MailRecordData;
}

void MailRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MailRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, charid_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    recvid_ = GOOGLE_ULONGLONG(0);
    if (has_recvname()) {
      if (recvname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recvname_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_attachment()) {
      if (attachment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attachment_->clear();
      }
    }
  }
  ZR_(ts_, optype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.MailRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2;
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (tag == 26) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recvid;
        break;
      }

      // optional uint64 recvid = 4;
      case 4: {
        if (tag == 32) {
         parse_recvid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvid_)));
          set_has_recvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recvname;
        break;
      }

      // optional string recvname = 5;
      case 5: {
        if (tag == 42) {
         parse_recvname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recvname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recvname().data(), this->recvname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recvname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_subject;
        break;
      }

      // optional string subject = 6;
      case 6: {
        if (tag == 50) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional string content = 7;
      case 7: {
        if (tag == 58) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attachment;
        break;
      }

      // optional string attachment = 8;
      case 8: {
        if (tag == 66) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attachment().data(), this->attachment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attachment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }

      // optional uint32 state = 9;
      case 9: {
        if (tag == 72) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 10;
      case 10: {
        if (tag == 80) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 11;
      case 11: {
        if (tag == 88) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.MailRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.MailRecordData)
  return false;
#undef DO_
}

void MailRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.MailRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->charname(), output);
  }

  // optional uint64 recvid = 4;
  if (has_recvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recvid(), output);
  }

  // optional string recvname = 5;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recvname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->recvname(), output);
  }

  // optional string subject = 6;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->subject(), output);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->content(), output);
  }

  // optional string attachment = 8;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->attachment(), output);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->state(), output);
  }

  // optional uint64 ts = 10;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ts(), output);
  }

  // optional uint32 optype = 11;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.MailRecordData)
}

::google::protobuf::uint8* MailRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.MailRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional uint64 recvid = 4;
  if (has_recvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recvid(), target);
  }

  // optional string recvname = 5;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recvname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recvname(), target);
  }

  // optional string subject = 6;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subject(), target);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }

  // optional string attachment = 8;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attachment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->attachment(), target);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->state(), target);
  }

  // optional uint64 ts = 10;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ts(), target);
  }

  // optional uint32 optype = 11;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.MailRecordData)
  return target;
}

int MailRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint64 recvid = 4;
    if (has_recvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvid());
    }

    // optional string recvname = 5;
    if (has_recvname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recvname());
    }

    // optional string subject = 6;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string attachment = 8;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachment());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 state = 9;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 ts = 10;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

    // optional uint32 optype = 11;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailRecordData::MergeFrom(const MailRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_recvid()) {
      set_recvid(from.recvid());
    }
    if (from.has_recvname()) {
      set_recvname(from.recvname());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_attachment()) {
      set_attachment(from.attachment());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailRecordData::CopyFrom(const MailRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailRecordData::IsInitialized() const {

  return true;
}

void MailRecordData::Swap(MailRecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(recvid_, other->recvid_);
    std::swap(recvname_, other->recvname_);
    std::swap(subject_, other->subject_);
    std::swap(content_, other->content_);
    std::swap(attachment_, other->attachment_);
    std::swap(state_, other->state_);
    std::swap(ts_, other->ts_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailRecordData_descriptor_;
  metadata.reflection = MailRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestMailRecordGmUserPmd_CS::kGameidFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kZoneidFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kCharidFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kRecvidFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kOptypeFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kDataFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kGmidFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kCurpageFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestMailRecordGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestMailRecordGmUserPmd_CS::RequestMailRecordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestMailRecordGmUserPmd_CS)
}

void RequestMailRecordGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestMailRecordGmUserPmd_CS::RequestMailRecordGmUserPmd_CS(const RequestMailRecordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestMailRecordGmUserPmd_CS)
}

void RequestMailRecordGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  recvid_ = GOOGLE_ULONGLONG(0);
  optype_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMailRecordGmUserPmd_CS::~RequestMailRecordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestMailRecordGmUserPmd_CS)
  SharedDtor();
}

void RequestMailRecordGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestMailRecordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMailRecordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMailRecordGmUserPmd_CS_descriptor_;
}

const RequestMailRecordGmUserPmd_CS& RequestMailRecordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestMailRecordGmUserPmd_CS* RequestMailRecordGmUserPmd_CS::default_instance_ = NULL;

RequestMailRecordGmUserPmd_CS* RequestMailRecordGmUserPmd_CS::New() const {
  return new RequestMailRecordGmUserPmd_CS;
}

void RequestMailRecordGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestMailRecordGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gameid_, optype_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(curpage_, perpage_);
    gmid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMailRecordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestMailRecordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recvid;
        break;
      }

      // optional uint64 recvid = 4;
      case 4: {
        if (tag == 32) {
         parse_recvid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvid_)));
          set_has_recvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 5;
      case 5: {
        if (tag == 40) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 6;
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 7;
      case 7: {
        if (tag == 56) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // repeated .Pmd.MailRecordData data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        if (input->ExpectTag(72)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 9;
      case 9: {
        if (tag == 72) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 10;
      case 10: {
        if (tag == 80) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 11;
      case 11: {
        if (tag == 88) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 12;
      case 12: {
        if (tag == 96) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestMailRecordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestMailRecordGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestMailRecordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestMailRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 recvid = 4;
  if (has_recvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recvid(), output);
  }

  // optional uint32 optype = 5;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->optype(), output);
  }

  // optional uint64 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->starttime(), output);
  }

  // optional uint64 endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->endtime(), output);
  }

  // repeated .Pmd.MailRecordData data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }

  // optional uint32 gmid = 9;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gmid(), output);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curpage(), output);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maxpage(), output);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestMailRecordGmUserPmd_CS)
}

::google::protobuf::uint8* RequestMailRecordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestMailRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 recvid = 4;
  if (has_recvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recvid(), target);
  }

  // optional uint32 optype = 5;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->optype(), target);
  }

  // optional uint64 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->starttime(), target);
  }

  // optional uint64 endtime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->endtime(), target);
  }

  // repeated .Pmd.MailRecordData data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(i), target);
  }

  // optional uint32 gmid = 9;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gmid(), target);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curpage(), target);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->maxpage(), target);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestMailRecordGmUserPmd_CS)
  return target;
}

int RequestMailRecordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 recvid = 4;
    if (has_recvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvid());
    }

    // optional uint32 optype = 5;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional uint64 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 gmid = 9;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 10;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 11;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 12;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.MailRecordData data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMailRecordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMailRecordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMailRecordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMailRecordGmUserPmd_CS::MergeFrom(const RequestMailRecordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_recvid()) {
      set_recvid(from.recvid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMailRecordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMailRecordGmUserPmd_CS::CopyFrom(const RequestMailRecordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMailRecordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestMailRecordGmUserPmd_CS::Swap(RequestMailRecordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(recvid_, other->recvid_);
    std::swap(optype_, other->optype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMailRecordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMailRecordGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestMailRecordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankRecordData::kIdFieldNumber;
const int RankRecordData::kRankidFieldNumber;
const int RankRecordData::kRanknameFieldNumber;
const int RankRecordData::kAccidFieldNumber;
const int RankRecordData::kCharidFieldNumber;
const int RankRecordData::kCharnameFieldNumber;
const int RankRecordData::kProfessionFieldNumber;
const int RankRecordData::kPowerFieldNumber;
const int RankRecordData::kTsFieldNumber;
const int RankRecordData::kExtFieldNumber;
#endif  // !_MSC_VER

RankRecordData::RankRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RankRecordData)
}

void RankRecordData::InitAsDefaultInstance() {
}

RankRecordData::RankRecordData(const RankRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RankRecordData)
}

void RankRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  rankid_ = GOOGLE_ULONGLONG(0);
  rankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = 0u;
  ts_ = GOOGLE_ULONGLONG(0);
  ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankRecordData::~RankRecordData() {
  // @@protoc_insertion_point(destructor:Pmd.RankRecordData)
  SharedDtor();
}

void RankRecordData::SharedDtor() {
  if (rankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rankname_;
  }
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (profession_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profession_;
  }
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext_;
  }
  if (this != default_instance_) {
  }
}

void RankRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankRecordData_descriptor_;
}

const RankRecordData& RankRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RankRecordData* RankRecordData::default_instance_ = NULL;

RankRecordData* RankRecordData::New() const {
  return new RankRecordData;
}

void RankRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, rankid_);
    ZR_(accid_, charid_);
    if (has_rankname()) {
      if (rankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rankname_->clear();
      }
    }
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        profession_->clear();
      }
    }
    power_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    ts_ = GOOGLE_ULONGLONG(0);
    if (has_ext()) {
      if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RankRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rankid;
        break;
      }

      // optional uint64 rankid = 2;
      case 2: {
        if (tag == 16) {
         parse_rankid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rankname;
        break;
      }

      // optional string rankname = 3;
      case 3: {
        if (tag == 26) {
         parse_rankname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rankname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rankname().data(), this->rankname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rankname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5;
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_charname;
        break;
      }

      // optional string charname = 6;
      case 6: {
        if (tag == 50) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_profession;
        break;
      }

      // optional string profession = 7;
      case 7: {
        if (tag == 58) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "profession");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_power;
        break;
      }

      // optional uint32 power = 8;
      case 8: {
        if (tag == 64) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 9;
      case 9: {
        if (tag == 72) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ext;
        break;
      }

      // optional string ext = 10;
      case 10: {
        if (tag == 82) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ext().data(), this->ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RankRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RankRecordData)
  return false;
#undef DO_
}

void RankRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RankRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 rankid = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rankid(), output);
  }

  // optional string rankname = 3;
  if (has_rankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankname().data(), this->rankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rankname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rankname(), output);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional string charname = 6;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->charname(), output);
  }

  // optional string profession = 7;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "profession");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->profession(), output);
  }

  // optional uint32 power = 8;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->power(), output);
  }

  // optional uint64 ts = 9;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ts(), output);
  }

  // optional string ext = 10;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RankRecordData)
}

::google::protobuf::uint8* RankRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RankRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 rankid = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rankid(), target);
  }

  // optional string rankname = 3;
  if (has_rankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankname().data(), this->rankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rankname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rankname(), target);
  }

  // optional uint64 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional uint64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional string charname = 6;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->charname(), target);
  }

  // optional string profession = 7;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "profession");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->profession(), target);
  }

  // optional uint32 power = 8;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->power(), target);
  }

  // optional uint64 ts = 9;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ts(), target);
  }

  // optional string ext = 10;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ext().data(), this->ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RankRecordData)
  return target;
}

int RankRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 rankid = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rankid());
    }

    // optional string rankname = 3;
    if (has_rankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rankname());
    }

    // optional uint64 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 6;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional string profession = 7;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // optional uint32 power = 8;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 ts = 9;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

    // optional string ext = 10;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankRecordData::MergeFrom(const RankRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rankname()) {
      set_rankname(from.rankname());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_ext()) {
      set_ext(from.ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRecordData::CopyFrom(const RankRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRecordData::IsInitialized() const {

  return true;
}

void RankRecordData::Swap(RankRecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rankid_, other->rankid_);
    std::swap(rankname_, other->rankname_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(profession_, other->profession_);
    std::swap(power_, other->power_);
    std::swap(ts_, other->ts_);
    std::swap(ext_, other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankRecordData_descriptor_;
  metadata.reflection = RankRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRankRecordGmUserPmd_CS::kGameidFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kZoneidFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kRanktypeFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kRanknameFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kDataFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kGmidFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kCurpageFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestRankRecordGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestRankRecordGmUserPmd_CS::RequestRankRecordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestRankRecordGmUserPmd_CS)
}

void RequestRankRecordGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestRankRecordGmUserPmd_CS::RequestRankRecordGmUserPmd_CS(const RequestRankRecordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestRankRecordGmUserPmd_CS)
}

void RequestRankRecordGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  ranktype_ = 0u;
  rankname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRankRecordGmUserPmd_CS::~RequestRankRecordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestRankRecordGmUserPmd_CS)
  SharedDtor();
}

void RequestRankRecordGmUserPmd_CS::SharedDtor() {
  if (rankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rankname_;
  }
  if (this != default_instance_) {
  }
}

void RequestRankRecordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRankRecordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRankRecordGmUserPmd_CS_descriptor_;
}

const RequestRankRecordGmUserPmd_CS& RequestRankRecordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestRankRecordGmUserPmd_CS* RequestRankRecordGmUserPmd_CS::default_instance_ = NULL;

RequestRankRecordGmUserPmd_CS* RequestRankRecordGmUserPmd_CS::New() const {
  return new RequestRankRecordGmUserPmd_CS;
}

void RequestRankRecordGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRankRecordGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(gameid_, zoneid_);
    ZR_(starttime_, endtime_);
    if (has_rankname()) {
      if (rankname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rankname_->clear();
      }
    }
  }
  ZR_(curpage_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRankRecordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestRankRecordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ranktype;
        break;
      }

      // optional uint32 ranktype = 3;
      case 3: {
        if (tag == 24) {
         parse_ranktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rankname;
        break;
      }

      // optional string rankname = 4;
      case 4: {
        if (tag == 34) {
         parse_rankname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rankname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rankname().data(), this->rankname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rankname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 5;
      case 5: {
        if (tag == 40) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 6;
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // repeated .Pmd.RankRecordData data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectTag(64)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 8;
      case 8: {
        if (tag == 64) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 9;
      case 9: {
        if (tag == 72) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 10;
      case 10: {
        if (tag == 80) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 11;
      case 11: {
        if (tag == 88) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestRankRecordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestRankRecordGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestRankRecordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestRankRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 ranktype = 3;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ranktype(), output);
  }

  // optional string rankname = 4;
  if (has_rankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankname().data(), this->rankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rankname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rankname(), output);
  }

  // optional uint64 starttime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->starttime(), output);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->endtime(), output);
  }

  // repeated .Pmd.RankRecordData data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  // optional uint32 gmid = 8;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gmid(), output);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curpage(), output);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxpage(), output);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestRankRecordGmUserPmd_CS)
}

::google::protobuf::uint8* RequestRankRecordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestRankRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 ranktype = 3;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ranktype(), target);
  }

  // optional string rankname = 4;
  if (has_rankname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rankname().data(), this->rankname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rankname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rankname(), target);
  }

  // optional uint64 starttime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->starttime(), target);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->endtime(), target);
  }

  // repeated .Pmd.RankRecordData data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  // optional uint32 gmid = 8;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gmid(), target);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curpage(), target);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxpage(), target);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestRankRecordGmUserPmd_CS)
  return target;
}

int RequestRankRecordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 ranktype = 3;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // optional string rankname = 4;
    if (has_rankname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rankname());
    }

    // optional uint64 starttime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 gmid = 8;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 curpage = 9;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 10;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 11;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.RankRecordData data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRankRecordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRankRecordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRankRecordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRankRecordGmUserPmd_CS::MergeFrom(const RequestRankRecordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_rankname()) {
      set_rankname(from.rankname());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRankRecordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRankRecordGmUserPmd_CS::CopyFrom(const RequestRankRecordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRankRecordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestRankRecordGmUserPmd_CS::Swap(RequestRankRecordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(ranktype_, other->ranktype_);
    std::swap(rankname_, other->rankname_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRankRecordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRankRecordGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestRankRecordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossRecordData::kIdFieldNumber;
const int BossRecordData::kBosstypeFieldNumber;
const int BossRecordData::kBossnameFieldNumber;
const int BossRecordData::kActtypeFieldNumber;
const int BossRecordData::kActcontentFieldNumber;
const int BossRecordData::kCharidFieldNumber;
const int BossRecordData::kCharnameFieldNumber;
const int BossRecordData::kTsFieldNumber;
#endif  // !_MSC_VER

BossRecordData::BossRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.BossRecordData)
}

void BossRecordData::InitAsDefaultInstance() {
}

BossRecordData::BossRecordData(const BossRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.BossRecordData)
}

void BossRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  bosstype_ = 0u;
  bossname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acttype_ = 0u;
  actcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossRecordData::~BossRecordData() {
  // @@protoc_insertion_point(destructor:Pmd.BossRecordData)
  SharedDtor();
}

void BossRecordData::SharedDtor() {
  if (bossname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bossname_;
  }
  if (actcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete actcontent_;
  }
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void BossRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossRecordData_descriptor_;
}

const BossRecordData& BossRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

BossRecordData* BossRecordData::default_instance_ = NULL;

BossRecordData* BossRecordData::New() const {
  return new BossRecordData;
}

void BossRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bosstype_, acttype_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_bossname()) {
      if (bossname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bossname_->clear();
      }
    }
    if (has_actcontent()) {
      if (actcontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        actcontent_->clear();
      }
    }
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    ts_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.BossRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bosstype;
        break;
      }

      // optional uint32 bosstype = 2;
      case 2: {
        if (tag == 16) {
         parse_bosstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosstype_)));
          set_has_bosstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bossname;
        break;
      }

      // optional string bossname = 3;
      case 3: {
        if (tag == 26) {
         parse_bossname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bossname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bossname().data(), this->bossname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bossname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_acttype;
        break;
      }

      // optional uint32 acttype = 4;
      case 4: {
        if (tag == 32) {
         parse_acttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_actcontent;
        break;
      }

      // optional string actcontent = 5;
      case 5: {
        if (tag == 42) {
         parse_actcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actcontent().data(), this->actcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "actcontent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6;
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_charname;
        break;
      }

      // optional string charname = 7;
      case 7: {
        if (tag == 58) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 8;
      case 8: {
        if (tag == 64) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.BossRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.BossRecordData)
  return false;
#undef DO_
}

void BossRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.BossRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 bosstype = 2;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosstype(), output);
  }

  // optional string bossname = 3;
  if (has_bossname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bossname().data(), this->bossname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bossname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bossname(), output);
  }

  // optional uint32 acttype = 4;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->acttype(), output);
  }

  // optional string actcontent = 5;
  if (has_actcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actcontent().data(), this->actcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actcontent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->actcontent(), output);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // optional string charname = 7;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->charname(), output);
  }

  // optional uint64 ts = 8;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.BossRecordData)
}

::google::protobuf::uint8* BossRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.BossRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 bosstype = 2;
  if (has_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosstype(), target);
  }

  // optional string bossname = 3;
  if (has_bossname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bossname().data(), this->bossname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bossname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bossname(), target);
  }

  // optional uint32 acttype = 4;
  if (has_acttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->acttype(), target);
  }

  // optional string actcontent = 5;
  if (has_actcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actcontent().data(), this->actcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actcontent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->actcontent(), target);
  }

  // optional uint64 charid = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // optional string charname = 7;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->charname(), target);
  }

  // optional uint64 ts = 8;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.BossRecordData)
  return target;
}

int BossRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 bosstype = 2;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosstype());
    }

    // optional string bossname = 3;
    if (has_bossname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bossname());
    }

    // optional uint32 acttype = 4;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acttype());
    }

    // optional string actcontent = 5;
    if (has_actcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actcontent());
    }

    // optional uint64 charid = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 7;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint64 ts = 8;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossRecordData::MergeFrom(const BossRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
    if (from.has_bossname()) {
      set_bossname(from.bossname());
    }
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
    if (from.has_actcontent()) {
      set_actcontent(from.actcontent());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossRecordData::CopyFrom(const BossRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossRecordData::IsInitialized() const {

  return true;
}

void BossRecordData::Swap(BossRecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(bossname_, other->bossname_);
    std::swap(acttype_, other->acttype_);
    std::swap(actcontent_, other->actcontent_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossRecordData_descriptor_;
  metadata.reflection = BossRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBossRecordGmUserPmd_CS::kGameidFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kZoneidFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kBosstypeFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kBossnameFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kDataFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kGmidFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kCurpageFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestBossRecordGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestBossRecordGmUserPmd_CS::RequestBossRecordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestBossRecordGmUserPmd_CS)
}

void RequestBossRecordGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestBossRecordGmUserPmd_CS::RequestBossRecordGmUserPmd_CS(const RequestBossRecordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestBossRecordGmUserPmd_CS)
}

void RequestBossRecordGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  bosstype_ = 0u;
  bossname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBossRecordGmUserPmd_CS::~RequestBossRecordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestBossRecordGmUserPmd_CS)
  SharedDtor();
}

void RequestBossRecordGmUserPmd_CS::SharedDtor() {
  if (bossname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bossname_;
  }
  if (this != default_instance_) {
  }
}

void RequestBossRecordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBossRecordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBossRecordGmUserPmd_CS_descriptor_;
}

const RequestBossRecordGmUserPmd_CS& RequestBossRecordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestBossRecordGmUserPmd_CS* RequestBossRecordGmUserPmd_CS::default_instance_ = NULL;

RequestBossRecordGmUserPmd_CS* RequestBossRecordGmUserPmd_CS::New() const {
  return new RequestBossRecordGmUserPmd_CS;
}

void RequestBossRecordGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestBossRecordGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(gameid_, zoneid_);
    ZR_(starttime_, endtime_);
    if (has_bossname()) {
      if (bossname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bossname_->clear();
      }
    }
  }
  ZR_(curpage_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBossRecordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestBossRecordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bosstype;
        break;
      }

      // optional uint32 bosstype = 3;
      case 3: {
        if (tag == 24) {
         parse_bosstype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosstype_)));
          set_has_bosstype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bossname;
        break;
      }

      // optional string bossname = 4;
      case 4: {
        if (tag == 34) {
         parse_bossname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bossname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bossname().data(), this->bossname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bossname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 5;
      case 5: {
        if (tag == 40) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 6;
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // repeated .Pmd.BossRecordData data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectTag(64)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 8;
      case 8: {
        if (tag == 64) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 9;
      case 9: {
        if (tag == 72) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 10;
      case 10: {
        if (tag == 80) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 11;
      case 11: {
        if (tag == 88) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestBossRecordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestBossRecordGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestBossRecordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestBossRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 bosstype = 3;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bosstype(), output);
  }

  // optional string bossname = 4;
  if (has_bossname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bossname().data(), this->bossname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bossname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bossname(), output);
  }

  // optional uint64 starttime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->starttime(), output);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->endtime(), output);
  }

  // repeated .Pmd.BossRecordData data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  // optional uint32 gmid = 8;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gmid(), output);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curpage(), output);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxpage(), output);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestBossRecordGmUserPmd_CS)
}

::google::protobuf::uint8* RequestBossRecordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestBossRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 bosstype = 3;
  if (has_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bosstype(), target);
  }

  // optional string bossname = 4;
  if (has_bossname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bossname().data(), this->bossname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bossname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bossname(), target);
  }

  // optional uint64 starttime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->starttime(), target);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->endtime(), target);
  }

  // repeated .Pmd.BossRecordData data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  // optional uint32 gmid = 8;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gmid(), target);
  }

  // optional uint32 curpage = 9;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curpage(), target);
  }

  // optional uint32 maxpage = 10;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxpage(), target);
  }

  // optional uint32 perpage = 11;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestBossRecordGmUserPmd_CS)
  return target;
}

int RequestBossRecordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 bosstype = 3;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosstype());
    }

    // optional string bossname = 4;
    if (has_bossname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bossname());
    }

    // optional uint64 starttime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 gmid = 8;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 curpage = 9;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 10;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 11;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.BossRecordData data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBossRecordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBossRecordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBossRecordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBossRecordGmUserPmd_CS::MergeFrom(const RequestBossRecordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
    if (from.has_bossname()) {
      set_bossname(from.bossname());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBossRecordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBossRecordGmUserPmd_CS::CopyFrom(const RequestBossRecordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBossRecordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestBossRecordGmUserPmd_CS::Swap(RequestBossRecordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(bossname_, other->bossname_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBossRecordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBossRecordGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestBossRecordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameRecordData::kIdFieldNumber;
const int RenameRecordData::kAccidFieldNumber;
const int RenameRecordData::kCharidFieldNumber;
const int RenameRecordData::kOldnameFieldNumber;
const int RenameRecordData::kNewnameFieldNumber;
const int RenameRecordData::kTsFieldNumber;
#endif  // !_MSC_VER

RenameRecordData::RenameRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RenameRecordData)
}

void RenameRecordData::InitAsDefaultInstance() {
}

RenameRecordData::RenameRecordData(const RenameRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RenameRecordData)
}

void RenameRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameRecordData::~RenameRecordData() {
  // @@protoc_insertion_point(destructor:Pmd.RenameRecordData)
  SharedDtor();
}

void RenameRecordData::SharedDtor() {
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void RenameRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameRecordData_descriptor_;
}

const RenameRecordData& RenameRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RenameRecordData* RenameRecordData::default_instance_ = NULL;

RenameRecordData* RenameRecordData::New() const {
  return new RenameRecordData;
}

void RenameRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RenameRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, charid_);
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldname_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
    ts_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RenameRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_oldname;
        break;
      }

      // optional string oldname = 4;
      case 4: {
        if (tag == 34) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_newname;
        break;
      }

      // optional string newname = 5;
      case 5: {
        if (tag == 42) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ts;
        break;
      }

      // optional uint64 ts = 6;
      case 6: {
        if (tag == 48) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RenameRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RenameRecordData)
  return false;
#undef DO_
}

void RenameRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RenameRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string oldname = 4;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->oldname(), output);
  }

  // optional string newname = 5;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->newname(), output);
  }

  // optional uint64 ts = 6;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RenameRecordData)
}

::google::protobuf::uint8* RenameRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RenameRecordData)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string oldname = 4;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oldname(), target);
  }

  // optional string newname = 5;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newname(), target);
  }

  // optional uint64 ts = 6;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RenameRecordData)
  return target;
}

int RenameRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string oldname = 4;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional string newname = 5;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional uint64 ts = 6;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameRecordData::MergeFrom(const RenameRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameRecordData::CopyFrom(const RenameRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRecordData::IsInitialized() const {

  return true;
}

void RenameRecordData::Swap(RenameRecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameRecordData_descriptor_;
  metadata.reflection = RenameRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRenameRecordGmUserPmd_CS::kGameidFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kZoneidFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kCharidFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kOldnameFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kNewnameFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kStarttimeFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kEndtimeFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kDataFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kGmidFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kCurpageFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kMaxpageFieldNumber;
const int RequestRenameRecordGmUserPmd_CS::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestRenameRecordGmUserPmd_CS::RequestRenameRecordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestRenameRecordGmUserPmd_CS)
}

void RequestRenameRecordGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestRenameRecordGmUserPmd_CS::RequestRenameRecordGmUserPmd_CS(const RequestRenameRecordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestRenameRecordGmUserPmd_CS)
}

void RequestRenameRecordGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRenameRecordGmUserPmd_CS::~RequestRenameRecordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestRenameRecordGmUserPmd_CS)
  SharedDtor();
}

void RequestRenameRecordGmUserPmd_CS::SharedDtor() {
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void RequestRenameRecordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRenameRecordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRenameRecordGmUserPmd_CS_descriptor_;
}

const RequestRenameRecordGmUserPmd_CS& RequestRenameRecordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestRenameRecordGmUserPmd_CS* RequestRenameRecordGmUserPmd_CS::default_instance_ = NULL;

RequestRenameRecordGmUserPmd_CS* RequestRenameRecordGmUserPmd_CS::New() const {
  return new RequestRenameRecordGmUserPmd_CS;
}

void RequestRenameRecordGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestRenameRecordGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gameid_, charid_);
    ZR_(starttime_, endtime_);
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldname_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
  }
  ZR_(gmid_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRenameRecordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestRenameRecordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_oldname;
        break;
      }

      // optional string oldname = 4;
      case 4: {
        if (tag == 34) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_newname;
        break;
      }

      // optional string newname = 5;
      case 5: {
        if (tag == 42) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 6;
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 7;
      case 7: {
        if (tag == 56) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // repeated .Pmd.RenameRecordData data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        if (input->ExpectTag(72)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 9;
      case 9: {
        if (tag == 72) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 10;
      case 10: {
        if (tag == 80) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 11;
      case 11: {
        if (tag == 88) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 12;
      case 12: {
        if (tag == 96) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestRenameRecordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestRenameRecordGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestRenameRecordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestRenameRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string oldname = 4;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->oldname(), output);
  }

  // optional string newname = 5;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->newname(), output);
  }

  // optional uint64 starttime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->starttime(), output);
  }

  // optional uint64 endtime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->endtime(), output);
  }

  // repeated .Pmd.RenameRecordData data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }

  // optional uint32 gmid = 9;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gmid(), output);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curpage(), output);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maxpage(), output);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestRenameRecordGmUserPmd_CS)
}

::google::protobuf::uint8* RequestRenameRecordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestRenameRecordGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string oldname = 4;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oldname(), target);
  }

  // optional string newname = 5;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newname(), target);
  }

  // optional uint64 starttime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->starttime(), target);
  }

  // optional uint64 endtime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->endtime(), target);
  }

  // repeated .Pmd.RenameRecordData data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(i), target);
  }

  // optional uint32 gmid = 9;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gmid(), target);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curpage(), target);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->maxpage(), target);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestRenameRecordGmUserPmd_CS)
  return target;
}

int RequestRenameRecordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string oldname = 4;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional string newname = 5;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional uint64 starttime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 gmid = 9;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 10;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 11;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 12;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.RenameRecordData data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRenameRecordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRenameRecordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRenameRecordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRenameRecordGmUserPmd_CS::MergeFrom(const RequestRenameRecordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRenameRecordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRenameRecordGmUserPmd_CS::CopyFrom(const RequestRenameRecordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRenameRecordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestRenameRecordGmUserPmd_CS::Swap(RequestRenameRecordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRenameRecordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRenameRecordGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestRenameRecordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartUpGameRequestGmPmd_C::kKeyFieldNumber;
const int StartUpGameRequestGmPmd_C::kVersionFieldNumber;
const int StartUpGameRequestGmPmd_C::kCompressFieldNumber;
const int StartUpGameRequestGmPmd_C::kEncryptFieldNumber;
const int StartUpGameRequestGmPmd_C::kEncryptkeyFieldNumber;
#endif  // !_MSC_VER

StartUpGameRequestGmPmd_C::StartUpGameRequestGmPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StartUpGameRequestGmPmd_C)
}

void StartUpGameRequestGmPmd_C::InitAsDefaultInstance() {
}

StartUpGameRequestGmPmd_C::StartUpGameRequestGmPmd_C(const StartUpGameRequestGmPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StartUpGameRequestGmPmd_C)
}

void StartUpGameRequestGmPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartUpGameRequestGmPmd_C::~StartUpGameRequestGmPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.StartUpGameRequestGmPmd_C)
  SharedDtor();
}

void StartUpGameRequestGmPmd_C::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void StartUpGameRequestGmPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartUpGameRequestGmPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartUpGameRequestGmPmd_C_descriptor_;
}

const StartUpGameRequestGmPmd_C& StartUpGameRequestGmPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

StartUpGameRequestGmPmd_C* StartUpGameRequestGmPmd_C::default_instance_ = NULL;

StartUpGameRequestGmPmd_C* StartUpGameRequestGmPmd_C::New() const {
  return new StartUpGameRequestGmPmd_C;
}

void StartUpGameRequestGmPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    version_ = 0u;
    if (has_compress()) {
      if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compress_->clear();
      }
    }
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypt_->clear();
      }
    }
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encryptkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartUpGameRequestGmPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StartUpGameRequestGmPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compress;
        break;
      }

      // optional string compress = 3;
      case 3: {
        if (tag == 26) {
         parse_compress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compress().data(), this->compress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 4;
      case 4: {
        if (tag == 34) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encrypt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_encryptkey;
        break;
      }

      // optional string encryptkey = 5;
      case 5: {
        if (tag == 42) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encryptkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StartUpGameRequestGmPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StartUpGameRequestGmPmd_C)
  return false;
#undef DO_
}

void StartUpGameRequestGmPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StartUpGameRequestGmPmd_C)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string compress = 3;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->compress(), output);
  }

  // optional string encrypt = 4;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->encrypt(), output);
  }

  // optional string encryptkey = 5;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StartUpGameRequestGmPmd_C)
}

::google::protobuf::uint8* StartUpGameRequestGmPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StartUpGameRequestGmPmd_C)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional string compress = 3;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->compress(), target);
  }

  // optional string encrypt = 4;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->encrypt(), target);
  }

  // optional string encryptkey = 5;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StartUpGameRequestGmPmd_C)
  return target;
}

int StartUpGameRequestGmPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string compress = 3;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compress());
    }

    // optional string encrypt = 4;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

    // optional string encryptkey = 5;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartUpGameRequestGmPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartUpGameRequestGmPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartUpGameRequestGmPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartUpGameRequestGmPmd_C::MergeFrom(const StartUpGameRequestGmPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_compress()) {
      set_compress(from.compress());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartUpGameRequestGmPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartUpGameRequestGmPmd_C::CopyFrom(const StartUpGameRequestGmPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpGameRequestGmPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartUpGameRequestGmPmd_C::Swap(StartUpGameRequestGmPmd_C* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(version_, other->version_);
    std::swap(compress_, other->compress_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartUpGameRequestGmPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartUpGameRequestGmPmd_C_descriptor_;
  metadata.reflection = StartUpGameRequestGmPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartUpGameReturnGmPmd_S::kRetFieldNumber;
const int StartUpGameReturnGmPmd_S::kRetdescFieldNumber;
#endif  // !_MSC_VER

StartUpGameReturnGmPmd_S::StartUpGameReturnGmPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StartUpGameReturnGmPmd_S)
}

void StartUpGameReturnGmPmd_S::InitAsDefaultInstance() {
}

StartUpGameReturnGmPmd_S::StartUpGameReturnGmPmd_S(const StartUpGameReturnGmPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StartUpGameReturnGmPmd_S)
}

void StartUpGameReturnGmPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = false;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartUpGameReturnGmPmd_S::~StartUpGameReturnGmPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StartUpGameReturnGmPmd_S)
  SharedDtor();
}

void StartUpGameReturnGmPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void StartUpGameReturnGmPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartUpGameReturnGmPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartUpGameReturnGmPmd_S_descriptor_;
}

const StartUpGameReturnGmPmd_S& StartUpGameReturnGmPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

StartUpGameReturnGmPmd_S* StartUpGameReturnGmPmd_S::default_instance_ = NULL;

StartUpGameReturnGmPmd_S* StartUpGameReturnGmPmd_S::New() const {
  return new StartUpGameReturnGmPmd_S;
}

void StartUpGameReturnGmPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ret_ = false;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartUpGameReturnGmPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StartUpGameReturnGmPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StartUpGameReturnGmPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StartUpGameReturnGmPmd_S)
  return false;
#undef DO_
}

void StartUpGameReturnGmPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StartUpGameReturnGmPmd_S)
  // required bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StartUpGameReturnGmPmd_S)
}

::google::protobuf::uint8* StartUpGameReturnGmPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StartUpGameReturnGmPmd_S)
  // required bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StartUpGameReturnGmPmd_S)
  return target;
}

int StartUpGameReturnGmPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartUpGameReturnGmPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartUpGameReturnGmPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartUpGameReturnGmPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartUpGameReturnGmPmd_S::MergeFrom(const StartUpGameReturnGmPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartUpGameReturnGmPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartUpGameReturnGmPmd_S::CopyFrom(const StartUpGameReturnGmPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpGameReturnGmPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartUpGameReturnGmPmd_S::Swap(StartUpGameReturnGmPmd_S* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartUpGameReturnGmPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartUpGameReturnGmPmd_S_descriptor_;
  metadata.reflection = StartUpGameReturnGmPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SurportGameZoneRequestGmPmd_C::SurportGameZoneRequestGmPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.SurportGameZoneRequestGmPmd_C)
}

void SurportGameZoneRequestGmPmd_C::InitAsDefaultInstance() {
}

SurportGameZoneRequestGmPmd_C::SurportGameZoneRequestGmPmd_C(const SurportGameZoneRequestGmPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.SurportGameZoneRequestGmPmd_C)
}

void SurportGameZoneRequestGmPmd_C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurportGameZoneRequestGmPmd_C::~SurportGameZoneRequestGmPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.SurportGameZoneRequestGmPmd_C)
  SharedDtor();
}

void SurportGameZoneRequestGmPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SurportGameZoneRequestGmPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurportGameZoneRequestGmPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurportGameZoneRequestGmPmd_C_descriptor_;
}

const SurportGameZoneRequestGmPmd_C& SurportGameZoneRequestGmPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

SurportGameZoneRequestGmPmd_C* SurportGameZoneRequestGmPmd_C::default_instance_ = NULL;

SurportGameZoneRequestGmPmd_C* SurportGameZoneRequestGmPmd_C::New() const {
  return new SurportGameZoneRequestGmPmd_C;
}

void SurportGameZoneRequestGmPmd_C::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurportGameZoneRequestGmPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.SurportGameZoneRequestGmPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.SurportGameZoneRequestGmPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.SurportGameZoneRequestGmPmd_C)
  return false;
#undef DO_
}

void SurportGameZoneRequestGmPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.SurportGameZoneRequestGmPmd_C)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.SurportGameZoneRequestGmPmd_C)
}

::google::protobuf::uint8* SurportGameZoneRequestGmPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.SurportGameZoneRequestGmPmd_C)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.SurportGameZoneRequestGmPmd_C)
  return target;
}

int SurportGameZoneRequestGmPmd_C::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurportGameZoneRequestGmPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurportGameZoneRequestGmPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurportGameZoneRequestGmPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurportGameZoneRequestGmPmd_C::MergeFrom(const SurportGameZoneRequestGmPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurportGameZoneRequestGmPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurportGameZoneRequestGmPmd_C::CopyFrom(const SurportGameZoneRequestGmPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurportGameZoneRequestGmPmd_C::IsInitialized() const {

  return true;
}

void SurportGameZoneRequestGmPmd_C::Swap(SurportGameZoneRequestGmPmd_C* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurportGameZoneRequestGmPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurportGameZoneRequestGmPmd_C_descriptor_;
  metadata.reflection = SurportGameZoneRequestGmPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SurportGameZoneReturnGmPmd_S::SurportGameZoneReturnGmPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.SurportGameZoneReturnGmPmd_S)
}

void SurportGameZoneReturnGmPmd_S::InitAsDefaultInstance() {
}

SurportGameZoneReturnGmPmd_S::SurportGameZoneReturnGmPmd_S(const SurportGameZoneReturnGmPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.SurportGameZoneReturnGmPmd_S)
}

void SurportGameZoneReturnGmPmd_S::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurportGameZoneReturnGmPmd_S::~SurportGameZoneReturnGmPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.SurportGameZoneReturnGmPmd_S)
  SharedDtor();
}

void SurportGameZoneReturnGmPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SurportGameZoneReturnGmPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurportGameZoneReturnGmPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurportGameZoneReturnGmPmd_S_descriptor_;
}

const SurportGameZoneReturnGmPmd_S& SurportGameZoneReturnGmPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

SurportGameZoneReturnGmPmd_S* SurportGameZoneReturnGmPmd_S::default_instance_ = NULL;

SurportGameZoneReturnGmPmd_S* SurportGameZoneReturnGmPmd_S::New() const {
  return new SurportGameZoneReturnGmPmd_S;
}

void SurportGameZoneReturnGmPmd_S::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurportGameZoneReturnGmPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.SurportGameZoneReturnGmPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.SurportGameZoneReturnGmPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.SurportGameZoneReturnGmPmd_S)
  return false;
#undef DO_
}

void SurportGameZoneReturnGmPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.SurportGameZoneReturnGmPmd_S)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.SurportGameZoneReturnGmPmd_S)
}

::google::protobuf::uint8* SurportGameZoneReturnGmPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.SurportGameZoneReturnGmPmd_S)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.SurportGameZoneReturnGmPmd_S)
  return target;
}

int SurportGameZoneReturnGmPmd_S::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurportGameZoneReturnGmPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurportGameZoneReturnGmPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurportGameZoneReturnGmPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurportGameZoneReturnGmPmd_S::MergeFrom(const SurportGameZoneReturnGmPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurportGameZoneReturnGmPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurportGameZoneReturnGmPmd_S::CopyFrom(const SurportGameZoneReturnGmPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurportGameZoneReturnGmPmd_S::IsInitialized() const {

  return true;
}

void SurportGameZoneReturnGmPmd_S::Swap(SurportGameZoneReturnGmPmd_S* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurportGameZoneReturnGmPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurportGameZoneReturnGmPmd_S_descriptor_;
  metadata.reflection = SurportGameZoneReturnGmPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectKickoutGmSmd_S::kDescFieldNumber;
#endif  // !_MSC_VER

ReconnectKickoutGmSmd_S::ReconnectKickoutGmSmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReconnectKickoutGmSmd_S)
}

void ReconnectKickoutGmSmd_S::InitAsDefaultInstance() {
}

ReconnectKickoutGmSmd_S::ReconnectKickoutGmSmd_S(const ReconnectKickoutGmSmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReconnectKickoutGmSmd_S)
}

void ReconnectKickoutGmSmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectKickoutGmSmd_S::~ReconnectKickoutGmSmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReconnectKickoutGmSmd_S)
  SharedDtor();
}

void ReconnectKickoutGmSmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void ReconnectKickoutGmSmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectKickoutGmSmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectKickoutGmSmd_S_descriptor_;
}

const ReconnectKickoutGmSmd_S& ReconnectKickoutGmSmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReconnectKickoutGmSmd_S* ReconnectKickoutGmSmd_S::default_instance_ = NULL;

ReconnectKickoutGmSmd_S* ReconnectKickoutGmSmd_S::New() const {
  return new ReconnectKickoutGmSmd_S;
}

void ReconnectKickoutGmSmd_S::Clear() {
  if (has_desc()) {
    if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      desc_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectKickoutGmSmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReconnectKickoutGmSmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReconnectKickoutGmSmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReconnectKickoutGmSmd_S)
  return false;
#undef DO_
}

void ReconnectKickoutGmSmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReconnectKickoutGmSmd_S)
  // optional string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReconnectKickoutGmSmd_S)
}

::google::protobuf::uint8* ReconnectKickoutGmSmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReconnectKickoutGmSmd_S)
  // optional string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReconnectKickoutGmSmd_S)
  return target;
}

int ReconnectKickoutGmSmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string desc = 1;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectKickoutGmSmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectKickoutGmSmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectKickoutGmSmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectKickoutGmSmd_S::MergeFrom(const ReconnectKickoutGmSmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectKickoutGmSmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectKickoutGmSmd_S::CopyFrom(const ReconnectKickoutGmSmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectKickoutGmSmd_S::IsInitialized() const {

  return true;
}

void ReconnectKickoutGmSmd_S::Swap(ReconnectKickoutGmSmd_S* other) {
  if (other != this) {
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectKickoutGmSmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectKickoutGmSmd_S_descriptor_;
  metadata.reflection = ReconnectKickoutGmSmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GmUserInfo::kGmidFieldNumber;
const int GmUserInfo::kNameFieldNumber;
const int GmUserInfo::kPasswordFieldNumber;
const int GmUserInfo::kPriFieldNumber;
const int GmUserInfo::kQmaxnumFieldNumber;
const int GmUserInfo::kAutorecvFieldNumber;
const int GmUserInfo::kWorkstateFieldNumber;
const int GmUserInfo::kWinnumFieldNumber;
const int GmUserInfo::kGameidFieldNumber;
const int GmUserInfo::kZoneidFieldNumber;
const int GmUserInfo::kBindipFieldNumber;
const int GmUserInfo::kConfigFieldNumber;
#endif  // !_MSC_VER

GmUserInfo::GmUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GmUserInfo)
}

void GmUserInfo::InitAsDefaultInstance() {
}

GmUserInfo::GmUserInfo(const GmUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GmUserInfo)
}

void GmUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pri_ = GOOGLE_ULONGLONG(0);
  qmaxnum_ = 0u;
  autorecv_ = 0u;
  workstate_ = 0u;
  winnum_ = 0u;
  gameid_ = 0u;
  zoneid_ = 0u;
  bindip_ = 0u;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GmUserInfo::~GmUserInfo() {
  // @@protoc_insertion_point(destructor:Pmd.GmUserInfo)
  SharedDtor();
}

void GmUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void GmUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GmUserInfo_descriptor_;
}

const GmUserInfo& GmUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

GmUserInfo* GmUserInfo::default_instance_ = NULL;

GmUserInfo* GmUserInfo::New() const {
  return new GmUserInfo;
}

void GmUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GmUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gmid_, winnum_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(gameid_, bindip_);
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        config_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GmUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GmUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pri;
        break;
      }

      // optional uint64 pri = 4;
      case 4: {
        if (tag == 32) {
         parse_pri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pri_)));
          set_has_pri();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_qmaxnum;
        break;
      }

      // optional uint32 qmaxnum = 5;
      case 5: {
        if (tag == 40) {
         parse_qmaxnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qmaxnum_)));
          set_has_qmaxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_autorecv;
        break;
      }

      // optional uint32 autorecv = 6;
      case 6: {
        if (tag == 48) {
         parse_autorecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autorecv_)));
          set_has_autorecv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_workstate;
        break;
      }

      // optional uint32 workstate = 7;
      case 7: {
        if (tag == 56) {
         parse_workstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workstate_)));
          set_has_workstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_winnum;
        break;
      }

      // optional uint32 winnum = 8;
      case 8: {
        if (tag == 64) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 9;
      case 9: {
        if (tag == 72) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 10;
      case 10: {
        if (tag == 80) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bindip;
        break;
      }

      // optional uint32 bindip = 11;
      case 11: {
        if (tag == 88) {
         parse_bindip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bindip_)));
          set_has_bindip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_config;
        break;
      }

      // optional string config = 12;
      case 12: {
        if (tag == 98) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GmUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GmUserInfo)
  return false;
#undef DO_
}

void GmUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GmUserInfo)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional uint64 pri = 4;
  if (has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pri(), output);
  }

  // optional uint32 qmaxnum = 5;
  if (has_qmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->qmaxnum(), output);
  }

  // optional uint32 autorecv = 6;
  if (has_autorecv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->autorecv(), output);
  }

  // optional uint32 workstate = 7;
  if (has_workstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->workstate(), output);
  }

  // optional uint32 winnum = 8;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->winnum(), output);
  }

  // optional uint32 gameid = 9;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gameid(), output);
  }

  // optional uint32 zoneid = 10;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->zoneid(), output);
  }

  // optional uint32 bindip = 11;
  if (has_bindip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bindip(), output);
  }

  // optional string config = 12;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GmUserInfo)
}

::google::protobuf::uint8* GmUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GmUserInfo)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional uint64 pri = 4;
  if (has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pri(), target);
  }

  // optional uint32 qmaxnum = 5;
  if (has_qmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->qmaxnum(), target);
  }

  // optional uint32 autorecv = 6;
  if (has_autorecv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->autorecv(), target);
  }

  // optional uint32 workstate = 7;
  if (has_workstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->workstate(), target);
  }

  // optional uint32 winnum = 8;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->winnum(), target);
  }

  // optional uint32 gameid = 9;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gameid(), target);
  }

  // optional uint32 zoneid = 10;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->zoneid(), target);
  }

  // optional uint32 bindip = 11;
  if (has_bindip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bindip(), target);
  }

  // optional string config = 12;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GmUserInfo)
  return target;
}

int GmUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint64 pri = 4;
    if (has_pri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pri());
    }

    // optional uint32 qmaxnum = 5;
    if (has_qmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qmaxnum());
    }

    // optional uint32 autorecv = 6;
    if (has_autorecv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autorecv());
    }

    // optional uint32 workstate = 7;
    if (has_workstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workstate());
    }

    // optional uint32 winnum = 8;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 gameid = 9;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 10;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 bindip = 11;
    if (has_bindip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bindip());
    }

    // optional string config = 12;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GmUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GmUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GmUserInfo::MergeFrom(const GmUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_pri()) {
      set_pri(from.pri());
    }
    if (from.has_qmaxnum()) {
      set_qmaxnum(from.qmaxnum());
    }
    if (from.has_autorecv()) {
      set_autorecv(from.autorecv());
    }
    if (from.has_workstate()) {
      set_workstate(from.workstate());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_bindip()) {
      set_bindip(from.bindip());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GmUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmUserInfo::CopyFrom(const GmUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmUserInfo::IsInitialized() const {

  return true;
}

void GmUserInfo::Swap(GmUserInfo* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(pri_, other->pri_);
    std::swap(qmaxnum_, other->qmaxnum_);
    std::swap(autorecv_, other->autorecv_);
    std::swap(workstate_, other->workstate_);
    std::swap(winnum_, other->winnum_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(bindip_, other->bindip_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GmUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GmUserInfo_descriptor_;
  metadata.reflection = GmUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLoginGmUserPmd_C::kKeyFieldNumber;
const int RequestLoginGmUserPmd_C::kVersionFieldNumber;
const int RequestLoginGmUserPmd_C::kCompressFieldNumber;
const int RequestLoginGmUserPmd_C::kEncryptFieldNumber;
const int RequestLoginGmUserPmd_C::kEncryptkeyFieldNumber;
const int RequestLoginGmUserPmd_C::kUsernameFieldNumber;
const int RequestLoginGmUserPmd_C::kPasswordFieldNumber;
const int RequestLoginGmUserPmd_C::kLogintypeFieldNumber;
const int RequestLoginGmUserPmd_C::kLoginipFieldNumber;
#endif  // !_MSC_VER

RequestLoginGmUserPmd_C::RequestLoginGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestLoginGmUserPmd_C)
}

void RequestLoginGmUserPmd_C::InitAsDefaultInstance() {
}

RequestLoginGmUserPmd_C::RequestLoginGmUserPmd_C(const RequestLoginGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestLoginGmUserPmd_C)
}

void RequestLoginGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logintype_ = 0u;
  loginip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLoginGmUserPmd_C::~RequestLoginGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestLoginGmUserPmd_C)
  SharedDtor();
}

void RequestLoginGmUserPmd_C::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void RequestLoginGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLoginGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestLoginGmUserPmd_C_descriptor_;
}

const RequestLoginGmUserPmd_C& RequestLoginGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestLoginGmUserPmd_C* RequestLoginGmUserPmd_C::default_instance_ = NULL;

RequestLoginGmUserPmd_C* RequestLoginGmUserPmd_C::New() const {
  return new RequestLoginGmUserPmd_C;
}

void RequestLoginGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestLoginGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(version_, logintype_);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_compress()) {
      if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compress_->clear();
      }
    }
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypt_->clear();
      }
    }
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encryptkey_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  loginip_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestLoginGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestLoginGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compress;
        break;
      }

      // optional string compress = 3;
      case 3: {
        if (tag == 26) {
         parse_compress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compress().data(), this->compress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 4;
      case 4: {
        if (tag == 34) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encrypt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_encryptkey;
        break;
      }

      // optional string encryptkey = 5;
      case 5: {
        if (tag == 42) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encryptkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_username;
        break;
      }

      // required string username = 6;
      case 6: {
        if (tag == 50) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_password;
        break;
      }

      // required string password = 7;
      case 7: {
        if (tag == 58) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_logintype;
        break;
      }

      // optional uint32 logintype = 8;
      case 8: {
        if (tag == 64) {
         parse_logintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_loginip;
        break;
      }

      // optional uint32 loginip = 9;
      case 9: {
        if (tag == 72) {
         parse_loginip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loginip_)));
          set_has_loginip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestLoginGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestLoginGmUserPmd_C)
  return false;
#undef DO_
}

void RequestLoginGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestLoginGmUserPmd_C)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string compress = 3;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->compress(), output);
  }

  // optional string encrypt = 4;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->encrypt(), output);
  }

  // optional string encryptkey = 5;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->encryptkey(), output);
  }

  // required string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username(), output);
  }

  // required string password = 7;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password(), output);
  }

  // optional uint32 logintype = 8;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->logintype(), output);
  }

  // optional uint32 loginip = 9;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->loginip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestLoginGmUserPmd_C)
}

::google::protobuf::uint8* RequestLoginGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestLoginGmUserPmd_C)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional string compress = 3;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->compress(), target);
  }

  // optional string encrypt = 4;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->encrypt(), target);
  }

  // optional string encryptkey = 5;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->encryptkey(), target);
  }

  // required string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  // required string password = 7;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password(), target);
  }

  // optional uint32 logintype = 8;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->logintype(), target);
  }

  // optional uint32 loginip = 9;
  if (has_loginip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->loginip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestLoginGmUserPmd_C)
  return target;
}

int RequestLoginGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string compress = 3;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compress());
    }

    // optional string encrypt = 4;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

    // optional string encryptkey = 5;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

    // required string username = 6;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 7;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 logintype = 8;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 loginip = 9;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loginip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLoginGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestLoginGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestLoginGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestLoginGmUserPmd_C::MergeFrom(const RequestLoginGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_compress()) {
      set_compress(from.compress());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loginip()) {
      set_loginip(from.loginip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestLoginGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLoginGmUserPmd_C::CopyFrom(const RequestLoginGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLoginGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000063) != 0x00000063) return false;

  return true;
}

void RequestLoginGmUserPmd_C::Swap(RequestLoginGmUserPmd_C* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(version_, other->version_);
    std::swap(compress_, other->compress_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(logintype_, other->logintype_);
    std::swap(loginip_, other->loginip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestLoginGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestLoginGmUserPmd_C_descriptor_;
  metadata.reflection = RequestLoginGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnLoginGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnLoginGmUserPmd_S::kDataFieldNumber;
const int ReturnLoginGmUserPmd_S::kZoneinfoFieldNumber;
#endif  // !_MSC_VER

ReturnLoginGmUserPmd_S::ReturnLoginGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnLoginGmUserPmd_S)
}

void ReturnLoginGmUserPmd_S::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::GmUserInfo*>(&::Pmd::GmUserInfo::default_instance());
}

ReturnLoginGmUserPmd_S::ReturnLoginGmUserPmd_S(const ReturnLoginGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnLoginGmUserPmd_S)
}

void ReturnLoginGmUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnLoginGmUserPmd_S::~ReturnLoginGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnLoginGmUserPmd_S)
  SharedDtor();
}

void ReturnLoginGmUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ReturnLoginGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnLoginGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnLoginGmUserPmd_S_descriptor_;
}

const ReturnLoginGmUserPmd_S& ReturnLoginGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnLoginGmUserPmd_S* ReturnLoginGmUserPmd_S::default_instance_ = NULL;

ReturnLoginGmUserPmd_S* ReturnLoginGmUserPmd_S::New() const {
  return new ReturnLoginGmUserPmd_S;
}

void ReturnLoginGmUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::GmUserInfo::Clear();
    }
  }
  zoneinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnLoginGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnLoginGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .Pmd.GmUserInfo data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zoneinfo;
        break;
      }

      // repeated .Pmd.GameZoneInfo zoneinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_zoneinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zoneinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zoneinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnLoginGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnLoginGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnLoginGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnLoginGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional .Pmd.GmUserInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // repeated .Pmd.GameZoneInfo zoneinfo = 3;
  for (int i = 0; i < this->zoneinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zoneinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnLoginGmUserPmd_S)
}

::google::protobuf::uint8* ReturnLoginGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnLoginGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional .Pmd.GmUserInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // repeated .Pmd.GameZoneInfo zoneinfo = 3;
  for (int i = 0; i < this->zoneinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zoneinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnLoginGmUserPmd_S)
  return target;
}

int ReturnLoginGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional .Pmd.GmUserInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  // repeated .Pmd.GameZoneInfo zoneinfo = 3;
  total_size += 1 * this->zoneinfo_size();
  for (int i = 0; i < this->zoneinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zoneinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnLoginGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnLoginGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnLoginGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnLoginGmUserPmd_S::MergeFrom(const ReturnLoginGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  zoneinfo_.MergeFrom(from.zoneinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_data()) {
      mutable_data()->::Pmd::GmUserInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnLoginGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnLoginGmUserPmd_S::CopyFrom(const ReturnLoginGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnLoginGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnLoginGmUserPmd_S::Swap(ReturnLoginGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(data_, other->data_);
    zoneinfo_.Swap(&other->zoneinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnLoginGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnLoginGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnLoginGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPasswordGmUserPmd_CS::kOldpasswordFieldNumber;
const int SetPasswordGmUserPmd_CS::kNewpasswordFieldNumber;
const int SetPasswordGmUserPmd_CS::kRetcodeFieldNumber;
const int SetPasswordGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

SetPasswordGmUserPmd_CS::SetPasswordGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.SetPasswordGmUserPmd_CS)
}

void SetPasswordGmUserPmd_CS::InitAsDefaultInstance() {
}

SetPasswordGmUserPmd_CS::SetPasswordGmUserPmd_CS(const SetPasswordGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.SetPasswordGmUserPmd_CS)
}

void SetPasswordGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  oldpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPasswordGmUserPmd_CS::~SetPasswordGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.SetPasswordGmUserPmd_CS)
  SharedDtor();
}

void SetPasswordGmUserPmd_CS::SharedDtor() {
  if (oldpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldpassword_;
  }
  if (newpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newpassword_;
  }
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void SetPasswordGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPasswordGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPasswordGmUserPmd_CS_descriptor_;
}

const SetPasswordGmUserPmd_CS& SetPasswordGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

SetPasswordGmUserPmd_CS* SetPasswordGmUserPmd_CS::default_instance_ = NULL;

SetPasswordGmUserPmd_CS* SetPasswordGmUserPmd_CS::New() const {
  return new SetPasswordGmUserPmd_CS;
}

void SetPasswordGmUserPmd_CS::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_oldpassword()) {
      if (oldpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldpassword_->clear();
      }
    }
    if (has_newpassword()) {
      if (newpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newpassword_->clear();
      }
    }
    retcode_ = 0u;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPasswordGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.SetPasswordGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string oldpassword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldpassword().data(), this->oldpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldpassword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newpassword;
        break;
      }

      // required string newpassword = 2;
      case 2: {
        if (tag == 18) {
         parse_newpassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newpassword().data(), this->newpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newpassword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 3;
      case 3: {
        if (tag == 24) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 4;
      case 4: {
        if (tag == 34) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.SetPasswordGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.SetPasswordGmUserPmd_CS)
  return false;
#undef DO_
}

void SetPasswordGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.SetPasswordGmUserPmd_CS)
  // required string oldpassword = 1;
  if (has_oldpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldpassword().data(), this->oldpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldpassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->oldpassword(), output);
  }

  // required string newpassword = 2;
  if (has_newpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newpassword().data(), this->newpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newpassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newpassword(), output);
  }

  // optional uint32 retcode = 3;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retcode(), output);
  }

  // optional string retdesc = 4;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.SetPasswordGmUserPmd_CS)
}

::google::protobuf::uint8* SetPasswordGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.SetPasswordGmUserPmd_CS)
  // required string oldpassword = 1;
  if (has_oldpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldpassword().data(), this->oldpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldpassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->oldpassword(), target);
  }

  // required string newpassword = 2;
  if (has_newpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newpassword().data(), this->newpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newpassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newpassword(), target);
  }

  // optional uint32 retcode = 3;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retcode(), target);
  }

  // optional string retdesc = 4;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.SetPasswordGmUserPmd_CS)
  return target;
}

int SetPasswordGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string oldpassword = 1;
    if (has_oldpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldpassword());
    }

    // required string newpassword = 2;
    if (has_newpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpassword());
    }

    // optional uint32 retcode = 3;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 4;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPasswordGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPasswordGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPasswordGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPasswordGmUserPmd_CS::MergeFrom(const SetPasswordGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldpassword()) {
      set_oldpassword(from.oldpassword());
    }
    if (from.has_newpassword()) {
      set_newpassword(from.newpassword());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPasswordGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPasswordGmUserPmd_CS::CopyFrom(const SetPasswordGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPasswordGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetPasswordGmUserPmd_CS::Swap(SetPasswordGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(oldpassword_, other->oldpassword_);
    std::swap(newpassword_, other->newpassword_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPasswordGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPasswordGmUserPmd_CS_descriptor_;
  metadata.reflection = SetPasswordGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNewGmUserPmd_CS::kDataFieldNumber;
const int AddNewGmUserPmd_CS::kRetcodeFieldNumber;
const int AddNewGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

AddNewGmUserPmd_CS::AddNewGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.AddNewGmUserPmd_CS)
}

void AddNewGmUserPmd_CS::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::GmUserInfo*>(&::Pmd::GmUserInfo::default_instance());
}

AddNewGmUserPmd_CS::AddNewGmUserPmd_CS(const AddNewGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.AddNewGmUserPmd_CS)
}

void AddNewGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = NULL;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNewGmUserPmd_CS::~AddNewGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.AddNewGmUserPmd_CS)
  SharedDtor();
}

void AddNewGmUserPmd_CS::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void AddNewGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNewGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNewGmUserPmd_CS_descriptor_;
}

const AddNewGmUserPmd_CS& AddNewGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

AddNewGmUserPmd_CS* AddNewGmUserPmd_CS::default_instance_ = NULL;

AddNewGmUserPmd_CS* AddNewGmUserPmd_CS::New() const {
  return new AddNewGmUserPmd_CS;
}

void AddNewGmUserPmd_CS::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::GmUserInfo::Clear();
    }
    retcode_ = 0u;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNewGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.AddNewGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.GmUserInfo data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 2;
      case 2: {
        if (tag == 16) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 3;
      case 3: {
        if (tag == 26) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.AddNewGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.AddNewGmUserPmd_CS)
  return false;
#undef DO_
}

void AddNewGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.AddNewGmUserPmd_CS)
  // required .Pmd.GmUserInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional uint32 retcode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->retcode(), output);
  }

  // optional string retdesc = 3;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.AddNewGmUserPmd_CS)
}

::google::protobuf::uint8* AddNewGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.AddNewGmUserPmd_CS)
  // required .Pmd.GmUserInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional uint32 retcode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->retcode(), target);
  }

  // optional string retdesc = 3;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.AddNewGmUserPmd_CS)
  return target;
}

int AddNewGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.GmUserInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 retcode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 3;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNewGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNewGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNewGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNewGmUserPmd_CS::MergeFrom(const AddNewGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::GmUserInfo::MergeFrom(from.data());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNewGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewGmUserPmd_CS::CopyFrom(const AddNewGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddNewGmUserPmd_CS::Swap(AddNewGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNewGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNewGmUserPmd_CS_descriptor_;
  metadata.reflection = AddNewGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GmAccountListGmUserPmd_CS::kDataFieldNumber;
#endif  // !_MSC_VER

GmAccountListGmUserPmd_CS::GmAccountListGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GmAccountListGmUserPmd_CS)
}

void GmAccountListGmUserPmd_CS::InitAsDefaultInstance() {
}

GmAccountListGmUserPmd_CS::GmAccountListGmUserPmd_CS(const GmAccountListGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GmAccountListGmUserPmd_CS)
}

void GmAccountListGmUserPmd_CS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GmAccountListGmUserPmd_CS::~GmAccountListGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.GmAccountListGmUserPmd_CS)
  SharedDtor();
}

void GmAccountListGmUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GmAccountListGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmAccountListGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GmAccountListGmUserPmd_CS_descriptor_;
}

const GmAccountListGmUserPmd_CS& GmAccountListGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

GmAccountListGmUserPmd_CS* GmAccountListGmUserPmd_CS::default_instance_ = NULL;

GmAccountListGmUserPmd_CS* GmAccountListGmUserPmd_CS::New() const {
  return new GmAccountListGmUserPmd_CS;
}

void GmAccountListGmUserPmd_CS::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GmAccountListGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GmAccountListGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.GmUserInfo data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GmAccountListGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GmAccountListGmUserPmd_CS)
  return false;
#undef DO_
}

void GmAccountListGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GmAccountListGmUserPmd_CS)
  // repeated .Pmd.GmUserInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GmAccountListGmUserPmd_CS)
}

::google::protobuf::uint8* GmAccountListGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GmAccountListGmUserPmd_CS)
  // repeated .Pmd.GmUserInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GmAccountListGmUserPmd_CS)
  return target;
}

int GmAccountListGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  // repeated .Pmd.GmUserInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmAccountListGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GmAccountListGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GmAccountListGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GmAccountListGmUserPmd_CS::MergeFrom(const GmAccountListGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GmAccountListGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmAccountListGmUserPmd_CS::CopyFrom(const GmAccountListGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmAccountListGmUserPmd_CS::IsInitialized() const {

  return true;
}

void GmAccountListGmUserPmd_CS::Swap(GmAccountListGmUserPmd_CS* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GmAccountListGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GmAccountListGmUserPmd_CS_descriptor_;
  metadata.reflection = GmAccountListGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestDelGmUserPmd_CS::kGmidFieldNumber;
const int RequestDelGmUserPmd_CS::kRetcodeFieldNumber;
const int RequestDelGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

RequestDelGmUserPmd_CS::RequestDelGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestDelGmUserPmd_CS)
}

void RequestDelGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestDelGmUserPmd_CS::RequestDelGmUserPmd_CS(const RequestDelGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestDelGmUserPmd_CS)
}

void RequestDelGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDelGmUserPmd_CS::~RequestDelGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestDelGmUserPmd_CS)
  SharedDtor();
}

void RequestDelGmUserPmd_CS::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void RequestDelGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDelGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDelGmUserPmd_CS_descriptor_;
}

const RequestDelGmUserPmd_CS& RequestDelGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestDelGmUserPmd_CS* RequestDelGmUserPmd_CS::default_instance_ = NULL;

RequestDelGmUserPmd_CS* RequestDelGmUserPmd_CS::New() const {
  return new RequestDelGmUserPmd_CS;
}

void RequestDelGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestDelGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gmid_, retcode_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestDelGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestDelGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 2;
      case 2: {
        if (tag == 16) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 3;
      case 3: {
        if (tag == 26) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestDelGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestDelGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestDelGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestDelGmUserPmd_CS)
  // required uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // optional uint32 retcode = 2;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->retcode(), output);
  }

  // optional string retdesc = 3;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestDelGmUserPmd_CS)
}

::google::protobuf::uint8* RequestDelGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestDelGmUserPmd_CS)
  // required uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // optional uint32 retcode = 2;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->retcode(), target);
  }

  // optional string retdesc = 3;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestDelGmUserPmd_CS)
  return target;
}

int RequestDelGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 retcode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 3;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDelGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestDelGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestDelGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestDelGmUserPmd_CS::MergeFrom(const RequestDelGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestDelGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDelGmUserPmd_CS::CopyFrom(const RequestDelGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDelGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestDelGmUserPmd_CS::Swap(RequestDelGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestDelGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDelGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestDelGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestModifyPriGmUserPmd_CS::kGmidFieldNumber;
const int RequestModifyPriGmUserPmd_CS::kPriFieldNumber;
const int RequestModifyPriGmUserPmd_CS::kGameidFieldNumber;
const int RequestModifyPriGmUserPmd_CS::kZoneidFieldNumber;
const int RequestModifyPriGmUserPmd_CS::kRetcodeFieldNumber;
const int RequestModifyPriGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

RequestModifyPriGmUserPmd_CS::RequestModifyPriGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestModifyPriGmUserPmd_CS)
}

void RequestModifyPriGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestModifyPriGmUserPmd_CS::RequestModifyPriGmUserPmd_CS(const RequestModifyPriGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestModifyPriGmUserPmd_CS)
}

void RequestModifyPriGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  pri_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0u;
  zoneid_ = 0u;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestModifyPriGmUserPmd_CS::~RequestModifyPriGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestModifyPriGmUserPmd_CS)
  SharedDtor();
}

void RequestModifyPriGmUserPmd_CS::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void RequestModifyPriGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestModifyPriGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestModifyPriGmUserPmd_CS_descriptor_;
}

const RequestModifyPriGmUserPmd_CS& RequestModifyPriGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestModifyPriGmUserPmd_CS* RequestModifyPriGmUserPmd_CS::default_instance_ = NULL;

RequestModifyPriGmUserPmd_CS* RequestModifyPriGmUserPmd_CS::New() const {
  return new RequestModifyPriGmUserPmd_CS;
}

void RequestModifyPriGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestModifyPriGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(pri_, retcode_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestModifyPriGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestModifyPriGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pri;
        break;
      }

      // required uint64 pri = 2;
      case 2: {
        if (tag == 16) {
         parse_pri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pri_)));
          set_has_pri();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 3;
      case 3: {
        if (tag == 24) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 5;
      case 5: {
        if (tag == 40) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 6;
      case 6: {
        if (tag == 50) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestModifyPriGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestModifyPriGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestModifyPriGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestModifyPriGmUserPmd_CS)
  // required uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // required uint64 pri = 2;
  if (has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pri(), output);
  }

  // optional uint32 gameid = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional uint32 retcode = 5;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->retcode(), output);
  }

  // optional string retdesc = 6;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestModifyPriGmUserPmd_CS)
}

::google::protobuf::uint8* RequestModifyPriGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestModifyPriGmUserPmd_CS)
  // required uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // required uint64 pri = 2;
  if (has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pri(), target);
  }

  // optional uint32 gameid = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gameid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional uint32 retcode = 5;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->retcode(), target);
  }

  // optional string retdesc = 6;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestModifyPriGmUserPmd_CS)
  return target;
}

int RequestModifyPriGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // required uint64 pri = 2;
    if (has_pri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pri());
    }

    // optional uint32 gameid = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 retcode = 5;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 6;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestModifyPriGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestModifyPriGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestModifyPriGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestModifyPriGmUserPmd_CS::MergeFrom(const RequestModifyPriGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_pri()) {
      set_pri(from.pri());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestModifyPriGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestModifyPriGmUserPmd_CS::CopyFrom(const RequestModifyPriGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestModifyPriGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestModifyPriGmUserPmd_CS::Swap(RequestModifyPriGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(pri_, other->pri_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestModifyPriGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestModifyPriGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestModifyPriGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectGamezoneGmUserPmd_SC::kRetcodeFieldNumber;
const int SelectGamezoneGmUserPmd_SC::kGameidFieldNumber;
const int SelectGamezoneGmUserPmd_SC::kZoneidFieldNumber;
#endif  // !_MSC_VER

SelectGamezoneGmUserPmd_SC::SelectGamezoneGmUserPmd_SC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.SelectGamezoneGmUserPmd_SC)
}

void SelectGamezoneGmUserPmd_SC::InitAsDefaultInstance() {
}

SelectGamezoneGmUserPmd_SC::SelectGamezoneGmUserPmd_SC(const SelectGamezoneGmUserPmd_SC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.SelectGamezoneGmUserPmd_SC)
}

void SelectGamezoneGmUserPmd_SC::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  gameid_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectGamezoneGmUserPmd_SC::~SelectGamezoneGmUserPmd_SC() {
  // @@protoc_insertion_point(destructor:Pmd.SelectGamezoneGmUserPmd_SC)
  SharedDtor();
}

void SelectGamezoneGmUserPmd_SC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectGamezoneGmUserPmd_SC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectGamezoneGmUserPmd_SC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectGamezoneGmUserPmd_SC_descriptor_;
}

const SelectGamezoneGmUserPmd_SC& SelectGamezoneGmUserPmd_SC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

SelectGamezoneGmUserPmd_SC* SelectGamezoneGmUserPmd_SC::default_instance_ = NULL;

SelectGamezoneGmUserPmd_SC* SelectGamezoneGmUserPmd_SC::New() const {
  return new SelectGamezoneGmUserPmd_SC;
}

void SelectGamezoneGmUserPmd_SC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SelectGamezoneGmUserPmd_SC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(retcode_, zoneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectGamezoneGmUserPmd_SC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.SelectGamezoneGmUserPmd_SC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.SelectGamezoneGmUserPmd_SC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.SelectGamezoneGmUserPmd_SC)
  return false;
#undef DO_
}

void SelectGamezoneGmUserPmd_SC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.SelectGamezoneGmUserPmd_SC)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // required uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.SelectGamezoneGmUserPmd_SC)
}

::google::protobuf::uint8* SelectGamezoneGmUserPmd_SC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.SelectGamezoneGmUserPmd_SC)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // required uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.SelectGamezoneGmUserPmd_SC)
  return target;
}

int SelectGamezoneGmUserPmd_SC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // required uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectGamezoneGmUserPmd_SC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectGamezoneGmUserPmd_SC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectGamezoneGmUserPmd_SC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectGamezoneGmUserPmd_SC::MergeFrom(const SelectGamezoneGmUserPmd_SC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectGamezoneGmUserPmd_SC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectGamezoneGmUserPmd_SC::CopyFrom(const SelectGamezoneGmUserPmd_SC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectGamezoneGmUserPmd_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void SelectGamezoneGmUserPmd_SC::Swap(SelectGamezoneGmUserPmd_SC* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectGamezoneGmUserPmd_SC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectGamezoneGmUserPmd_SC_descriptor_;
  metadata.reflection = SelectGamezoneGmUserPmd_SC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastInfo::kTaskidFieldNumber;
const int BroadcastInfo::kGameidFieldNumber;
const int BroadcastInfo::kZoneidFieldNumber;
const int BroadcastInfo::kGmidFieldNumber;
const int BroadcastInfo::kCountryidFieldNumber;
const int BroadcastInfo::kSceneidFieldNumber;
const int BroadcastInfo::kStarttimeFieldNumber;
const int BroadcastInfo::kEndtimeFieldNumber;
const int BroadcastInfo::kIntervaltimeFieldNumber;
const int BroadcastInfo::kBtypeFieldNumber;
const int BroadcastInfo::kContentFieldNumber;
const int BroadcastInfo::kRecordtimeFieldNumber;
#endif  // !_MSC_VER

BroadcastInfo::BroadcastInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.BroadcastInfo)
}

void BroadcastInfo::InitAsDefaultInstance() {
}

BroadcastInfo::BroadcastInfo(const BroadcastInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.BroadcastInfo)
}

void BroadcastInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  taskid_ = 0u;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  countryid_ = 0u;
  sceneid_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  intervaltime_ = 0u;
  btype_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastInfo::~BroadcastInfo() {
  // @@protoc_insertion_point(destructor:Pmd.BroadcastInfo)
  SharedDtor();
}

void BroadcastInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastInfo_descriptor_;
}

const BroadcastInfo& BroadcastInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

BroadcastInfo* BroadcastInfo::default_instance_ = NULL;

BroadcastInfo* BroadcastInfo::New() const {
  return new BroadcastInfo;
}

void BroadcastInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(taskid_, endtime_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(intervaltime_, btype_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    recordtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.BroadcastInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 6;
      case 6: {
        if (tag == 48) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 7;
      case 7: {
        if (tag == 56) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 8;
      case 8: {
        if (tag == 64) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 9;
      case 9: {
        if (tag == 72) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_intervaltime;
        break;
      }

      // optional uint32 intervaltime = 10;
      case 10: {
        if (tag == 80) {
         parse_intervaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intervaltime_)));
          set_has_intervaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_btype;
        break;
      }

      // optional uint32 btype = 11;
      case 11: {
        if (tag == 88) {
         parse_btype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &btype_)));
          set_has_btype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_content;
        break;
      }

      // optional string content = 12;
      case 12: {
        if (tag == 98) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_recordtime;
        break;
      }

      // optional uint32 recordtime = 13;
      case 13: {
        if (tag == 104) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.BroadcastInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.BroadcastInfo)
  return false;
#undef DO_
}

void BroadcastInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.BroadcastInfo)
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  // optional uint32 countryid = 6;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->countryid(), output);
  }

  // optional uint32 sceneid = 7;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sceneid(), output);
  }

  // optional uint32 starttime = 8;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->starttime(), output);
  }

  // optional uint32 endtime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->endtime(), output);
  }

  // optional uint32 intervaltime = 10;
  if (has_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->intervaltime(), output);
  }

  // optional uint32 btype = 11;
  if (has_btype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->btype(), output);
  }

  // optional string content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->content(), output);
  }

  // optional uint32 recordtime = 13;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->recordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.BroadcastInfo)
}

::google::protobuf::uint8* BroadcastInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.BroadcastInfo)
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  // optional uint32 countryid = 6;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->countryid(), target);
  }

  // optional uint32 sceneid = 7;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sceneid(), target);
  }

  // optional uint32 starttime = 8;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->starttime(), target);
  }

  // optional uint32 endtime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->endtime(), target);
  }

  // optional uint32 intervaltime = 10;
  if (has_intervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->intervaltime(), target);
  }

  // optional uint32 btype = 11;
  if (has_btype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->btype(), target);
  }

  // optional string content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->content(), target);
  }

  // optional uint32 recordtime = 13;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->recordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.BroadcastInfo)
  return target;
}

int BroadcastInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 countryid = 6;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 sceneid = 7;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 starttime = 8;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 intervaltime = 10;
    if (has_intervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intervaltime());
    }

    // optional uint32 btype = 11;
    if (has_btype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->btype());
    }

    // optional string content = 12;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 recordtime = 13;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastInfo::MergeFrom(const BroadcastInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_intervaltime()) {
      set_intervaltime(from.intervaltime());
    }
    if (from.has_btype()) {
      set_btype(from.btype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastInfo::CopyFrom(const BroadcastInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastInfo::IsInitialized() const {

  return true;
}

void BroadcastInfo::Swap(BroadcastInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(countryid_, other->countryid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(intervaltime_, other->intervaltime_);
    std::swap(btype_, other->btype_);
    std::swap(content_, other->content_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastInfo_descriptor_;
  metadata.reflection = BroadcastInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastNewGmUserPmd_C::kDataFieldNumber;
const int BroadcastNewGmUserPmd_C::kGameidFieldNumber;
const int BroadcastNewGmUserPmd_C::kZoneidFieldNumber;
const int BroadcastNewGmUserPmd_C::kGmidFieldNumber;
#endif  // !_MSC_VER

BroadcastNewGmUserPmd_C::BroadcastNewGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.BroadcastNewGmUserPmd_C)
}

void BroadcastNewGmUserPmd_C::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::BroadcastInfo*>(&::Pmd::BroadcastInfo::default_instance());
}

BroadcastNewGmUserPmd_C::BroadcastNewGmUserPmd_C(const BroadcastNewGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.BroadcastNewGmUserPmd_C)
}

void BroadcastNewGmUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastNewGmUserPmd_C::~BroadcastNewGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.BroadcastNewGmUserPmd_C)
  SharedDtor();
}

void BroadcastNewGmUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void BroadcastNewGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastNewGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastNewGmUserPmd_C_descriptor_;
}

const BroadcastNewGmUserPmd_C& BroadcastNewGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

BroadcastNewGmUserPmd_C* BroadcastNewGmUserPmd_C::default_instance_ = NULL;

BroadcastNewGmUserPmd_C* BroadcastNewGmUserPmd_C::New() const {
  return new BroadcastNewGmUserPmd_C;
}

void BroadcastNewGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastNewGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gameid_, gmid_);
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::BroadcastInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastNewGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.BroadcastNewGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.BroadcastInfo data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.BroadcastNewGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.BroadcastNewGmUserPmd_C)
  return false;
#undef DO_
}

void BroadcastNewGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.BroadcastNewGmUserPmd_C)
  // required .Pmd.BroadcastInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.BroadcastNewGmUserPmd_C)
}

::google::protobuf::uint8* BroadcastNewGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.BroadcastNewGmUserPmd_C)
  // required .Pmd.BroadcastInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.BroadcastNewGmUserPmd_C)
  return target;
}

int BroadcastNewGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.BroadcastInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastNewGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastNewGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastNewGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastNewGmUserPmd_C::MergeFrom(const BroadcastNewGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::BroadcastInfo::MergeFrom(from.data());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastNewGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastNewGmUserPmd_C::CopyFrom(const BroadcastNewGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastNewGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadcastNewGmUserPmd_C::Swap(BroadcastNewGmUserPmd_C* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastNewGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastNewGmUserPmd_C_descriptor_;
  metadata.reflection = BroadcastNewGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnBroadcastNewGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnBroadcastNewGmUserPmd_S::kRetdescFieldNumber;
const int ReturnBroadcastNewGmUserPmd_S::kTaskidFieldNumber;
const int ReturnBroadcastNewGmUserPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

ReturnBroadcastNewGmUserPmd_S::ReturnBroadcastNewGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnBroadcastNewGmUserPmd_S)
}

void ReturnBroadcastNewGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnBroadcastNewGmUserPmd_S::ReturnBroadcastNewGmUserPmd_S(const ReturnBroadcastNewGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnBroadcastNewGmUserPmd_S)
}

void ReturnBroadcastNewGmUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnBroadcastNewGmUserPmd_S::~ReturnBroadcastNewGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnBroadcastNewGmUserPmd_S)
  SharedDtor();
}

void ReturnBroadcastNewGmUserPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void ReturnBroadcastNewGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnBroadcastNewGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnBroadcastNewGmUserPmd_S_descriptor_;
}

const ReturnBroadcastNewGmUserPmd_S& ReturnBroadcastNewGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnBroadcastNewGmUserPmd_S* ReturnBroadcastNewGmUserPmd_S::default_instance_ = NULL;

ReturnBroadcastNewGmUserPmd_S* ReturnBroadcastNewGmUserPmd_S::New() const {
  return new ReturnBroadcastNewGmUserPmd_S;
}

void ReturnBroadcastNewGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnBroadcastNewGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(retcode_, gmid_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnBroadcastNewGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnBroadcastNewGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taskid;
        break;
      }

      // optional uint32 taskid = 3;
      case 3: {
        if (tag == 24) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnBroadcastNewGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnBroadcastNewGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnBroadcastNewGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnBroadcastNewGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // optional uint32 taskid = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taskid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnBroadcastNewGmUserPmd_S)
}

::google::protobuf::uint8* ReturnBroadcastNewGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnBroadcastNewGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // optional uint32 taskid = 3;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->taskid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnBroadcastNewGmUserPmd_S)
  return target;
}

int ReturnBroadcastNewGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // optional uint32 taskid = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnBroadcastNewGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnBroadcastNewGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnBroadcastNewGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnBroadcastNewGmUserPmd_S::MergeFrom(const ReturnBroadcastNewGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnBroadcastNewGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnBroadcastNewGmUserPmd_S::CopyFrom(const ReturnBroadcastNewGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnBroadcastNewGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnBroadcastNewGmUserPmd_S::Swap(ReturnBroadcastNewGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(taskid_, other->taskid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnBroadcastNewGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnBroadcastNewGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnBroadcastNewGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastDeleteGmUserPmd_C::kTaskidFieldNumber;
const int BroadcastDeleteGmUserPmd_C::kGameidFieldNumber;
const int BroadcastDeleteGmUserPmd_C::kZoneidFieldNumber;
const int BroadcastDeleteGmUserPmd_C::kGmidFieldNumber;
#endif  // !_MSC_VER

BroadcastDeleteGmUserPmd_C::BroadcastDeleteGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.BroadcastDeleteGmUserPmd_C)
}

void BroadcastDeleteGmUserPmd_C::InitAsDefaultInstance() {
}

BroadcastDeleteGmUserPmd_C::BroadcastDeleteGmUserPmd_C(const BroadcastDeleteGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.BroadcastDeleteGmUserPmd_C)
}

void BroadcastDeleteGmUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastDeleteGmUserPmd_C::~BroadcastDeleteGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.BroadcastDeleteGmUserPmd_C)
  SharedDtor();
}

void BroadcastDeleteGmUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastDeleteGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastDeleteGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastDeleteGmUserPmd_C_descriptor_;
}

const BroadcastDeleteGmUserPmd_C& BroadcastDeleteGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

BroadcastDeleteGmUserPmd_C* BroadcastDeleteGmUserPmd_C::default_instance_ = NULL;

BroadcastDeleteGmUserPmd_C* BroadcastDeleteGmUserPmd_C::New() const {
  return new BroadcastDeleteGmUserPmd_C;
}

void BroadcastDeleteGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BroadcastDeleteGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, gmid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastDeleteGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.BroadcastDeleteGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.BroadcastDeleteGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.BroadcastDeleteGmUserPmd_C)
  return false;
#undef DO_
}

void BroadcastDeleteGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.BroadcastDeleteGmUserPmd_C)
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.BroadcastDeleteGmUserPmd_C)
}

::google::protobuf::uint8* BroadcastDeleteGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.BroadcastDeleteGmUserPmd_C)
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.BroadcastDeleteGmUserPmd_C)
  return target;
}

int BroadcastDeleteGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastDeleteGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastDeleteGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastDeleteGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastDeleteGmUserPmd_C::MergeFrom(const BroadcastDeleteGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastDeleteGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastDeleteGmUserPmd_C::CopyFrom(const BroadcastDeleteGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastDeleteGmUserPmd_C::IsInitialized() const {

  return true;
}

void BroadcastDeleteGmUserPmd_C::Swap(BroadcastDeleteGmUserPmd_C* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastDeleteGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastDeleteGmUserPmd_C_descriptor_;
  metadata.reflection = BroadcastDeleteGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnBroadcastDeleteGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnBroadcastDeleteGmUserPmd_S::kRetdescFieldNumber;
const int ReturnBroadcastDeleteGmUserPmd_S::kTaskidFieldNumber;
const int ReturnBroadcastDeleteGmUserPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

ReturnBroadcastDeleteGmUserPmd_S::ReturnBroadcastDeleteGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
}

void ReturnBroadcastDeleteGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnBroadcastDeleteGmUserPmd_S::ReturnBroadcastDeleteGmUserPmd_S(const ReturnBroadcastDeleteGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
}

void ReturnBroadcastDeleteGmUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnBroadcastDeleteGmUserPmd_S::~ReturnBroadcastDeleteGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
  SharedDtor();
}

void ReturnBroadcastDeleteGmUserPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void ReturnBroadcastDeleteGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnBroadcastDeleteGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnBroadcastDeleteGmUserPmd_S_descriptor_;
}

const ReturnBroadcastDeleteGmUserPmd_S& ReturnBroadcastDeleteGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnBroadcastDeleteGmUserPmd_S* ReturnBroadcastDeleteGmUserPmd_S::default_instance_ = NULL;

ReturnBroadcastDeleteGmUserPmd_S* ReturnBroadcastDeleteGmUserPmd_S::New() const {
  return new ReturnBroadcastDeleteGmUserPmd_S;
}

void ReturnBroadcastDeleteGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnBroadcastDeleteGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(retcode_, gmid_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnBroadcastDeleteGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taskid;
        break;
      }

      // optional uint32 taskid = 3;
      case 3: {
        if (tag == 24) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnBroadcastDeleteGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // optional uint32 taskid = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taskid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
}

::google::protobuf::uint8* ReturnBroadcastDeleteGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // optional uint32 taskid = 3;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->taskid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnBroadcastDeleteGmUserPmd_S)
  return target;
}

int ReturnBroadcastDeleteGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // optional uint32 taskid = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnBroadcastDeleteGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnBroadcastDeleteGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnBroadcastDeleteGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnBroadcastDeleteGmUserPmd_S::MergeFrom(const ReturnBroadcastDeleteGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnBroadcastDeleteGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnBroadcastDeleteGmUserPmd_S::CopyFrom(const ReturnBroadcastDeleteGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnBroadcastDeleteGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnBroadcastDeleteGmUserPmd_S::Swap(ReturnBroadcastDeleteGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(taskid_, other->taskid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnBroadcastDeleteGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnBroadcastDeleteGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnBroadcastDeleteGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBroadcastListGmUserPmd_C::kGameidFieldNumber;
const int RequestBroadcastListGmUserPmd_C::kZoneidFieldNumber;
const int RequestBroadcastListGmUserPmd_C::kSceneidFieldNumber;
const int RequestBroadcastListGmUserPmd_C::kCountryidFieldNumber;
const int RequestBroadcastListGmUserPmd_C::kBtypeFieldNumber;
const int RequestBroadcastListGmUserPmd_C::kEndtimeFieldNumber;
const int RequestBroadcastListGmUserPmd_C::kCurpageFieldNumber;
const int RequestBroadcastListGmUserPmd_C::kMaxpageFieldNumber;
const int RequestBroadcastListGmUserPmd_C::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestBroadcastListGmUserPmd_C::RequestBroadcastListGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestBroadcastListGmUserPmd_C)
}

void RequestBroadcastListGmUserPmd_C::InitAsDefaultInstance() {
}

RequestBroadcastListGmUserPmd_C::RequestBroadcastListGmUserPmd_C(const RequestBroadcastListGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestBroadcastListGmUserPmd_C)
}

void RequestBroadcastListGmUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  sceneid_ = 0u;
  countryid_ = 0u;
  btype_ = 0u;
  endtime_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBroadcastListGmUserPmd_C::~RequestBroadcastListGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestBroadcastListGmUserPmd_C)
  SharedDtor();
}

void RequestBroadcastListGmUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestBroadcastListGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBroadcastListGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBroadcastListGmUserPmd_C_descriptor_;
}

const RequestBroadcastListGmUserPmd_C& RequestBroadcastListGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestBroadcastListGmUserPmd_C* RequestBroadcastListGmUserPmd_C::default_instance_ = NULL;

RequestBroadcastListGmUserPmd_C* RequestBroadcastListGmUserPmd_C::New() const {
  return new RequestBroadcastListGmUserPmd_C;
}

void RequestBroadcastListGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestBroadcastListGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, maxpage_);
  }
  perpage_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBroadcastListGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestBroadcastListGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 4;
      case 4: {
        if (tag == 32) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_btype;
        break;
      }

      // optional uint32 btype = 5;
      case 5: {
        if (tag == 40) {
         parse_btype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &btype_)));
          set_has_btype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 6;
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 7;
      case 7: {
        if (tag == 56) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 8;
      case 8: {
        if (tag == 64) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 9;
      case 9: {
        if (tag == 72) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestBroadcastListGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestBroadcastListGmUserPmd_C)
  return false;
#undef DO_
}

void RequestBroadcastListGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestBroadcastListGmUserPmd_C)
  // optional uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

  // optional uint32 countryid = 4;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->countryid(), output);
  }

  // optional uint32 btype = 5;
  if (has_btype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->btype(), output);
  }

  // optional uint32 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endtime(), output);
  }

  // optional uint32 curpage = 7;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curpage(), output);
  }

  // optional uint32 maxpage = 8;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxpage(), output);
  }

  // optional uint32 perpage = 9;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestBroadcastListGmUserPmd_C)
}

::google::protobuf::uint8* RequestBroadcastListGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestBroadcastListGmUserPmd_C)
  // optional uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }

  // optional uint32 countryid = 4;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->countryid(), target);
  }

  // optional uint32 btype = 5;
  if (has_btype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->btype(), target);
  }

  // optional uint32 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endtime(), target);
  }

  // optional uint32 curpage = 7;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curpage(), target);
  }

  // optional uint32 maxpage = 8;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxpage(), target);
  }

  // optional uint32 perpage = 9;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestBroadcastListGmUserPmd_C)
  return target;
}

int RequestBroadcastListGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 countryid = 4;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 btype = 5;
    if (has_btype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->btype());
    }

    // optional uint32 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 curpage = 7;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 8;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 perpage = 9;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBroadcastListGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBroadcastListGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBroadcastListGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBroadcastListGmUserPmd_C::MergeFrom(const RequestBroadcastListGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_btype()) {
      set_btype(from.btype());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBroadcastListGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBroadcastListGmUserPmd_C::CopyFrom(const RequestBroadcastListGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBroadcastListGmUserPmd_C::IsInitialized() const {

  return true;
}

void RequestBroadcastListGmUserPmd_C::Swap(RequestBroadcastListGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(btype_, other->btype_);
    std::swap(endtime_, other->endtime_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBroadcastListGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBroadcastListGmUserPmd_C_descriptor_;
  metadata.reflection = RequestBroadcastListGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnBroadcastListGmUserPmd_S::kDataFieldNumber;
const int ReturnBroadcastListGmUserPmd_S::kGmidFieldNumber;
const int ReturnBroadcastListGmUserPmd_S::kCurpageFieldNumber;
const int ReturnBroadcastListGmUserPmd_S::kMaxpageFieldNumber;
const int ReturnBroadcastListGmUserPmd_S::kPerpageFieldNumber;
#endif  // !_MSC_VER

ReturnBroadcastListGmUserPmd_S::ReturnBroadcastListGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnBroadcastListGmUserPmd_S)
}

void ReturnBroadcastListGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnBroadcastListGmUserPmd_S::ReturnBroadcastListGmUserPmd_S(const ReturnBroadcastListGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnBroadcastListGmUserPmd_S)
}

void ReturnBroadcastListGmUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnBroadcastListGmUserPmd_S::~ReturnBroadcastListGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnBroadcastListGmUserPmd_S)
  SharedDtor();
}

void ReturnBroadcastListGmUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnBroadcastListGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnBroadcastListGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnBroadcastListGmUserPmd_S_descriptor_;
}

const ReturnBroadcastListGmUserPmd_S& ReturnBroadcastListGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnBroadcastListGmUserPmd_S* ReturnBroadcastListGmUserPmd_S::default_instance_ = NULL;

ReturnBroadcastListGmUserPmd_S* ReturnBroadcastListGmUserPmd_S::New() const {
  return new ReturnBroadcastListGmUserPmd_S;
}

void ReturnBroadcastListGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnBroadcastListGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gmid_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnBroadcastListGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnBroadcastListGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.BroadcastInfo data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 2;
      case 2: {
        if (tag == 16) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 3;
      case 3: {
        if (tag == 24) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 4;
      case 4: {
        if (tag == 32) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 5;
      case 5: {
        if (tag == 40) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnBroadcastListGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnBroadcastListGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnBroadcastListGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnBroadcastListGmUserPmd_S)
  // repeated .Pmd.BroadcastInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmid(), output);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpage(), output);
  }

  // optional uint32 maxpage = 4;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxpage(), output);
  }

  // optional uint32 perpage = 5;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnBroadcastListGmUserPmd_S)
}

::google::protobuf::uint8* ReturnBroadcastListGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnBroadcastListGmUserPmd_S)
  // repeated .Pmd.BroadcastInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmid(), target);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpage(), target);
  }

  // optional uint32 maxpage = 4;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxpage(), target);
  }

  // optional uint32 perpage = 5;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnBroadcastListGmUserPmd_S)
  return target;
}

int ReturnBroadcastListGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 3;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 4;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 5;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.BroadcastInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnBroadcastListGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnBroadcastListGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnBroadcastListGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnBroadcastListGmUserPmd_S::MergeFrom(const ReturnBroadcastListGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnBroadcastListGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnBroadcastListGmUserPmd_S::CopyFrom(const ReturnBroadcastListGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnBroadcastListGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnBroadcastListGmUserPmd_S::Swap(ReturnBroadcastListGmUserPmd_S* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnBroadcastListGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnBroadcastListGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnBroadcastListGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PunishUserInfo::kTaskidFieldNumber;
const int PunishUserInfo::kGameidFieldNumber;
const int PunishUserInfo::kZoneidFieldNumber;
const int PunishUserInfo::kCharidFieldNumber;
const int PunishUserInfo::kCharnameFieldNumber;
const int PunishUserInfo::kIpFieldNumber;
const int PunishUserInfo::kGmidFieldNumber;
const int PunishUserInfo::kReasonFieldNumber;
const int PunishUserInfo::kPtypeFieldNumber;
const int PunishUserInfo::kStarttimeFieldNumber;
const int PunishUserInfo::kEndtimeFieldNumber;
const int PunishUserInfo::kPunishtimeFieldNumber;
const int PunishUserInfo::kStateFieldNumber;
#endif  // !_MSC_VER

PunishUserInfo::PunishUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PunishUserInfo)
}

void PunishUserInfo::InitAsDefaultInstance() {
}

PunishUserInfo::PunishUserInfo(const PunishUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PunishUserInfo)
}

void PunishUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  taskid_ = 0u;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0u;
  gmid_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ptype_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  punishtime_ = GOOGLE_ULONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PunishUserInfo::~PunishUserInfo() {
  // @@protoc_insertion_point(destructor:Pmd.PunishUserInfo)
  SharedDtor();
}

void PunishUserInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void PunishUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PunishUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PunishUserInfo_descriptor_;
}

const PunishUserInfo& PunishUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

PunishUserInfo* PunishUserInfo::default_instance_ = NULL;

PunishUserInfo* PunishUserInfo::New() const {
  return new PunishUserInfo;
}

void PunishUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PunishUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(taskid_, ip_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    gmid_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(ptype_, state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PunishUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PunishUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charname;
        break;
      }

      // optional string charname = 5;
      case 5: {
        if (tag == 42) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 6;
      case 6: {
        if (tag == 48) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 7;
      case 7: {
        if (tag == 56) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_reason;
        break;
      }

      // optional string reason = 8;
      case 8: {
        if (tag == 66) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ptype;
        break;
      }

      // optional uint32 ptype = 9;
      case 9: {
        if (tag == 72) {
         parse_ptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ptype_)));
          set_has_ptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 10;
      case 10: {
        if (tag == 80) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 11;
      case 11: {
        if (tag == 88) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_punishtime;
        break;
      }

      // optional uint64 punishtime = 12;
      case 12: {
        if (tag == 96) {
         parse_punishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &punishtime_)));
          set_has_punishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_state;
        break;
      }

      // optional uint32 state = 13;
      case 13: {
        if (tag == 104) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PunishUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PunishUserInfo)
  return false;
#undef DO_
}

void PunishUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PunishUserInfo)
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->charname(), output);
  }

  // optional uint32 ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ip(), output);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gmid(), output);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->reason(), output);
  }

  // optional uint32 ptype = 9;
  if (has_ptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ptype(), output);
  }

  // optional uint64 starttime = 10;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->starttime(), output);
  }

  // optional uint64 endtime = 11;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->endtime(), output);
  }

  // optional uint64 punishtime = 12;
  if (has_punishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->punishtime(), output);
  }

  // optional uint32 state = 13;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PunishUserInfo)
}

::google::protobuf::uint8* PunishUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PunishUserInfo)
  // optional uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->charname(), target);
  }

  // optional uint32 ip = 6;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ip(), target);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gmid(), target);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->reason(), target);
  }

  // optional uint32 ptype = 9;
  if (has_ptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ptype(), target);
  }

  // optional uint64 starttime = 10;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->starttime(), target);
  }

  // optional uint64 endtime = 11;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->endtime(), target);
  }

  // optional uint64 punishtime = 12;
  if (has_punishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->punishtime(), target);
  }

  // optional uint32 state = 13;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PunishUserInfo)
  return target;
}

int PunishUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 5;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 gmid = 7;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional string reason = 8;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ptype = 9;
    if (has_ptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ptype());
    }

    // optional uint64 starttime = 10;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 endtime = 11;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 punishtime = 12;
    if (has_punishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->punishtime());
    }

    // optional uint32 state = 13;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PunishUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PunishUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PunishUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PunishUserInfo::MergeFrom(const PunishUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ptype()) {
      set_ptype(from.ptype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_punishtime()) {
      set_punishtime(from.punishtime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PunishUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PunishUserInfo::CopyFrom(const PunishUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PunishUserInfo::IsInitialized() const {

  return true;
}

void PunishUserInfo::Swap(PunishUserInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(ip_, other->ip_);
    std::swap(gmid_, other->gmid_);
    std::swap(reason_, other->reason_);
    std::swap(ptype_, other->ptype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(punishtime_, other->punishtime_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PunishUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PunishUserInfo_descriptor_;
  metadata.reflection = PunishUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PunishUserGmUserPmd_C::kDataFieldNumber;
const int PunishUserGmUserPmd_C::kGameidFieldNumber;
const int PunishUserGmUserPmd_C::kZoneidFieldNumber;
const int PunishUserGmUserPmd_C::kGmidFieldNumber;
#endif  // !_MSC_VER

PunishUserGmUserPmd_C::PunishUserGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PunishUserGmUserPmd_C)
}

void PunishUserGmUserPmd_C::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::PunishUserInfo*>(&::Pmd::PunishUserInfo::default_instance());
}

PunishUserGmUserPmd_C::PunishUserGmUserPmd_C(const PunishUserGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PunishUserGmUserPmd_C)
}

void PunishUserGmUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PunishUserGmUserPmd_C::~PunishUserGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.PunishUserGmUserPmd_C)
  SharedDtor();
}

void PunishUserGmUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PunishUserGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PunishUserGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PunishUserGmUserPmd_C_descriptor_;
}

const PunishUserGmUserPmd_C& PunishUserGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

PunishUserGmUserPmd_C* PunishUserGmUserPmd_C::default_instance_ = NULL;

PunishUserGmUserPmd_C* PunishUserGmUserPmd_C::New() const {
  return new PunishUserGmUserPmd_C;
}

void PunishUserGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PunishUserGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gameid_, gmid_);
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::PunishUserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PunishUserGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PunishUserGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.PunishUserInfo data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PunishUserGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PunishUserGmUserPmd_C)
  return false;
#undef DO_
}

void PunishUserGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PunishUserGmUserPmd_C)
  // required .Pmd.PunishUserInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PunishUserGmUserPmd_C)
}

::google::protobuf::uint8* PunishUserGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PunishUserGmUserPmd_C)
  // required .Pmd.PunishUserInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PunishUserGmUserPmd_C)
  return target;
}

int PunishUserGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.PunishUserInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PunishUserGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PunishUserGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PunishUserGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PunishUserGmUserPmd_C::MergeFrom(const PunishUserGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::PunishUserInfo::MergeFrom(from.data());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PunishUserGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PunishUserGmUserPmd_C::CopyFrom(const PunishUserGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PunishUserGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PunishUserGmUserPmd_C::Swap(PunishUserGmUserPmd_C* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PunishUserGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PunishUserGmUserPmd_C_descriptor_;
  metadata.reflection = PunishUserGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnPunishUserGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnPunishUserGmUserPmd_S::kRetdescFieldNumber;
const int ReturnPunishUserGmUserPmd_S::kTaskidFieldNumber;
const int ReturnPunishUserGmUserPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

ReturnPunishUserGmUserPmd_S::ReturnPunishUserGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnPunishUserGmUserPmd_S)
}

void ReturnPunishUserGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnPunishUserGmUserPmd_S::ReturnPunishUserGmUserPmd_S(const ReturnPunishUserGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnPunishUserGmUserPmd_S)
}

void ReturnPunishUserGmUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnPunishUserGmUserPmd_S::~ReturnPunishUserGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnPunishUserGmUserPmd_S)
  SharedDtor();
}

void ReturnPunishUserGmUserPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void ReturnPunishUserGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnPunishUserGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnPunishUserGmUserPmd_S_descriptor_;
}

const ReturnPunishUserGmUserPmd_S& ReturnPunishUserGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnPunishUserGmUserPmd_S* ReturnPunishUserGmUserPmd_S::default_instance_ = NULL;

ReturnPunishUserGmUserPmd_S* ReturnPunishUserGmUserPmd_S::New() const {
  return new ReturnPunishUserGmUserPmd_S;
}

void ReturnPunishUserGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnPunishUserGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(retcode_, gmid_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnPunishUserGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnPunishUserGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taskid;
        break;
      }

      // optional uint32 taskid = 3;
      case 3: {
        if (tag == 24) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnPunishUserGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnPunishUserGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnPunishUserGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnPunishUserGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // optional uint32 taskid = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taskid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnPunishUserGmUserPmd_S)
}

::google::protobuf::uint8* ReturnPunishUserGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnPunishUserGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // optional uint32 taskid = 3;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->taskid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnPunishUserGmUserPmd_S)
  return target;
}

int ReturnPunishUserGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // optional uint32 taskid = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnPunishUserGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnPunishUserGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnPunishUserGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnPunishUserGmUserPmd_S::MergeFrom(const ReturnPunishUserGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnPunishUserGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnPunishUserGmUserPmd_S::CopyFrom(const ReturnPunishUserGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnPunishUserGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnPunishUserGmUserPmd_S::Swap(ReturnPunishUserGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(taskid_, other->taskid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnPunishUserGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnPunishUserGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnPunishUserGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePunishUserGmUserPmd_C::kTaskidFieldNumber;
const int DeletePunishUserGmUserPmd_C::kGameidFieldNumber;
const int DeletePunishUserGmUserPmd_C::kZoneidFieldNumber;
const int DeletePunishUserGmUserPmd_C::kGmidFieldNumber;
#endif  // !_MSC_VER

DeletePunishUserGmUserPmd_C::DeletePunishUserGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.DeletePunishUserGmUserPmd_C)
}

void DeletePunishUserGmUserPmd_C::InitAsDefaultInstance() {
}

DeletePunishUserGmUserPmd_C::DeletePunishUserGmUserPmd_C(const DeletePunishUserGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.DeletePunishUserGmUserPmd_C)
}

void DeletePunishUserGmUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePunishUserGmUserPmd_C::~DeletePunishUserGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.DeletePunishUserGmUserPmd_C)
  SharedDtor();
}

void DeletePunishUserGmUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletePunishUserGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePunishUserGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePunishUserGmUserPmd_C_descriptor_;
}

const DeletePunishUserGmUserPmd_C& DeletePunishUserGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

DeletePunishUserGmUserPmd_C* DeletePunishUserGmUserPmd_C::default_instance_ = NULL;

DeletePunishUserGmUserPmd_C* DeletePunishUserGmUserPmd_C::New() const {
  return new DeletePunishUserGmUserPmd_C;
}

void DeletePunishUserGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeletePunishUserGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, gmid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePunishUserGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.DeletePunishUserGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.DeletePunishUserGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.DeletePunishUserGmUserPmd_C)
  return false;
#undef DO_
}

void DeletePunishUserGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.DeletePunishUserGmUserPmd_C)
  // required uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.DeletePunishUserGmUserPmd_C)
}

::google::protobuf::uint8* DeletePunishUserGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.DeletePunishUserGmUserPmd_C)
  // required uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.DeletePunishUserGmUserPmd_C)
  return target;
}

int DeletePunishUserGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePunishUserGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePunishUserGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePunishUserGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePunishUserGmUserPmd_C::MergeFrom(const DeletePunishUserGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePunishUserGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePunishUserGmUserPmd_C::CopyFrom(const DeletePunishUserGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePunishUserGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeletePunishUserGmUserPmd_C::Swap(DeletePunishUserGmUserPmd_C* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePunishUserGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePunishUserGmUserPmd_C_descriptor_;
  metadata.reflection = DeletePunishUserGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnDeletePunishUserGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnDeletePunishUserGmUserPmd_S::kTaskidFieldNumber;
const int ReturnDeletePunishUserGmUserPmd_S::kZoneidFieldNumber;
const int ReturnDeletePunishUserGmUserPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

ReturnDeletePunishUserGmUserPmd_S::ReturnDeletePunishUserGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnDeletePunishUserGmUserPmd_S)
}

void ReturnDeletePunishUserGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnDeletePunishUserGmUserPmd_S::ReturnDeletePunishUserGmUserPmd_S(const ReturnDeletePunishUserGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnDeletePunishUserGmUserPmd_S)
}

void ReturnDeletePunishUserGmUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  taskid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnDeletePunishUserGmUserPmd_S::~ReturnDeletePunishUserGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnDeletePunishUserGmUserPmd_S)
  SharedDtor();
}

void ReturnDeletePunishUserGmUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnDeletePunishUserGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnDeletePunishUserGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnDeletePunishUserGmUserPmd_S_descriptor_;
}

const ReturnDeletePunishUserGmUserPmd_S& ReturnDeletePunishUserGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnDeletePunishUserGmUserPmd_S* ReturnDeletePunishUserGmUserPmd_S::default_instance_ = NULL;

ReturnDeletePunishUserGmUserPmd_S* ReturnDeletePunishUserGmUserPmd_S::New() const {
  return new ReturnDeletePunishUserGmUserPmd_S;
}

void ReturnDeletePunishUserGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnDeletePunishUserGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(retcode_, gmid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnDeletePunishUserGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnDeletePunishUserGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_taskid;
        break;
      }

      // optional uint32 taskid = 2;
      case 2: {
        if (tag == 16) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnDeletePunishUserGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnDeletePunishUserGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnDeletePunishUserGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnDeletePunishUserGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional uint32 taskid = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskid(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnDeletePunishUserGmUserPmd_S)
}

::google::protobuf::uint8* ReturnDeletePunishUserGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnDeletePunishUserGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 taskid = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskid(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnDeletePunishUserGmUserPmd_S)
  return target;
}

int ReturnDeletePunishUserGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional uint32 taskid = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnDeletePunishUserGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnDeletePunishUserGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnDeletePunishUserGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnDeletePunishUserGmUserPmd_S::MergeFrom(const ReturnDeletePunishUserGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnDeletePunishUserGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnDeletePunishUserGmUserPmd_S::CopyFrom(const ReturnDeletePunishUserGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnDeletePunishUserGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnDeletePunishUserGmUserPmd_S::Swap(ReturnDeletePunishUserGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(taskid_, other->taskid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnDeletePunishUserGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnDeletePunishUserGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnDeletePunishUserGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPunishListGmUserPmd_C::kGameidFieldNumber;
const int RequestPunishListGmUserPmd_C::kZoneidFieldNumber;
const int RequestPunishListGmUserPmd_C::kCharidFieldNumber;
const int RequestPunishListGmUserPmd_C::kCharnameFieldNumber;
const int RequestPunishListGmUserPmd_C::kGmidFieldNumber;
const int RequestPunishListGmUserPmd_C::kPtypeFieldNumber;
const int RequestPunishListGmUserPmd_C::kStateFieldNumber;
const int RequestPunishListGmUserPmd_C::kStarttimeFieldNumber;
const int RequestPunishListGmUserPmd_C::kEndtimeFieldNumber;
const int RequestPunishListGmUserPmd_C::kCurpageFieldNumber;
const int RequestPunishListGmUserPmd_C::kMaxpageFieldNumber;
const int RequestPunishListGmUserPmd_C::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestPunishListGmUserPmd_C::RequestPunishListGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestPunishListGmUserPmd_C)
}

void RequestPunishListGmUserPmd_C::InitAsDefaultInstance() {
}

RequestPunishListGmUserPmd_C::RequestPunishListGmUserPmd_C(const RequestPunishListGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestPunishListGmUserPmd_C)
}

void RequestPunishListGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmid_ = 0u;
  ptype_ = 0u;
  state_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPunishListGmUserPmd_C::~RequestPunishListGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestPunishListGmUserPmd_C)
  SharedDtor();
}

void RequestPunishListGmUserPmd_C::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestPunishListGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPunishListGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPunishListGmUserPmd_C_descriptor_;
}

const RequestPunishListGmUserPmd_C& RequestPunishListGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestPunishListGmUserPmd_C* RequestPunishListGmUserPmd_C::default_instance_ = NULL;

RequestPunishListGmUserPmd_C* RequestPunishListGmUserPmd_C::New() const {
  return new RequestPunishListGmUserPmd_C;
}

void RequestPunishListGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestPunishListGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, charid_);
    ZR_(gmid_, state_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  ZR_(curpage_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPunishListGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestPunishListGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 5;
      case 5: {
        if (tag == 40) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ptype;
        break;
      }

      // optional uint32 ptype = 6;
      case 6: {
        if (tag == 48) {
         parse_ptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ptype_)));
          set_has_ptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional uint32 state = 7;
      case 7: {
        if (tag == 56) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_starttime;
        break;
      }

      // optional uint64 starttime = 8;
      case 8: {
        if (tag == 64) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 9;
      case 9: {
        if (tag == 72) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 10;
      case 10: {
        if (tag == 80) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 11;
      case 11: {
        if (tag == 88) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 12;
      case 12: {
        if (tag == 96) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestPunishListGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestPunishListGmUserPmd_C)
  return false;
#undef DO_
}

void RequestPunishListGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestPunishListGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gmid(), output);
  }

  // optional uint32 ptype = 6;
  if (has_ptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ptype(), output);
  }

  // optional uint32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->state(), output);
  }

  // optional uint64 starttime = 8;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->starttime(), output);
  }

  // optional uint64 endtime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->endtime(), output);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curpage(), output);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->maxpage(), output);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestPunishListGmUserPmd_C)
}

::google::protobuf::uint8* RequestPunishListGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestPunishListGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gmid(), target);
  }

  // optional uint32 ptype = 6;
  if (has_ptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ptype(), target);
  }

  // optional uint32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->state(), target);
  }

  // optional uint64 starttime = 8;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->starttime(), target);
  }

  // optional uint64 endtime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->endtime(), target);
  }

  // optional uint32 curpage = 10;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curpage(), target);
  }

  // optional uint32 maxpage = 11;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->maxpage(), target);
  }

  // optional uint32 perpage = 12;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestPunishListGmUserPmd_C)
  return target;
}

int RequestPunishListGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 gmid = 5;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 ptype = 6;
    if (has_ptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ptype());
    }

    // optional uint32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 starttime = 8;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 endtime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 curpage = 10;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 11;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 12;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPunishListGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPunishListGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPunishListGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPunishListGmUserPmd_C::MergeFrom(const RequestPunishListGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_ptype()) {
      set_ptype(from.ptype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPunishListGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPunishListGmUserPmd_C::CopyFrom(const RequestPunishListGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPunishListGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestPunishListGmUserPmd_C::Swap(RequestPunishListGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(gmid_, other->gmid_);
    std::swap(ptype_, other->ptype_);
    std::swap(state_, other->state_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPunishListGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPunishListGmUserPmd_C_descriptor_;
  metadata.reflection = RequestPunishListGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnPunishListGmUserPmd_S::kDataFieldNumber;
const int ReturnPunishListGmUserPmd_S::kGmidFieldNumber;
const int ReturnPunishListGmUserPmd_S::kCurpageFieldNumber;
const int ReturnPunishListGmUserPmd_S::kMaxpageFieldNumber;
const int ReturnPunishListGmUserPmd_S::kPerpageFieldNumber;
#endif  // !_MSC_VER

ReturnPunishListGmUserPmd_S::ReturnPunishListGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnPunishListGmUserPmd_S)
}

void ReturnPunishListGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnPunishListGmUserPmd_S::ReturnPunishListGmUserPmd_S(const ReturnPunishListGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnPunishListGmUserPmd_S)
}

void ReturnPunishListGmUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnPunishListGmUserPmd_S::~ReturnPunishListGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnPunishListGmUserPmd_S)
  SharedDtor();
}

void ReturnPunishListGmUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnPunishListGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnPunishListGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnPunishListGmUserPmd_S_descriptor_;
}

const ReturnPunishListGmUserPmd_S& ReturnPunishListGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnPunishListGmUserPmd_S* ReturnPunishListGmUserPmd_S::default_instance_ = NULL;

ReturnPunishListGmUserPmd_S* ReturnPunishListGmUserPmd_S::New() const {
  return new ReturnPunishListGmUserPmd_S;
}

void ReturnPunishListGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnPunishListGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gmid_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnPunishListGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnPunishListGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.PunishUserInfo data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 2;
      case 2: {
        if (tag == 16) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 3;
      case 3: {
        if (tag == 24) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 4;
      case 4: {
        if (tag == 32) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 5;
      case 5: {
        if (tag == 40) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnPunishListGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnPunishListGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnPunishListGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnPunishListGmUserPmd_S)
  // repeated .Pmd.PunishUserInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmid(), output);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpage(), output);
  }

  // optional uint32 maxpage = 4;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxpage(), output);
  }

  // optional uint32 perpage = 5;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnPunishListGmUserPmd_S)
}

::google::protobuf::uint8* ReturnPunishListGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnPunishListGmUserPmd_S)
  // repeated .Pmd.PunishUserInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmid(), target);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpage(), target);
  }

  // optional uint32 maxpage = 4;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxpage(), target);
  }

  // optional uint32 perpage = 5;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnPunishListGmUserPmd_S)
  return target;
}

int ReturnPunishListGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 3;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 4;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 5;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.PunishUserInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnPunishListGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnPunishListGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnPunishListGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnPunishListGmUserPmd_S::MergeFrom(const ReturnPunishListGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnPunishListGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnPunishListGmUserPmd_S::CopyFrom(const ReturnPunishListGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnPunishListGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnPunishListGmUserPmd_S::Swap(ReturnPunishListGmUserPmd_S* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnPunishListGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnPunishListGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnPunishListGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemidFieldNumber;
const int ItemInfo::kItemnameFieldNumber;
const int ItemInfo::kItemnumFieldNumber;
const int ItemInfo::kItemtypeFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ItemInfo)
}

void ItemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemid_ = 0u;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemnum_ = 0u;
  itemtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:Pmd.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemname_;
  }
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(itemid_, itemtype_);
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemname;
        break;
      }

      // optional string itemname = 2;
      case 2: {
        if (tag == 18) {
         parse_itemname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemnum;
        break;
      }

      // optional uint32 itemnum = 3;
      case 3: {
        if (tag == 24) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemtype;
        break;
      }

      // optional uint32 itemtype = 4;
      case 4: {
        if (tag == 32) {
         parse_itemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ItemInfo)
  // required uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional string itemname = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemname(), output);
  }

  // optional uint32 itemnum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemnum(), output);
  }

  // optional uint32 itemtype = 4;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ItemInfo)
  // required uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional string itemname = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemname(), target);
  }

  // optional uint32 itemnum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemnum(), target);
  }

  // optional uint32 itemtype = 4;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string itemname = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional uint32 itemnum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

    // optional uint32 itemtype = 4;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemname_, other->itemname_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemTypeInfo::kItemtypeFieldNumber;
const int ItemTypeInfo::kTypenameFieldNumber;
const int ItemTypeInfo::kDataFieldNumber;
#endif  // !_MSC_VER

ItemTypeInfo::ItemTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ItemTypeInfo)
}

void ItemTypeInfo::InitAsDefaultInstance() {
}

ItemTypeInfo::ItemTypeInfo(const ItemTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ItemTypeInfo)
}

void ItemTypeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  itemtype_ = 0u;
  typename__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemTypeInfo::~ItemTypeInfo() {
  // @@protoc_insertion_point(destructor:Pmd.ItemTypeInfo)
  SharedDtor();
}

void ItemTypeInfo::SharedDtor() {
  if (typename__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typename__;
  }
  if (this != default_instance_) {
  }
}

void ItemTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemTypeInfo_descriptor_;
}

const ItemTypeInfo& ItemTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ItemTypeInfo* ItemTypeInfo::default_instance_ = NULL;

ItemTypeInfo* ItemTypeInfo::New() const {
  return new ItemTypeInfo;
}

void ItemTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    itemtype_ = 0u;
    if (has_typename_()) {
      if (typename__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typename__->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ItemTypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_typename;
        break;
      }

      // optional string typename = 2;
      case 2: {
        if (tag == 18) {
         parse_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typename_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typename_().data(), this->typename_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typename_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Pmd.ItemInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ItemTypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ItemTypeInfo)
  return false;
#undef DO_
}

void ItemTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ItemTypeInfo)
  // required uint32 itemtype = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemtype(), output);
  }

  // optional string typename = 2;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typename_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->typename_(), output);
  }

  // repeated .Pmd.ItemInfo data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ItemTypeInfo)
}

::google::protobuf::uint8* ItemTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ItemTypeInfo)
  // required uint32 itemtype = 1;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemtype(), target);
  }

  // optional string typename = 2;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typename_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->typename_(), target);
  }

  // repeated .Pmd.ItemInfo data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ItemTypeInfo)
  return target;
}

int ItemTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemtype = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

    // optional string typename = 2;
    if (has_typename_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typename_());
    }

  }
  // repeated .Pmd.ItemInfo data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemTypeInfo::MergeFrom(const ItemTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_typename_()) {
      set_typename_(from.typename_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemTypeInfo::CopyFrom(const ItemTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemTypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void ItemTypeInfo::Swap(ItemTypeInfo* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(typename__, other->typename__);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemTypeInfo_descriptor_;
  metadata.reflection = ItemTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestItemTypeInfoGmUserPmd_CS::kGameidFieldNumber;
const int RequestItemTypeInfoGmUserPmd_CS::kZoneidFieldNumber;
const int RequestItemTypeInfoGmUserPmd_CS::kGmidFieldNumber;
const int RequestItemTypeInfoGmUserPmd_CS::kDataFieldNumber;
const int RequestItemTypeInfoGmUserPmd_CS::kRetcodeFieldNumber;
const int RequestItemTypeInfoGmUserPmd_CS::kRetdescFieldNumber;
#endif  // !_MSC_VER

RequestItemTypeInfoGmUserPmd_CS::RequestItemTypeInfoGmUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestItemTypeInfoGmUserPmd_CS)
}

void RequestItemTypeInfoGmUserPmd_CS::InitAsDefaultInstance() {
}

RequestItemTypeInfoGmUserPmd_CS::RequestItemTypeInfoGmUserPmd_CS(const RequestItemTypeInfoGmUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestItemTypeInfoGmUserPmd_CS)
}

void RequestItemTypeInfoGmUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gmid_ = 0u;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestItemTypeInfoGmUserPmd_CS::~RequestItemTypeInfoGmUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestItemTypeInfoGmUserPmd_CS)
  SharedDtor();
}

void RequestItemTypeInfoGmUserPmd_CS::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void RequestItemTypeInfoGmUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestItemTypeInfoGmUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestItemTypeInfoGmUserPmd_CS_descriptor_;
}

const RequestItemTypeInfoGmUserPmd_CS& RequestItemTypeInfoGmUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestItemTypeInfoGmUserPmd_CS* RequestItemTypeInfoGmUserPmd_CS::default_instance_ = NULL;

RequestItemTypeInfoGmUserPmd_CS* RequestItemTypeInfoGmUserPmd_CS::New() const {
  return new RequestItemTypeInfoGmUserPmd_CS;
}

void RequestItemTypeInfoGmUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestItemTypeInfoGmUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(gameid_, zoneid_);
    ZR_(gmid_, retcode_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestItemTypeInfoGmUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestItemTypeInfoGmUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .Pmd.ItemTypeInfo data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(40)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 5;
      case 5: {
        if (tag == 40) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 6;
      case 6: {
        if (tag == 50) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestItemTypeInfoGmUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestItemTypeInfoGmUserPmd_CS)
  return false;
#undef DO_
}

void RequestItemTypeInfoGmUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestItemTypeInfoGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  // repeated .Pmd.ItemTypeInfo data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // optional uint32 retcode = 5;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->retcode(), output);
  }

  // optional string retdesc = 6;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestItemTypeInfoGmUserPmd_CS)
}

::google::protobuf::uint8* RequestItemTypeInfoGmUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestItemTypeInfoGmUserPmd_CS)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  // repeated .Pmd.ItemTypeInfo data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // optional uint32 retcode = 5;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->retcode(), target);
  }

  // optional string retdesc = 6;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestItemTypeInfoGmUserPmd_CS)
  return target;
}

int RequestItemTypeInfoGmUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 retcode = 5;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 6;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  // repeated .Pmd.ItemTypeInfo data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestItemTypeInfoGmUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestItemTypeInfoGmUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestItemTypeInfoGmUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestItemTypeInfoGmUserPmd_CS::MergeFrom(const RequestItemTypeInfoGmUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestItemTypeInfoGmUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestItemTypeInfoGmUserPmd_CS::CopyFrom(const RequestItemTypeInfoGmUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestItemTypeInfoGmUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RequestItemTypeInfoGmUserPmd_CS::Swap(RequestItemTypeInfoGmUserPmd_CS* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    data_.Swap(&other->data_);
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestItemTypeInfoGmUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestItemTypeInfoGmUserPmd_CS_descriptor_;
  metadata.reflection = RequestItemTypeInfoGmUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kGameidFieldNumber;
const int UserInfo::kZoneidFieldNumber;
const int UserInfo::kCharidFieldNumber;
const int UserInfo::kCharnameFieldNumber;
const int UserInfo::kProfessionFieldNumber;
const int UserInfo::kCountrynameFieldNumber;
const int UserInfo::kLevelFieldNumber;
const int UserInfo::kViplevelFieldNumber;
const int UserInfo::kOldzoneidFieldNumber;
const int UserInfo::kLastofftimeFieldNumber;
const int UserInfo::kLastloginipFieldNumber;
const int UserInfo::kGmlevelFieldNumber;
const int UserInfo::kCreatetimeFieldNumber;
const int UserInfo::kIsonlineFieldNumber;
const int UserInfo::kGlodnumFieldNumber;
const int UserInfo::kMoneyFieldNumber;
const int UserInfo::kTotalwinFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countryname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  viplevel_ = 0u;
  oldzoneid_ = 0u;
  lastofftime_ = 0u;
  lastloginip_ = 0u;
  gmlevel_ = 0u;
  createtime_ = 0u;
  isonline_ = 0u;
  glodnum_ = 0u;
  money_ = 0u;
  totalwin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:Pmd.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (profession_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete profession_;
  }
  if (countryname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete countryname_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, charid_);
    ZR_(level_, viplevel_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        profession_->clear();
      }
    }
    if (has_countryname()) {
      if (countryname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        countryname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(oldzoneid_, money_);
  }
  totalwin_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_profession;
        break;
      }

      // optional string profession = 5;
      case 5: {
        if (tag == 42) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "profession");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_countryname;
        break;
      }

      // optional string countryname = 6;
      case 6: {
        if (tag == 50) {
         parse_countryname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countryname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countryname().data(), this->countryname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "countryname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_viplevel;
        break;
      }

      // optional uint32 viplevel = 8;
      case 8: {
        if (tag == 64) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_oldzoneid;
        break;
      }

      // optional uint32 oldzoneid = 9;
      case 9: {
        if (tag == 72) {
         parse_oldzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldzoneid_)));
          set_has_oldzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lastofftime;
        break;
      }

      // optional uint32 lastofftime = 10;
      case 10: {
        if (tag == 80) {
         parse_lastofftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastofftime_)));
          set_has_lastofftime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lastloginip;
        break;
      }

      // optional uint32 lastloginip = 11;
      case 11: {
        if (tag == 88) {
         parse_lastloginip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastloginip_)));
          set_has_lastloginip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gmlevel;
        break;
      }

      // optional uint32 gmlevel = 12;
      case 12: {
        if (tag == 96) {
         parse_gmlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmlevel_)));
          set_has_gmlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 13;
      case 13: {
        if (tag == 104) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_isonline;
        break;
      }

      // optional uint32 isonline = 14;
      case 14: {
        if (tag == 112) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_glodnum;
        break;
      }

      // optional uint32 glodnum = 15;
      case 15: {
        if (tag == 120) {
         parse_glodnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glodnum_)));
          set_has_glodnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_money;
        break;
      }

      // optional uint32 money = 16;
      case 16: {
        if (tag == 128) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_totalwin;
        break;
      }

      // optional int64 totalwin = 17;
      case 17: {
        if (tag == 136) {
         parse_totalwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwin_)));
          set_has_totalwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserInfo)
  // optional uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // optional string profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "profession");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->profession(), output);
  }

  // optional string countryname = 6;
  if (has_countryname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countryname().data(), this->countryname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countryname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->countryname(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 viplevel = 8;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->viplevel(), output);
  }

  // optional uint32 oldzoneid = 9;
  if (has_oldzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->oldzoneid(), output);
  }

  // optional uint32 lastofftime = 10;
  if (has_lastofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lastofftime(), output);
  }

  // optional uint32 lastloginip = 11;
  if (has_lastloginip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lastloginip(), output);
  }

  // optional uint32 gmlevel = 12;
  if (has_gmlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gmlevel(), output);
  }

  // optional uint32 createtime = 13;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->createtime(), output);
  }

  // optional uint32 isonline = 14;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->isonline(), output);
  }

  // optional uint32 glodnum = 15;
  if (has_glodnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->glodnum(), output);
  }

  // optional uint32 money = 16;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->money(), output);
  }

  // optional int64 totalwin = 17;
  if (has_totalwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->totalwin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserInfo)
  // optional uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional string profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "profession");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->profession(), target);
  }

  // optional string countryname = 6;
  if (has_countryname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countryname().data(), this->countryname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "countryname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->countryname(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 viplevel = 8;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->viplevel(), target);
  }

  // optional uint32 oldzoneid = 9;
  if (has_oldzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->oldzoneid(), target);
  }

  // optional uint32 lastofftime = 10;
  if (has_lastofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->lastofftime(), target);
  }

  // optional uint32 lastloginip = 11;
  if (has_lastloginip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lastloginip(), target);
  }

  // optional uint32 gmlevel = 12;
  if (has_gmlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gmlevel(), target);
  }

  // optional uint32 createtime = 13;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->createtime(), target);
  }

  // optional uint32 isonline = 14;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->isonline(), target);
  }

  // optional uint32 glodnum = 15;
  if (has_glodnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->glodnum(), target);
  }

  // optional uint32 money = 16;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->money(), target);
  }

  // optional int64 totalwin = 17;
  if (has_totalwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->totalwin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional string profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // optional string countryname = 6;
    if (has_countryname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countryname());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 viplevel = 8;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 oldzoneid = 9;
    if (has_oldzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldzoneid());
    }

    // optional uint32 lastofftime = 10;
    if (has_lastofftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastofftime());
    }

    // optional uint32 lastloginip = 11;
    if (has_lastloginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastloginip());
    }

    // optional uint32 gmlevel = 12;
    if (has_gmlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmlevel());
    }

    // optional uint32 createtime = 13;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 isonline = 14;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isonline());
    }

    // optional uint32 glodnum = 15;
    if (has_glodnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->glodnum());
    }

    // optional uint32 money = 16;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 totalwin = 17;
    if (has_totalwin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalwin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_countryname()) {
      set_countryname(from.countryname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_oldzoneid()) {
      set_oldzoneid(from.oldzoneid());
    }
    if (from.has_lastofftime()) {
      set_lastofftime(from.lastofftime());
    }
    if (from.has_lastloginip()) {
      set_lastloginip(from.lastloginip());
    }
    if (from.has_gmlevel()) {
      set_gmlevel(from.gmlevel());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_glodnum()) {
      set_glodnum(from.glodnum());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_totalwin()) {
      set_totalwin(from.totalwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(profession_, other->profession_);
    std::swap(countryname_, other->countryname_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(oldzoneid_, other->oldzoneid_);
    std::swap(lastofftime_, other->lastofftime_);
    std::swap(lastloginip_, other->lastloginip_);
    std::swap(gmlevel_, other->gmlevel_);
    std::swap(createtime_, other->createtime_);
    std::swap(isonline_, other->isonline_);
    std::swap(glodnum_, other->glodnum_);
    std::swap(money_, other->money_);
    std::swap(totalwin_, other->totalwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUserInfoGmUserPmd_C::kGameidFieldNumber;
const int RequestUserInfoGmUserPmd_C::kZoneidFieldNumber;
const int RequestUserInfoGmUserPmd_C::kCharidFieldNumber;
const int RequestUserInfoGmUserPmd_C::kCharnameFieldNumber;
const int RequestUserInfoGmUserPmd_C::kGmidFieldNumber;
#endif  // !_MSC_VER

RequestUserInfoGmUserPmd_C::RequestUserInfoGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestUserInfoGmUserPmd_C)
}

void RequestUserInfoGmUserPmd_C::InitAsDefaultInstance() {
}

RequestUserInfoGmUserPmd_C::RequestUserInfoGmUserPmd_C(const RequestUserInfoGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestUserInfoGmUserPmd_C)
}

void RequestUserInfoGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUserInfoGmUserPmd_C::~RequestUserInfoGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestUserInfoGmUserPmd_C)
  SharedDtor();
}

void RequestUserInfoGmUserPmd_C::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestUserInfoGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUserInfoGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUserInfoGmUserPmd_C_descriptor_;
}

const RequestUserInfoGmUserPmd_C& RequestUserInfoGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestUserInfoGmUserPmd_C* RequestUserInfoGmUserPmd_C::default_instance_ = NULL;

RequestUserInfoGmUserPmd_C* RequestUserInfoGmUserPmd_C::New() const {
  return new RequestUserInfoGmUserPmd_C;
}

void RequestUserInfoGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUserInfoGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gameid_, charid_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    gmid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUserInfoGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestUserInfoGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 5;
      case 5: {
        if (tag == 40) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestUserInfoGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestUserInfoGmUserPmd_C)
  return false;
#undef DO_
}

void RequestUserInfoGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestUserInfoGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestUserInfoGmUserPmd_C)
}

::google::protobuf::uint8* RequestUserInfoGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestUserInfoGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestUserInfoGmUserPmd_C)
  return target;
}

int RequestUserInfoGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 gmid = 5;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUserInfoGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUserInfoGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUserInfoGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUserInfoGmUserPmd_C::MergeFrom(const RequestUserInfoGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUserInfoGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUserInfoGmUserPmd_C::CopyFrom(const RequestUserInfoGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUserInfoGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestUserInfoGmUserPmd_C::Swap(RequestUserInfoGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUserInfoGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUserInfoGmUserPmd_C_descriptor_;
  metadata.reflection = RequestUserInfoGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnUserInfoGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnUserInfoGmUserPmd_S::kRetdescFieldNumber;
const int ReturnUserInfoGmUserPmd_S::kDataFieldNumber;
const int ReturnUserInfoGmUserPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

ReturnUserInfoGmUserPmd_S::ReturnUserInfoGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnUserInfoGmUserPmd_S)
}

void ReturnUserInfoGmUserPmd_S::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::UserInfo*>(&::Pmd::UserInfo::default_instance());
}

ReturnUserInfoGmUserPmd_S::ReturnUserInfoGmUserPmd_S(const ReturnUserInfoGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnUserInfoGmUserPmd_S)
}

void ReturnUserInfoGmUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnUserInfoGmUserPmd_S::~ReturnUserInfoGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnUserInfoGmUserPmd_S)
  SharedDtor();
}

void ReturnUserInfoGmUserPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void ReturnUserInfoGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnUserInfoGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnUserInfoGmUserPmd_S_descriptor_;
}

const ReturnUserInfoGmUserPmd_S& ReturnUserInfoGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnUserInfoGmUserPmd_S* ReturnUserInfoGmUserPmd_S::default_instance_ = NULL;

ReturnUserInfoGmUserPmd_S* ReturnUserInfoGmUserPmd_S::New() const {
  return new ReturnUserInfoGmUserPmd_S;
}

void ReturnUserInfoGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnUserInfoGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(retcode_, gmid_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::UserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnUserInfoGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnUserInfoGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required .Pmd.UserInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnUserInfoGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnUserInfoGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnUserInfoGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnUserInfoGmUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // required .Pmd.UserInfo data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // required uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnUserInfoGmUserPmd_S)
}

::google::protobuf::uint8* ReturnUserInfoGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnUserInfoGmUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // required .Pmd.UserInfo data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // required uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnUserInfoGmUserPmd_S)
  return target;
}

int ReturnUserInfoGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // required .Pmd.UserInfo data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // required uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnUserInfoGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnUserInfoGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnUserInfoGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnUserInfoGmUserPmd_S::MergeFrom(const ReturnUserInfoGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_data()) {
      mutable_data()->::Pmd::UserInfo::MergeFrom(from.data());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnUserInfoGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnUserInfoGmUserPmd_S::CopyFrom(const ReturnUserInfoGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnUserInfoGmUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void ReturnUserInfoGmUserPmd_S::Swap(ReturnUserInfoGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(data_, other->data_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnUserInfoGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnUserInfoGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnUserInfoGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUserPackageGmUserPmd_C::kGameidFieldNumber;
const int RequestUserPackageGmUserPmd_C::kZoneidFieldNumber;
const int RequestUserPackageGmUserPmd_C::kCharidFieldNumber;
const int RequestUserPackageGmUserPmd_C::kCharnameFieldNumber;
const int RequestUserPackageGmUserPmd_C::kGmidFieldNumber;
#endif  // !_MSC_VER

RequestUserPackageGmUserPmd_C::RequestUserPackageGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestUserPackageGmUserPmd_C)
}

void RequestUserPackageGmUserPmd_C::InitAsDefaultInstance() {
}

RequestUserPackageGmUserPmd_C::RequestUserPackageGmUserPmd_C(const RequestUserPackageGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestUserPackageGmUserPmd_C)
}

void RequestUserPackageGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUserPackageGmUserPmd_C::~RequestUserPackageGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestUserPackageGmUserPmd_C)
  SharedDtor();
}

void RequestUserPackageGmUserPmd_C::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestUserPackageGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUserPackageGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUserPackageGmUserPmd_C_descriptor_;
}

const RequestUserPackageGmUserPmd_C& RequestUserPackageGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestUserPackageGmUserPmd_C* RequestUserPackageGmUserPmd_C::default_instance_ = NULL;

RequestUserPackageGmUserPmd_C* RequestUserPackageGmUserPmd_C::New() const {
  return new RequestUserPackageGmUserPmd_C;
}

void RequestUserPackageGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUserPackageGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gameid_, charid_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    gmid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUserPackageGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestUserPackageGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional string charname = 4;
      case 4: {
        if (tag == 34) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 5;
      case 5: {
        if (tag == 40) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestUserPackageGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestUserPackageGmUserPmd_C)
  return false;
#undef DO_
}

void RequestUserPackageGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestUserPackageGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->charname(), output);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestUserPackageGmUserPmd_C)
}

::google::protobuf::uint8* RequestUserPackageGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestUserPackageGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->charname(), target);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestUserPackageGmUserPmd_C)
  return target;
}

int RequestUserPackageGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 gmid = 5;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUserPackageGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUserPackageGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUserPackageGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUserPackageGmUserPmd_C::MergeFrom(const RequestUserPackageGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUserPackageGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUserPackageGmUserPmd_C::CopyFrom(const RequestUserPackageGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUserPackageGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestUserPackageGmUserPmd_C::Swap(RequestUserPackageGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUserPackageGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUserPackageGmUserPmd_C_descriptor_;
  metadata.reflection = RequestUserPackageGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnUserPackageGmUserPmd_S::kDataFieldNumber;
const int ReturnUserPackageGmUserPmd_S::kGameidFieldNumber;
const int ReturnUserPackageGmUserPmd_S::kZoneidFieldNumber;
const int ReturnUserPackageGmUserPmd_S::kCharidFieldNumber;
const int ReturnUserPackageGmUserPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

ReturnUserPackageGmUserPmd_S::ReturnUserPackageGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnUserPackageGmUserPmd_S)
}

void ReturnUserPackageGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnUserPackageGmUserPmd_S::ReturnUserPackageGmUserPmd_S(const ReturnUserPackageGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnUserPackageGmUserPmd_S)
}

void ReturnUserPackageGmUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnUserPackageGmUserPmd_S::~ReturnUserPackageGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnUserPackageGmUserPmd_S)
  SharedDtor();
}

void ReturnUserPackageGmUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnUserPackageGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnUserPackageGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnUserPackageGmUserPmd_S_descriptor_;
}

const ReturnUserPackageGmUserPmd_S& ReturnUserPackageGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnUserPackageGmUserPmd_S* ReturnUserPackageGmUserPmd_S::default_instance_ = NULL;

ReturnUserPackageGmUserPmd_S* ReturnUserPackageGmUserPmd_S::New() const {
  return new ReturnUserPackageGmUserPmd_S;
}

void ReturnUserPackageGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnUserPackageGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gameid_, gmid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnUserPackageGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnUserPackageGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.ItemTypeInfo data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // required uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 5;
      case 5: {
        if (tag == 40) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnUserPackageGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnUserPackageGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnUserPackageGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnUserPackageGmUserPmd_S)
  // repeated .Pmd.ItemTypeInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // required uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // required uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // required uint32 gmid = 5;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnUserPackageGmUserPmd_S)
}

::google::protobuf::uint8* ReturnUserPackageGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnUserPackageGmUserPmd_S)
  // repeated .Pmd.ItemTypeInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // required uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // required uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // required uint32 gmid = 5;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnUserPackageGmUserPmd_S)
  return target;
}

int ReturnUserPackageGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 gmid = 5;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  // repeated .Pmd.ItemTypeInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnUserPackageGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnUserPackageGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnUserPackageGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnUserPackageGmUserPmd_S::MergeFrom(const ReturnUserPackageGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnUserPackageGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnUserPackageGmUserPmd_S::CopyFrom(const ReturnUserPackageGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnUserPackageGmUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void ReturnUserPackageGmUserPmd_S::Swap(ReturnUserPackageGmUserPmd_S* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnUserPackageGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnUserPackageGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnUserPackageGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestModifyUserInfoGmUserPmd_C::kGameidFieldNumber;
const int RequestModifyUserInfoGmUserPmd_C::kZoneidFieldNumber;
const int RequestModifyUserInfoGmUserPmd_C::kCharidFieldNumber;
const int RequestModifyUserInfoGmUserPmd_C::kOptypeFieldNumber;
const int RequestModifyUserInfoGmUserPmd_C::kCharnameFieldNumber;
const int RequestModifyUserInfoGmUserPmd_C::kOpnumFieldNumber;
const int RequestModifyUserInfoGmUserPmd_C::kGmidFieldNumber;
#endif  // !_MSC_VER

RequestModifyUserInfoGmUserPmd_C::RequestModifyUserInfoGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestModifyUserInfoGmUserPmd_C)
}

void RequestModifyUserInfoGmUserPmd_C::InitAsDefaultInstance() {
}

RequestModifyUserInfoGmUserPmd_C::RequestModifyUserInfoGmUserPmd_C(const RequestModifyUserInfoGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestModifyUserInfoGmUserPmd_C)
}

void RequestModifyUserInfoGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  optype_ = 0u;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opnum_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestModifyUserInfoGmUserPmd_C::~RequestModifyUserInfoGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestModifyUserInfoGmUserPmd_C)
  SharedDtor();
}

void RequestModifyUserInfoGmUserPmd_C::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestModifyUserInfoGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestModifyUserInfoGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestModifyUserInfoGmUserPmd_C_descriptor_;
}

const RequestModifyUserInfoGmUserPmd_C& RequestModifyUserInfoGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestModifyUserInfoGmUserPmd_C* RequestModifyUserInfoGmUserPmd_C::default_instance_ = NULL;

RequestModifyUserInfoGmUserPmd_C* RequestModifyUserInfoGmUserPmd_C::New() const {
  return new RequestModifyUserInfoGmUserPmd_C;
}

void RequestModifyUserInfoGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestModifyUserInfoGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(gameid_, charid_);
    ZR_(optype_, gmid_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestModifyUserInfoGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestModifyUserInfoGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optype;
        break;
      }

      // required uint32 optype = 4;
      case 4: {
        if (tag == 32) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charname;
        break;
      }

      // optional string charname = 5;
      case 5: {
        if (tag == 42) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_opnum;
        break;
      }

      // optional uint32 opnum = 6;
      case 6: {
        if (tag == 48) {
         parse_opnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opnum_)));
          set_has_opnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 7;
      case 7: {
        if (tag == 56) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestModifyUserInfoGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestModifyUserInfoGmUserPmd_C)
  return false;
#undef DO_
}

void RequestModifyUserInfoGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestModifyUserInfoGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 optype = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->optype(), output);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->charname(), output);
  }

  // optional uint32 opnum = 6;
  if (has_opnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->opnum(), output);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestModifyUserInfoGmUserPmd_C)
}

::google::protobuf::uint8* RequestModifyUserInfoGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestModifyUserInfoGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 optype = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->optype(), target);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->charname(), target);
  }

  // optional uint32 opnum = 6;
  if (has_opnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->opnum(), target);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestModifyUserInfoGmUserPmd_C)
  return target;
}

int RequestModifyUserInfoGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 optype = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional string charname = 5;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 opnum = 6;
    if (has_opnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opnum());
    }

    // optional uint32 gmid = 7;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestModifyUserInfoGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestModifyUserInfoGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestModifyUserInfoGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestModifyUserInfoGmUserPmd_C::MergeFrom(const RequestModifyUserInfoGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_opnum()) {
      set_opnum(from.opnum());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestModifyUserInfoGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestModifyUserInfoGmUserPmd_C::CopyFrom(const RequestModifyUserInfoGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestModifyUserInfoGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestModifyUserInfoGmUserPmd_C::Swap(RequestModifyUserInfoGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(optype_, other->optype_);
    std::swap(charname_, other->charname_);
    std::swap(opnum_, other->opnum_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestModifyUserInfoGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestModifyUserInfoGmUserPmd_C_descriptor_;
  metadata.reflection = RequestModifyUserInfoGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnModifyUserInfoGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnModifyUserInfoGmUserPmd_S::kRetdescFieldNumber;
const int ReturnModifyUserInfoGmUserPmd_S::kZoneidFieldNumber;
const int ReturnModifyUserInfoGmUserPmd_S::kCharidFieldNumber;
const int ReturnModifyUserInfoGmUserPmd_S::kGmidFieldNumber;
#endif  // !_MSC_VER

ReturnModifyUserInfoGmUserPmd_S::ReturnModifyUserInfoGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnModifyUserInfoGmUserPmd_S)
}

void ReturnModifyUserInfoGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnModifyUserInfoGmUserPmd_S::ReturnModifyUserInfoGmUserPmd_S(const ReturnModifyUserInfoGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnModifyUserInfoGmUserPmd_S)
}

void ReturnModifyUserInfoGmUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnModifyUserInfoGmUserPmd_S::~ReturnModifyUserInfoGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnModifyUserInfoGmUserPmd_S)
  SharedDtor();
}

void ReturnModifyUserInfoGmUserPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void ReturnModifyUserInfoGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnModifyUserInfoGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnModifyUserInfoGmUserPmd_S_descriptor_;
}

const ReturnModifyUserInfoGmUserPmd_S& ReturnModifyUserInfoGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnModifyUserInfoGmUserPmd_S* ReturnModifyUserInfoGmUserPmd_S::default_instance_ = NULL;

ReturnModifyUserInfoGmUserPmd_S* ReturnModifyUserInfoGmUserPmd_S::New() const {
  return new ReturnModifyUserInfoGmUserPmd_S;
}

void ReturnModifyUserInfoGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnModifyUserInfoGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(retcode_, gmid_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnModifyUserInfoGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnModifyUserInfoGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 5;
      case 5: {
        if (tag == 40) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnModifyUserInfoGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnModifyUserInfoGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnModifyUserInfoGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnModifyUserInfoGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnModifyUserInfoGmUserPmd_S)
}

::google::protobuf::uint8* ReturnModifyUserInfoGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnModifyUserInfoGmUserPmd_S)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint32 gmid = 5;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnModifyUserInfoGmUserPmd_S)
  return target;
}

int ReturnModifyUserInfoGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 gmid = 5;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnModifyUserInfoGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnModifyUserInfoGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnModifyUserInfoGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnModifyUserInfoGmUserPmd_S::MergeFrom(const ReturnModifyUserInfoGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnModifyUserInfoGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnModifyUserInfoGmUserPmd_S::CopyFrom(const ReturnModifyUserInfoGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnModifyUserInfoGmUserPmd_S::IsInitialized() const {

  return true;
}

void ReturnModifyUserInfoGmUserPmd_S::Swap(ReturnModifyUserInfoGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnModifyUserInfoGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnModifyUserInfoGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnModifyUserInfoGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUserRecordGmUserPmd_C::kGameidFieldNumber;
const int RequestUserRecordGmUserPmd_C::kZoneidFieldNumber;
const int RequestUserRecordGmUserPmd_C::kCharidFieldNumber;
const int RequestUserRecordGmUserPmd_C::kOptypeFieldNumber;
const int RequestUserRecordGmUserPmd_C::kCharnameFieldNumber;
const int RequestUserRecordGmUserPmd_C::kRecordtimeFieldNumber;
const int RequestUserRecordGmUserPmd_C::kGmidFieldNumber;
const int RequestUserRecordGmUserPmd_C::kCurpageFieldNumber;
const int RequestUserRecordGmUserPmd_C::kMaxpageFieldNumber;
const int RequestUserRecordGmUserPmd_C::kPerpageFieldNumber;
#endif  // !_MSC_VER

RequestUserRecordGmUserPmd_C::RequestUserRecordGmUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestUserRecordGmUserPmd_C)
}

void RequestUserRecordGmUserPmd_C::InitAsDefaultInstance() {
}

RequestUserRecordGmUserPmd_C::RequestUserRecordGmUserPmd_C(const RequestUserRecordGmUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestUserRecordGmUserPmd_C)
}

void RequestUserRecordGmUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  optype_ = 0u;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordtime_ = 0u;
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUserRecordGmUserPmd_C::~RequestUserRecordGmUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestUserRecordGmUserPmd_C)
  SharedDtor();
}

void RequestUserRecordGmUserPmd_C::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RequestUserRecordGmUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUserRecordGmUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUserRecordGmUserPmd_C_descriptor_;
}

const RequestUserRecordGmUserPmd_C& RequestUserRecordGmUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RequestUserRecordGmUserPmd_C* RequestUserRecordGmUserPmd_C::default_instance_ = NULL;

RequestUserRecordGmUserPmd_C* RequestUserRecordGmUserPmd_C::New() const {
  return new RequestUserRecordGmUserPmd_C;
}

void RequestUserRecordGmUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUserRecordGmUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, charid_);
    ZR_(optype_, curpage_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  ZR_(maxpage_, perpage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUserRecordGmUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestUserRecordGmUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optype;
        break;
      }

      // required uint32 optype = 4;
      case 4: {
        if (tag == 32) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charname;
        break;
      }

      // optional string charname = 5;
      case 5: {
        if (tag == 42) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_recordtime;
        break;
      }

      // optional uint32 recordtime = 6;
      case 6: {
        if (tag == 48) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 7;
      case 7: {
        if (tag == 56) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 8;
      case 8: {
        if (tag == 64) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 9;
      case 9: {
        if (tag == 72) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 10;
      case 10: {
        if (tag == 80) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestUserRecordGmUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestUserRecordGmUserPmd_C)
  return false;
#undef DO_
}

void RequestUserRecordGmUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestUserRecordGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // required uint32 optype = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->optype(), output);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->charname(), output);
  }

  // optional uint32 recordtime = 6;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->recordtime(), output);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gmid(), output);
  }

  // optional uint32 curpage = 8;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->curpage(), output);
  }

  // optional uint32 maxpage = 9;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->maxpage(), output);
  }

  // optional uint32 perpage = 10;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestUserRecordGmUserPmd_C)
}

::google::protobuf::uint8* RequestUserRecordGmUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestUserRecordGmUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // required uint32 optype = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->optype(), target);
  }

  // optional string charname = 5;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->charname(), target);
  }

  // optional uint32 recordtime = 6;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->recordtime(), target);
  }

  // optional uint32 gmid = 7;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gmid(), target);
  }

  // optional uint32 curpage = 8;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->curpage(), target);
  }

  // optional uint32 maxpage = 9;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->maxpage(), target);
  }

  // optional uint32 perpage = 10;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestUserRecordGmUserPmd_C)
  return target;
}

int RequestUserRecordGmUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // required uint32 optype = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

    // optional string charname = 5;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 recordtime = 6;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordtime());
    }

    // optional uint32 gmid = 7;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 8;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 maxpage = 9;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 10;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUserRecordGmUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUserRecordGmUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUserRecordGmUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUserRecordGmUserPmd_C::MergeFrom(const RequestUserRecordGmUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUserRecordGmUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUserRecordGmUserPmd_C::CopyFrom(const RequestUserRecordGmUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUserRecordGmUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void RequestUserRecordGmUserPmd_C::Swap(RequestUserRecordGmUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    std::swap(optype_, other->optype_);
    std::swap(charname_, other->charname_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUserRecordGmUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUserRecordGmUserPmd_C_descriptor_;
  metadata.reflection = RequestUserRecordGmUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordInfo::kRecordidFieldNumber;
const int RecordInfo::kStateFieldNumber;
const int RecordInfo::kGoldFieldNumber;
const int RecordInfo::kCoinFieldNumber;
const int RecordInfo::kStarttimeFieldNumber;
const int RecordInfo::kEndtimeFieldNumber;
#endif  // !_MSC_VER

RecordInfo::RecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RecordInfo)
}

void RecordInfo::InitAsDefaultInstance() {
}

RecordInfo::RecordInfo(const RecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RecordInfo)
}

void RecordInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = 0u;
  state_ = 0u;
  gold_ = 0u;
  coin_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordInfo::~RecordInfo() {
  // @@protoc_insertion_point(destructor:Pmd.RecordInfo)
  SharedDtor();
}

void RecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordInfo_descriptor_;
}

const RecordInfo& RecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

RecordInfo* RecordInfo::default_instance_ = NULL;

RecordInfo* RecordInfo::New() const {
  return new RecordInfo;
}

void RecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(recordid_, endtime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 recordid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 4;
      case 4: {
        if (tag == 32) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starttime;
        break;
      }

      // required uint32 starttime = 5;
      case 5: {
        if (tag == 40) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 6;
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RecordInfo)
  return false;
#undef DO_
}

void RecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RecordInfo)
  // required uint32 recordid = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordid(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold(), output);
  }

  // optional uint32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coin(), output);
  }

  // required uint32 starttime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->starttime(), output);
  }

  // optional uint32 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RecordInfo)
}

::google::protobuf::uint8* RecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RecordInfo)
  // required uint32 recordid = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordid(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gold(), target);
  }

  // optional uint32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->coin(), target);
  }

  // required uint32 starttime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->starttime(), target);
  }

  // optional uint32 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RecordInfo)
  return target;
}

int RecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 recordid = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordid());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 starttime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordInfo::MergeFrom(const RecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordInfo::CopyFrom(const RecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void RecordInfo::Swap(RecordInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(state_, other->state_);
    std::swap(gold_, other->gold_);
    std::swap(coin_, other->coin_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordInfo_descriptor_;
  metadata.reflection = RecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnUserRecordGmUserPmd_S::kRetcodeFieldNumber;
const int ReturnUserRecordGmUserPmd_S::kRetdescFieldNumber;
const int ReturnUserRecordGmUserPmd_S::kDataFieldNumber;
const int ReturnUserRecordGmUserPmd_S::kRecordnumFieldNumber;
const int ReturnUserRecordGmUserPmd_S::kGmidFieldNumber;
const int ReturnUserRecordGmUserPmd_S::kCurpageFieldNumber;
const int ReturnUserRecordGmUserPmd_S::kMaxpageFieldNumber;
const int ReturnUserRecordGmUserPmd_S::kPerpageFieldNumber;
#endif  // !_MSC_VER

ReturnUserRecordGmUserPmd_S::ReturnUserRecordGmUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnUserRecordGmUserPmd_S)
}

void ReturnUserRecordGmUserPmd_S::InitAsDefaultInstance() {
}

ReturnUserRecordGmUserPmd_S::ReturnUserRecordGmUserPmd_S(const ReturnUserRecordGmUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnUserRecordGmUserPmd_S)
}

void ReturnUserRecordGmUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordnum_ = 0u;
  gmid_ = 0u;
  curpage_ = 0u;
  maxpage_ = 0u;
  perpage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnUserRecordGmUserPmd_S::~ReturnUserRecordGmUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnUserRecordGmUserPmd_S)
  SharedDtor();
}

void ReturnUserRecordGmUserPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void ReturnUserRecordGmUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnUserRecordGmUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnUserRecordGmUserPmd_S_descriptor_;
}

const ReturnUserRecordGmUserPmd_S& ReturnUserRecordGmUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ReturnUserRecordGmUserPmd_S* ReturnUserRecordGmUserPmd_S::default_instance_ = NULL;

ReturnUserRecordGmUserPmd_S* ReturnUserRecordGmUserPmd_S::New() const {
  return new ReturnUserRecordGmUserPmd_S;
}

void ReturnUserRecordGmUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReturnUserRecordGmUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(retcode_, recordnum_);
    ZR_(gmid_, perpage_);
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnUserRecordGmUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnUserRecordGmUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Pmd.RecordInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectTag(32)) goto parse_recordnum;
        break;
      }

      // optional uint32 recordnum = 4;
      case 4: {
        if (tag == 32) {
         parse_recordnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordnum_)));
          set_has_recordnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gmid;
        break;
      }

      // required uint32 gmid = 5;
      case 5: {
        if (tag == 40) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 6;
      case 6: {
        if (tag == 48) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxpage;
        break;
      }

      // optional uint32 maxpage = 7;
      case 7: {
        if (tag == 56) {
         parse_maxpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpage_)));
          set_has_maxpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_perpage;
        break;
      }

      // optional uint32 perpage = 8;
      case 8: {
        if (tag == 64) {
         parse_perpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perpage_)));
          set_has_perpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnUserRecordGmUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnUserRecordGmUserPmd_S)
  return false;
#undef DO_
}

void ReturnUserRecordGmUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnUserRecordGmUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  // repeated .Pmd.RecordInfo data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // optional uint32 recordnum = 4;
  if (has_recordnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recordnum(), output);
  }

  // required uint32 gmid = 5;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gmid(), output);
  }

  // optional uint32 curpage = 6;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->curpage(), output);
  }

  // optional uint32 maxpage = 7;
  if (has_maxpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxpage(), output);
  }

  // optional uint32 perpage = 8;
  if (has_perpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->perpage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnUserRecordGmUserPmd_S)
}

::google::protobuf::uint8* ReturnUserRecordGmUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnUserRecordGmUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  // repeated .Pmd.RecordInfo data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  // optional uint32 recordnum = 4;
  if (has_recordnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recordnum(), target);
  }

  // required uint32 gmid = 5;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gmid(), target);
  }

  // optional uint32 curpage = 6;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->curpage(), target);
  }

  // optional uint32 maxpage = 7;
  if (has_maxpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxpage(), target);
  }

  // optional uint32 perpage = 8;
  if (has_perpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->perpage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnUserRecordGmUserPmd_S)
  return target;
}

int ReturnUserRecordGmUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

    // optional uint32 recordnum = 4;
    if (has_recordnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordnum());
    }

    // required uint32 gmid = 5;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 curpage = 6;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 maxpage = 7;
    if (has_maxpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpage());
    }

    // optional uint32 perpage = 8;
    if (has_perpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perpage());
    }

  }
  // repeated .Pmd.RecordInfo data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnUserRecordGmUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnUserRecordGmUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnUserRecordGmUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnUserRecordGmUserPmd_S::MergeFrom(const ReturnUserRecordGmUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
    if (from.has_recordnum()) {
      set_recordnum(from.recordnum());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_maxpage()) {
      set_maxpage(from.maxpage());
    }
    if (from.has_perpage()) {
      set_perpage(from.perpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnUserRecordGmUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnUserRecordGmUserPmd_S::CopyFrom(const ReturnUserRecordGmUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnUserRecordGmUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void ReturnUserRecordGmUserPmd_S::Swap(ReturnUserRecordGmUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retdesc_, other->retdesc_);
    data_.Swap(&other->data_);
    std::swap(recordnum_, other->recordnum_);
    std::swap(gmid_, other->gmid_);
    std::swap(curpage_, other->curpage_);
    std::swap(maxpage_, other->maxpage_);
    std::swap(perpage_, other->perpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnUserRecordGmUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnUserRecordGmUserPmd_S_descriptor_;
  metadata.reflection = ReturnUserRecordGmUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionBaseData::kTimeFieldNumber;
const int QuestionBaseData::kIdFieldNumber;
const int QuestionBaseData::kUseridFieldNumber;
const int QuestionBaseData::kZoneidFieldNumber;
const int QuestionBaseData::kCountyridFieldNumber;
const int QuestionBaseData::kSceneidFieldNumber;
const int QuestionBaseData::kNameFieldNumber;
#endif  // !_MSC_VER

QuestionBaseData::QuestionBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.QuestionBaseData)
}

void QuestionBaseData::InitAsDefaultInstance() {
}

QuestionBaseData::QuestionBaseData(const QuestionBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.QuestionBaseData)
}

void QuestionBaseData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = 0u;
  id_ = 0u;
  userid_ = 0u;
  zoneid_ = 0u;
  countyrid_ = 0u;
  sceneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionBaseData::~QuestionBaseData() {
  // @@protoc_insertion_point(destructor:Pmd.QuestionBaseData)
  SharedDtor();
}

void QuestionBaseData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QuestionBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionBaseData_descriptor_;
}

const QuestionBaseData& QuestionBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

QuestionBaseData* QuestionBaseData::default_instance_ = NULL;

QuestionBaseData* QuestionBaseData::New() const {
  return new QuestionBaseData;
}

void QuestionBaseData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestionBaseData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(time_, sceneid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.QuestionBaseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_countyrid;
        break;
      }

      // optional uint32 countyrid = 5;
      case 5: {
        if (tag == 40) {
         parse_countyrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countyrid_)));
          set_has_countyrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 6;
      case 6: {
        if (tag == 48) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.QuestionBaseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.QuestionBaseData)
  return false;
#undef DO_
}

void QuestionBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.QuestionBaseData)
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->userid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional uint32 countyrid = 5;
  if (has_countyrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->countyrid(), output);
  }

  // optional uint32 sceneid = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sceneid(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.QuestionBaseData)
}

::google::protobuf::uint8* QuestionBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.QuestionBaseData)
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->userid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional uint32 countyrid = 5;
  if (has_countyrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->countyrid(), target);
  }

  // optional uint32 sceneid = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sceneid(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.QuestionBaseData)
  return target;
}

int QuestionBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countyrid = 5;
    if (has_countyrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countyrid());
    }

    // optional uint32 sceneid = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionBaseData::MergeFrom(const QuestionBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countyrid()) {
      set_countyrid(from.countyrid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionBaseData::CopyFrom(const QuestionBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionBaseData::IsInitialized() const {

  return true;
}

void QuestionBaseData::Swap(QuestionBaseData* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(countyrid_, other->countyrid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionBaseData_descriptor_;
  metadata.reflection = QuestionBaseData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ForbidAccountData_ForbidType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForbidAccountData_ForbidType_descriptor_;
}
bool ForbidAccountData_ForbidType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ForbidAccountData_ForbidType ForbidAccountData::ForbidType_AllZone;
const ForbidAccountData_ForbidType ForbidAccountData::ForbidType_CurrentZone;
const ForbidAccountData_ForbidType ForbidAccountData::ForbidType_MIN;
const ForbidAccountData_ForbidType ForbidAccountData::ForbidType_MAX;
const int ForbidAccountData::ForbidType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ForbidAccountData::kZoneidFieldNumber;
const int ForbidAccountData::kGmidFieldNumber;
const int ForbidAccountData::kGmnameFieldNumber;
const int ForbidAccountData::kAccidFieldNumber;
const int ForbidAccountData::kIpFieldNumber;
const int ForbidAccountData::kForbidTypeFieldNumber;
const int ForbidAccountData::kReservedFieldNumber;
const int ForbidAccountData::kCharidFieldNumber;
const int ForbidAccountData::kCharnameFieldNumber;
const int ForbidAccountData::kBegtimeFieldNumber;
const int ForbidAccountData::kEndtimeFieldNumber;
const int ForbidAccountData::kDescFieldNumber;
#endif  // !_MSC_VER

ForbidAccountData::ForbidAccountData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ForbidAccountData)
}

void ForbidAccountData::InitAsDefaultInstance() {
}

ForbidAccountData::ForbidAccountData(const ForbidAccountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ForbidAccountData)
}

void ForbidAccountData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zoneid_ = 0u;
  gmid_ = 0u;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = 0u;
  ip_ = 0u;
  forbidtype_ = 0u;
  reserved_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charid_ = 0u;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begtime_ = 0u;
  endtime_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForbidAccountData::~ForbidAccountData() {
  // @@protoc_insertion_point(destructor:Pmd.ForbidAccountData)
  SharedDtor();
}

void ForbidAccountData::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (reserved_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserved_;
  }
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void ForbidAccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForbidAccountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForbidAccountData_descriptor_;
}

const ForbidAccountData& ForbidAccountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

ForbidAccountData* ForbidAccountData::default_instance_ = NULL;

ForbidAccountData* ForbidAccountData::New() const {
  return new ForbidAccountData;
}

void ForbidAccountData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForbidAccountData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(zoneid_, gmid_);
    ZR_(accid_, ip_);
    ZR_(forbidtype_, charid_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_reserved()) {
      if (reserved_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reserved_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(begtime_, endtime_);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForbidAccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ForbidAccountData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 2;
      case 2: {
        if (tag == 16) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gmname;
        break;
      }

      // optional string gmname = 3;
      case 3: {
        if (tag == 26) {
         parse_gmname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint32 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 5;
      case 5: {
        if (tag == 40) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_forbidType;
        break;
      }

      // optional uint32 forbidType = 6;
      case 6: {
        if (tag == 48) {
         parse_forbidType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbidtype_)));
          set_has_forbidtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reserved;
        break;
      }

      // optional string reserved = 7;
      case 7: {
        if (tag == 58) {
         parse_reserved:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserved()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reserved().data(), this->reserved().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reserved");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 8;
      case 8: {
        if (tag == 64) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_charname;
        break;
      }

      // optional string charname = 9;
      case 9: {
        if (tag == 74) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_begtime;
        break;
      }

      // optional uint32 begtime = 10;
      case 10: {
        if (tag == 80) {
         parse_begtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begtime_)));
          set_has_begtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 11;
      case 11: {
        if (tag == 88) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_desc;
        break;
      }

      // optional string desc = 12;
      case 12: {
        if (tag == 98) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ForbidAccountData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ForbidAccountData)
  return false;
#undef DO_
}

void ForbidAccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ForbidAccountData)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmid(), output);
  }

  // optional string gmname = 3;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gmname(), output);
  }

  // optional uint32 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accid(), output);
  }

  // optional uint32 ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ip(), output);
  }

  // optional uint32 forbidType = 6;
  if (has_forbidtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->forbidtype(), output);
  }

  // optional string reserved = 7;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserved().data(), this->reserved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserved");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->reserved(), output);
  }

  // optional uint32 charid = 8;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->charid(), output);
  }

  // optional string charname = 9;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->charname(), output);
  }

  // optional uint32 begtime = 10;
  if (has_begtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->begtime(), output);
  }

  // optional uint32 endtime = 11;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->endtime(), output);
  }

  // optional string desc = 12;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ForbidAccountData)
}

::google::protobuf::uint8* ForbidAccountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ForbidAccountData)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmid(), target);
  }

  // optional string gmname = 3;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gmname(), target);
  }

  // optional uint32 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accid(), target);
  }

  // optional uint32 ip = 5;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ip(), target);
  }

  // optional uint32 forbidType = 6;
  if (has_forbidtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->forbidtype(), target);
  }

  // optional string reserved = 7;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserved().data(), this->reserved().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserved");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->reserved(), target);
  }

  // optional uint32 charid = 8;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->charid(), target);
  }

  // optional string charname = 9;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->charname(), target);
  }

  // optional uint32 begtime = 10;
  if (has_begtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->begtime(), target);
  }

  // optional uint32 endtime = 11;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->endtime(), target);
  }

  // optional string desc = 12;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ForbidAccountData)
  return target;
}

int ForbidAccountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional string gmname = 3;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accid());
    }

    // optional uint32 ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 forbidType = 6;
    if (has_forbidtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbidtype());
    }

    // optional string reserved = 7;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserved());
    }

    // optional uint32 charid = 8;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string charname = 9;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 begtime = 10;
    if (has_begtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begtime());
    }

    // optional uint32 endtime = 11;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional string desc = 12;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForbidAccountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForbidAccountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForbidAccountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForbidAccountData::MergeFrom(const ForbidAccountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_forbidtype()) {
      set_forbidtype(from.forbidtype());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_begtime()) {
      set_begtime(from.begtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForbidAccountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForbidAccountData::CopyFrom(const ForbidAccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForbidAccountData::IsInitialized() const {

  return true;
}

void ForbidAccountData::Swap(ForbidAccountData* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(gmid_, other->gmid_);
    std::swap(gmname_, other->gmname_);
    std::swap(accid_, other->accid_);
    std::swap(ip_, other->ip_);
    std::swap(forbidtype_, other->forbidtype_);
    std::swap(reserved_, other->reserved_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(begtime_, other->begtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForbidAccountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForbidAccountData_descriptor_;
  metadata.reflection = ForbidAccountData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestLoginGmUserCmd::kNameFieldNumber;
const int stRequestLoginGmUserCmd::kPasswordFieldNumber;
const int stRequestLoginGmUserCmd::kVersionFieldNumber;
#endif  // !_MSC_VER

stRequestLoginGmUserCmd::stRequestLoginGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestLoginGmUserCmd)
}

void stRequestLoginGmUserCmd::InitAsDefaultInstance() {
}

stRequestLoginGmUserCmd::stRequestLoginGmUserCmd(const stRequestLoginGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestLoginGmUserCmd)
}

void stRequestLoginGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestLoginGmUserCmd::~stRequestLoginGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestLoginGmUserCmd)
  SharedDtor();
}

void stRequestLoginGmUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void stRequestLoginGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestLoginGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestLoginGmUserCmd_descriptor_;
}

const stRequestLoginGmUserCmd& stRequestLoginGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestLoginGmUserCmd* stRequestLoginGmUserCmd::default_instance_ = NULL;

stRequestLoginGmUserCmd* stRequestLoginGmUserCmd::New() const {
  return new stRequestLoginGmUserCmd;
}

void stRequestLoginGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestLoginGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestLoginGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestLoginGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestLoginGmUserCmd)
  return false;
#undef DO_
}

void stRequestLoginGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestLoginGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestLoginGmUserCmd)
}

::google::protobuf::uint8* stRequestLoginGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestLoginGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestLoginGmUserCmd)
  return target;
}

int stRequestLoginGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestLoginGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestLoginGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestLoginGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestLoginGmUserCmd::MergeFrom(const stRequestLoginGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestLoginGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestLoginGmUserCmd::CopyFrom(const stRequestLoginGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestLoginGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestLoginGmUserCmd::Swap(stRequestLoginGmUserCmd* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestLoginGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestLoginGmUserCmd_descriptor_;
  metadata.reflection = stRequestLoginGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnLoginGmUserCmd::kRetcodeFieldNumber;
const int stReturnLoginGmUserCmd::kGmIDFieldNumber;
const int stReturnLoginGmUserCmd::kPriFieldNumber;
const int stReturnLoginGmUserCmd::kQMaxNumFieldNumber;
const int stReturnLoginGmUserCmd::kAutoRecvFieldNumber;
const int stReturnLoginGmUserCmd::kWorkStateFieldNumber;
const int stReturnLoginGmUserCmd::kWinNumFieldNumber;
#endif  // !_MSC_VER

stReturnLoginGmUserCmd::stReturnLoginGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnLoginGmUserCmd)
}

void stReturnLoginGmUserCmd::InitAsDefaultInstance() {
}

stReturnLoginGmUserCmd::stReturnLoginGmUserCmd(const stReturnLoginGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnLoginGmUserCmd)
}

void stReturnLoginGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  gmid_ = 0u;
  pri_ = 0u;
  qmaxnum_ = 0u;
  autorecv_ = 0u;
  workstate_ = 0u;
  winnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnLoginGmUserCmd::~stReturnLoginGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnLoginGmUserCmd)
  SharedDtor();
}

void stReturnLoginGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnLoginGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnLoginGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnLoginGmUserCmd_descriptor_;
}

const stReturnLoginGmUserCmd& stReturnLoginGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnLoginGmUserCmd* stReturnLoginGmUserCmd::default_instance_ = NULL;

stReturnLoginGmUserCmd* stReturnLoginGmUserCmd::New() const {
  return new stReturnLoginGmUserCmd;
}

void stReturnLoginGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnLoginGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(retcode_, winnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnLoginGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnLoginGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gmID;
        break;
      }

      // optional uint32 gmID = 2;
      case 2: {
        if (tag == 16) {
         parse_gmID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pri;
        break;
      }

      // optional uint32 pri = 3;
      case 3: {
        if (tag == 24) {
         parse_pri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pri_)));
          set_has_pri();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_qMaxNum;
        break;
      }

      // optional uint32 qMaxNum = 4;
      case 4: {
        if (tag == 32) {
         parse_qMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qmaxnum_)));
          set_has_qmaxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_autoRecv;
        break;
      }

      // optional uint32 autoRecv = 5;
      case 5: {
        if (tag == 40) {
         parse_autoRecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autorecv_)));
          set_has_autorecv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_workState;
        break;
      }

      // optional uint32 workState = 6;
      case 6: {
        if (tag == 48) {
         parse_workState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workstate_)));
          set_has_workstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_winNum;
        break;
      }

      // optional uint32 winNum = 7;
      case 7: {
        if (tag == 56) {
         parse_winNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnLoginGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnLoginGmUserCmd)
  return false;
#undef DO_
}

void stReturnLoginGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnLoginGmUserCmd)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional uint32 gmID = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmid(), output);
  }

  // optional uint32 pri = 3;
  if (has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pri(), output);
  }

  // optional uint32 qMaxNum = 4;
  if (has_qmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qmaxnum(), output);
  }

  // optional uint32 autoRecv = 5;
  if (has_autorecv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->autorecv(), output);
  }

  // optional uint32 workState = 6;
  if (has_workstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->workstate(), output);
  }

  // optional uint32 winNum = 7;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->winnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnLoginGmUserCmd)
}

::google::protobuf::uint8* stReturnLoginGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnLoginGmUserCmd)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 gmID = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmid(), target);
  }

  // optional uint32 pri = 3;
  if (has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pri(), target);
  }

  // optional uint32 qMaxNum = 4;
  if (has_qmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qmaxnum(), target);
  }

  // optional uint32 autoRecv = 5;
  if (has_autorecv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->autorecv(), target);
  }

  // optional uint32 workState = 6;
  if (has_workstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->workstate(), target);
  }

  // optional uint32 winNum = 7;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->winnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnLoginGmUserCmd)
  return target;
}

int stReturnLoginGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional uint32 gmID = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 pri = 3;
    if (has_pri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pri());
    }

    // optional uint32 qMaxNum = 4;
    if (has_qmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qmaxnum());
    }

    // optional uint32 autoRecv = 5;
    if (has_autorecv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autorecv());
    }

    // optional uint32 workState = 6;
    if (has_workstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workstate());
    }

    // optional uint32 winNum = 7;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnLoginGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnLoginGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnLoginGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnLoginGmUserCmd::MergeFrom(const stReturnLoginGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_pri()) {
      set_pri(from.pri());
    }
    if (from.has_qmaxnum()) {
      set_qmaxnum(from.qmaxnum());
    }
    if (from.has_autorecv()) {
      set_autorecv(from.autorecv());
    }
    if (from.has_workstate()) {
      set_workstate(from.workstate());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnLoginGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnLoginGmUserCmd::CopyFrom(const stReturnLoginGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnLoginGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnLoginGmUserCmd::Swap(stReturnLoginGmUserCmd* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(gmid_, other->gmid_);
    std::swap(pri_, other->pri_);
    std::swap(qmaxnum_, other->qmaxnum_);
    std::swap(autorecv_, other->autorecv_);
    std::swap(workstate_, other->workstate_);
    std::swap(winnum_, other->winnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnLoginGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnLoginGmUserCmd_descriptor_;
  metadata.reflection = stReturnLoginGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stConfigGmUserCmd::kNumFieldNumber;
const int stConfigGmUserCmd::kConfigFieldNumber;
#endif  // !_MSC_VER

stConfigGmUserCmd::stConfigGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stConfigGmUserCmd)
}

void stConfigGmUserCmd::InitAsDefaultInstance() {
}

stConfigGmUserCmd::stConfigGmUserCmd(const stConfigGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stConfigGmUserCmd)
}

void stConfigGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = 0u;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stConfigGmUserCmd::~stConfigGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stConfigGmUserCmd)
  SharedDtor();
}

void stConfigGmUserCmd::SharedDtor() {
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void stConfigGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stConfigGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stConfigGmUserCmd_descriptor_;
}

const stConfigGmUserCmd& stConfigGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stConfigGmUserCmd* stConfigGmUserCmd::default_instance_ = NULL;

stConfigGmUserCmd* stConfigGmUserCmd::New() const {
  return new stConfigGmUserCmd;
}

void stConfigGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    num_ = 0u;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stConfigGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stConfigGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional bytes config = 2;
      case 2: {
        if (tag == 18) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stConfigGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stConfigGmUserCmd)
  return false;
#undef DO_
}

void stConfigGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stConfigGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional bytes config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stConfigGmUserCmd)
}

::google::protobuf::uint8* stConfigGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stConfigGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional bytes config = 2;
  if (has_config()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stConfigGmUserCmd)
  return target;
}

int stConfigGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stConfigGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stConfigGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stConfigGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stConfigGmUserCmd::MergeFrom(const stConfigGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stConfigGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stConfigGmUserCmd::CopyFrom(const stConfigGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stConfigGmUserCmd::IsInitialized() const {

  return true;
}

void stConfigGmUserCmd::Swap(stConfigGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stConfigGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stConfigGmUserCmd_descriptor_;
  metadata.reflection = stConfigGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSetPasswordGmUserCmd::kOldpasswdFieldNumber;
const int stSetPasswordGmUserCmd::kNewpasswdFieldNumber;
#endif  // !_MSC_VER

stSetPasswordGmUserCmd::stSetPasswordGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stSetPasswordGmUserCmd)
}

void stSetPasswordGmUserCmd::InitAsDefaultInstance() {
}

stSetPasswordGmUserCmd::stSetPasswordGmUserCmd(const stSetPasswordGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stSetPasswordGmUserCmd)
}

void stSetPasswordGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  oldpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetPasswordGmUserCmd::~stSetPasswordGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stSetPasswordGmUserCmd)
  SharedDtor();
}

void stSetPasswordGmUserCmd::SharedDtor() {
  if (oldpasswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldpasswd_;
  }
  if (newpasswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newpasswd_;
  }
  if (this != default_instance_) {
  }
}

void stSetPasswordGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetPasswordGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetPasswordGmUserCmd_descriptor_;
}

const stSetPasswordGmUserCmd& stSetPasswordGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stSetPasswordGmUserCmd* stSetPasswordGmUserCmd::default_instance_ = NULL;

stSetPasswordGmUserCmd* stSetPasswordGmUserCmd::New() const {
  return new stSetPasswordGmUserCmd;
}

void stSetPasswordGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_oldpasswd()) {
      if (oldpasswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldpasswd_->clear();
      }
    }
    if (has_newpasswd()) {
      if (newpasswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newpasswd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetPasswordGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stSetPasswordGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string oldpasswd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldpasswd().data(), this->oldpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldpasswd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newpasswd;
        break;
      }

      // optional string newpasswd = 2;
      case 2: {
        if (tag == 18) {
         parse_newpasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newpasswd().data(), this->newpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newpasswd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stSetPasswordGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stSetPasswordGmUserCmd)
  return false;
#undef DO_
}

void stSetPasswordGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stSetPasswordGmUserCmd)
  // optional string oldpasswd = 1;
  if (has_oldpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldpasswd().data(), this->oldpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldpasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->oldpasswd(), output);
  }

  // optional string newpasswd = 2;
  if (has_newpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newpasswd().data(), this->newpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newpasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newpasswd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stSetPasswordGmUserCmd)
}

::google::protobuf::uint8* stSetPasswordGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stSetPasswordGmUserCmd)
  // optional string oldpasswd = 1;
  if (has_oldpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldpasswd().data(), this->oldpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldpasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->oldpasswd(), target);
  }

  // optional string newpasswd = 2;
  if (has_newpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newpasswd().data(), this->newpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newpasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newpasswd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stSetPasswordGmUserCmd)
  return target;
}

int stSetPasswordGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string oldpasswd = 1;
    if (has_oldpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldpasswd());
    }

    // optional string newpasswd = 2;
    if (has_newpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpasswd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetPasswordGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetPasswordGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetPasswordGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetPasswordGmUserCmd::MergeFrom(const stSetPasswordGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldpasswd()) {
      set_oldpasswd(from.oldpasswd());
    }
    if (from.has_newpasswd()) {
      set_newpasswd(from.newpasswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetPasswordGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetPasswordGmUserCmd::CopyFrom(const stSetPasswordGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetPasswordGmUserCmd::IsInitialized() const {

  return true;
}

void stSetPasswordGmUserCmd::Swap(stSetPasswordGmUserCmd* other) {
  if (other != this) {
    std::swap(oldpasswd_, other->oldpasswd_);
    std::swap(newpasswd_, other->newpasswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetPasswordGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetPasswordGmUserCmd_descriptor_;
  metadata.reflection = stSetPasswordGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnPasswordGmUserCmd::kRetcodeFieldNumber;
#endif  // !_MSC_VER

stReturnPasswordGmUserCmd::stReturnPasswordGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnPasswordGmUserCmd)
}

void stReturnPasswordGmUserCmd::InitAsDefaultInstance() {
}

stReturnPasswordGmUserCmd::stReturnPasswordGmUserCmd(const stReturnPasswordGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnPasswordGmUserCmd)
}

void stReturnPasswordGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnPasswordGmUserCmd::~stReturnPasswordGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnPasswordGmUserCmd)
  SharedDtor();
}

void stReturnPasswordGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnPasswordGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnPasswordGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnPasswordGmUserCmd_descriptor_;
}

const stReturnPasswordGmUserCmd& stReturnPasswordGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnPasswordGmUserCmd* stReturnPasswordGmUserCmd::default_instance_ = NULL;

stReturnPasswordGmUserCmd* stReturnPasswordGmUserCmd::New() const {
  return new stReturnPasswordGmUserCmd;
}

void stReturnPasswordGmUserCmd::Clear() {
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnPasswordGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnPasswordGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnPasswordGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnPasswordGmUserCmd)
  return false;
#undef DO_
}

void stReturnPasswordGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnPasswordGmUserCmd)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnPasswordGmUserCmd)
}

::google::protobuf::uint8* stReturnPasswordGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnPasswordGmUserCmd)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnPasswordGmUserCmd)
  return target;
}

int stReturnPasswordGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnPasswordGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnPasswordGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnPasswordGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnPasswordGmUserCmd::MergeFrom(const stReturnPasswordGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnPasswordGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnPasswordGmUserCmd::CopyFrom(const stReturnPasswordGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnPasswordGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnPasswordGmUserCmd::Swap(stReturnPasswordGmUserCmd* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnPasswordGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnPasswordGmUserCmd_descriptor_;
  metadata.reflection = stReturnPasswordGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAddNewGmUserCmd::kNameFieldNumber;
const int stAddNewGmUserCmd::kPasswordFieldNumber;
const int stAddNewGmUserCmd::kPriFieldNumber;
const int stAddNewGmUserCmd::kQMaxNumFieldNumber;
const int stAddNewGmUserCmd::kAutoRecvFieldNumber;
const int stAddNewGmUserCmd::kWorkStateFieldNumber;
const int stAddNewGmUserCmd::kWinNumFieldNumber;
#endif  // !_MSC_VER

stAddNewGmUserCmd::stAddNewGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stAddNewGmUserCmd)
}

void stAddNewGmUserCmd::InitAsDefaultInstance() {
}

stAddNewGmUserCmd::stAddNewGmUserCmd(const stAddNewGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stAddNewGmUserCmd)
}

void stAddNewGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pri_ = 0u;
  qmaxnum_ = 0u;
  autorecv_ = 0u;
  workstate_ = 0u;
  winnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddNewGmUserCmd::~stAddNewGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stAddNewGmUserCmd)
  SharedDtor();
}

void stAddNewGmUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void stAddNewGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddNewGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddNewGmUserCmd_descriptor_;
}

const stAddNewGmUserCmd& stAddNewGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stAddNewGmUserCmd* stAddNewGmUserCmd::default_instance_ = NULL;

stAddNewGmUserCmd* stAddNewGmUserCmd::New() const {
  return new stAddNewGmUserCmd;
}

void stAddNewGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stAddNewGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(pri_, winnum_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddNewGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stAddNewGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pri;
        break;
      }

      // optional uint32 pri = 3;
      case 3: {
        if (tag == 24) {
         parse_pri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pri_)));
          set_has_pri();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_qMaxNum;
        break;
      }

      // optional uint32 qMaxNum = 4;
      case 4: {
        if (tag == 32) {
         parse_qMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qmaxnum_)));
          set_has_qmaxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_autoRecv;
        break;
      }

      // optional uint32 autoRecv = 5;
      case 5: {
        if (tag == 40) {
         parse_autoRecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autorecv_)));
          set_has_autorecv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_workState;
        break;
      }

      // optional uint32 workState = 6;
      case 6: {
        if (tag == 48) {
         parse_workState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workstate_)));
          set_has_workstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_winNum;
        break;
      }

      // optional uint32 winNum = 7;
      case 7: {
        if (tag == 56) {
         parse_winNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stAddNewGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stAddNewGmUserCmd)
  return false;
#undef DO_
}

void stAddNewGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stAddNewGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional uint32 pri = 3;
  if (has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pri(), output);
  }

  // optional uint32 qMaxNum = 4;
  if (has_qmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qmaxnum(), output);
  }

  // optional uint32 autoRecv = 5;
  if (has_autorecv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->autorecv(), output);
  }

  // optional uint32 workState = 6;
  if (has_workstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->workstate(), output);
  }

  // optional uint32 winNum = 7;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->winnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stAddNewGmUserCmd)
}

::google::protobuf::uint8* stAddNewGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stAddNewGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional uint32 pri = 3;
  if (has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pri(), target);
  }

  // optional uint32 qMaxNum = 4;
  if (has_qmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qmaxnum(), target);
  }

  // optional uint32 autoRecv = 5;
  if (has_autorecv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->autorecv(), target);
  }

  // optional uint32 workState = 6;
  if (has_workstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->workstate(), target);
  }

  // optional uint32 winNum = 7;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->winnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stAddNewGmUserCmd)
  return target;
}

int stAddNewGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 pri = 3;
    if (has_pri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pri());
    }

    // optional uint32 qMaxNum = 4;
    if (has_qmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qmaxnum());
    }

    // optional uint32 autoRecv = 5;
    if (has_autorecv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autorecv());
    }

    // optional uint32 workState = 6;
    if (has_workstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workstate());
    }

    // optional uint32 winNum = 7;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddNewGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddNewGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddNewGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddNewGmUserCmd::MergeFrom(const stAddNewGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_pri()) {
      set_pri(from.pri());
    }
    if (from.has_qmaxnum()) {
      set_qmaxnum(from.qmaxnum());
    }
    if (from.has_autorecv()) {
      set_autorecv(from.autorecv());
    }
    if (from.has_workstate()) {
      set_workstate(from.workstate());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddNewGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddNewGmUserCmd::CopyFrom(const stAddNewGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddNewGmUserCmd::IsInitialized() const {

  return true;
}

void stAddNewGmUserCmd::Swap(stAddNewGmUserCmd* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(pri_, other->pri_);
    std::swap(qmaxnum_, other->qmaxnum_);
    std::swap(autorecv_, other->autorecv_);
    std::swap(workstate_, other->workstate_);
    std::swap(winnum_, other->winnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddNewGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddNewGmUserCmd_descriptor_;
  metadata.reflection = stAddNewGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnAddNewGmUserCmd::kRetcodeFieldNumber;
#endif  // !_MSC_VER

stReturnAddNewGmUserCmd::stReturnAddNewGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnAddNewGmUserCmd)
}

void stReturnAddNewGmUserCmd::InitAsDefaultInstance() {
}

stReturnAddNewGmUserCmd::stReturnAddNewGmUserCmd(const stReturnAddNewGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnAddNewGmUserCmd)
}

void stReturnAddNewGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnAddNewGmUserCmd::~stReturnAddNewGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnAddNewGmUserCmd)
  SharedDtor();
}

void stReturnAddNewGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnAddNewGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnAddNewGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnAddNewGmUserCmd_descriptor_;
}

const stReturnAddNewGmUserCmd& stReturnAddNewGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnAddNewGmUserCmd* stReturnAddNewGmUserCmd::default_instance_ = NULL;

stReturnAddNewGmUserCmd* stReturnAddNewGmUserCmd::New() const {
  return new stReturnAddNewGmUserCmd;
}

void stReturnAddNewGmUserCmd::Clear() {
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnAddNewGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnAddNewGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnAddNewGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnAddNewGmUserCmd)
  return false;
#undef DO_
}

void stReturnAddNewGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnAddNewGmUserCmd)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnAddNewGmUserCmd)
}

::google::protobuf::uint8* stReturnAddNewGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnAddNewGmUserCmd)
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnAddNewGmUserCmd)
  return target;
}

int stReturnAddNewGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnAddNewGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnAddNewGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnAddNewGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnAddNewGmUserCmd::MergeFrom(const stReturnAddNewGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnAddNewGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnAddNewGmUserCmd::CopyFrom(const stReturnAddNewGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnAddNewGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnAddNewGmUserCmd::Swap(stReturnAddNewGmUserCmd* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnAddNewGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnAddNewGmUserCmd_descriptor_;
  metadata.reflection = stReturnAddNewGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stQueryListGmUserCmd::stQueryListGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stQueryListGmUserCmd)
}

void stQueryListGmUserCmd::InitAsDefaultInstance() {
}

stQueryListGmUserCmd::stQueryListGmUserCmd(const stQueryListGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stQueryListGmUserCmd)
}

void stQueryListGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQueryListGmUserCmd::~stQueryListGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stQueryListGmUserCmd)
  SharedDtor();
}

void stQueryListGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQueryListGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQueryListGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryListGmUserCmd_descriptor_;
}

const stQueryListGmUserCmd& stQueryListGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stQueryListGmUserCmd* stQueryListGmUserCmd::default_instance_ = NULL;

stQueryListGmUserCmd* stQueryListGmUserCmd::New() const {
  return new stQueryListGmUserCmd;
}

void stQueryListGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQueryListGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stQueryListGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stQueryListGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stQueryListGmUserCmd)
  return false;
#undef DO_
}

void stQueryListGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stQueryListGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stQueryListGmUserCmd)
}

::google::protobuf::uint8* stQueryListGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stQueryListGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stQueryListGmUserCmd)
  return target;
}

int stQueryListGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQueryListGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQueryListGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQueryListGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQueryListGmUserCmd::MergeFrom(const stQueryListGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQueryListGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQueryListGmUserCmd::CopyFrom(const stQueryListGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQueryListGmUserCmd::IsInitialized() const {

  return true;
}

void stQueryListGmUserCmd::Swap(stQueryListGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQueryListGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQueryListGmUserCmd_descriptor_;
  metadata.reflection = stQueryListGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnListGmUserCmd_Data::kIdFieldNumber;
const int stReturnListGmUserCmd_Data::kNameFieldNumber;
const int stReturnListGmUserCmd_Data::kPriFieldNumber;
const int stReturnListGmUserCmd_Data::kQMaxNumFieldNumber;
const int stReturnListGmUserCmd_Data::kAutoRecvFieldNumber;
const int stReturnListGmUserCmd_Data::kWorkStateFieldNumber;
const int stReturnListGmUserCmd_Data::kWinNumFieldNumber;
#endif  // !_MSC_VER

stReturnListGmUserCmd_Data::stReturnListGmUserCmd_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnListGmUserCmd.Data)
}

void stReturnListGmUserCmd_Data::InitAsDefaultInstance() {
}

stReturnListGmUserCmd_Data::stReturnListGmUserCmd_Data(const stReturnListGmUserCmd_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnListGmUserCmd.Data)
}

void stReturnListGmUserCmd_Data::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = 0u;
  pri_ = 0u;
  qmaxnum_ = 0u;
  autorecv_ = 0u;
  workstate_ = 0u;
  winnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnListGmUserCmd_Data::~stReturnListGmUserCmd_Data() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnListGmUserCmd.Data)
  SharedDtor();
}

void stReturnListGmUserCmd_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnListGmUserCmd_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnListGmUserCmd_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnListGmUserCmd_Data_descriptor_;
}

const stReturnListGmUserCmd_Data& stReturnListGmUserCmd_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnListGmUserCmd_Data* stReturnListGmUserCmd_Data::default_instance_ = NULL;

stReturnListGmUserCmd_Data* stReturnListGmUserCmd_Data::New() const {
  return new stReturnListGmUserCmd_Data;
}

void stReturnListGmUserCmd_Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnListGmUserCmd_Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, winnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnListGmUserCmd_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnListGmUserCmd.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional uint32 name = 2;
      case 2: {
        if (tag == 16) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pri;
        break;
      }

      // optional uint32 pri = 3;
      case 3: {
        if (tag == 24) {
         parse_pri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pri_)));
          set_has_pri();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_qMaxNum;
        break;
      }

      // optional uint32 qMaxNum = 4;
      case 4: {
        if (tag == 32) {
         parse_qMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qmaxnum_)));
          set_has_qmaxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_autoRecv;
        break;
      }

      // optional uint32 autoRecv = 5;
      case 5: {
        if (tag == 40) {
         parse_autoRecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autorecv_)));
          set_has_autorecv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_workState;
        break;
      }

      // optional uint32 workState = 6;
      case 6: {
        if (tag == 48) {
         parse_workState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workstate_)));
          set_has_workstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_winNum;
        break;
      }

      // optional uint32 winNum = 7;
      case 7: {
        if (tag == 56) {
         parse_winNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnListGmUserCmd.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnListGmUserCmd.Data)
  return false;
#undef DO_
}

void stReturnListGmUserCmd_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnListGmUserCmd.Data)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name(), output);
  }

  // optional uint32 pri = 3;
  if (has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pri(), output);
  }

  // optional uint32 qMaxNum = 4;
  if (has_qmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qmaxnum(), output);
  }

  // optional uint32 autoRecv = 5;
  if (has_autorecv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->autorecv(), output);
  }

  // optional uint32 workState = 6;
  if (has_workstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->workstate(), output);
  }

  // optional uint32 winNum = 7;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->winnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnListGmUserCmd.Data)
}

::google::protobuf::uint8* stReturnListGmUserCmd_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnListGmUserCmd.Data)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name(), target);
  }

  // optional uint32 pri = 3;
  if (has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pri(), target);
  }

  // optional uint32 qMaxNum = 4;
  if (has_qmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qmaxnum(), target);
  }

  // optional uint32 autoRecv = 5;
  if (has_autorecv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->autorecv(), target);
  }

  // optional uint32 workState = 6;
  if (has_workstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->workstate(), target);
  }

  // optional uint32 winNum = 7;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->winnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnListGmUserCmd.Data)
  return target;
}

int stReturnListGmUserCmd_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

    // optional uint32 pri = 3;
    if (has_pri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pri());
    }

    // optional uint32 qMaxNum = 4;
    if (has_qmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qmaxnum());
    }

    // optional uint32 autoRecv = 5;
    if (has_autorecv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autorecv());
    }

    // optional uint32 workState = 6;
    if (has_workstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workstate());
    }

    // optional uint32 winNum = 7;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnListGmUserCmd_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnListGmUserCmd_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnListGmUserCmd_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnListGmUserCmd_Data::MergeFrom(const stReturnListGmUserCmd_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pri()) {
      set_pri(from.pri());
    }
    if (from.has_qmaxnum()) {
      set_qmaxnum(from.qmaxnum());
    }
    if (from.has_autorecv()) {
      set_autorecv(from.autorecv());
    }
    if (from.has_workstate()) {
      set_workstate(from.workstate());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnListGmUserCmd_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnListGmUserCmd_Data::CopyFrom(const stReturnListGmUserCmd_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnListGmUserCmd_Data::IsInitialized() const {

  return true;
}

void stReturnListGmUserCmd_Data::Swap(stReturnListGmUserCmd_Data* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pri_, other->pri_);
    std::swap(qmaxnum_, other->qmaxnum_);
    std::swap(autorecv_, other->autorecv_);
    std::swap(workstate_, other->workstate_);
    std::swap(winnum_, other->winnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnListGmUserCmd_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnListGmUserCmd_Data_descriptor_;
  metadata.reflection = stReturnListGmUserCmd_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int stReturnListGmUserCmd::kNumFieldNumber;
const int stReturnListGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnListGmUserCmd::stReturnListGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnListGmUserCmd)
}

void stReturnListGmUserCmd::InitAsDefaultInstance() {
}

stReturnListGmUserCmd::stReturnListGmUserCmd(const stReturnListGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnListGmUserCmd)
}

void stReturnListGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnListGmUserCmd::~stReturnListGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnListGmUserCmd)
  SharedDtor();
}

void stReturnListGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnListGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnListGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnListGmUserCmd_descriptor_;
}

const stReturnListGmUserCmd& stReturnListGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnListGmUserCmd* stReturnListGmUserCmd::default_instance_ = NULL;

stReturnListGmUserCmd* stReturnListGmUserCmd::New() const {
  return new stReturnListGmUserCmd;
}

void stReturnListGmUserCmd::Clear() {
  num_ = 0u;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnListGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnListGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .Pmd.stReturnListGmUserCmd.Data data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnListGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnListGmUserCmd)
  return false;
#undef DO_
}

void stReturnListGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnListGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // repeated .Pmd.stReturnListGmUserCmd.Data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnListGmUserCmd)
}

::google::protobuf::uint8* stReturnListGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnListGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // repeated .Pmd.stReturnListGmUserCmd.Data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnListGmUserCmd)
  return target;
}

int stReturnListGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated .Pmd.stReturnListGmUserCmd.Data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnListGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnListGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnListGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnListGmUserCmd::MergeFrom(const stReturnListGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnListGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnListGmUserCmd::CopyFrom(const stReturnListGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnListGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnListGmUserCmd::Swap(stReturnListGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnListGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnListGmUserCmd_descriptor_;
  metadata.reflection = stReturnListGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestZoneConfigGmUserCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

stRequestZoneConfigGmUserCmd::stRequestZoneConfigGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestZoneConfigGmUserCmd)
}

void stRequestZoneConfigGmUserCmd::InitAsDefaultInstance() {
}

stRequestZoneConfigGmUserCmd::stRequestZoneConfigGmUserCmd(const stRequestZoneConfigGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestZoneConfigGmUserCmd)
}

void stRequestZoneConfigGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestZoneConfigGmUserCmd::~stRequestZoneConfigGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestZoneConfigGmUserCmd)
  SharedDtor();
}

void stRequestZoneConfigGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestZoneConfigGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestZoneConfigGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestZoneConfigGmUserCmd_descriptor_;
}

const stRequestZoneConfigGmUserCmd& stRequestZoneConfigGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestZoneConfigGmUserCmd* stRequestZoneConfigGmUserCmd::default_instance_ = NULL;

stRequestZoneConfigGmUserCmd* stRequestZoneConfigGmUserCmd::New() const {
  return new stRequestZoneConfigGmUserCmd;
}

void stRequestZoneConfigGmUserCmd::Clear() {
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestZoneConfigGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestZoneConfigGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestZoneConfigGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestZoneConfigGmUserCmd)
  return false;
#undef DO_
}

void stRequestZoneConfigGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestZoneConfigGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestZoneConfigGmUserCmd)
}

::google::protobuf::uint8* stRequestZoneConfigGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestZoneConfigGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestZoneConfigGmUserCmd)
  return target;
}

int stRequestZoneConfigGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestZoneConfigGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestZoneConfigGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestZoneConfigGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestZoneConfigGmUserCmd::MergeFrom(const stRequestZoneConfigGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestZoneConfigGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestZoneConfigGmUserCmd::CopyFrom(const stRequestZoneConfigGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestZoneConfigGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestZoneConfigGmUserCmd::Swap(stRequestZoneConfigGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestZoneConfigGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestZoneConfigGmUserCmd_descriptor_;
  metadata.reflection = stRequestZoneConfigGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnZoneDicCountryGmUserCmd_Data::kCountryidFieldNumber;
const int stReturnZoneDicCountryGmUserCmd_Data::kNameFieldNumber;
#endif  // !_MSC_VER

stReturnZoneDicCountryGmUserCmd_Data::stReturnZoneDicCountryGmUserCmd_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
}

void stReturnZoneDicCountryGmUserCmd_Data::InitAsDefaultInstance() {
}

stReturnZoneDicCountryGmUserCmd_Data::stReturnZoneDicCountryGmUserCmd_Data(const stReturnZoneDicCountryGmUserCmd_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
}

void stReturnZoneDicCountryGmUserCmd_Data::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0u;
  name_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnZoneDicCountryGmUserCmd_Data::~stReturnZoneDicCountryGmUserCmd_Data() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
  SharedDtor();
}

void stReturnZoneDicCountryGmUserCmd_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnZoneDicCountryGmUserCmd_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnZoneDicCountryGmUserCmd_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnZoneDicCountryGmUserCmd_Data_descriptor_;
}

const stReturnZoneDicCountryGmUserCmd_Data& stReturnZoneDicCountryGmUserCmd_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnZoneDicCountryGmUserCmd_Data* stReturnZoneDicCountryGmUserCmd_Data::default_instance_ = NULL;

stReturnZoneDicCountryGmUserCmd_Data* stReturnZoneDicCountryGmUserCmd_Data::New() const {
  return new stReturnZoneDicCountryGmUserCmd_Data;
}

void stReturnZoneDicCountryGmUserCmd_Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnZoneDicCountryGmUserCmd_Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(countryid_, name_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnZoneDicCountryGmUserCmd_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 countryid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional uint32 name = 2;
      case 2: {
        if (tag == 16) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
  return false;
#undef DO_
}

void stReturnZoneDicCountryGmUserCmd_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
  // optional uint32 countryid = 1;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->countryid(), output);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
}

::google::protobuf::uint8* stReturnZoneDicCountryGmUserCmd_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
  // optional uint32 countryid = 1;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->countryid(), target);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnZoneDicCountryGmUserCmd.Data)
  return target;
}

int stReturnZoneDicCountryGmUserCmd_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 countryid = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnZoneDicCountryGmUserCmd_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnZoneDicCountryGmUserCmd_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnZoneDicCountryGmUserCmd_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnZoneDicCountryGmUserCmd_Data::MergeFrom(const stReturnZoneDicCountryGmUserCmd_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnZoneDicCountryGmUserCmd_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnZoneDicCountryGmUserCmd_Data::CopyFrom(const stReturnZoneDicCountryGmUserCmd_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnZoneDicCountryGmUserCmd_Data::IsInitialized() const {

  return true;
}

void stReturnZoneDicCountryGmUserCmd_Data::Swap(stReturnZoneDicCountryGmUserCmd_Data* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnZoneDicCountryGmUserCmd_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnZoneDicCountryGmUserCmd_Data_descriptor_;
  metadata.reflection = stReturnZoneDicCountryGmUserCmd_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int stReturnZoneDicCountryGmUserCmd::kZoneidFieldNumber;
const int stReturnZoneDicCountryGmUserCmd::kNumFieldNumber;
const int stReturnZoneDicCountryGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnZoneDicCountryGmUserCmd::stReturnZoneDicCountryGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnZoneDicCountryGmUserCmd)
}

void stReturnZoneDicCountryGmUserCmd::InitAsDefaultInstance() {
}

stReturnZoneDicCountryGmUserCmd::stReturnZoneDicCountryGmUserCmd(const stReturnZoneDicCountryGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnZoneDicCountryGmUserCmd)
}

void stReturnZoneDicCountryGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnZoneDicCountryGmUserCmd::~stReturnZoneDicCountryGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnZoneDicCountryGmUserCmd)
  SharedDtor();
}

void stReturnZoneDicCountryGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnZoneDicCountryGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnZoneDicCountryGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnZoneDicCountryGmUserCmd_descriptor_;
}

const stReturnZoneDicCountryGmUserCmd& stReturnZoneDicCountryGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnZoneDicCountryGmUserCmd* stReturnZoneDicCountryGmUserCmd::default_instance_ = NULL;

stReturnZoneDicCountryGmUserCmd* stReturnZoneDicCountryGmUserCmd::New() const {
  return new stReturnZoneDicCountryGmUserCmd;
}

void stReturnZoneDicCountryGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnZoneDicCountryGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnZoneDicCountryGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnZoneDicCountryGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Pmd.stReturnZoneDicCountryGmUserCmd.Data data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnZoneDicCountryGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnZoneDicCountryGmUserCmd)
  return false;
#undef DO_
}

void stReturnZoneDicCountryGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnZoneDicCountryGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // repeated .Pmd.stReturnZoneDicCountryGmUserCmd.Data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnZoneDicCountryGmUserCmd)
}

::google::protobuf::uint8* stReturnZoneDicCountryGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnZoneDicCountryGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // repeated .Pmd.stReturnZoneDicCountryGmUserCmd.Data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnZoneDicCountryGmUserCmd)
  return target;
}

int stReturnZoneDicCountryGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated .Pmd.stReturnZoneDicCountryGmUserCmd.Data data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnZoneDicCountryGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnZoneDicCountryGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnZoneDicCountryGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnZoneDicCountryGmUserCmd::MergeFrom(const stReturnZoneDicCountryGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnZoneDicCountryGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnZoneDicCountryGmUserCmd::CopyFrom(const stReturnZoneDicCountryGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnZoneDicCountryGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnZoneDicCountryGmUserCmd::Swap(stReturnZoneDicCountryGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(num_, other->num_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnZoneDicCountryGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnZoneDicCountryGmUserCmd_descriptor_;
  metadata.reflection = stReturnZoneDicCountryGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnZoneDicMapGmUserCmd_Data::kSceneidFieldNumber;
const int stReturnZoneDicMapGmUserCmd_Data::kNameFieldNumber;
#endif  // !_MSC_VER

stReturnZoneDicMapGmUserCmd_Data::stReturnZoneDicMapGmUserCmd_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnZoneDicMapGmUserCmd.Data)
}

void stReturnZoneDicMapGmUserCmd_Data::InitAsDefaultInstance() {
}

stReturnZoneDicMapGmUserCmd_Data::stReturnZoneDicMapGmUserCmd_Data(const stReturnZoneDicMapGmUserCmd_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnZoneDicMapGmUserCmd.Data)
}

void stReturnZoneDicMapGmUserCmd_Data::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  name_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnZoneDicMapGmUserCmd_Data::~stReturnZoneDicMapGmUserCmd_Data() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnZoneDicMapGmUserCmd.Data)
  SharedDtor();
}

void stReturnZoneDicMapGmUserCmd_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnZoneDicMapGmUserCmd_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnZoneDicMapGmUserCmd_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnZoneDicMapGmUserCmd_Data_descriptor_;
}

const stReturnZoneDicMapGmUserCmd_Data& stReturnZoneDicMapGmUserCmd_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnZoneDicMapGmUserCmd_Data* stReturnZoneDicMapGmUserCmd_Data::default_instance_ = NULL;

stReturnZoneDicMapGmUserCmd_Data* stReturnZoneDicMapGmUserCmd_Data::New() const {
  return new stReturnZoneDicMapGmUserCmd_Data;
}

void stReturnZoneDicMapGmUserCmd_Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnZoneDicMapGmUserCmd_Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sceneid_, name_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnZoneDicMapGmUserCmd_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnZoneDicMapGmUserCmd.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional uint32 name = 2;
      case 2: {
        if (tag == 16) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnZoneDicMapGmUserCmd.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnZoneDicMapGmUserCmd.Data)
  return false;
#undef DO_
}

void stReturnZoneDicMapGmUserCmd_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnZoneDicMapGmUserCmd.Data)
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnZoneDicMapGmUserCmd.Data)
}

::google::protobuf::uint8* stReturnZoneDicMapGmUserCmd_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnZoneDicMapGmUserCmd.Data)
  // optional uint32 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneid(), target);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnZoneDicMapGmUserCmd.Data)
  return target;
}

int stReturnZoneDicMapGmUserCmd_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnZoneDicMapGmUserCmd_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnZoneDicMapGmUserCmd_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnZoneDicMapGmUserCmd_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnZoneDicMapGmUserCmd_Data::MergeFrom(const stReturnZoneDicMapGmUserCmd_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnZoneDicMapGmUserCmd_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnZoneDicMapGmUserCmd_Data::CopyFrom(const stReturnZoneDicMapGmUserCmd_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnZoneDicMapGmUserCmd_Data::IsInitialized() const {

  return true;
}

void stReturnZoneDicMapGmUserCmd_Data::Swap(stReturnZoneDicMapGmUserCmd_Data* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnZoneDicMapGmUserCmd_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnZoneDicMapGmUserCmd_Data_descriptor_;
  metadata.reflection = stReturnZoneDicMapGmUserCmd_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int stReturnZoneDicMapGmUserCmd::kZoneidFieldNumber;
const int stReturnZoneDicMapGmUserCmd::kNumFieldNumber;
const int stReturnZoneDicMapGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnZoneDicMapGmUserCmd::stReturnZoneDicMapGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnZoneDicMapGmUserCmd)
}

void stReturnZoneDicMapGmUserCmd::InitAsDefaultInstance() {
}

stReturnZoneDicMapGmUserCmd::stReturnZoneDicMapGmUserCmd(const stReturnZoneDicMapGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnZoneDicMapGmUserCmd)
}

void stReturnZoneDicMapGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnZoneDicMapGmUserCmd::~stReturnZoneDicMapGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnZoneDicMapGmUserCmd)
  SharedDtor();
}

void stReturnZoneDicMapGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnZoneDicMapGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnZoneDicMapGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnZoneDicMapGmUserCmd_descriptor_;
}

const stReturnZoneDicMapGmUserCmd& stReturnZoneDicMapGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnZoneDicMapGmUserCmd* stReturnZoneDicMapGmUserCmd::default_instance_ = NULL;

stReturnZoneDicMapGmUserCmd* stReturnZoneDicMapGmUserCmd::New() const {
  return new stReturnZoneDicMapGmUserCmd;
}

void stReturnZoneDicMapGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnZoneDicMapGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnZoneDicMapGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnZoneDicMapGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .Pmd.stReturnZoneDicMapGmUserCmd.Data data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnZoneDicMapGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnZoneDicMapGmUserCmd)
  return false;
#undef DO_
}

void stReturnZoneDicMapGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnZoneDicMapGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // repeated .Pmd.stReturnZoneDicMapGmUserCmd.Data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnZoneDicMapGmUserCmd)
}

::google::protobuf::uint8* stReturnZoneDicMapGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnZoneDicMapGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // repeated .Pmd.stReturnZoneDicMapGmUserCmd.Data data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnZoneDicMapGmUserCmd)
  return target;
}

int stReturnZoneDicMapGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated .Pmd.stReturnZoneDicMapGmUserCmd.Data data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnZoneDicMapGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnZoneDicMapGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnZoneDicMapGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnZoneDicMapGmUserCmd::MergeFrom(const stReturnZoneDicMapGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnZoneDicMapGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnZoneDicMapGmUserCmd::CopyFrom(const stReturnZoneDicMapGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnZoneDicMapGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnZoneDicMapGmUserCmd::Swap(stReturnZoneDicMapGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(num_, other->num_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnZoneDicMapGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnZoneDicMapGmUserCmd_descriptor_;
  metadata.reflection = stReturnZoneDicMapGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stForwardToAllGmUserCmd::kDwZoneIDFieldNumber;
const int stForwardToAllGmUserCmd::kWCountryIDFieldNumber;
const int stForwardToAllGmUserCmd::kWSceneIDFieldNumber;
const int stForwardToAllGmUserCmd::kDwUserIDFieldNumber;
const int stForwardToAllGmUserCmd::kDwProvinceIDFieldNumber;
const int stForwardToAllGmUserCmd::kDwCityIDFieldNumber;
const int stForwardToAllGmUserCmd::kUserNameFieldNumber;
const int stForwardToAllGmUserCmd::kNumFieldNumber;
const int stForwardToAllGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stForwardToAllGmUserCmd::stForwardToAllGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stForwardToAllGmUserCmd)
}

void stForwardToAllGmUserCmd::InitAsDefaultInstance() {
}

stForwardToAllGmUserCmd::stForwardToAllGmUserCmd(const stForwardToAllGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stForwardToAllGmUserCmd)
}

void stForwardToAllGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwzoneid_ = 0u;
  wcountryid_ = 0u;
  wsceneid_ = 0u;
  dwuserid_ = 0u;
  dwprovinceid_ = 0u;
  dwcityid_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForwardToAllGmUserCmd::~stForwardToAllGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stForwardToAllGmUserCmd)
  SharedDtor();
}

void stForwardToAllGmUserCmd::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stForwardToAllGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForwardToAllGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardToAllGmUserCmd_descriptor_;
}

const stForwardToAllGmUserCmd& stForwardToAllGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stForwardToAllGmUserCmd* stForwardToAllGmUserCmd::default_instance_ = NULL;

stForwardToAllGmUserCmd* stForwardToAllGmUserCmd::New() const {
  return new stForwardToAllGmUserCmd;
}

void stForwardToAllGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stForwardToAllGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(dwzoneid_, dwcityid_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    num_ = 0u;
  }
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForwardToAllGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stForwardToAllGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dwZoneID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwzoneid_)));
          set_has_dwzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wCountryID;
        break;
      }

      // optional uint32 wCountryID = 2;
      case 2: {
        if (tag == 16) {
         parse_wCountryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wcountryid_)));
          set_has_wcountryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wSceneID;
        break;
      }

      // optional uint32 wSceneID = 3;
      case 3: {
        if (tag == 24) {
         parse_wSceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wsceneid_)));
          set_has_wsceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwUserID;
        break;
      }

      // optional uint32 dwUserID = 4;
      case 4: {
        if (tag == 32) {
         parse_dwUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dwProvinceID;
        break;
      }

      // optional uint32 dwProvinceID = 5;
      case 5: {
        if (tag == 40) {
         parse_dwProvinceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwprovinceid_)));
          set_has_dwprovinceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dwCityID;
        break;
      }

      // optional uint32 dwCityID = 6;
      case 6: {
        if (tag == 48) {
         parse_dwCityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwcityid_)));
          set_has_dwcityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_userName;
        break;
      }

      // optional string userName = 7;
      case 7: {
        if (tag == 58) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num;
        break;
      }

      // optional uint32 num = 8;
      case 8: {
        if (tag == 64) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional bytes data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stForwardToAllGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stForwardToAllGmUserCmd)
  return false;
#undef DO_
}

void stForwardToAllGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stForwardToAllGmUserCmd)
  // optional uint32 dwZoneID = 1;
  if (has_dwzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwzoneid(), output);
  }

  // optional uint32 wCountryID = 2;
  if (has_wcountryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wcountryid(), output);
  }

  // optional uint32 wSceneID = 3;
  if (has_wsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wsceneid(), output);
  }

  // optional uint32 dwUserID = 4;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dwuserid(), output);
  }

  // optional uint32 dwProvinceID = 5;
  if (has_dwprovinceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dwprovinceid(), output);
  }

  // optional uint32 dwCityID = 6;
  if (has_dwcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dwcityid(), output);
  }

  // optional string userName = 7;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->username(), output);
  }

  // optional uint32 num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num(), output);
  }

  // optional bytes data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stForwardToAllGmUserCmd)
}

::google::protobuf::uint8* stForwardToAllGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stForwardToAllGmUserCmd)
  // optional uint32 dwZoneID = 1;
  if (has_dwzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwzoneid(), target);
  }

  // optional uint32 wCountryID = 2;
  if (has_wcountryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wcountryid(), target);
  }

  // optional uint32 wSceneID = 3;
  if (has_wsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wsceneid(), target);
  }

  // optional uint32 dwUserID = 4;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dwuserid(), target);
  }

  // optional uint32 dwProvinceID = 5;
  if (has_dwprovinceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dwprovinceid(), target);
  }

  // optional uint32 dwCityID = 6;
  if (has_dwcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dwcityid(), target);
  }

  // optional string userName = 7;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->username(), target);
  }

  // optional uint32 num = 8;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num(), target);
  }

  // optional bytes data = 9;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stForwardToAllGmUserCmd)
  return target;
}

int stForwardToAllGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dwZoneID = 1;
    if (has_dwzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwzoneid());
    }

    // optional uint32 wCountryID = 2;
    if (has_wcountryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wcountryid());
    }

    // optional uint32 wSceneID = 3;
    if (has_wsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wsceneid());
    }

    // optional uint32 dwUserID = 4;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwuserid());
    }

    // optional uint32 dwProvinceID = 5;
    if (has_dwprovinceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwprovinceid());
    }

    // optional uint32 dwCityID = 6;
    if (has_dwcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwcityid());
    }

    // optional string userName = 7;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForwardToAllGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForwardToAllGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForwardToAllGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForwardToAllGmUserCmd::MergeFrom(const stForwardToAllGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwzoneid()) {
      set_dwzoneid(from.dwzoneid());
    }
    if (from.has_wcountryid()) {
      set_wcountryid(from.wcountryid());
    }
    if (from.has_wsceneid()) {
      set_wsceneid(from.wsceneid());
    }
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_dwprovinceid()) {
      set_dwprovinceid(from.dwprovinceid());
    }
    if (from.has_dwcityid()) {
      set_dwcityid(from.dwcityid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForwardToAllGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForwardToAllGmUserCmd::CopyFrom(const stForwardToAllGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForwardToAllGmUserCmd::IsInitialized() const {

  return true;
}

void stForwardToAllGmUserCmd::Swap(stForwardToAllGmUserCmd* other) {
  if (other != this) {
    std::swap(dwzoneid_, other->dwzoneid_);
    std::swap(wcountryid_, other->wcountryid_);
    std::swap(wsceneid_, other->wsceneid_);
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(dwprovinceid_, other->dwprovinceid_);
    std::swap(dwcityid_, other->dwcityid_);
    std::swap(username_, other->username_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForwardToAllGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForwardToAllGmUserCmd_descriptor_;
  metadata.reflection = stForwardToAllGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stForwardToOnlyGmUserCmd::kDwZoneIDFieldNumber;
const int stForwardToOnlyGmUserCmd::kWCountryIDFieldNumber;
const int stForwardToOnlyGmUserCmd::kWSceneIDFieldNumber;
const int stForwardToOnlyGmUserCmd::kDwUserIDFieldNumber;
const int stForwardToOnlyGmUserCmd::kUserNameFieldNumber;
const int stForwardToOnlyGmUserCmd::kGmIDFieldNumber;
const int stForwardToOnlyGmUserCmd::kGmNameFieldNumber;
const int stForwardToOnlyGmUserCmd::kNumFieldNumber;
const int stForwardToOnlyGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stForwardToOnlyGmUserCmd::stForwardToOnlyGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stForwardToOnlyGmUserCmd)
}

void stForwardToOnlyGmUserCmd::InitAsDefaultInstance() {
}

stForwardToOnlyGmUserCmd::stForwardToOnlyGmUserCmd(const stForwardToOnlyGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stForwardToOnlyGmUserCmd)
}

void stForwardToOnlyGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dwzoneid_ = 0u;
  wcountryid_ = 0u;
  wsceneid_ = 0u;
  dwuserid_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gmid_ = 0u;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForwardToOnlyGmUserCmd::~stForwardToOnlyGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stForwardToOnlyGmUserCmd)
  SharedDtor();
}

void stForwardToOnlyGmUserCmd::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stForwardToOnlyGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForwardToOnlyGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardToOnlyGmUserCmd_descriptor_;
}

const stForwardToOnlyGmUserCmd& stForwardToOnlyGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stForwardToOnlyGmUserCmd* stForwardToOnlyGmUserCmd::default_instance_ = NULL;

stForwardToOnlyGmUserCmd* stForwardToOnlyGmUserCmd::New() const {
  return new stForwardToOnlyGmUserCmd;
}

void stForwardToOnlyGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stForwardToOnlyGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(dwzoneid_, dwuserid_);
    ZR_(gmid_, num_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
  }
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForwardToOnlyGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stForwardToOnlyGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dwZoneID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwzoneid_)));
          set_has_dwzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wCountryID;
        break;
      }

      // optional uint32 wCountryID = 2;
      case 2: {
        if (tag == 16) {
         parse_wCountryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wcountryid_)));
          set_has_wcountryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wSceneID;
        break;
      }

      // optional uint32 wSceneID = 3;
      case 3: {
        if (tag == 24) {
         parse_wSceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wsceneid_)));
          set_has_wsceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwUserID;
        break;
      }

      // optional uint32 dwUserID = 4;
      case 4: {
        if (tag == 32) {
         parse_dwUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwuserid_)));
          set_has_dwuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }

      // optional string userName = 5;
      case 5: {
        if (tag == 42) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gmID;
        break;
      }

      // optional uint32 gmID = 6;
      case 6: {
        if (tag == 48) {
         parse_gmID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gmName;
        break;
      }

      // optional string gmName = 7;
      case 7: {
        if (tag == 58) {
         parse_gmName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num;
        break;
      }

      // optional uint32 num = 8;
      case 8: {
        if (tag == 64) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional bytes data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stForwardToOnlyGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stForwardToOnlyGmUserCmd)
  return false;
#undef DO_
}

void stForwardToOnlyGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stForwardToOnlyGmUserCmd)
  // optional uint32 dwZoneID = 1;
  if (has_dwzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwzoneid(), output);
  }

  // optional uint32 wCountryID = 2;
  if (has_wcountryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wcountryid(), output);
  }

  // optional uint32 wSceneID = 3;
  if (has_wsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wsceneid(), output);
  }

  // optional uint32 dwUserID = 4;
  if (has_dwuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dwuserid(), output);
  }

  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username(), output);
  }

  // optional uint32 gmID = 6;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gmid(), output);
  }

  // optional string gmName = 7;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gmname(), output);
  }

  // optional uint32 num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num(), output);
  }

  // optional bytes data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stForwardToOnlyGmUserCmd)
}

::google::protobuf::uint8* stForwardToOnlyGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stForwardToOnlyGmUserCmd)
  // optional uint32 dwZoneID = 1;
  if (has_dwzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwzoneid(), target);
  }

  // optional uint32 wCountryID = 2;
  if (has_wcountryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wcountryid(), target);
  }

  // optional uint32 wSceneID = 3;
  if (has_wsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wsceneid(), target);
  }

  // optional uint32 dwUserID = 4;
  if (has_dwuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dwuserid(), target);
  }

  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  // optional uint32 gmID = 6;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gmid(), target);
  }

  // optional string gmName = 7;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gmname(), target);
  }

  // optional uint32 num = 8;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num(), target);
  }

  // optional bytes data = 9;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stForwardToOnlyGmUserCmd)
  return target;
}

int stForwardToOnlyGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dwZoneID = 1;
    if (has_dwzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwzoneid());
    }

    // optional uint32 wCountryID = 2;
    if (has_wcountryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wcountryid());
    }

    // optional uint32 wSceneID = 3;
    if (has_wsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wsceneid());
    }

    // optional uint32 dwUserID = 4;
    if (has_dwuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwuserid());
    }

    // optional string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 gmID = 6;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional string gmName = 7;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForwardToOnlyGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForwardToOnlyGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForwardToOnlyGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForwardToOnlyGmUserCmd::MergeFrom(const stForwardToOnlyGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwzoneid()) {
      set_dwzoneid(from.dwzoneid());
    }
    if (from.has_wcountryid()) {
      set_wcountryid(from.wcountryid());
    }
    if (from.has_wsceneid()) {
      set_wsceneid(from.wsceneid());
    }
    if (from.has_dwuserid()) {
      set_dwuserid(from.dwuserid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForwardToOnlyGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForwardToOnlyGmUserCmd::CopyFrom(const stForwardToOnlyGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForwardToOnlyGmUserCmd::IsInitialized() const {

  return true;
}

void stForwardToOnlyGmUserCmd::Swap(stForwardToOnlyGmUserCmd* other) {
  if (other != this) {
    std::swap(dwzoneid_, other->dwzoneid_);
    std::swap(wcountryid_, other->wcountryid_);
    std::swap(wsceneid_, other->wsceneid_);
    std::swap(dwuserid_, other->dwuserid_);
    std::swap(username_, other->username_);
    std::swap(gmid_, other->gmid_);
    std::swap(gmname_, other->gmname_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForwardToOnlyGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForwardToOnlyGmUserCmd_descriptor_;
  metadata.reflection = stForwardToOnlyGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBroadcastNewGmUserCmd::kTaskIDFieldNumber;
const int stBroadcastNewGmUserCmd::kGmIDFieldNumber;
const int stBroadcastNewGmUserCmd::kGmNameFieldNumber;
const int stBroadcastNewGmUserCmd::kDwZoneIDFieldNumber;
const int stBroadcastNewGmUserCmd::kWCountryIDFieldNumber;
const int stBroadcastNewGmUserCmd::kWSceneIDFieldNumber;
const int stBroadcastNewGmUserCmd::kDwTimeFromFieldNumber;
const int stBroadcastNewGmUserCmd::kDwTimeEndFieldNumber;
const int stBroadcastNewGmUserCmd::kDwIntervalTimeFieldNumber;
const int stBroadcastNewGmUserCmd::kByPriorityFieldNumber;
const int stBroadcastNewGmUserCmd::kNumFieldNumber;
const int stBroadcastNewGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stBroadcastNewGmUserCmd::stBroadcastNewGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stBroadcastNewGmUserCmd)
}

void stBroadcastNewGmUserCmd::InitAsDefaultInstance() {
}

stBroadcastNewGmUserCmd::stBroadcastNewGmUserCmd(const stBroadcastNewGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stBroadcastNewGmUserCmd)
}

void stBroadcastNewGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  taskid_ = 0u;
  gmid_ = 0u;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwzoneid_ = 0u;
  wcountryid_ = 0u;
  wsceneid_ = 0u;
  dwtimefrom_ = 0u;
  dwtimeend_ = 0u;
  dwintervaltime_ = 0u;
  bypriority_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastNewGmUserCmd::~stBroadcastNewGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stBroadcastNewGmUserCmd)
  SharedDtor();
}

void stBroadcastNewGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stBroadcastNewGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastNewGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastNewGmUserCmd_descriptor_;
}

const stBroadcastNewGmUserCmd& stBroadcastNewGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stBroadcastNewGmUserCmd* stBroadcastNewGmUserCmd::default_instance_ = NULL;

stBroadcastNewGmUserCmd* stBroadcastNewGmUserCmd::New() const {
  return new stBroadcastNewGmUserCmd;
}

void stBroadcastNewGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stBroadcastNewGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(taskid_, gmid_);
    ZR_(dwzoneid_, dwtimeend_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(dwintervaltime_, num_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastNewGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stBroadcastNewGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gmID;
        break;
      }

      // optional uint32 gmID = 2;
      case 2: {
        if (tag == 16) {
         parse_gmID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gmName;
        break;
      }

      // optional string gmName = 3;
      case 3: {
        if (tag == 26) {
         parse_gmName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwZoneID;
        break;
      }

      // optional uint32 dwZoneID = 4;
      case 4: {
        if (tag == 32) {
         parse_dwZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwzoneid_)));
          set_has_dwzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wCountryID;
        break;
      }

      // optional uint32 wCountryID = 5;
      case 5: {
        if (tag == 40) {
         parse_wCountryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wcountryid_)));
          set_has_wcountryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wSceneID;
        break;
      }

      // optional uint32 wSceneID = 6;
      case 6: {
        if (tag == 48) {
         parse_wSceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wsceneid_)));
          set_has_wsceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dwTimeFrom;
        break;
      }

      // optional uint32 dwTimeFrom = 7;
      case 7: {
        if (tag == 56) {
         parse_dwTimeFrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwtimefrom_)));
          set_has_dwtimefrom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dwTimeEnd;
        break;
      }

      // optional uint32 dwTimeEnd = 8;
      case 8: {
        if (tag == 64) {
         parse_dwTimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwtimeend_)));
          set_has_dwtimeend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dwIntervalTime;
        break;
      }

      // optional uint32 dwIntervalTime = 9;
      case 9: {
        if (tag == 72) {
         parse_dwIntervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwintervaltime_)));
          set_has_dwintervaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_byPriority;
        break;
      }

      // optional uint32 byPriority = 10;
      case 10: {
        if (tag == 80) {
         parse_byPriority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bypriority_)));
          set_has_bypriority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num;
        break;
      }

      // optional uint32 num = 11;
      case 11: {
        if (tag == 88) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_data;
        break;
      }

      // optional bytes data = 12;
      case 12: {
        if (tag == 98) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stBroadcastNewGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stBroadcastNewGmUserCmd)
  return false;
#undef DO_
}

void stBroadcastNewGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stBroadcastNewGmUserCmd)
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 gmID = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmid(), output);
  }

  // optional string gmName = 3;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gmname(), output);
  }

  // optional uint32 dwZoneID = 4;
  if (has_dwzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dwzoneid(), output);
  }

  // optional uint32 wCountryID = 5;
  if (has_wcountryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wcountryid(), output);
  }

  // optional uint32 wSceneID = 6;
  if (has_wsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wsceneid(), output);
  }

  // optional uint32 dwTimeFrom = 7;
  if (has_dwtimefrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dwtimefrom(), output);
  }

  // optional uint32 dwTimeEnd = 8;
  if (has_dwtimeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dwtimeend(), output);
  }

  // optional uint32 dwIntervalTime = 9;
  if (has_dwintervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dwintervaltime(), output);
  }

  // optional uint32 byPriority = 10;
  if (has_bypriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bypriority(), output);
  }

  // optional uint32 num = 11;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num(), output);
  }

  // optional bytes data = 12;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stBroadcastNewGmUserCmd)
}

::google::protobuf::uint8* stBroadcastNewGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stBroadcastNewGmUserCmd)
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 gmID = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmid(), target);
  }

  // optional string gmName = 3;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gmname(), target);
  }

  // optional uint32 dwZoneID = 4;
  if (has_dwzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dwzoneid(), target);
  }

  // optional uint32 wCountryID = 5;
  if (has_wcountryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wcountryid(), target);
  }

  // optional uint32 wSceneID = 6;
  if (has_wsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wsceneid(), target);
  }

  // optional uint32 dwTimeFrom = 7;
  if (has_dwtimefrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dwtimefrom(), target);
  }

  // optional uint32 dwTimeEnd = 8;
  if (has_dwtimeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dwtimeend(), target);
  }

  // optional uint32 dwIntervalTime = 9;
  if (has_dwintervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dwintervaltime(), target);
  }

  // optional uint32 byPriority = 10;
  if (has_bypriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bypriority(), target);
  }

  // optional uint32 num = 11;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num(), target);
  }

  // optional bytes data = 12;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stBroadcastNewGmUserCmd)
  return target;
}

int stBroadcastNewGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 gmID = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional string gmName = 3;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 dwZoneID = 4;
    if (has_dwzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwzoneid());
    }

    // optional uint32 wCountryID = 5;
    if (has_wcountryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wcountryid());
    }

    // optional uint32 wSceneID = 6;
    if (has_wsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wsceneid());
    }

    // optional uint32 dwTimeFrom = 7;
    if (has_dwtimefrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwtimefrom());
    }

    // optional uint32 dwTimeEnd = 8;
    if (has_dwtimeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwtimeend());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dwIntervalTime = 9;
    if (has_dwintervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwintervaltime());
    }

    // optional uint32 byPriority = 10;
    if (has_bypriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bypriority());
    }

    // optional uint32 num = 11;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 12;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastNewGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastNewGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastNewGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastNewGmUserCmd::MergeFrom(const stBroadcastNewGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_dwzoneid()) {
      set_dwzoneid(from.dwzoneid());
    }
    if (from.has_wcountryid()) {
      set_wcountryid(from.wcountryid());
    }
    if (from.has_wsceneid()) {
      set_wsceneid(from.wsceneid());
    }
    if (from.has_dwtimefrom()) {
      set_dwtimefrom(from.dwtimefrom());
    }
    if (from.has_dwtimeend()) {
      set_dwtimeend(from.dwtimeend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dwintervaltime()) {
      set_dwintervaltime(from.dwintervaltime());
    }
    if (from.has_bypriority()) {
      set_bypriority(from.bypriority());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastNewGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastNewGmUserCmd::CopyFrom(const stBroadcastNewGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastNewGmUserCmd::IsInitialized() const {

  return true;
}

void stBroadcastNewGmUserCmd::Swap(stBroadcastNewGmUserCmd* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(gmid_, other->gmid_);
    std::swap(gmname_, other->gmname_);
    std::swap(dwzoneid_, other->dwzoneid_);
    std::swap(wcountryid_, other->wcountryid_);
    std::swap(wsceneid_, other->wsceneid_);
    std::swap(dwtimefrom_, other->dwtimefrom_);
    std::swap(dwtimeend_, other->dwtimeend_);
    std::swap(dwintervaltime_, other->dwintervaltime_);
    std::swap(bypriority_, other->bypriority_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastNewGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastNewGmUserCmd_descriptor_;
  metadata.reflection = stBroadcastNewGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBroadcastDeleteGmUserCmd::kTaskIDFieldNumber;
#endif  // !_MSC_VER

stBroadcastDeleteGmUserCmd::stBroadcastDeleteGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stBroadcastDeleteGmUserCmd)
}

void stBroadcastDeleteGmUserCmd::InitAsDefaultInstance() {
}

stBroadcastDeleteGmUserCmd::stBroadcastDeleteGmUserCmd(const stBroadcastDeleteGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stBroadcastDeleteGmUserCmd)
}

void stBroadcastDeleteGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastDeleteGmUserCmd::~stBroadcastDeleteGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stBroadcastDeleteGmUserCmd)
  SharedDtor();
}

void stBroadcastDeleteGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBroadcastDeleteGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastDeleteGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastDeleteGmUserCmd_descriptor_;
}

const stBroadcastDeleteGmUserCmd& stBroadcastDeleteGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stBroadcastDeleteGmUserCmd* stBroadcastDeleteGmUserCmd::default_instance_ = NULL;

stBroadcastDeleteGmUserCmd* stBroadcastDeleteGmUserCmd::New() const {
  return new stBroadcastDeleteGmUserCmd;
}

void stBroadcastDeleteGmUserCmd::Clear() {
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastDeleteGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stBroadcastDeleteGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stBroadcastDeleteGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stBroadcastDeleteGmUserCmd)
  return false;
#undef DO_
}

void stBroadcastDeleteGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stBroadcastDeleteGmUserCmd)
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stBroadcastDeleteGmUserCmd)
}

::google::protobuf::uint8* stBroadcastDeleteGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stBroadcastDeleteGmUserCmd)
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stBroadcastDeleteGmUserCmd)
  return target;
}

int stBroadcastDeleteGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastDeleteGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastDeleteGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastDeleteGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastDeleteGmUserCmd::MergeFrom(const stBroadcastDeleteGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastDeleteGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastDeleteGmUserCmd::CopyFrom(const stBroadcastDeleteGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastDeleteGmUserCmd::IsInitialized() const {

  return true;
}

void stBroadcastDeleteGmUserCmd::Swap(stBroadcastDeleteGmUserCmd* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastDeleteGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastDeleteGmUserCmd_descriptor_;
  metadata.reflection = stBroadcastDeleteGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBroadcastRequestGmUserCmd::kDwZoneIDFieldNumber;
const int stBroadcastRequestGmUserCmd::kWCountryIDFieldNumber;
const int stBroadcastRequestGmUserCmd::kWSceneIDFieldNumber;
const int stBroadcastRequestGmUserCmd::kDwTimeEndFieldNumber;
#endif  // !_MSC_VER

stBroadcastRequestGmUserCmd::stBroadcastRequestGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stBroadcastRequestGmUserCmd)
}

void stBroadcastRequestGmUserCmd::InitAsDefaultInstance() {
}

stBroadcastRequestGmUserCmd::stBroadcastRequestGmUserCmd(const stBroadcastRequestGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stBroadcastRequestGmUserCmd)
}

void stBroadcastRequestGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  dwzoneid_ = 0u;
  wcountryid_ = 0u;
  wsceneid_ = 0u;
  dwtimeend_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastRequestGmUserCmd::~stBroadcastRequestGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stBroadcastRequestGmUserCmd)
  SharedDtor();
}

void stBroadcastRequestGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBroadcastRequestGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastRequestGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastRequestGmUserCmd_descriptor_;
}

const stBroadcastRequestGmUserCmd& stBroadcastRequestGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stBroadcastRequestGmUserCmd* stBroadcastRequestGmUserCmd::default_instance_ = NULL;

stBroadcastRequestGmUserCmd* stBroadcastRequestGmUserCmd::New() const {
  return new stBroadcastRequestGmUserCmd;
}

void stBroadcastRequestGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stBroadcastRequestGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dwzoneid_, dwtimeend_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastRequestGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stBroadcastRequestGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dwZoneID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwzoneid_)));
          set_has_dwzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wCountryID;
        break;
      }

      // optional uint32 wCountryID = 2;
      case 2: {
        if (tag == 16) {
         parse_wCountryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wcountryid_)));
          set_has_wcountryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wSceneID;
        break;
      }

      // optional uint32 wSceneID = 3;
      case 3: {
        if (tag == 24) {
         parse_wSceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wsceneid_)));
          set_has_wsceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwTimeEnd;
        break;
      }

      // optional uint32 dwTimeEnd = 4;
      case 4: {
        if (tag == 32) {
         parse_dwTimeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwtimeend_)));
          set_has_dwtimeend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stBroadcastRequestGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stBroadcastRequestGmUserCmd)
  return false;
#undef DO_
}

void stBroadcastRequestGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stBroadcastRequestGmUserCmd)
  // optional uint32 dwZoneID = 1;
  if (has_dwzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwzoneid(), output);
  }

  // optional uint32 wCountryID = 2;
  if (has_wcountryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wcountryid(), output);
  }

  // optional uint32 wSceneID = 3;
  if (has_wsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wsceneid(), output);
  }

  // optional uint32 dwTimeEnd = 4;
  if (has_dwtimeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dwtimeend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stBroadcastRequestGmUserCmd)
}

::google::protobuf::uint8* stBroadcastRequestGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stBroadcastRequestGmUserCmd)
  // optional uint32 dwZoneID = 1;
  if (has_dwzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwzoneid(), target);
  }

  // optional uint32 wCountryID = 2;
  if (has_wcountryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wcountryid(), target);
  }

  // optional uint32 wSceneID = 3;
  if (has_wsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wsceneid(), target);
  }

  // optional uint32 dwTimeEnd = 4;
  if (has_dwtimeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dwtimeend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stBroadcastRequestGmUserCmd)
  return target;
}

int stBroadcastRequestGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dwZoneID = 1;
    if (has_dwzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwzoneid());
    }

    // optional uint32 wCountryID = 2;
    if (has_wcountryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wcountryid());
    }

    // optional uint32 wSceneID = 3;
    if (has_wsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wsceneid());
    }

    // optional uint32 dwTimeEnd = 4;
    if (has_dwtimeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwtimeend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastRequestGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastRequestGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastRequestGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastRequestGmUserCmd::MergeFrom(const stBroadcastRequestGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwzoneid()) {
      set_dwzoneid(from.dwzoneid());
    }
    if (from.has_wcountryid()) {
      set_wcountryid(from.wcountryid());
    }
    if (from.has_wsceneid()) {
      set_wsceneid(from.wsceneid());
    }
    if (from.has_dwtimeend()) {
      set_dwtimeend(from.dwtimeend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastRequestGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastRequestGmUserCmd::CopyFrom(const stBroadcastRequestGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastRequestGmUserCmd::IsInitialized() const {

  return true;
}

void stBroadcastRequestGmUserCmd::Swap(stBroadcastRequestGmUserCmd* other) {
  if (other != this) {
    std::swap(dwzoneid_, other->dwzoneid_);
    std::swap(wcountryid_, other->wcountryid_);
    std::swap(wsceneid_, other->wsceneid_);
    std::swap(dwtimeend_, other->dwtimeend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastRequestGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastRequestGmUserCmd_descriptor_;
  metadata.reflection = stBroadcastRequestGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stRequestTimeGmUserCmd::stRequestTimeGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestTimeGmUserCmd)
}

void stRequestTimeGmUserCmd::InitAsDefaultInstance() {
}

stRequestTimeGmUserCmd::stRequestTimeGmUserCmd(const stRequestTimeGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestTimeGmUserCmd)
}

void stRequestTimeGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestTimeGmUserCmd::~stRequestTimeGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestTimeGmUserCmd)
  SharedDtor();
}

void stRequestTimeGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestTimeGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestTimeGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestTimeGmUserCmd_descriptor_;
}

const stRequestTimeGmUserCmd& stRequestTimeGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestTimeGmUserCmd* stRequestTimeGmUserCmd::default_instance_ = NULL;

stRequestTimeGmUserCmd* stRequestTimeGmUserCmd::New() const {
  return new stRequestTimeGmUserCmd;
}

void stRequestTimeGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestTimeGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestTimeGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestTimeGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestTimeGmUserCmd)
  return false;
#undef DO_
}

void stRequestTimeGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestTimeGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestTimeGmUserCmd)
}

::google::protobuf::uint8* stRequestTimeGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestTimeGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestTimeGmUserCmd)
  return target;
}

int stRequestTimeGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestTimeGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestTimeGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestTimeGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestTimeGmUserCmd::MergeFrom(const stRequestTimeGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestTimeGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestTimeGmUserCmd::CopyFrom(const stRequestTimeGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestTimeGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestTimeGmUserCmd::Swap(stRequestTimeGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestTimeGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestTimeGmUserCmd_descriptor_;
  metadata.reflection = stRequestTimeGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnTimeGmUserCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

stReturnTimeGmUserCmd::stReturnTimeGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnTimeGmUserCmd)
}

void stReturnTimeGmUserCmd::InitAsDefaultInstance() {
}

stReturnTimeGmUserCmd::stReturnTimeGmUserCmd(const stReturnTimeGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnTimeGmUserCmd)
}

void stReturnTimeGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnTimeGmUserCmd::~stReturnTimeGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnTimeGmUserCmd)
  SharedDtor();
}

void stReturnTimeGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnTimeGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnTimeGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnTimeGmUserCmd_descriptor_;
}

const stReturnTimeGmUserCmd& stReturnTimeGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnTimeGmUserCmd* stReturnTimeGmUserCmd::default_instance_ = NULL;

stReturnTimeGmUserCmd* stReturnTimeGmUserCmd::New() const {
  return new stReturnTimeGmUserCmd;
}

void stReturnTimeGmUserCmd::Clear() {
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnTimeGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnTimeGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnTimeGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnTimeGmUserCmd)
  return false;
#undef DO_
}

void stReturnTimeGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnTimeGmUserCmd)
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnTimeGmUserCmd)
}

::google::protobuf::uint8* stReturnTimeGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnTimeGmUserCmd)
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnTimeGmUserCmd)
  return target;
}

int stReturnTimeGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnTimeGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnTimeGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnTimeGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnTimeGmUserCmd::MergeFrom(const stReturnTimeGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnTimeGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnTimeGmUserCmd::CopyFrom(const stReturnTimeGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnTimeGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnTimeGmUserCmd::Swap(stReturnTimeGmUserCmd* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnTimeGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnTimeGmUserCmd_descriptor_;
  metadata.reflection = stReturnTimeGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stServerShutdownGmUserCmd::kZoneidFieldNumber;
const int stServerShutdownGmUserCmd::kServeridFieldNumber;
const int stServerShutdownGmUserCmd::kServertypeFieldNumber;
const int stServerShutdownGmUserCmd::kServernameFieldNumber;
const int stServerShutdownGmUserCmd::kServeripFieldNumber;
const int stServerShutdownGmUserCmd::kUsernumFieldNumber;
const int stServerShutdownGmUserCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

stServerShutdownGmUserCmd::stServerShutdownGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stServerShutdownGmUserCmd)
}

void stServerShutdownGmUserCmd::InitAsDefaultInstance() {
}

stServerShutdownGmUserCmd::stServerShutdownGmUserCmd(const stServerShutdownGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stServerShutdownGmUserCmd)
}

void stServerShutdownGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zoneid_ = 0u;
  serverid_ = 0u;
  servertype_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_ = 0u;
  usernum_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stServerShutdownGmUserCmd::~stServerShutdownGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stServerShutdownGmUserCmd)
  SharedDtor();
}

void stServerShutdownGmUserCmd::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void stServerShutdownGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stServerShutdownGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stServerShutdownGmUserCmd_descriptor_;
}

const stServerShutdownGmUserCmd& stServerShutdownGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stServerShutdownGmUserCmd* stServerShutdownGmUserCmd::default_instance_ = NULL;

stServerShutdownGmUserCmd* stServerShutdownGmUserCmd::New() const {
  return new stServerShutdownGmUserCmd;
}

void stServerShutdownGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stServerShutdownGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zoneid_, serverid_);
    ZR_(servertype_, time_);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stServerShutdownGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stServerShutdownGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_servertype;
        break;
      }

      // optional uint32 servertype = 3;
      case 3: {
        if (tag == 24) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_servername;
        break;
      }

      // optional string servername = 4;
      case 4: {
        if (tag == 34) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_serverip;
        break;
      }

      // optional uint32 serverip = 5;
      case 5: {
        if (tag == 40) {
         parse_serverip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverip_)));
          set_has_serverip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_usernum;
        break;
      }

      // optional uint32 usernum = 6;
      case 6: {
        if (tag == 48) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stServerShutdownGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stServerShutdownGmUserCmd)
  return false;
#undef DO_
}

void stServerShutdownGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stServerShutdownGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // optional uint32 servertype = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servertype(), output);
  }

  // optional string servername = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->servername(), output);
  }

  // optional uint32 serverip = 5;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverip(), output);
  }

  // optional uint32 usernum = 6;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->usernum(), output);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stServerShutdownGmUserCmd)
}

::google::protobuf::uint8* stServerShutdownGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stServerShutdownGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // optional uint32 servertype = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servertype(), target);
  }

  // optional string servername = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }

  // optional uint32 serverip = 5;
  if (has_serverip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverip(), target);
  }

  // optional uint32 usernum = 6;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->usernum(), target);
  }

  // optional uint32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stServerShutdownGmUserCmd)
  return target;
}

int stServerShutdownGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint32 servertype = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // optional string servername = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional uint32 serverip = 5;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverip());
    }

    // optional uint32 usernum = 6;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

    // optional uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stServerShutdownGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stServerShutdownGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stServerShutdownGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stServerShutdownGmUserCmd::MergeFrom(const stServerShutdownGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stServerShutdownGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stServerShutdownGmUserCmd::CopyFrom(const stServerShutdownGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stServerShutdownGmUserCmd::IsInitialized() const {

  return true;
}

void stServerShutdownGmUserCmd::Swap(stServerShutdownGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(serverid_, other->serverid_);
    std::swap(servertype_, other->servertype_);
    std::swap(servername_, other->servername_);
    std::swap(serverip_, other->serverip_);
    std::swap(usernum_, other->usernum_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stServerShutdownGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stServerShutdownGmUserCmd_descriptor_;
  metadata.reflection = stServerShutdownGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stRequestZoneDicGmUserCmd::stRequestZoneDicGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestZoneDicGmUserCmd)
}

void stRequestZoneDicGmUserCmd::InitAsDefaultInstance() {
}

stRequestZoneDicGmUserCmd::stRequestZoneDicGmUserCmd(const stRequestZoneDicGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestZoneDicGmUserCmd)
}

void stRequestZoneDicGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestZoneDicGmUserCmd::~stRequestZoneDicGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestZoneDicGmUserCmd)
  SharedDtor();
}

void stRequestZoneDicGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestZoneDicGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestZoneDicGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestZoneDicGmUserCmd_descriptor_;
}

const stRequestZoneDicGmUserCmd& stRequestZoneDicGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestZoneDicGmUserCmd* stRequestZoneDicGmUserCmd::default_instance_ = NULL;

stRequestZoneDicGmUserCmd* stRequestZoneDicGmUserCmd::New() const {
  return new stRequestZoneDicGmUserCmd;
}

void stRequestZoneDicGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestZoneDicGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestZoneDicGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestZoneDicGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestZoneDicGmUserCmd)
  return false;
#undef DO_
}

void stRequestZoneDicGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestZoneDicGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestZoneDicGmUserCmd)
}

::google::protobuf::uint8* stRequestZoneDicGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestZoneDicGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestZoneDicGmUserCmd)
  return target;
}

int stRequestZoneDicGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestZoneDicGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestZoneDicGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestZoneDicGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestZoneDicGmUserCmd::MergeFrom(const stRequestZoneDicGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestZoneDicGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestZoneDicGmUserCmd::CopyFrom(const stRequestZoneDicGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestZoneDicGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestZoneDicGmUserCmd::Swap(stRequestZoneDicGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestZoneDicGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestZoneDicGmUserCmd_descriptor_;
  metadata.reflection = stRequestZoneDicGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnZoneDicGmUserCmd_Data::kZoneidFieldNumber;
const int stReturnZoneDicGmUserCmd_Data::kNameFieldNumber;
#endif  // !_MSC_VER

stReturnZoneDicGmUserCmd_Data::stReturnZoneDicGmUserCmd_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnZoneDicGmUserCmd.Data)
}

void stReturnZoneDicGmUserCmd_Data::InitAsDefaultInstance() {
}

stReturnZoneDicGmUserCmd_Data::stReturnZoneDicGmUserCmd_Data(const stReturnZoneDicGmUserCmd_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnZoneDicGmUserCmd.Data)
}

void stReturnZoneDicGmUserCmd_Data::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  name_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnZoneDicGmUserCmd_Data::~stReturnZoneDicGmUserCmd_Data() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnZoneDicGmUserCmd.Data)
  SharedDtor();
}

void stReturnZoneDicGmUserCmd_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnZoneDicGmUserCmd_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnZoneDicGmUserCmd_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnZoneDicGmUserCmd_Data_descriptor_;
}

const stReturnZoneDicGmUserCmd_Data& stReturnZoneDicGmUserCmd_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnZoneDicGmUserCmd_Data* stReturnZoneDicGmUserCmd_Data::default_instance_ = NULL;

stReturnZoneDicGmUserCmd_Data* stReturnZoneDicGmUserCmd_Data::New() const {
  return new stReturnZoneDicGmUserCmd_Data;
}

void stReturnZoneDicGmUserCmd_Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnZoneDicGmUserCmd_Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, name_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnZoneDicGmUserCmd_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnZoneDicGmUserCmd.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional uint32 name = 2;
      case 2: {
        if (tag == 16) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnZoneDicGmUserCmd.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnZoneDicGmUserCmd.Data)
  return false;
#undef DO_
}

void stReturnZoneDicGmUserCmd_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnZoneDicGmUserCmd.Data)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnZoneDicGmUserCmd.Data)
}

::google::protobuf::uint8* stReturnZoneDicGmUserCmd_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnZoneDicGmUserCmd.Data)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnZoneDicGmUserCmd.Data)
  return target;
}

int stReturnZoneDicGmUserCmd_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnZoneDicGmUserCmd_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnZoneDicGmUserCmd_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnZoneDicGmUserCmd_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnZoneDicGmUserCmd_Data::MergeFrom(const stReturnZoneDicGmUserCmd_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnZoneDicGmUserCmd_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnZoneDicGmUserCmd_Data::CopyFrom(const stReturnZoneDicGmUserCmd_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnZoneDicGmUserCmd_Data::IsInitialized() const {

  return true;
}

void stReturnZoneDicGmUserCmd_Data::Swap(stReturnZoneDicGmUserCmd_Data* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnZoneDicGmUserCmd_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnZoneDicGmUserCmd_Data_descriptor_;
  metadata.reflection = stReturnZoneDicGmUserCmd_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int stReturnZoneDicGmUserCmd::kNumFieldNumber;
const int stReturnZoneDicGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnZoneDicGmUserCmd::stReturnZoneDicGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnZoneDicGmUserCmd)
}

void stReturnZoneDicGmUserCmd::InitAsDefaultInstance() {
}

stReturnZoneDicGmUserCmd::stReturnZoneDicGmUserCmd(const stReturnZoneDicGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnZoneDicGmUserCmd)
}

void stReturnZoneDicGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnZoneDicGmUserCmd::~stReturnZoneDicGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnZoneDicGmUserCmd)
  SharedDtor();
}

void stReturnZoneDicGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnZoneDicGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnZoneDicGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnZoneDicGmUserCmd_descriptor_;
}

const stReturnZoneDicGmUserCmd& stReturnZoneDicGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnZoneDicGmUserCmd* stReturnZoneDicGmUserCmd::default_instance_ = NULL;

stReturnZoneDicGmUserCmd* stReturnZoneDicGmUserCmd::New() const {
  return new stReturnZoneDicGmUserCmd;
}

void stReturnZoneDicGmUserCmd::Clear() {
  num_ = 0u;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnZoneDicGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnZoneDicGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .Pmd.stReturnZoneDicGmUserCmd.Data data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnZoneDicGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnZoneDicGmUserCmd)
  return false;
#undef DO_
}

void stReturnZoneDicGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnZoneDicGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // repeated .Pmd.stReturnZoneDicGmUserCmd.Data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnZoneDicGmUserCmd)
}

::google::protobuf::uint8* stReturnZoneDicGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnZoneDicGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // repeated .Pmd.stReturnZoneDicGmUserCmd.Data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnZoneDicGmUserCmd)
  return target;
}

int stReturnZoneDicGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated .Pmd.stReturnZoneDicGmUserCmd.Data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnZoneDicGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnZoneDicGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnZoneDicGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnZoneDicGmUserCmd::MergeFrom(const stReturnZoneDicGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnZoneDicGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnZoneDicGmUserCmd::CopyFrom(const stReturnZoneDicGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnZoneDicGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnZoneDicGmUserCmd::Swap(stReturnZoneDicGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnZoneDicGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnZoneDicGmUserCmd_descriptor_;
  metadata.reflection = stReturnZoneDicGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAddChatConfigGmUserCmd::kZoneidFieldNumber;
const int stAddChatConfigGmUserCmd::kCountyridFieldNumber;
const int stAddChatConfigGmUserCmd::kSceneidFieldNumber;
const int stAddChatConfigGmUserCmd::kChannelFieldNumber;
#endif  // !_MSC_VER

stAddChatConfigGmUserCmd::stAddChatConfigGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stAddChatConfigGmUserCmd)
}

void stAddChatConfigGmUserCmd::InitAsDefaultInstance() {
}

stAddChatConfigGmUserCmd::stAddChatConfigGmUserCmd(const stAddChatConfigGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stAddChatConfigGmUserCmd)
}

void stAddChatConfigGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  countyrid_ = 0u;
  sceneid_ = 0u;
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddChatConfigGmUserCmd::~stAddChatConfigGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stAddChatConfigGmUserCmd)
  SharedDtor();
}

void stAddChatConfigGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAddChatConfigGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddChatConfigGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddChatConfigGmUserCmd_descriptor_;
}

const stAddChatConfigGmUserCmd& stAddChatConfigGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stAddChatConfigGmUserCmd* stAddChatConfigGmUserCmd::default_instance_ = NULL;

stAddChatConfigGmUserCmd* stAddChatConfigGmUserCmd::New() const {
  return new stAddChatConfigGmUserCmd;
}

void stAddChatConfigGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stAddChatConfigGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, channel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddChatConfigGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stAddChatConfigGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_countyrid;
        break;
      }

      // optional uint32 countyrid = 2;
      case 2: {
        if (tag == 16) {
         parse_countyrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countyrid_)));
          set_has_countyrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 4;
      case 4: {
        if (tag == 32) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stAddChatConfigGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stAddChatConfigGmUserCmd)
  return false;
#undef DO_
}

void stAddChatConfigGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stAddChatConfigGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 countyrid = 2;
  if (has_countyrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countyrid(), output);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

  // optional uint32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stAddChatConfigGmUserCmd)
}

::google::protobuf::uint8* stAddChatConfigGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stAddChatConfigGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 countyrid = 2;
  if (has_countyrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countyrid(), target);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }

  // optional uint32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stAddChatConfigGmUserCmd)
  return target;
}

int stAddChatConfigGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countyrid = 2;
    if (has_countyrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countyrid());
    }

    // optional uint32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddChatConfigGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddChatConfigGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddChatConfigGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddChatConfigGmUserCmd::MergeFrom(const stAddChatConfigGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countyrid()) {
      set_countyrid(from.countyrid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddChatConfigGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddChatConfigGmUserCmd::CopyFrom(const stAddChatConfigGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddChatConfigGmUserCmd::IsInitialized() const {

  return true;
}

void stAddChatConfigGmUserCmd::Swap(stAddChatConfigGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(countyrid_, other->countyrid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddChatConfigGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddChatConfigGmUserCmd_descriptor_;
  metadata.reflection = stAddChatConfigGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCancelChatConfigGmUserCmd::kZoneidFieldNumber;
const int stCancelChatConfigGmUserCmd::kCountyridFieldNumber;
const int stCancelChatConfigGmUserCmd::kSceneidFieldNumber;
const int stCancelChatConfigGmUserCmd::kChannelFieldNumber;
#endif  // !_MSC_VER

stCancelChatConfigGmUserCmd::stCancelChatConfigGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stCancelChatConfigGmUserCmd)
}

void stCancelChatConfigGmUserCmd::InitAsDefaultInstance() {
}

stCancelChatConfigGmUserCmd::stCancelChatConfigGmUserCmd(const stCancelChatConfigGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stCancelChatConfigGmUserCmd)
}

void stCancelChatConfigGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  countyrid_ = 0u;
  sceneid_ = 0u;
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelChatConfigGmUserCmd::~stCancelChatConfigGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stCancelChatConfigGmUserCmd)
  SharedDtor();
}

void stCancelChatConfigGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelChatConfigGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelChatConfigGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelChatConfigGmUserCmd_descriptor_;
}

const stCancelChatConfigGmUserCmd& stCancelChatConfigGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stCancelChatConfigGmUserCmd* stCancelChatConfigGmUserCmd::default_instance_ = NULL;

stCancelChatConfigGmUserCmd* stCancelChatConfigGmUserCmd::New() const {
  return new stCancelChatConfigGmUserCmd;
}

void stCancelChatConfigGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stCancelChatConfigGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, channel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelChatConfigGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stCancelChatConfigGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_countyrid;
        break;
      }

      // optional uint32 countyrid = 2;
      case 2: {
        if (tag == 16) {
         parse_countyrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countyrid_)));
          set_has_countyrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 4;
      case 4: {
        if (tag == 32) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stCancelChatConfigGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stCancelChatConfigGmUserCmd)
  return false;
#undef DO_
}

void stCancelChatConfigGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stCancelChatConfigGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 countyrid = 2;
  if (has_countyrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countyrid(), output);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

  // optional uint32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stCancelChatConfigGmUserCmd)
}

::google::protobuf::uint8* stCancelChatConfigGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stCancelChatConfigGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 countyrid = 2;
  if (has_countyrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countyrid(), target);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }

  // optional uint32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stCancelChatConfigGmUserCmd)
  return target;
}

int stCancelChatConfigGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countyrid = 2;
    if (has_countyrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countyrid());
    }

    // optional uint32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelChatConfigGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelChatConfigGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelChatConfigGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelChatConfigGmUserCmd::MergeFrom(const stCancelChatConfigGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countyrid()) {
      set_countyrid(from.countyrid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelChatConfigGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelChatConfigGmUserCmd::CopyFrom(const stCancelChatConfigGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelChatConfigGmUserCmd::IsInitialized() const {

  return true;
}

void stCancelChatConfigGmUserCmd::Swap(stCancelChatConfigGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(countyrid_, other->countyrid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(channel_, other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelChatConfigGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelChatConfigGmUserCmd_descriptor_;
  metadata.reflection = stCancelChatConfigGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stRequestChatTypesGmUserCmd::stRequestChatTypesGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestChatTypesGmUserCmd)
}

void stRequestChatTypesGmUserCmd::InitAsDefaultInstance() {
}

stRequestChatTypesGmUserCmd::stRequestChatTypesGmUserCmd(const stRequestChatTypesGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestChatTypesGmUserCmd)
}

void stRequestChatTypesGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestChatTypesGmUserCmd::~stRequestChatTypesGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestChatTypesGmUserCmd)
  SharedDtor();
}

void stRequestChatTypesGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestChatTypesGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestChatTypesGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestChatTypesGmUserCmd_descriptor_;
}

const stRequestChatTypesGmUserCmd& stRequestChatTypesGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestChatTypesGmUserCmd* stRequestChatTypesGmUserCmd::default_instance_ = NULL;

stRequestChatTypesGmUserCmd* stRequestChatTypesGmUserCmd::New() const {
  return new stRequestChatTypesGmUserCmd;
}

void stRequestChatTypesGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestChatTypesGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestChatTypesGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestChatTypesGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestChatTypesGmUserCmd)
  return false;
#undef DO_
}

void stRequestChatTypesGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestChatTypesGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestChatTypesGmUserCmd)
}

::google::protobuf::uint8* stRequestChatTypesGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestChatTypesGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestChatTypesGmUserCmd)
  return target;
}

int stRequestChatTypesGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestChatTypesGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestChatTypesGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestChatTypesGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestChatTypesGmUserCmd::MergeFrom(const stRequestChatTypesGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestChatTypesGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestChatTypesGmUserCmd::CopyFrom(const stRequestChatTypesGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestChatTypesGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestChatTypesGmUserCmd::Swap(stRequestChatTypesGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestChatTypesGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestChatTypesGmUserCmd_descriptor_;
  metadata.reflection = stRequestChatTypesGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnChatTypesGmUserCmd_Data::kChatTypeFieldNumber;
const int stReturnChatTypesGmUserCmd_Data::kNameFieldNumber;
#endif  // !_MSC_VER

stReturnChatTypesGmUserCmd_Data::stReturnChatTypesGmUserCmd_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnChatTypesGmUserCmd.Data)
}

void stReturnChatTypesGmUserCmd_Data::InitAsDefaultInstance() {
}

stReturnChatTypesGmUserCmd_Data::stReturnChatTypesGmUserCmd_Data(const stReturnChatTypesGmUserCmd_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnChatTypesGmUserCmd.Data)
}

void stReturnChatTypesGmUserCmd_Data::SharedCtor() {
  _cached_size_ = 0;
  chattype_ = 0u;
  name_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnChatTypesGmUserCmd_Data::~stReturnChatTypesGmUserCmd_Data() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnChatTypesGmUserCmd.Data)
  SharedDtor();
}

void stReturnChatTypesGmUserCmd_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnChatTypesGmUserCmd_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnChatTypesGmUserCmd_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnChatTypesGmUserCmd_Data_descriptor_;
}

const stReturnChatTypesGmUserCmd_Data& stReturnChatTypesGmUserCmd_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnChatTypesGmUserCmd_Data* stReturnChatTypesGmUserCmd_Data::default_instance_ = NULL;

stReturnChatTypesGmUserCmd_Data* stReturnChatTypesGmUserCmd_Data::New() const {
  return new stReturnChatTypesGmUserCmd_Data;
}

void stReturnChatTypesGmUserCmd_Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnChatTypesGmUserCmd_Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chattype_, name_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnChatTypesGmUserCmd_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnChatTypesGmUserCmd.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chatType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional uint32 name = 2;
      case 2: {
        if (tag == 16) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnChatTypesGmUserCmd.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnChatTypesGmUserCmd.Data)
  return false;
#undef DO_
}

void stReturnChatTypesGmUserCmd_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnChatTypesGmUserCmd.Data)
  // optional uint32 chatType = 1;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chattype(), output);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnChatTypesGmUserCmd.Data)
}

::google::protobuf::uint8* stReturnChatTypesGmUserCmd_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnChatTypesGmUserCmd.Data)
  // optional uint32 chatType = 1;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chattype(), target);
  }

  // optional uint32 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnChatTypesGmUserCmd.Data)
  return target;
}

int stReturnChatTypesGmUserCmd_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chatType = 1;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chattype());
    }

    // optional uint32 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnChatTypesGmUserCmd_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnChatTypesGmUserCmd_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnChatTypesGmUserCmd_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnChatTypesGmUserCmd_Data::MergeFrom(const stReturnChatTypesGmUserCmd_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnChatTypesGmUserCmd_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnChatTypesGmUserCmd_Data::CopyFrom(const stReturnChatTypesGmUserCmd_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnChatTypesGmUserCmd_Data::IsInitialized() const {

  return true;
}

void stReturnChatTypesGmUserCmd_Data::Swap(stReturnChatTypesGmUserCmd_Data* other) {
  if (other != this) {
    std::swap(chattype_, other->chattype_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnChatTypesGmUserCmd_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnChatTypesGmUserCmd_Data_descriptor_;
  metadata.reflection = stReturnChatTypesGmUserCmd_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int stReturnChatTypesGmUserCmd::kNumFieldNumber;
const int stReturnChatTypesGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnChatTypesGmUserCmd::stReturnChatTypesGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnChatTypesGmUserCmd)
}

void stReturnChatTypesGmUserCmd::InitAsDefaultInstance() {
}

stReturnChatTypesGmUserCmd::stReturnChatTypesGmUserCmd(const stReturnChatTypesGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnChatTypesGmUserCmd)
}

void stReturnChatTypesGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnChatTypesGmUserCmd::~stReturnChatTypesGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnChatTypesGmUserCmd)
  SharedDtor();
}

void stReturnChatTypesGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnChatTypesGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnChatTypesGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnChatTypesGmUserCmd_descriptor_;
}

const stReturnChatTypesGmUserCmd& stReturnChatTypesGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnChatTypesGmUserCmd* stReturnChatTypesGmUserCmd::default_instance_ = NULL;

stReturnChatTypesGmUserCmd* stReturnChatTypesGmUserCmd::New() const {
  return new stReturnChatTypesGmUserCmd;
}

void stReturnChatTypesGmUserCmd::Clear() {
  num_ = 0u;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnChatTypesGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnChatTypesGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .Pmd.stReturnChatTypesGmUserCmd.Data data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnChatTypesGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnChatTypesGmUserCmd)
  return false;
#undef DO_
}

void stReturnChatTypesGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnChatTypesGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // repeated .Pmd.stReturnChatTypesGmUserCmd.Data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnChatTypesGmUserCmd)
}

::google::protobuf::uint8* stReturnChatTypesGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnChatTypesGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // repeated .Pmd.stReturnChatTypesGmUserCmd.Data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnChatTypesGmUserCmd)
  return target;
}

int stReturnChatTypesGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated .Pmd.stReturnChatTypesGmUserCmd.Data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnChatTypesGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnChatTypesGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnChatTypesGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnChatTypesGmUserCmd::MergeFrom(const stReturnChatTypesGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnChatTypesGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnChatTypesGmUserCmd::CopyFrom(const stReturnChatTypesGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnChatTypesGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnChatTypesGmUserCmd::Swap(stReturnChatTypesGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnChatTypesGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnChatTypesGmUserCmd_descriptor_;
  metadata.reflection = stReturnChatTypesGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stServerStartupGmUserCmd::kZoneidFieldNumber;
const int stServerStartupGmUserCmd::kServeridFieldNumber;
const int stServerStartupGmUserCmd::kServertypeFieldNumber;
const int stServerStartupGmUserCmd::kServernameFieldNumber;
const int stServerStartupGmUserCmd::kServeripFieldNumber;
const int stServerStartupGmUserCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

stServerStartupGmUserCmd::stServerStartupGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stServerStartupGmUserCmd)
}

void stServerStartupGmUserCmd::InitAsDefaultInstance() {
}

stServerStartupGmUserCmd::stServerStartupGmUserCmd(const stServerStartupGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stServerStartupGmUserCmd)
}

void stServerStartupGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zoneid_ = 0u;
  serverid_ = 0u;
  servertype_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stServerStartupGmUserCmd::~stServerStartupGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stServerStartupGmUserCmd)
  SharedDtor();
}

void stServerStartupGmUserCmd::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void stServerStartupGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stServerStartupGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stServerStartupGmUserCmd_descriptor_;
}

const stServerStartupGmUserCmd& stServerStartupGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stServerStartupGmUserCmd* stServerStartupGmUserCmd::default_instance_ = NULL;

stServerStartupGmUserCmd* stServerStartupGmUserCmd::New() const {
  return new stServerStartupGmUserCmd;
}

void stServerStartupGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stServerStartupGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(zoneid_, serverid_);
    ZR_(servertype_, time_);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stServerStartupGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stServerStartupGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_servertype;
        break;
      }

      // optional uint32 servertype = 3;
      case 3: {
        if (tag == 24) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_servername;
        break;
      }

      // optional string servername = 4;
      case 4: {
        if (tag == 34) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_serverip;
        break;
      }

      // optional uint32 serverip = 5;
      case 5: {
        if (tag == 40) {
         parse_serverip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverip_)));
          set_has_serverip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stServerStartupGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stServerStartupGmUserCmd)
  return false;
#undef DO_
}

void stServerStartupGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stServerStartupGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // optional uint32 servertype = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servertype(), output);
  }

  // optional string servername = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->servername(), output);
  }

  // optional uint32 serverip = 5;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverip(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stServerStartupGmUserCmd)
}

::google::protobuf::uint8* stServerStartupGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stServerStartupGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // optional uint32 servertype = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servertype(), target);
  }

  // optional string servername = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }

  // optional uint32 serverip = 5;
  if (has_serverip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverip(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stServerStartupGmUserCmd)
  return target;
}

int stServerStartupGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint32 servertype = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // optional string servername = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional uint32 serverip = 5;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverip());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stServerStartupGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stServerStartupGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stServerStartupGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stServerStartupGmUserCmd::MergeFrom(const stServerStartupGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stServerStartupGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stServerStartupGmUserCmd::CopyFrom(const stServerStartupGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stServerStartupGmUserCmd::IsInitialized() const {

  return true;
}

void stServerStartupGmUserCmd::Swap(stServerStartupGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(serverid_, other->serverid_);
    std::swap(servertype_, other->servertype_);
    std::swap(servername_, other->servername_);
    std::swap(serverip_, other->serverip_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stServerStartupGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stServerStartupGmUserCmd_descriptor_;
  metadata.reflection = stServerStartupGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stNotifyShutdownGmUserCmd::kGmidFieldNumber;
const int stNotifyShutdownGmUserCmd::kGmNameFieldNumber;
const int stNotifyShutdownGmUserCmd::kZoneidFieldNumber;
const int stNotifyShutdownGmUserCmd::kLeftTimeFieldNumber;
const int stNotifyShutdownGmUserCmd::kShutdownTimeFieldNumber;
const int stNotifyShutdownGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stNotifyShutdownGmUserCmd::stNotifyShutdownGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stNotifyShutdownGmUserCmd)
}

void stNotifyShutdownGmUserCmd::InitAsDefaultInstance() {
}

stNotifyShutdownGmUserCmd::stNotifyShutdownGmUserCmd(const stNotifyShutdownGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stNotifyShutdownGmUserCmd)
}

void stNotifyShutdownGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  lefttime_ = 0u;
  shutdowntime_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyShutdownGmUserCmd::~stNotifyShutdownGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stNotifyShutdownGmUserCmd)
  SharedDtor();
}

void stNotifyShutdownGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stNotifyShutdownGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyShutdownGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyShutdownGmUserCmd_descriptor_;
}

const stNotifyShutdownGmUserCmd& stNotifyShutdownGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stNotifyShutdownGmUserCmd* stNotifyShutdownGmUserCmd::default_instance_ = NULL;

stNotifyShutdownGmUserCmd* stNotifyShutdownGmUserCmd::New() const {
  return new stNotifyShutdownGmUserCmd;
}

void stNotifyShutdownGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stNotifyShutdownGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gmid_, shutdowntime_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyShutdownGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stNotifyShutdownGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gmName;
        break;
      }

      // optional string gmName = 2;
      case 2: {
        if (tag == 18) {
         parse_gmName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leftTime;
        break;
      }

      // optional uint32 leftTime = 4;
      case 4: {
        if (tag == 32) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_shutdownTime;
        break;
      }

      // optional uint32 shutdownTime = 5;
      case 5: {
        if (tag == 40) {
         parse_shutdownTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shutdowntime_)));
          set_has_shutdowntime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional string data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stNotifyShutdownGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stNotifyShutdownGmUserCmd)
  return false;
#undef DO_
}

void stNotifyShutdownGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stNotifyShutdownGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // optional string gmName = 2;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gmname(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 leftTime = 4;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lefttime(), output);
  }

  // optional uint32 shutdownTime = 5;
  if (has_shutdowntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->shutdowntime(), output);
  }

  // optional string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stNotifyShutdownGmUserCmd)
}

::google::protobuf::uint8* stNotifyShutdownGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stNotifyShutdownGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // optional string gmName = 2;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gmname(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 leftTime = 4;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lefttime(), target);
  }

  // optional uint32 shutdownTime = 5;
  if (has_shutdowntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->shutdowntime(), target);
  }

  // optional string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stNotifyShutdownGmUserCmd)
  return target;
}

int stNotifyShutdownGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional string gmName = 2;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 leftTime = 4;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttime());
    }

    // optional uint32 shutdownTime = 5;
    if (has_shutdowntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shutdowntime());
    }

    // optional string data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyShutdownGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyShutdownGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyShutdownGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyShutdownGmUserCmd::MergeFrom(const stNotifyShutdownGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_shutdowntime()) {
      set_shutdowntime(from.shutdowntime());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyShutdownGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyShutdownGmUserCmd::CopyFrom(const stNotifyShutdownGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyShutdownGmUserCmd::IsInitialized() const {

  return true;
}

void stNotifyShutdownGmUserCmd::Swap(stNotifyShutdownGmUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(gmname_, other->gmname_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(shutdowntime_, other->shutdowntime_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyShutdownGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyShutdownGmUserCmd_descriptor_;
  metadata.reflection = stNotifyShutdownGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCancelShutdownGmUserCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

stCancelShutdownGmUserCmd::stCancelShutdownGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stCancelShutdownGmUserCmd)
}

void stCancelShutdownGmUserCmd::InitAsDefaultInstance() {
}

stCancelShutdownGmUserCmd::stCancelShutdownGmUserCmd(const stCancelShutdownGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stCancelShutdownGmUserCmd)
}

void stCancelShutdownGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelShutdownGmUserCmd::~stCancelShutdownGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stCancelShutdownGmUserCmd)
  SharedDtor();
}

void stCancelShutdownGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelShutdownGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelShutdownGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelShutdownGmUserCmd_descriptor_;
}

const stCancelShutdownGmUserCmd& stCancelShutdownGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stCancelShutdownGmUserCmd* stCancelShutdownGmUserCmd::default_instance_ = NULL;

stCancelShutdownGmUserCmd* stCancelShutdownGmUserCmd::New() const {
  return new stCancelShutdownGmUserCmd;
}

void stCancelShutdownGmUserCmd::Clear() {
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelShutdownGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stCancelShutdownGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stCancelShutdownGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stCancelShutdownGmUserCmd)
  return false;
#undef DO_
}

void stCancelShutdownGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stCancelShutdownGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stCancelShutdownGmUserCmd)
}

::google::protobuf::uint8* stCancelShutdownGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stCancelShutdownGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stCancelShutdownGmUserCmd)
  return target;
}

int stCancelShutdownGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelShutdownGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelShutdownGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelShutdownGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelShutdownGmUserCmd::MergeFrom(const stCancelShutdownGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelShutdownGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelShutdownGmUserCmd::CopyFrom(const stCancelShutdownGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelShutdownGmUserCmd::IsInitialized() const {

  return true;
}

void stCancelShutdownGmUserCmd::Swap(stCancelShutdownGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelShutdownGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelShutdownGmUserCmd_descriptor_;
  metadata.reflection = stCancelShutdownGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGmServerMessageGmUserCmd::kTypeFieldNumber;
const int stGmServerMessageGmUserCmd::kGmidFieldNumber;
const int stGmServerMessageGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stGmServerMessageGmUserCmd::stGmServerMessageGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stGmServerMessageGmUserCmd)
}

void stGmServerMessageGmUserCmd::InitAsDefaultInstance() {
}

stGmServerMessageGmUserCmd::stGmServerMessageGmUserCmd(const stGmServerMessageGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stGmServerMessageGmUserCmd)
}

void stGmServerMessageGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  gmid_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGmServerMessageGmUserCmd::~stGmServerMessageGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stGmServerMessageGmUserCmd)
  SharedDtor();
}

void stGmServerMessageGmUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stGmServerMessageGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGmServerMessageGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGmServerMessageGmUserCmd_descriptor_;
}

const stGmServerMessageGmUserCmd& stGmServerMessageGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stGmServerMessageGmUserCmd* stGmServerMessageGmUserCmd::default_instance_ = NULL;

stGmServerMessageGmUserCmd* stGmServerMessageGmUserCmd::New() const {
  return new stGmServerMessageGmUserCmd;
}

void stGmServerMessageGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stGmServerMessageGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, gmid_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGmServerMessageGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stGmServerMessageGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 2;
      case 2: {
        if (tag == 16) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stGmServerMessageGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stGmServerMessageGmUserCmd)
  return false;
#undef DO_
}

void stGmServerMessageGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stGmServerMessageGmUserCmd)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmid(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stGmServerMessageGmUserCmd)
}

::google::protobuf::uint8* stGmServerMessageGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stGmServerMessageGmUserCmd)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmid(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stGmServerMessageGmUserCmd)
  return target;
}

int stGmServerMessageGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGmServerMessageGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGmServerMessageGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGmServerMessageGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGmServerMessageGmUserCmd::MergeFrom(const stGmServerMessageGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGmServerMessageGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGmServerMessageGmUserCmd::CopyFrom(const stGmServerMessageGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGmServerMessageGmUserCmd::IsInitialized() const {

  return true;
}

void stGmServerMessageGmUserCmd::Swap(stGmServerMessageGmUserCmd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gmid_, other->gmid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGmServerMessageGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGmServerMessageGmUserCmd_descriptor_;
  metadata.reflection = stGmServerMessageGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestDelGmUserGmUserCmd::kIdFieldNumber;
#endif  // !_MSC_VER

stRequestDelGmUserGmUserCmd::stRequestDelGmUserGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestDelGmUserGmUserCmd)
}

void stRequestDelGmUserGmUserCmd::InitAsDefaultInstance() {
}

stRequestDelGmUserGmUserCmd::stRequestDelGmUserGmUserCmd(const stRequestDelGmUserGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestDelGmUserGmUserCmd)
}

void stRequestDelGmUserGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestDelGmUserGmUserCmd::~stRequestDelGmUserGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestDelGmUserGmUserCmd)
  SharedDtor();
}

void stRequestDelGmUserGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestDelGmUserGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestDelGmUserGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestDelGmUserGmUserCmd_descriptor_;
}

const stRequestDelGmUserGmUserCmd& stRequestDelGmUserGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestDelGmUserGmUserCmd* stRequestDelGmUserGmUserCmd::default_instance_ = NULL;

stRequestDelGmUserGmUserCmd* stRequestDelGmUserGmUserCmd::New() const {
  return new stRequestDelGmUserGmUserCmd;
}

void stRequestDelGmUserGmUserCmd::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestDelGmUserGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestDelGmUserGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestDelGmUserGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestDelGmUserGmUserCmd)
  return false;
#undef DO_
}

void stRequestDelGmUserGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestDelGmUserGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestDelGmUserGmUserCmd)
}

::google::protobuf::uint8* stRequestDelGmUserGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestDelGmUserGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestDelGmUserGmUserCmd)
  return target;
}

int stRequestDelGmUserGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestDelGmUserGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestDelGmUserGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestDelGmUserGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestDelGmUserGmUserCmd::MergeFrom(const stRequestDelGmUserGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestDelGmUserGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestDelGmUserGmUserCmd::CopyFrom(const stRequestDelGmUserGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestDelGmUserGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestDelGmUserGmUserCmd::Swap(stRequestDelGmUserGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestDelGmUserGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestDelGmUserGmUserCmd_descriptor_;
  metadata.reflection = stRequestDelGmUserGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestResetGmUserPasswordGmUserCmd::kIdFieldNumber;
#endif  // !_MSC_VER

stRequestResetGmUserPasswordGmUserCmd::stRequestResetGmUserPasswordGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestResetGmUserPasswordGmUserCmd)
}

void stRequestResetGmUserPasswordGmUserCmd::InitAsDefaultInstance() {
}

stRequestResetGmUserPasswordGmUserCmd::stRequestResetGmUserPasswordGmUserCmd(const stRequestResetGmUserPasswordGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestResetGmUserPasswordGmUserCmd)
}

void stRequestResetGmUserPasswordGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestResetGmUserPasswordGmUserCmd::~stRequestResetGmUserPasswordGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestResetGmUserPasswordGmUserCmd)
  SharedDtor();
}

void stRequestResetGmUserPasswordGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestResetGmUserPasswordGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestResetGmUserPasswordGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestResetGmUserPasswordGmUserCmd_descriptor_;
}

const stRequestResetGmUserPasswordGmUserCmd& stRequestResetGmUserPasswordGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestResetGmUserPasswordGmUserCmd* stRequestResetGmUserPasswordGmUserCmd::default_instance_ = NULL;

stRequestResetGmUserPasswordGmUserCmd* stRequestResetGmUserPasswordGmUserCmd::New() const {
  return new stRequestResetGmUserPasswordGmUserCmd;
}

void stRequestResetGmUserPasswordGmUserCmd::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestResetGmUserPasswordGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestResetGmUserPasswordGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestResetGmUserPasswordGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestResetGmUserPasswordGmUserCmd)
  return false;
#undef DO_
}

void stRequestResetGmUserPasswordGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestResetGmUserPasswordGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestResetGmUserPasswordGmUserCmd)
}

::google::protobuf::uint8* stRequestResetGmUserPasswordGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestResetGmUserPasswordGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestResetGmUserPasswordGmUserCmd)
  return target;
}

int stRequestResetGmUserPasswordGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestResetGmUserPasswordGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestResetGmUserPasswordGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestResetGmUserPasswordGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestResetGmUserPasswordGmUserCmd::MergeFrom(const stRequestResetGmUserPasswordGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestResetGmUserPasswordGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestResetGmUserPasswordGmUserCmd::CopyFrom(const stRequestResetGmUserPasswordGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestResetGmUserPasswordGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestResetGmUserPasswordGmUserCmd::Swap(stRequestResetGmUserPasswordGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestResetGmUserPasswordGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestResetGmUserPasswordGmUserCmd_descriptor_;
  metadata.reflection = stRequestResetGmUserPasswordGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stQequestShutDownGmUserCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

stQequestShutDownGmUserCmd::stQequestShutDownGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stQequestShutDownGmUserCmd)
}

void stQequestShutDownGmUserCmd::InitAsDefaultInstance() {
}

stQequestShutDownGmUserCmd::stQequestShutDownGmUserCmd(const stQequestShutDownGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stQequestShutDownGmUserCmd)
}

void stQequestShutDownGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQequestShutDownGmUserCmd::~stQequestShutDownGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stQequestShutDownGmUserCmd)
  SharedDtor();
}

void stQequestShutDownGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQequestShutDownGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQequestShutDownGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQequestShutDownGmUserCmd_descriptor_;
}

const stQequestShutDownGmUserCmd& stQequestShutDownGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stQequestShutDownGmUserCmd* stQequestShutDownGmUserCmd::default_instance_ = NULL;

stQequestShutDownGmUserCmd* stQequestShutDownGmUserCmd::New() const {
  return new stQequestShutDownGmUserCmd;
}

void stQequestShutDownGmUserCmd::Clear() {
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQequestShutDownGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stQequestShutDownGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stQequestShutDownGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stQequestShutDownGmUserCmd)
  return false;
#undef DO_
}

void stQequestShutDownGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stQequestShutDownGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stQequestShutDownGmUserCmd)
}

::google::protobuf::uint8* stQequestShutDownGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stQequestShutDownGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stQequestShutDownGmUserCmd)
  return target;
}

int stQequestShutDownGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQequestShutDownGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQequestShutDownGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQequestShutDownGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQequestShutDownGmUserCmd::MergeFrom(const stQequestShutDownGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQequestShutDownGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQequestShutDownGmUserCmd::CopyFrom(const stQequestShutDownGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQequestShutDownGmUserCmd::IsInitialized() const {

  return true;
}

void stQequestShutDownGmUserCmd::Swap(stQequestShutDownGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQequestShutDownGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQequestShutDownGmUserCmd_descriptor_;
  metadata.reflection = stQequestShutDownGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestForbidAccountGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stRequestForbidAccountGmUserCmd::stRequestForbidAccountGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestForbidAccountGmUserCmd)
}

void stRequestForbidAccountGmUserCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::ForbidAccountData*>(&::Pmd::ForbidAccountData::default_instance());
}

stRequestForbidAccountGmUserCmd::stRequestForbidAccountGmUserCmd(const stRequestForbidAccountGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestForbidAccountGmUserCmd)
}

void stRequestForbidAccountGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestForbidAccountGmUserCmd::~stRequestForbidAccountGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestForbidAccountGmUserCmd)
  SharedDtor();
}

void stRequestForbidAccountGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stRequestForbidAccountGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestForbidAccountGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestForbidAccountGmUserCmd_descriptor_;
}

const stRequestForbidAccountGmUserCmd& stRequestForbidAccountGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestForbidAccountGmUserCmd* stRequestForbidAccountGmUserCmd::default_instance_ = NULL;

stRequestForbidAccountGmUserCmd* stRequestForbidAccountGmUserCmd::New() const {
  return new stRequestForbidAccountGmUserCmd;
}

void stRequestForbidAccountGmUserCmd::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::Pmd::ForbidAccountData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestForbidAccountGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestForbidAccountGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.ForbidAccountData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestForbidAccountGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestForbidAccountGmUserCmd)
  return false;
#undef DO_
}

void stRequestForbidAccountGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestForbidAccountGmUserCmd)
  // optional .Pmd.ForbidAccountData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestForbidAccountGmUserCmd)
}

::google::protobuf::uint8* stRequestForbidAccountGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestForbidAccountGmUserCmd)
  // optional .Pmd.ForbidAccountData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestForbidAccountGmUserCmd)
  return target;
}

int stRequestForbidAccountGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.ForbidAccountData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestForbidAccountGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestForbidAccountGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestForbidAccountGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestForbidAccountGmUserCmd::MergeFrom(const stRequestForbidAccountGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::ForbidAccountData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestForbidAccountGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestForbidAccountGmUserCmd::CopyFrom(const stRequestForbidAccountGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestForbidAccountGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestForbidAccountGmUserCmd::Swap(stRequestForbidAccountGmUserCmd* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestForbidAccountGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestForbidAccountGmUserCmd_descriptor_;
  metadata.reflection = stRequestForbidAccountGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stQueryForbidAccountGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stQueryForbidAccountGmUserCmd::stQueryForbidAccountGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stQueryForbidAccountGmUserCmd)
}

void stQueryForbidAccountGmUserCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::ForbidAccountData*>(&::Pmd::ForbidAccountData::default_instance());
}

stQueryForbidAccountGmUserCmd::stQueryForbidAccountGmUserCmd(const stQueryForbidAccountGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stQueryForbidAccountGmUserCmd)
}

void stQueryForbidAccountGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQueryForbidAccountGmUserCmd::~stQueryForbidAccountGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stQueryForbidAccountGmUserCmd)
  SharedDtor();
}

void stQueryForbidAccountGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stQueryForbidAccountGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQueryForbidAccountGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryForbidAccountGmUserCmd_descriptor_;
}

const stQueryForbidAccountGmUserCmd& stQueryForbidAccountGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stQueryForbidAccountGmUserCmd* stQueryForbidAccountGmUserCmd::default_instance_ = NULL;

stQueryForbidAccountGmUserCmd* stQueryForbidAccountGmUserCmd::New() const {
  return new stQueryForbidAccountGmUserCmd;
}

void stQueryForbidAccountGmUserCmd::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::Pmd::ForbidAccountData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQueryForbidAccountGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stQueryForbidAccountGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.ForbidAccountData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stQueryForbidAccountGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stQueryForbidAccountGmUserCmd)
  return false;
#undef DO_
}

void stQueryForbidAccountGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stQueryForbidAccountGmUserCmd)
  // optional .Pmd.ForbidAccountData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stQueryForbidAccountGmUserCmd)
}

::google::protobuf::uint8* stQueryForbidAccountGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stQueryForbidAccountGmUserCmd)
  // optional .Pmd.ForbidAccountData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stQueryForbidAccountGmUserCmd)
  return target;
}

int stQueryForbidAccountGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.ForbidAccountData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQueryForbidAccountGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQueryForbidAccountGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQueryForbidAccountGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQueryForbidAccountGmUserCmd::MergeFrom(const stQueryForbidAccountGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::ForbidAccountData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQueryForbidAccountGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQueryForbidAccountGmUserCmd::CopyFrom(const stQueryForbidAccountGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQueryForbidAccountGmUserCmd::IsInitialized() const {

  return true;
}

void stQueryForbidAccountGmUserCmd::Swap(stQueryForbidAccountGmUserCmd* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQueryForbidAccountGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQueryForbidAccountGmUserCmd_descriptor_;
  metadata.reflection = stQueryForbidAccountGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnForbidAccountListGmUserCmd::kNumFieldNumber;
#endif  // !_MSC_VER

stReturnForbidAccountListGmUserCmd::stReturnForbidAccountListGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnForbidAccountListGmUserCmd)
}

void stReturnForbidAccountListGmUserCmd::InitAsDefaultInstance() {
}

stReturnForbidAccountListGmUserCmd::stReturnForbidAccountListGmUserCmd(const stReturnForbidAccountListGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnForbidAccountListGmUserCmd)
}

void stReturnForbidAccountListGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnForbidAccountListGmUserCmd::~stReturnForbidAccountListGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnForbidAccountListGmUserCmd)
  SharedDtor();
}

void stReturnForbidAccountListGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnForbidAccountListGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnForbidAccountListGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnForbidAccountListGmUserCmd_descriptor_;
}

const stReturnForbidAccountListGmUserCmd& stReturnForbidAccountListGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnForbidAccountListGmUserCmd* stReturnForbidAccountListGmUserCmd::default_instance_ = NULL;

stReturnForbidAccountListGmUserCmd* stReturnForbidAccountListGmUserCmd::New() const {
  return new stReturnForbidAccountListGmUserCmd;
}

void stReturnForbidAccountListGmUserCmd::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnForbidAccountListGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnForbidAccountListGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnForbidAccountListGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnForbidAccountListGmUserCmd)
  return false;
#undef DO_
}

void stReturnForbidAccountListGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnForbidAccountListGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnForbidAccountListGmUserCmd)
}

::google::protobuf::uint8* stReturnForbidAccountListGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnForbidAccountListGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnForbidAccountListGmUserCmd)
  return target;
}

int stReturnForbidAccountListGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnForbidAccountListGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnForbidAccountListGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnForbidAccountListGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnForbidAccountListGmUserCmd::MergeFrom(const stReturnForbidAccountListGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnForbidAccountListGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnForbidAccountListGmUserCmd::CopyFrom(const stReturnForbidAccountListGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnForbidAccountListGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnForbidAccountListGmUserCmd::Swap(stReturnForbidAccountListGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnForbidAccountListGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnForbidAccountListGmUserCmd_descriptor_;
  metadata.reflection = stReturnForbidAccountListGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestUnForbidAccountGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stRequestUnForbidAccountGmUserCmd::stRequestUnForbidAccountGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestUnForbidAccountGmUserCmd)
}

void stRequestUnForbidAccountGmUserCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::ForbidAccountData*>(&::Pmd::ForbidAccountData::default_instance());
}

stRequestUnForbidAccountGmUserCmd::stRequestUnForbidAccountGmUserCmd(const stRequestUnForbidAccountGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestUnForbidAccountGmUserCmd)
}

void stRequestUnForbidAccountGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestUnForbidAccountGmUserCmd::~stRequestUnForbidAccountGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestUnForbidAccountGmUserCmd)
  SharedDtor();
}

void stRequestUnForbidAccountGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stRequestUnForbidAccountGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestUnForbidAccountGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestUnForbidAccountGmUserCmd_descriptor_;
}

const stRequestUnForbidAccountGmUserCmd& stRequestUnForbidAccountGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestUnForbidAccountGmUserCmd* stRequestUnForbidAccountGmUserCmd::default_instance_ = NULL;

stRequestUnForbidAccountGmUserCmd* stRequestUnForbidAccountGmUserCmd::New() const {
  return new stRequestUnForbidAccountGmUserCmd;
}

void stRequestUnForbidAccountGmUserCmd::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::Pmd::ForbidAccountData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestUnForbidAccountGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestUnForbidAccountGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.ForbidAccountData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestUnForbidAccountGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestUnForbidAccountGmUserCmd)
  return false;
#undef DO_
}

void stRequestUnForbidAccountGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestUnForbidAccountGmUserCmd)
  // optional .Pmd.ForbidAccountData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestUnForbidAccountGmUserCmd)
}

::google::protobuf::uint8* stRequestUnForbidAccountGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestUnForbidAccountGmUserCmd)
  // optional .Pmd.ForbidAccountData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestUnForbidAccountGmUserCmd)
  return target;
}

int stRequestUnForbidAccountGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.ForbidAccountData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestUnForbidAccountGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestUnForbidAccountGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestUnForbidAccountGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestUnForbidAccountGmUserCmd::MergeFrom(const stRequestUnForbidAccountGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::ForbidAccountData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestUnForbidAccountGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestUnForbidAccountGmUserCmd::CopyFrom(const stRequestUnForbidAccountGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestUnForbidAccountGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestUnForbidAccountGmUserCmd::Swap(stRequestUnForbidAccountGmUserCmd* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestUnForbidAccountGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestUnForbidAccountGmUserCmd_descriptor_;
  metadata.reflection = stRequestUnForbidAccountGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBroadcastDeleteZoneGmUserCmd::kZoneIDFieldNumber;
#endif  // !_MSC_VER

stBroadcastDeleteZoneGmUserCmd::stBroadcastDeleteZoneGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stBroadcastDeleteZoneGmUserCmd)
}

void stBroadcastDeleteZoneGmUserCmd::InitAsDefaultInstance() {
}

stBroadcastDeleteZoneGmUserCmd::stBroadcastDeleteZoneGmUserCmd(const stBroadcastDeleteZoneGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stBroadcastDeleteZoneGmUserCmd)
}

void stBroadcastDeleteZoneGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastDeleteZoneGmUserCmd::~stBroadcastDeleteZoneGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stBroadcastDeleteZoneGmUserCmd)
  SharedDtor();
}

void stBroadcastDeleteZoneGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBroadcastDeleteZoneGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastDeleteZoneGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastDeleteZoneGmUserCmd_descriptor_;
}

const stBroadcastDeleteZoneGmUserCmd& stBroadcastDeleteZoneGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stBroadcastDeleteZoneGmUserCmd* stBroadcastDeleteZoneGmUserCmd::default_instance_ = NULL;

stBroadcastDeleteZoneGmUserCmd* stBroadcastDeleteZoneGmUserCmd::New() const {
  return new stBroadcastDeleteZoneGmUserCmd;
}

void stBroadcastDeleteZoneGmUserCmd::Clear() {
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastDeleteZoneGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stBroadcastDeleteZoneGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stBroadcastDeleteZoneGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stBroadcastDeleteZoneGmUserCmd)
  return false;
#undef DO_
}

void stBroadcastDeleteZoneGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stBroadcastDeleteZoneGmUserCmd)
  // optional uint32 zoneID = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stBroadcastDeleteZoneGmUserCmd)
}

::google::protobuf::uint8* stBroadcastDeleteZoneGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stBroadcastDeleteZoneGmUserCmd)
  // optional uint32 zoneID = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stBroadcastDeleteZoneGmUserCmd)
  return target;
}

int stBroadcastDeleteZoneGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneID = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastDeleteZoneGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastDeleteZoneGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastDeleteZoneGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastDeleteZoneGmUserCmd::MergeFrom(const stBroadcastDeleteZoneGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastDeleteZoneGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastDeleteZoneGmUserCmd::CopyFrom(const stBroadcastDeleteZoneGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastDeleteZoneGmUserCmd::IsInitialized() const {

  return true;
}

void stBroadcastDeleteZoneGmUserCmd::Swap(stBroadcastDeleteZoneGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastDeleteZoneGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastDeleteZoneGmUserCmd_descriptor_;
  metadata.reflection = stBroadcastDeleteZoneGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestNameAccountGmUserCmd::kNumFieldNumber;
#endif  // !_MSC_VER

stRequestNameAccountGmUserCmd::stRequestNameAccountGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestNameAccountGmUserCmd)
}

void stRequestNameAccountGmUserCmd::InitAsDefaultInstance() {
}

stRequestNameAccountGmUserCmd::stRequestNameAccountGmUserCmd(const stRequestNameAccountGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestNameAccountGmUserCmd)
}

void stRequestNameAccountGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestNameAccountGmUserCmd::~stRequestNameAccountGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestNameAccountGmUserCmd)
  SharedDtor();
}

void stRequestNameAccountGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestNameAccountGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestNameAccountGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestNameAccountGmUserCmd_descriptor_;
}

const stRequestNameAccountGmUserCmd& stRequestNameAccountGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestNameAccountGmUserCmd* stRequestNameAccountGmUserCmd::default_instance_ = NULL;

stRequestNameAccountGmUserCmd* stRequestNameAccountGmUserCmd::New() const {
  return new stRequestNameAccountGmUserCmd;
}

void stRequestNameAccountGmUserCmd::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestNameAccountGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestNameAccountGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestNameAccountGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestNameAccountGmUserCmd)
  return false;
#undef DO_
}

void stRequestNameAccountGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestNameAccountGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestNameAccountGmUserCmd)
}

::google::protobuf::uint8* stRequestNameAccountGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestNameAccountGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestNameAccountGmUserCmd)
  return target;
}

int stRequestNameAccountGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestNameAccountGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestNameAccountGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestNameAccountGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestNameAccountGmUserCmd::MergeFrom(const stRequestNameAccountGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestNameAccountGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestNameAccountGmUserCmd::CopyFrom(const stRequestNameAccountGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestNameAccountGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestNameAccountGmUserCmd::Swap(stRequestNameAccountGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestNameAccountGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestNameAccountGmUserCmd_descriptor_;
  metadata.reflection = stRequestNameAccountGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnNameAccountGmUserCmd::kNumFieldNumber;
#endif  // !_MSC_VER

stReturnNameAccountGmUserCmd::stReturnNameAccountGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnNameAccountGmUserCmd)
}

void stReturnNameAccountGmUserCmd::InitAsDefaultInstance() {
}

stReturnNameAccountGmUserCmd::stReturnNameAccountGmUserCmd(const stReturnNameAccountGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnNameAccountGmUserCmd)
}

void stReturnNameAccountGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnNameAccountGmUserCmd::~stReturnNameAccountGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnNameAccountGmUserCmd)
  SharedDtor();
}

void stReturnNameAccountGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnNameAccountGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnNameAccountGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnNameAccountGmUserCmd_descriptor_;
}

const stReturnNameAccountGmUserCmd& stReturnNameAccountGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnNameAccountGmUserCmd* stReturnNameAccountGmUserCmd::default_instance_ = NULL;

stReturnNameAccountGmUserCmd* stReturnNameAccountGmUserCmd::New() const {
  return new stReturnNameAccountGmUserCmd;
}

void stReturnNameAccountGmUserCmd::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnNameAccountGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnNameAccountGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnNameAccountGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnNameAccountGmUserCmd)
  return false;
#undef DO_
}

void stReturnNameAccountGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnNameAccountGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnNameAccountGmUserCmd)
}

::google::protobuf::uint8* stReturnNameAccountGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnNameAccountGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnNameAccountGmUserCmd)
  return target;
}

int stReturnNameAccountGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnNameAccountGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnNameAccountGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnNameAccountGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnNameAccountGmUserCmd::MergeFrom(const stReturnNameAccountGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnNameAccountGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnNameAccountGmUserCmd::CopyFrom(const stReturnNameAccountGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnNameAccountGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnNameAccountGmUserCmd::Swap(stReturnNameAccountGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnNameAccountGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnNameAccountGmUserCmd_descriptor_;
  metadata.reflection = stReturnNameAccountGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stRequestDBConnectionConfigGmUserCmd::stRequestDBConnectionConfigGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestDBConnectionConfigGmUserCmd)
}

void stRequestDBConnectionConfigGmUserCmd::InitAsDefaultInstance() {
}

stRequestDBConnectionConfigGmUserCmd::stRequestDBConnectionConfigGmUserCmd(const stRequestDBConnectionConfigGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestDBConnectionConfigGmUserCmd)
}

void stRequestDBConnectionConfigGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestDBConnectionConfigGmUserCmd::~stRequestDBConnectionConfigGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestDBConnectionConfigGmUserCmd)
  SharedDtor();
}

void stRequestDBConnectionConfigGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestDBConnectionConfigGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestDBConnectionConfigGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestDBConnectionConfigGmUserCmd_descriptor_;
}

const stRequestDBConnectionConfigGmUserCmd& stRequestDBConnectionConfigGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestDBConnectionConfigGmUserCmd* stRequestDBConnectionConfigGmUserCmd::default_instance_ = NULL;

stRequestDBConnectionConfigGmUserCmd* stRequestDBConnectionConfigGmUserCmd::New() const {
  return new stRequestDBConnectionConfigGmUserCmd;
}

void stRequestDBConnectionConfigGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestDBConnectionConfigGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestDBConnectionConfigGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestDBConnectionConfigGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestDBConnectionConfigGmUserCmd)
  return false;
#undef DO_
}

void stRequestDBConnectionConfigGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestDBConnectionConfigGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestDBConnectionConfigGmUserCmd)
}

::google::protobuf::uint8* stRequestDBConnectionConfigGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestDBConnectionConfigGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestDBConnectionConfigGmUserCmd)
  return target;
}

int stRequestDBConnectionConfigGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestDBConnectionConfigGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestDBConnectionConfigGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestDBConnectionConfigGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestDBConnectionConfigGmUserCmd::MergeFrom(const stRequestDBConnectionConfigGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestDBConnectionConfigGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestDBConnectionConfigGmUserCmd::CopyFrom(const stRequestDBConnectionConfigGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestDBConnectionConfigGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestDBConnectionConfigGmUserCmd::Swap(stRequestDBConnectionConfigGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestDBConnectionConfigGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestDBConnectionConfigGmUserCmd_descriptor_;
  metadata.reflection = stRequestDBConnectionConfigGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnDBConnectionConfigGmUserCmd::kNumFieldNumber;
const int stReturnDBConnectionConfigGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnDBConnectionConfigGmUserCmd::stReturnDBConnectionConfigGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnDBConnectionConfigGmUserCmd)
}

void stReturnDBConnectionConfigGmUserCmd::InitAsDefaultInstance() {
}

stReturnDBConnectionConfigGmUserCmd::stReturnDBConnectionConfigGmUserCmd(const stReturnDBConnectionConfigGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnDBConnectionConfigGmUserCmd)
}

void stReturnDBConnectionConfigGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnDBConnectionConfigGmUserCmd::~stReturnDBConnectionConfigGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnDBConnectionConfigGmUserCmd)
  SharedDtor();
}

void stReturnDBConnectionConfigGmUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stReturnDBConnectionConfigGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnDBConnectionConfigGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnDBConnectionConfigGmUserCmd_descriptor_;
}

const stReturnDBConnectionConfigGmUserCmd& stReturnDBConnectionConfigGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnDBConnectionConfigGmUserCmd* stReturnDBConnectionConfigGmUserCmd::default_instance_ = NULL;

stReturnDBConnectionConfigGmUserCmd* stReturnDBConnectionConfigGmUserCmd::New() const {
  return new stReturnDBConnectionConfigGmUserCmd;
}

void stReturnDBConnectionConfigGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    num_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnDBConnectionConfigGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnDBConnectionConfigGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnDBConnectionConfigGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnDBConnectionConfigGmUserCmd)
  return false;
#undef DO_
}

void stReturnDBConnectionConfigGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnDBConnectionConfigGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnDBConnectionConfigGmUserCmd)
}

::google::protobuf::uint8* stReturnDBConnectionConfigGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnDBConnectionConfigGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnDBConnectionConfigGmUserCmd)
  return target;
}

int stReturnDBConnectionConfigGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnDBConnectionConfigGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnDBConnectionConfigGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnDBConnectionConfigGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnDBConnectionConfigGmUserCmd::MergeFrom(const stReturnDBConnectionConfigGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnDBConnectionConfigGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnDBConnectionConfigGmUserCmd::CopyFrom(const stReturnDBConnectionConfigGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnDBConnectionConfigGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnDBConnectionConfigGmUserCmd::Swap(stReturnDBConnectionConfigGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnDBConnectionConfigGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnDBConnectionConfigGmUserCmd_descriptor_;
  metadata.reflection = stReturnDBConnectionConfigGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stQueryNameExistGmUserCmd::kNameFieldNumber;
const int stQueryNameExistGmUserCmd::kOptypeFieldNumber;
#endif  // !_MSC_VER

stQueryNameExistGmUserCmd::stQueryNameExistGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stQueryNameExistGmUserCmd)
}

void stQueryNameExistGmUserCmd::InitAsDefaultInstance() {
}

stQueryNameExistGmUserCmd::stQueryNameExistGmUserCmd(const stQueryNameExistGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stQueryNameExistGmUserCmd)
}

void stQueryNameExistGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQueryNameExistGmUserCmd::~stQueryNameExistGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stQueryNameExistGmUserCmd)
  SharedDtor();
}

void stQueryNameExistGmUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stQueryNameExistGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQueryNameExistGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryNameExistGmUserCmd_descriptor_;
}

const stQueryNameExistGmUserCmd& stQueryNameExistGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stQueryNameExistGmUserCmd* stQueryNameExistGmUserCmd::default_instance_ = NULL;

stQueryNameExistGmUserCmd* stQueryNameExistGmUserCmd::New() const {
  return new stQueryNameExistGmUserCmd;
}

void stQueryNameExistGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQueryNameExistGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stQueryNameExistGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 2;
      case 2: {
        if (tag == 16) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stQueryNameExistGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stQueryNameExistGmUserCmd)
  return false;
#undef DO_
}

void stQueryNameExistGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stQueryNameExistGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stQueryNameExistGmUserCmd)
}

::google::protobuf::uint8* stQueryNameExistGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stQueryNameExistGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stQueryNameExistGmUserCmd)
  return target;
}

int stQueryNameExistGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQueryNameExistGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQueryNameExistGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQueryNameExistGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQueryNameExistGmUserCmd::MergeFrom(const stQueryNameExistGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQueryNameExistGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQueryNameExistGmUserCmd::CopyFrom(const stQueryNameExistGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQueryNameExistGmUserCmd::IsInitialized() const {

  return true;
}

void stQueryNameExistGmUserCmd::Swap(stQueryNameExistGmUserCmd* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQueryNameExistGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQueryNameExistGmUserCmd_descriptor_;
  metadata.reflection = stQueryNameExistGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stForceInsertNameGmUserCmd::kNameFieldNumber;
const int stForceInsertNameGmUserCmd::kOptypeFieldNumber;
#endif  // !_MSC_VER

stForceInsertNameGmUserCmd::stForceInsertNameGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stForceInsertNameGmUserCmd)
}

void stForceInsertNameGmUserCmd::InitAsDefaultInstance() {
}

stForceInsertNameGmUserCmd::stForceInsertNameGmUserCmd(const stForceInsertNameGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stForceInsertNameGmUserCmd)
}

void stForceInsertNameGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForceInsertNameGmUserCmd::~stForceInsertNameGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stForceInsertNameGmUserCmd)
  SharedDtor();
}

void stForceInsertNameGmUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stForceInsertNameGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForceInsertNameGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForceInsertNameGmUserCmd_descriptor_;
}

const stForceInsertNameGmUserCmd& stForceInsertNameGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stForceInsertNameGmUserCmd* stForceInsertNameGmUserCmd::default_instance_ = NULL;

stForceInsertNameGmUserCmd* stForceInsertNameGmUserCmd::New() const {
  return new stForceInsertNameGmUserCmd;
}

void stForceInsertNameGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    optype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForceInsertNameGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stForceInsertNameGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 2;
      case 2: {
        if (tag == 16) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stForceInsertNameGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stForceInsertNameGmUserCmd)
  return false;
#undef DO_
}

void stForceInsertNameGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stForceInsertNameGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 optype = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stForceInsertNameGmUserCmd)
}

::google::protobuf::uint8* stForceInsertNameGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stForceInsertNameGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 optype = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stForceInsertNameGmUserCmd)
  return target;
}

int stForceInsertNameGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 optype = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForceInsertNameGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForceInsertNameGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForceInsertNameGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForceInsertNameGmUserCmd::MergeFrom(const stForceInsertNameGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForceInsertNameGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForceInsertNameGmUserCmd::CopyFrom(const stForceInsertNameGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForceInsertNameGmUserCmd::IsInitialized() const {

  return true;
}

void stForceInsertNameGmUserCmd::Swap(stForceInsertNameGmUserCmd* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForceInsertNameGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForceInsertNameGmUserCmd_descriptor_;
  metadata.reflection = stForceInsertNameGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stForceModifyNameGmUserCmd::kGmidFieldNumber;
const int stForceModifyNameGmUserCmd::kZoneidFieldNumber;
const int stForceModifyNameGmUserCmd::kOpidFieldNumber;
const int stForceModifyNameGmUserCmd::kOldnameFieldNumber;
const int stForceModifyNameGmUserCmd::kNewnameFieldNumber;
const int stForceModifyNameGmUserCmd::kOptypeFieldNumber;
#endif  // !_MSC_VER

stForceModifyNameGmUserCmd::stForceModifyNameGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stForceModifyNameGmUserCmd)
}

void stForceModifyNameGmUserCmd::InitAsDefaultInstance() {
}

stForceModifyNameGmUserCmd::stForceModifyNameGmUserCmd(const stForceModifyNameGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stForceModifyNameGmUserCmd)
}

void stForceModifyNameGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  zoneid_ = 0u;
  opid_ = 0u;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForceModifyNameGmUserCmd::~stForceModifyNameGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stForceModifyNameGmUserCmd)
  SharedDtor();
}

void stForceModifyNameGmUserCmd::SharedDtor() {
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void stForceModifyNameGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForceModifyNameGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForceModifyNameGmUserCmd_descriptor_;
}

const stForceModifyNameGmUserCmd& stForceModifyNameGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stForceModifyNameGmUserCmd* stForceModifyNameGmUserCmd::default_instance_ = NULL;

stForceModifyNameGmUserCmd* stForceModifyNameGmUserCmd::New() const {
  return new stForceModifyNameGmUserCmd;
}

void stForceModifyNameGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stForceModifyNameGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(gmid_, zoneid_);
    ZR_(opid_, optype_);
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldname_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForceModifyNameGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stForceModifyNameGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opid;
        break;
      }

      // optional uint32 opid = 3;
      case 3: {
        if (tag == 24) {
         parse_opid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_oldname;
        break;
      }

      // optional string oldname = 4;
      case 4: {
        if (tag == 34) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_newname;
        break;
      }

      // optional string newname = 5;
      case 5: {
        if (tag == 42) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_optype;
        break;
      }

      // optional uint32 optype = 6;
      case 6: {
        if (tag == 48) {
         parse_optype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stForceModifyNameGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stForceModifyNameGmUserCmd)
  return false;
#undef DO_
}

void stForceModifyNameGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stForceModifyNameGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 opid = 3;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opid(), output);
  }

  // optional string oldname = 4;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->oldname(), output);
  }

  // optional string newname = 5;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->newname(), output);
  }

  // optional uint32 optype = 6;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->optype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stForceModifyNameGmUserCmd)
}

::google::protobuf::uint8* stForceModifyNameGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stForceModifyNameGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 opid = 3;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opid(), target);
  }

  // optional string oldname = 4;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oldname(), target);
  }

  // optional string newname = 5;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->newname(), target);
  }

  // optional uint32 optype = 6;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->optype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stForceModifyNameGmUserCmd)
  return target;
}

int stForceModifyNameGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 opid = 3;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional string oldname = 4;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional string newname = 5;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional uint32 optype = 6;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForceModifyNameGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForceModifyNameGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForceModifyNameGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForceModifyNameGmUserCmd::MergeFrom(const stForceModifyNameGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForceModifyNameGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForceModifyNameGmUserCmd::CopyFrom(const stForceModifyNameGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForceModifyNameGmUserCmd::IsInitialized() const {

  return true;
}

void stForceModifyNameGmUserCmd::Swap(stForceModifyNameGmUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(opid_, other->opid_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(optype_, other->optype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForceModifyNameGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForceModifyNameGmUserCmd_descriptor_;
  metadata.reflection = stForceModifyNameGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCheckOnlineGmUserCmd::kZoneidFieldNumber;
const int stCheckOnlineGmUserCmd::kNameFieldNumber;
#endif  // !_MSC_VER

stCheckOnlineGmUserCmd::stCheckOnlineGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stCheckOnlineGmUserCmd)
}

void stCheckOnlineGmUserCmd::InitAsDefaultInstance() {
}

stCheckOnlineGmUserCmd::stCheckOnlineGmUserCmd(const stCheckOnlineGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stCheckOnlineGmUserCmd)
}

void stCheckOnlineGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCheckOnlineGmUserCmd::~stCheckOnlineGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stCheckOnlineGmUserCmd)
  SharedDtor();
}

void stCheckOnlineGmUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stCheckOnlineGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCheckOnlineGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCheckOnlineGmUserCmd_descriptor_;
}

const stCheckOnlineGmUserCmd& stCheckOnlineGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stCheckOnlineGmUserCmd* stCheckOnlineGmUserCmd::default_instance_ = NULL;

stCheckOnlineGmUserCmd* stCheckOnlineGmUserCmd::New() const {
  return new stCheckOnlineGmUserCmd;
}

void stCheckOnlineGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    zoneid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCheckOnlineGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stCheckOnlineGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stCheckOnlineGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stCheckOnlineGmUserCmd)
  return false;
#undef DO_
}

void stCheckOnlineGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stCheckOnlineGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stCheckOnlineGmUserCmd)
}

::google::protobuf::uint8* stCheckOnlineGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stCheckOnlineGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stCheckOnlineGmUserCmd)
  return target;
}

int stCheckOnlineGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCheckOnlineGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCheckOnlineGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCheckOnlineGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCheckOnlineGmUserCmd::MergeFrom(const stCheckOnlineGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCheckOnlineGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCheckOnlineGmUserCmd::CopyFrom(const stCheckOnlineGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCheckOnlineGmUserCmd::IsInitialized() const {

  return true;
}

void stCheckOnlineGmUserCmd::Swap(stCheckOnlineGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCheckOnlineGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCheckOnlineGmUserCmd_descriptor_;
  metadata.reflection = stCheckOnlineGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnCheckOnlineGmUserCmd::kZoneidFieldNumber;
const int stReturnCheckOnlineGmUserCmd::kNameFieldNumber;
const int stReturnCheckOnlineGmUserCmd::kRetcodeFieldNumber;
#endif  // !_MSC_VER

stReturnCheckOnlineGmUserCmd::stReturnCheckOnlineGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnCheckOnlineGmUserCmd)
}

void stReturnCheckOnlineGmUserCmd::InitAsDefaultInstance() {
}

stReturnCheckOnlineGmUserCmd::stReturnCheckOnlineGmUserCmd(const stReturnCheckOnlineGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnCheckOnlineGmUserCmd)
}

void stReturnCheckOnlineGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnCheckOnlineGmUserCmd::~stReturnCheckOnlineGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnCheckOnlineGmUserCmd)
  SharedDtor();
}

void stReturnCheckOnlineGmUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stReturnCheckOnlineGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnCheckOnlineGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnCheckOnlineGmUserCmd_descriptor_;
}

const stReturnCheckOnlineGmUserCmd& stReturnCheckOnlineGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnCheckOnlineGmUserCmd* stReturnCheckOnlineGmUserCmd::default_instance_ = NULL;

stReturnCheckOnlineGmUserCmd* stReturnCheckOnlineGmUserCmd::New() const {
  return new stReturnCheckOnlineGmUserCmd;
}

void stReturnCheckOnlineGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnCheckOnlineGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(zoneid_, retcode_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnCheckOnlineGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnCheckOnlineGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_retcode;
        break;
      }

      // optional uint32 retcode = 3;
      case 3: {
        if (tag == 24) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnCheckOnlineGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnCheckOnlineGmUserCmd)
  return false;
#undef DO_
}

void stReturnCheckOnlineGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnCheckOnlineGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 retcode = 3;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnCheckOnlineGmUserCmd)
}

::google::protobuf::uint8* stReturnCheckOnlineGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnCheckOnlineGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 retcode = 3;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnCheckOnlineGmUserCmd)
  return target;
}

int stReturnCheckOnlineGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 retcode = 3;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnCheckOnlineGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnCheckOnlineGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnCheckOnlineGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnCheckOnlineGmUserCmd::MergeFrom(const stReturnCheckOnlineGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnCheckOnlineGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnCheckOnlineGmUserCmd::CopyFrom(const stReturnCheckOnlineGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnCheckOnlineGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnCheckOnlineGmUserCmd::Swap(stReturnCheckOnlineGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnCheckOnlineGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnCheckOnlineGmUserCmd_descriptor_;
  metadata.reflection = stReturnCheckOnlineGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stPunishUserGmUserCmd::kUserNameFieldNumber;
const int stPunishUserGmUserCmd::kGMFieldNumber;
const int stPunishUserGmUserCmd::kReasonFieldNumber;
const int stPunishUserGmUserCmd::kOperationFieldNumber;
const int stPunishUserGmUserCmd::kDelayFieldNumber;
const int stPunishUserGmUserCmd::kWaitTimeFieldNumber;
const int stPunishUserGmUserCmd::kAccidFieldNumber;
const int stPunishUserGmUserCmd::kIpFieldNumber;
#endif  // !_MSC_VER

stPunishUserGmUserCmd::stPunishUserGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stPunishUserGmUserCmd)
}

void stPunishUserGmUserCmd::InitAsDefaultInstance() {
}

stPunishUserGmUserCmd::stPunishUserGmUserCmd(const stPunishUserGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stPunishUserGmUserCmd)
}

void stPunishUserGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 0u;
  delay_ = 0u;
  waittime_ = 0u;
  accid_ = 0u;
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPunishUserGmUserCmd::~stPunishUserGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stPunishUserGmUserCmd)
  SharedDtor();
}

void stPunishUserGmUserCmd::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (gm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gm_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void stPunishUserGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPunishUserGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPunishUserGmUserCmd_descriptor_;
}

const stPunishUserGmUserCmd& stPunishUserGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stPunishUserGmUserCmd* stPunishUserGmUserCmd::default_instance_ = NULL;

stPunishUserGmUserCmd* stPunishUserGmUserCmd::New() const {
  return new stPunishUserGmUserCmd;
}

void stPunishUserGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stPunishUserGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(operation_, ip_);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_gm()) {
      if (gm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gm_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPunishUserGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stPunishUserGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GM;
        break;
      }

      // optional string GM = 2;
      case 2: {
        if (tag == 18) {
         parse_GM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gm().data(), this->gm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operation;
        break;
      }

      // optional uint32 operation = 4;
      case 4: {
        if (tag == 32) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 5;
      case 5: {
        if (tag == 40) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_waitTime;
        break;
      }

      // optional uint32 waitTime = 6;
      case 6: {
        if (tag == 48) {
         parse_waitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_accid;
        break;
      }

      // optional uint32 accid = 7;
      case 7: {
        if (tag == 56) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 8;
      case 8: {
        if (tag == 64) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stPunishUserGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stPunishUserGmUserCmd)
  return false;
#undef DO_
}

void stPunishUserGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stPunishUserGmUserCmd)
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string GM = 2;
  if (has_gm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gm().data(), this->gm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gm(), output);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // optional uint32 operation = 4;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operation(), output);
  }

  // optional uint32 delay = 5;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delay(), output);
  }

  // optional uint32 waitTime = 6;
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->waittime(), output);
  }

  // optional uint32 accid = 7;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->accid(), output);
  }

  // optional uint32 ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stPunishUserGmUserCmd)
}

::google::protobuf::uint8* stPunishUserGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stPunishUserGmUserCmd)
  // optional string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string GM = 2;
  if (has_gm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gm().data(), this->gm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gm(), target);
  }

  // optional string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  // optional uint32 operation = 4;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operation(), target);
  }

  // optional uint32 delay = 5;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delay(), target);
  }

  // optional uint32 waitTime = 6;
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->waittime(), target);
  }

  // optional uint32 accid = 7;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->accid(), target);
  }

  // optional uint32 ip = 8;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stPunishUserGmUserCmd)
  return target;
}

int stPunishUserGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string GM = 2;
    if (has_gm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gm());
    }

    // optional string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional uint32 operation = 4;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

    // optional uint32 delay = 5;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 waitTime = 6;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waittime());
    }

    // optional uint32 accid = 7;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accid());
    }

    // optional uint32 ip = 8;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPunishUserGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPunishUserGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPunishUserGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPunishUserGmUserCmd::MergeFrom(const stPunishUserGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_gm()) {
      set_gm(from.gm());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPunishUserGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPunishUserGmUserCmd::CopyFrom(const stPunishUserGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPunishUserGmUserCmd::IsInitialized() const {

  return true;
}

void stPunishUserGmUserCmd::Swap(stPunishUserGmUserCmd* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(gm_, other->gm_);
    std::swap(reason_, other->reason_);
    std::swap(operation_, other->operation_);
    std::swap(delay_, other->delay_);
    std::swap(waittime_, other->waittime_);
    std::swap(accid_, other->accid_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPunishUserGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPunishUserGmUserCmd_descriptor_;
  metadata.reflection = stPunishUserGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestUserPosUserGmUserCmd::kZoneidFieldNumber;
const int stRequestUserPosUserGmUserCmd::kSceneidFieldNumber;
#endif  // !_MSC_VER

stRequestUserPosUserGmUserCmd::stRequestUserPosUserGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestUserPosUserGmUserCmd)
}

void stRequestUserPosUserGmUserCmd::InitAsDefaultInstance() {
}

stRequestUserPosUserGmUserCmd::stRequestUserPosUserGmUserCmd(const stRequestUserPosUserGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestUserPosUserGmUserCmd)
}

void stRequestUserPosUserGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  sceneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestUserPosUserGmUserCmd::~stRequestUserPosUserGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestUserPosUserGmUserCmd)
  SharedDtor();
}

void stRequestUserPosUserGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestUserPosUserGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestUserPosUserGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestUserPosUserGmUserCmd_descriptor_;
}

const stRequestUserPosUserGmUserCmd& stRequestUserPosUserGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestUserPosUserGmUserCmd* stRequestUserPosUserGmUserCmd::default_instance_ = NULL;

stRequestUserPosUserGmUserCmd* stRequestUserPosUserGmUserCmd::New() const {
  return new stRequestUserPosUserGmUserCmd;
}

void stRequestUserPosUserGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stRequestUserPosUserGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, sceneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestUserPosUserGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestUserPosUserGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 2;
      case 2: {
        if (tag == 16) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestUserPosUserGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestUserPosUserGmUserCmd)
  return false;
#undef DO_
}

void stRequestUserPosUserGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestUserPosUserGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestUserPosUserGmUserCmd)
}

::google::protobuf::uint8* stRequestUserPosUserGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestUserPosUserGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestUserPosUserGmUserCmd)
  return target;
}

int stRequestUserPosUserGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestUserPosUserGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestUserPosUserGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestUserPosUserGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestUserPosUserGmUserCmd::MergeFrom(const stRequestUserPosUserGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestUserPosUserGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestUserPosUserGmUserCmd::CopyFrom(const stRequestUserPosUserGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestUserPosUserGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestUserPosUserGmUserCmd::Swap(stRequestUserPosUserGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestUserPosUserGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestUserPosUserGmUserCmd_descriptor_;
  metadata.reflection = stRequestUserPosUserGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnUserPosUserGmUserCmd_Data::kXFieldNumber;
const int stReturnUserPosUserGmUserCmd_Data::kYFieldNumber;
#endif  // !_MSC_VER

stReturnUserPosUserGmUserCmd_Data::stReturnUserPosUserGmUserCmd_Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnUserPosUserGmUserCmd.Data)
}

void stReturnUserPosUserGmUserCmd_Data::InitAsDefaultInstance() {
}

stReturnUserPosUserGmUserCmd_Data::stReturnUserPosUserGmUserCmd_Data(const stReturnUserPosUserGmUserCmd_Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnUserPosUserGmUserCmd.Data)
}

void stReturnUserPosUserGmUserCmd_Data::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnUserPosUserGmUserCmd_Data::~stReturnUserPosUserGmUserCmd_Data() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnUserPosUserGmUserCmd.Data)
  SharedDtor();
}

void stReturnUserPosUserGmUserCmd_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnUserPosUserGmUserCmd_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnUserPosUserGmUserCmd_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnUserPosUserGmUserCmd_Data_descriptor_;
}

const stReturnUserPosUserGmUserCmd_Data& stReturnUserPosUserGmUserCmd_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnUserPosUserGmUserCmd_Data* stReturnUserPosUserGmUserCmd_Data::default_instance_ = NULL;

stReturnUserPosUserGmUserCmd_Data* stReturnUserPosUserGmUserCmd_Data::New() const {
  return new stReturnUserPosUserGmUserCmd_Data;
}

void stReturnUserPosUserGmUserCmd_Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnUserPosUserGmUserCmd_Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnUserPosUserGmUserCmd_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnUserPosUserGmUserCmd.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnUserPosUserGmUserCmd.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnUserPosUserGmUserCmd.Data)
  return false;
#undef DO_
}

void stReturnUserPosUserGmUserCmd_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnUserPosUserGmUserCmd.Data)
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnUserPosUserGmUserCmd.Data)
}

::google::protobuf::uint8* stReturnUserPosUserGmUserCmd_Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnUserPosUserGmUserCmd.Data)
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnUserPosUserGmUserCmd.Data)
  return target;
}

int stReturnUserPosUserGmUserCmd_Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnUserPosUserGmUserCmd_Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnUserPosUserGmUserCmd_Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnUserPosUserGmUserCmd_Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnUserPosUserGmUserCmd_Data::MergeFrom(const stReturnUserPosUserGmUserCmd_Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnUserPosUserGmUserCmd_Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnUserPosUserGmUserCmd_Data::CopyFrom(const stReturnUserPosUserGmUserCmd_Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnUserPosUserGmUserCmd_Data::IsInitialized() const {

  return true;
}

void stReturnUserPosUserGmUserCmd_Data::Swap(stReturnUserPosUserGmUserCmd_Data* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnUserPosUserGmUserCmd_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnUserPosUserGmUserCmd_Data_descriptor_;
  metadata.reflection = stReturnUserPosUserGmUserCmd_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int stReturnUserPosUserGmUserCmd::kNumFieldNumber;
const int stReturnUserPosUserGmUserCmd::kZoneidFieldNumber;
const int stReturnUserPosUserGmUserCmd::kSceneidFieldNumber;
const int stReturnUserPosUserGmUserCmd::kWidthFieldNumber;
const int stReturnUserPosUserGmUserCmd::kHeightFieldNumber;
const int stReturnUserPosUserGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnUserPosUserGmUserCmd::stReturnUserPosUserGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnUserPosUserGmUserCmd)
}

void stReturnUserPosUserGmUserCmd::InitAsDefaultInstance() {
}

stReturnUserPosUserGmUserCmd::stReturnUserPosUserGmUserCmd(const stReturnUserPosUserGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnUserPosUserGmUserCmd)
}

void stReturnUserPosUserGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  zoneid_ = 0u;
  sceneid_ = 0u;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnUserPosUserGmUserCmd::~stReturnUserPosUserGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnUserPosUserGmUserCmd)
  SharedDtor();
}

void stReturnUserPosUserGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnUserPosUserGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnUserPosUserGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnUserPosUserGmUserCmd_descriptor_;
}

const stReturnUserPosUserGmUserCmd& stReturnUserPosUserGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnUserPosUserGmUserCmd* stReturnUserPosUserGmUserCmd::default_instance_ = NULL;

stReturnUserPosUserGmUserCmd* stReturnUserPosUserGmUserCmd::New() const {
  return new stReturnUserPosUserGmUserCmd;
}

void stReturnUserPosUserGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnUserPosUserGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(num_, width_);
    height_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnUserPosUserGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnUserPosUserGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional uint32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .Pmd.stReturnUserPosUserGmUserCmd.Data data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnUserPosUserGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnUserPosUserGmUserCmd)
  return false;
#undef DO_
}

void stReturnUserPosUserGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnUserPosUserGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // repeated .Pmd.stReturnUserPosUserGmUserCmd.Data data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnUserPosUserGmUserCmd)
}

::google::protobuf::uint8* stReturnUserPosUserGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnUserPosUserGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }

  // optional uint32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // repeated .Pmd.stReturnUserPosUserGmUserCmd.Data data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnUserPosUserGmUserCmd)
  return target;
}

int stReturnUserPosUserGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  // repeated .Pmd.stReturnUserPosUserGmUserCmd.Data data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnUserPosUserGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnUserPosUserGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnUserPosUserGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnUserPosUserGmUserCmd::MergeFrom(const stReturnUserPosUserGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnUserPosUserGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnUserPosUserGmUserCmd::CopyFrom(const stReturnUserPosUserGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnUserPosUserGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnUserPosUserGmUserCmd::Swap(stReturnUserPosUserGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnUserPosUserGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnUserPosUserGmUserCmd_descriptor_;
  metadata.reflection = stReturnUserPosUserGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stEndUserPosUserGmUserCmd::kZoneidFieldNumber;
const int stEndUserPosUserGmUserCmd::kSceneidFieldNumber;
#endif  // !_MSC_VER

stEndUserPosUserGmUserCmd::stEndUserPosUserGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stEndUserPosUserGmUserCmd)
}

void stEndUserPosUserGmUserCmd::InitAsDefaultInstance() {
}

stEndUserPosUserGmUserCmd::stEndUserPosUserGmUserCmd(const stEndUserPosUserGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stEndUserPosUserGmUserCmd)
}

void stEndUserPosUserGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  sceneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEndUserPosUserGmUserCmd::~stEndUserPosUserGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stEndUserPosUserGmUserCmd)
  SharedDtor();
}

void stEndUserPosUserGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEndUserPosUserGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEndUserPosUserGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEndUserPosUserGmUserCmd_descriptor_;
}

const stEndUserPosUserGmUserCmd& stEndUserPosUserGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stEndUserPosUserGmUserCmd* stEndUserPosUserGmUserCmd::default_instance_ = NULL;

stEndUserPosUserGmUserCmd* stEndUserPosUserGmUserCmd::New() const {
  return new stEndUserPosUserGmUserCmd;
}

void stEndUserPosUserGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stEndUserPosUserGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, sceneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEndUserPosUserGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stEndUserPosUserGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 2;
      case 2: {
        if (tag == 16) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stEndUserPosUserGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stEndUserPosUserGmUserCmd)
  return false;
#undef DO_
}

void stEndUserPosUserGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stEndUserPosUserGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stEndUserPosUserGmUserCmd)
}

::google::protobuf::uint8* stEndUserPosUserGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stEndUserPosUserGmUserCmd)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stEndUserPosUserGmUserCmd)
  return target;
}

int stEndUserPosUserGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEndUserPosUserGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEndUserPosUserGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEndUserPosUserGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEndUserPosUserGmUserCmd::MergeFrom(const stEndUserPosUserGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEndUserPosUserGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEndUserPosUserGmUserCmd::CopyFrom(const stEndUserPosUserGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEndUserPosUserGmUserCmd::IsInitialized() const {

  return true;
}

void stEndUserPosUserGmUserCmd::Swap(stEndUserPosUserGmUserCmd* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEndUserPosUserGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEndUserPosUserGmUserCmd_descriptor_;
  metadata.reflection = stEndUserPosUserGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBroadcastReallySendGmUserCmd::kTaskIDFieldNumber;
const int stBroadcastReallySendGmUserCmd::kDwZoneIDFieldNumber;
const int stBroadcastReallySendGmUserCmd::kWCountryIDFieldNumber;
const int stBroadcastReallySendGmUserCmd::kWSceneIDFieldNumber;
const int stBroadcastReallySendGmUserCmd::kNumFieldNumber;
const int stBroadcastReallySendGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stBroadcastReallySendGmUserCmd::stBroadcastReallySendGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stBroadcastReallySendGmUserCmd)
}

void stBroadcastReallySendGmUserCmd::InitAsDefaultInstance() {
}

stBroadcastReallySendGmUserCmd::stBroadcastReallySendGmUserCmd(const stBroadcastReallySendGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stBroadcastReallySendGmUserCmd)
}

void stBroadcastReallySendGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  taskid_ = 0u;
  dwzoneid_ = 0u;
  wcountryid_ = 0u;
  wsceneid_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastReallySendGmUserCmd::~stBroadcastReallySendGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stBroadcastReallySendGmUserCmd)
  SharedDtor();
}

void stBroadcastReallySendGmUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stBroadcastReallySendGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastReallySendGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastReallySendGmUserCmd_descriptor_;
}

const stBroadcastReallySendGmUserCmd& stBroadcastReallySendGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stBroadcastReallySendGmUserCmd* stBroadcastReallySendGmUserCmd::default_instance_ = NULL;

stBroadcastReallySendGmUserCmd* stBroadcastReallySendGmUserCmd::New() const {
  return new stBroadcastReallySendGmUserCmd;
}

void stBroadcastReallySendGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stBroadcastReallySendGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(taskid_, wsceneid_);
    num_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastReallySendGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stBroadcastReallySendGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwZoneID;
        break;
      }

      // optional uint32 dwZoneID = 2;
      case 2: {
        if (tag == 16) {
         parse_dwZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwzoneid_)));
          set_has_dwzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wCountryID;
        break;
      }

      // optional uint32 wCountryID = 3;
      case 3: {
        if (tag == 24) {
         parse_wCountryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wcountryid_)));
          set_has_wcountryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wSceneID;
        break;
      }

      // optional uint32 wSceneID = 4;
      case 4: {
        if (tag == 32) {
         parse_wSceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wsceneid_)));
          set_has_wsceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stBroadcastReallySendGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stBroadcastReallySendGmUserCmd)
  return false;
#undef DO_
}

void stBroadcastReallySendGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stBroadcastReallySendGmUserCmd)
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 dwZoneID = 2;
  if (has_dwzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dwzoneid(), output);
  }

  // optional uint32 wCountryID = 3;
  if (has_wcountryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wcountryid(), output);
  }

  // optional uint32 wSceneID = 4;
  if (has_wsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wsceneid(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stBroadcastReallySendGmUserCmd)
}

::google::protobuf::uint8* stBroadcastReallySendGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stBroadcastReallySendGmUserCmd)
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 dwZoneID = 2;
  if (has_dwzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dwzoneid(), target);
  }

  // optional uint32 wCountryID = 3;
  if (has_wcountryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wcountryid(), target);
  }

  // optional uint32 wSceneID = 4;
  if (has_wsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wsceneid(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stBroadcastReallySendGmUserCmd)
  return target;
}

int stBroadcastReallySendGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 dwZoneID = 2;
    if (has_dwzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwzoneid());
    }

    // optional uint32 wCountryID = 3;
    if (has_wcountryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wcountryid());
    }

    // optional uint32 wSceneID = 4;
    if (has_wsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wsceneid());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastReallySendGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastReallySendGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastReallySendGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastReallySendGmUserCmd::MergeFrom(const stBroadcastReallySendGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_dwzoneid()) {
      set_dwzoneid(from.dwzoneid());
    }
    if (from.has_wcountryid()) {
      set_wcountryid(from.wcountryid());
    }
    if (from.has_wsceneid()) {
      set_wsceneid(from.wsceneid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastReallySendGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastReallySendGmUserCmd::CopyFrom(const stBroadcastReallySendGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastReallySendGmUserCmd::IsInitialized() const {

  return true;
}

void stBroadcastReallySendGmUserCmd::Swap(stBroadcastReallySendGmUserCmd* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(dwzoneid_, other->dwzoneid_);
    std::swap(wcountryid_, other->wcountryid_);
    std::swap(wsceneid_, other->wsceneid_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastReallySendGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastReallySendGmUserCmd_descriptor_;
  metadata.reflection = stBroadcastReallySendGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDBQueryGmUserCmd::kByNoLimitFieldNumber;
const int stDBQueryGmUserCmd::kTablenameFieldNumber;
const int stDBQueryGmUserCmd::kTimebeginFieldNumber;
const int stDBQueryGmUserCmd::kTimeendFieldNumber;
const int stDBQueryGmUserCmd::kSqllenFieldNumber;
const int stDBQueryGmUserCmd::kTypelenFieldNumber;
const int stDBQueryGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stDBQueryGmUserCmd::stDBQueryGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stDBQueryGmUserCmd)
}

void stDBQueryGmUserCmd::InitAsDefaultInstance() {
}

stDBQueryGmUserCmd::stDBQueryGmUserCmd(const stDBQueryGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stDBQueryGmUserCmd)
}

void stDBQueryGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bynolimit_ = 0u;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timebegin_ = 0u;
  timeend_ = 0u;
  sqllen_ = 0u;
  typelen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDBQueryGmUserCmd::~stDBQueryGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stDBQueryGmUserCmd)
  SharedDtor();
}

void stDBQueryGmUserCmd::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stDBQueryGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDBQueryGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDBQueryGmUserCmd_descriptor_;
}

const stDBQueryGmUserCmd& stDBQueryGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stDBQueryGmUserCmd* stDBQueryGmUserCmd::default_instance_ = NULL;

stDBQueryGmUserCmd* stDBQueryGmUserCmd::New() const {
  return new stDBQueryGmUserCmd;
}

void stDBQueryGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stDBQueryGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(bynolimit_, sqllen_);
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablename_->clear();
      }
    }
    typelen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDBQueryGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stDBQueryGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 byNoLimit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bynolimit_)));
          set_has_bynolimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional string tablename = 2;
      case 2: {
        if (tag == 18) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timebegin;
        break;
      }

      // optional uint32 timebegin = 3;
      case 3: {
        if (tag == 24) {
         parse_timebegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timebegin_)));
          set_has_timebegin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeend;
        break;
      }

      // optional uint32 timeend = 4;
      case 4: {
        if (tag == 32) {
         parse_timeend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeend_)));
          set_has_timeend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sqllen;
        break;
      }

      // optional uint32 sqllen = 5;
      case 5: {
        if (tag == 40) {
         parse_sqllen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sqllen_)));
          set_has_sqllen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_typelen;
        break;
      }

      // optional uint32 typelen = 6;
      case 6: {
        if (tag == 48) {
         parse_typelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typelen_)));
          set_has_typelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stDBQueryGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stDBQueryGmUserCmd)
  return false;
#undef DO_
}

void stDBQueryGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stDBQueryGmUserCmd)
  // optional uint32 byNoLimit = 1;
  if (has_bynolimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bynolimit(), output);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tablename(), output);
  }

  // optional uint32 timebegin = 3;
  if (has_timebegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timebegin(), output);
  }

  // optional uint32 timeend = 4;
  if (has_timeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeend(), output);
  }

  // optional uint32 sqllen = 5;
  if (has_sqllen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sqllen(), output);
  }

  // optional uint32 typelen = 6;
  if (has_typelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->typelen(), output);
  }

  // optional bytes data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stDBQueryGmUserCmd)
}

::google::protobuf::uint8* stDBQueryGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stDBQueryGmUserCmd)
  // optional uint32 byNoLimit = 1;
  if (has_bynolimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bynolimit(), target);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }

  // optional uint32 timebegin = 3;
  if (has_timebegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timebegin(), target);
  }

  // optional uint32 timeend = 4;
  if (has_timeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeend(), target);
  }

  // optional uint32 sqllen = 5;
  if (has_sqllen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sqllen(), target);
  }

  // optional uint32 typelen = 6;
  if (has_typelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->typelen(), target);
  }

  // optional bytes data = 7;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stDBQueryGmUserCmd)
  return target;
}

int stDBQueryGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 byNoLimit = 1;
    if (has_bynolimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bynolimit());
    }

    // optional string tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional uint32 timebegin = 3;
    if (has_timebegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timebegin());
    }

    // optional uint32 timeend = 4;
    if (has_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeend());
    }

    // optional uint32 sqllen = 5;
    if (has_sqllen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sqllen());
    }

    // optional uint32 typelen = 6;
    if (has_typelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typelen());
    }

    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDBQueryGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDBQueryGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDBQueryGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDBQueryGmUserCmd::MergeFrom(const stDBQueryGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bynolimit()) {
      set_bynolimit(from.bynolimit());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_timebegin()) {
      set_timebegin(from.timebegin());
    }
    if (from.has_timeend()) {
      set_timeend(from.timeend());
    }
    if (from.has_sqllen()) {
      set_sqllen(from.sqllen());
    }
    if (from.has_typelen()) {
      set_typelen(from.typelen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDBQueryGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDBQueryGmUserCmd::CopyFrom(const stDBQueryGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDBQueryGmUserCmd::IsInitialized() const {

  return true;
}

void stDBQueryGmUserCmd::Swap(stDBQueryGmUserCmd* other) {
  if (other != this) {
    std::swap(bynolimit_, other->bynolimit_);
    std::swap(tablename_, other->tablename_);
    std::swap(timebegin_, other->timebegin_);
    std::swap(timeend_, other->timeend_);
    std::swap(sqllen_, other->sqllen_);
    std::swap(typelen_, other->typelen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDBQueryGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDBQueryGmUserCmd_descriptor_;
  metadata.reflection = stDBQueryGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDBReturnDataGmUserCmd::kNumFieldNumber;
const int stDBReturnDataGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stDBReturnDataGmUserCmd::stDBReturnDataGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stDBReturnDataGmUserCmd)
}

void stDBReturnDataGmUserCmd::InitAsDefaultInstance() {
}

stDBReturnDataGmUserCmd::stDBReturnDataGmUserCmd(const stDBReturnDataGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stDBReturnDataGmUserCmd)
}

void stDBReturnDataGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDBReturnDataGmUserCmd::~stDBReturnDataGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stDBReturnDataGmUserCmd)
  SharedDtor();
}

void stDBReturnDataGmUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stDBReturnDataGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDBReturnDataGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDBReturnDataGmUserCmd_descriptor_;
}

const stDBReturnDataGmUserCmd& stDBReturnDataGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stDBReturnDataGmUserCmd* stDBReturnDataGmUserCmd::default_instance_ = NULL;

stDBReturnDataGmUserCmd* stDBReturnDataGmUserCmd::New() const {
  return new stDBReturnDataGmUserCmd;
}

void stDBReturnDataGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    num_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDBReturnDataGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stDBReturnDataGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stDBReturnDataGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stDBReturnDataGmUserCmd)
  return false;
#undef DO_
}

void stDBReturnDataGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stDBReturnDataGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stDBReturnDataGmUserCmd)
}

::google::protobuf::uint8* stDBReturnDataGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stDBReturnDataGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stDBReturnDataGmUserCmd)
  return target;
}

int stDBReturnDataGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDBReturnDataGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDBReturnDataGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDBReturnDataGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDBReturnDataGmUserCmd::MergeFrom(const stDBReturnDataGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDBReturnDataGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDBReturnDataGmUserCmd::CopyFrom(const stDBReturnDataGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDBReturnDataGmUserCmd::IsInitialized() const {

  return true;
}

void stDBReturnDataGmUserCmd::Swap(stDBReturnDataGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDBReturnDataGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDBReturnDataGmUserCmd_descriptor_;
  metadata.reflection = stDBReturnDataGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stDBReturnEndGmUserCmd::stDBReturnEndGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stDBReturnEndGmUserCmd)
}

void stDBReturnEndGmUserCmd::InitAsDefaultInstance() {
}

stDBReturnEndGmUserCmd::stDBReturnEndGmUserCmd(const stDBReturnEndGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stDBReturnEndGmUserCmd)
}

void stDBReturnEndGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDBReturnEndGmUserCmd::~stDBReturnEndGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stDBReturnEndGmUserCmd)
  SharedDtor();
}

void stDBReturnEndGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDBReturnEndGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDBReturnEndGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDBReturnEndGmUserCmd_descriptor_;
}

const stDBReturnEndGmUserCmd& stDBReturnEndGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stDBReturnEndGmUserCmd* stDBReturnEndGmUserCmd::default_instance_ = NULL;

stDBReturnEndGmUserCmd* stDBReturnEndGmUserCmd::New() const {
  return new stDBReturnEndGmUserCmd;
}

void stDBReturnEndGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDBReturnEndGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stDBReturnEndGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stDBReturnEndGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stDBReturnEndGmUserCmd)
  return false;
#undef DO_
}

void stDBReturnEndGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stDBReturnEndGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stDBReturnEndGmUserCmd)
}

::google::protobuf::uint8* stDBReturnEndGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stDBReturnEndGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stDBReturnEndGmUserCmd)
  return target;
}

int stDBReturnEndGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDBReturnEndGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDBReturnEndGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDBReturnEndGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDBReturnEndGmUserCmd::MergeFrom(const stDBReturnEndGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDBReturnEndGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDBReturnEndGmUserCmd::CopyFrom(const stDBReturnEndGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDBReturnEndGmUserCmd::IsInitialized() const {

  return true;
}

void stDBReturnEndGmUserCmd::Swap(stDBReturnEndGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDBReturnEndGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDBReturnEndGmUserCmd_descriptor_;
  metadata.reflection = stDBReturnEndGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stFullForbidAccountLogDataGmUserCmd::kByOperationFieldNumber;
const int stFullForbidAccountLogDataGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stFullForbidAccountLogDataGmUserCmd::stFullForbidAccountLogDataGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stFullForbidAccountLogDataGmUserCmd)
}

void stFullForbidAccountLogDataGmUserCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::ForbidAccountData*>(&::Pmd::ForbidAccountData::default_instance());
}

stFullForbidAccountLogDataGmUserCmd::stFullForbidAccountLogDataGmUserCmd(const stFullForbidAccountLogDataGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stFullForbidAccountLogDataGmUserCmd)
}

void stFullForbidAccountLogDataGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  byoperation_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFullForbidAccountLogDataGmUserCmd::~stFullForbidAccountLogDataGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stFullForbidAccountLogDataGmUserCmd)
  SharedDtor();
}

void stFullForbidAccountLogDataGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stFullForbidAccountLogDataGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFullForbidAccountLogDataGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFullForbidAccountLogDataGmUserCmd_descriptor_;
}

const stFullForbidAccountLogDataGmUserCmd& stFullForbidAccountLogDataGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stFullForbidAccountLogDataGmUserCmd* stFullForbidAccountLogDataGmUserCmd::default_instance_ = NULL;

stFullForbidAccountLogDataGmUserCmd* stFullForbidAccountLogDataGmUserCmd::New() const {
  return new stFullForbidAccountLogDataGmUserCmd;
}

void stFullForbidAccountLogDataGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    byoperation_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::ForbidAccountData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFullForbidAccountLogDataGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stFullForbidAccountLogDataGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 byOperation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &byoperation_)));
          set_has_byoperation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .Pmd.ForbidAccountData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stFullForbidAccountLogDataGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stFullForbidAccountLogDataGmUserCmd)
  return false;
#undef DO_
}

void stFullForbidAccountLogDataGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stFullForbidAccountLogDataGmUserCmd)
  // optional uint32 byOperation = 1;
  if (has_byoperation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->byoperation(), output);
  }

  // optional .Pmd.ForbidAccountData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stFullForbidAccountLogDataGmUserCmd)
}

::google::protobuf::uint8* stFullForbidAccountLogDataGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stFullForbidAccountLogDataGmUserCmd)
  // optional uint32 byOperation = 1;
  if (has_byoperation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->byoperation(), target);
  }

  // optional .Pmd.ForbidAccountData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stFullForbidAccountLogDataGmUserCmd)
  return target;
}

int stFullForbidAccountLogDataGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 byOperation = 1;
    if (has_byoperation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->byoperation());
    }

    // optional .Pmd.ForbidAccountData data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFullForbidAccountLogDataGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFullForbidAccountLogDataGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFullForbidAccountLogDataGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFullForbidAccountLogDataGmUserCmd::MergeFrom(const stFullForbidAccountLogDataGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_byoperation()) {
      set_byoperation(from.byoperation());
    }
    if (from.has_data()) {
      mutable_data()->::Pmd::ForbidAccountData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFullForbidAccountLogDataGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFullForbidAccountLogDataGmUserCmd::CopyFrom(const stFullForbidAccountLogDataGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFullForbidAccountLogDataGmUserCmd::IsInitialized() const {

  return true;
}

void stFullForbidAccountLogDataGmUserCmd::Swap(stFullForbidAccountLogDataGmUserCmd* other) {
  if (other != this) {
    std::swap(byoperation_, other->byoperation_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFullForbidAccountLogDataGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFullForbidAccountLogDataGmUserCmd_descriptor_;
  metadata.reflection = stFullForbidAccountLogDataGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stFullGameGmCmdLogDataGmUserCmd::kAccIDFieldNumber;
const int stFullGameGmCmdLogDataGmUserCmd::kCharIDFieldNumber;
const int stFullGameGmCmdLogDataGmUserCmd::kGmNameFieldNumber;
const int stFullGameGmCmdLogDataGmUserCmd::kZoneIDFieldNumber;
const int stFullGameGmCmdLogDataGmUserCmd::kCountryIDFieldNumber;
const int stFullGameGmCmdLogDataGmUserCmd::kSceneIDFieldNumber;
const int stFullGameGmCmdLogDataGmUserCmd::kCmdFieldNumber;
const int stFullGameGmCmdLogDataGmUserCmd::kContentFieldNumber;
#endif  // !_MSC_VER

stFullGameGmCmdLogDataGmUserCmd::stFullGameGmCmdLogDataGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stFullGameGmCmdLogDataGmUserCmd)
}

void stFullGameGmCmdLogDataGmUserCmd::InitAsDefaultInstance() {
}

stFullGameGmCmdLogDataGmUserCmd::stFullGameGmCmdLogDataGmUserCmd(const stFullGameGmCmdLogDataGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stFullGameGmCmdLogDataGmUserCmd)
}

void stFullGameGmCmdLogDataGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accid_ = 0u;
  charid_ = 0u;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  countryid_ = 0u;
  sceneid_ = 0u;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFullGameGmCmdLogDataGmUserCmd::~stFullGameGmCmdLogDataGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stFullGameGmCmdLogDataGmUserCmd)
  SharedDtor();
}

void stFullGameGmCmdLogDataGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void stFullGameGmCmdLogDataGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFullGameGmCmdLogDataGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFullGameGmCmdLogDataGmUserCmd_descriptor_;
}

const stFullGameGmCmdLogDataGmUserCmd& stFullGameGmCmdLogDataGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stFullGameGmCmdLogDataGmUserCmd* stFullGameGmCmdLogDataGmUserCmd::default_instance_ = NULL;

stFullGameGmCmdLogDataGmUserCmd* stFullGameGmCmdLogDataGmUserCmd::New() const {
  return new stFullGameGmCmdLogDataGmUserCmd;
}

void stFullGameGmCmdLogDataGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stFullGameGmCmdLogDataGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accid_, charid_);
    ZR_(zoneid_, countryid_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    sceneid_ = 0u;
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmd_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFullGameGmCmdLogDataGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stFullGameGmCmdLogDataGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (tag == 16) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gmName;
        break;
      }

      // optional string gmName = 3;
      case 3: {
        if (tag == 26) {
         parse_gmName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneID;
        break;
      }

      // optional uint32 zoneID = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_countryID;
        break;
      }

      // optional uint32 countryID = 5;
      case 5: {
        if (tag == 40) {
         parse_countryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sceneID;
        break;
      }

      // optional uint32 sceneID = 6;
      case 6: {
        if (tag == 48) {
         parse_sceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cmd;
        break;
      }

      // optional string cmd = 7;
      case 7: {
        if (tag == 58) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional string content = 8;
      case 8: {
        if (tag == 66) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stFullGameGmCmdLogDataGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stFullGameGmCmdLogDataGmUserCmd)
  return false;
#undef DO_
}

void stFullGameGmCmdLogDataGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stFullGameGmCmdLogDataGmUserCmd)
  // optional uint32 accID = 1;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accid(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional string gmName = 3;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gmname(), output);
  }

  // optional uint32 zoneID = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional uint32 countryID = 5;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->countryid(), output);
  }

  // optional uint32 sceneID = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sceneid(), output);
  }

  // optional string cmd = 7;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cmd(), output);
  }

  // optional string content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stFullGameGmCmdLogDataGmUserCmd)
}

::google::protobuf::uint8* stFullGameGmCmdLogDataGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stFullGameGmCmdLogDataGmUserCmd)
  // optional uint32 accID = 1;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accid(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional string gmName = 3;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gmname(), target);
  }

  // optional uint32 zoneID = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional uint32 countryID = 5;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->countryid(), target);
  }

  // optional uint32 sceneID = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sceneid(), target);
  }

  // optional string cmd = 7;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cmd(), target);
  }

  // optional string content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stFullGameGmCmdLogDataGmUserCmd)
  return target;
}

int stFullGameGmCmdLogDataGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accID = 1;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accid());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string gmName = 3;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 zoneID = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countryID = 5;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 sceneID = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional string cmd = 7;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // optional string content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFullGameGmCmdLogDataGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFullGameGmCmdLogDataGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFullGameGmCmdLogDataGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFullGameGmCmdLogDataGmUserCmd::MergeFrom(const stFullGameGmCmdLogDataGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFullGameGmCmdLogDataGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFullGameGmCmdLogDataGmUserCmd::CopyFrom(const stFullGameGmCmdLogDataGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFullGameGmCmdLogDataGmUserCmd::IsInitialized() const {

  return true;
}

void stFullGameGmCmdLogDataGmUserCmd::Swap(stFullGameGmCmdLogDataGmUserCmd* other) {
  if (other != this) {
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(gmname_, other->gmname_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(cmd_, other->cmd_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFullGameGmCmdLogDataGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFullGameGmCmdLogDataGmUserCmd_descriptor_;
  metadata.reflection = stFullGameGmCmdLogDataGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestAddQuestionGmUserCmd::kHeadFieldNumber;
const int stRequestAddQuestionGmUserCmd::kDescFieldNumber;
const int stRequestAddQuestionGmUserCmd::kNumFieldNumber;
const int stRequestAddQuestionGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stRequestAddQuestionGmUserCmd::stRequestAddQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestAddQuestionGmUserCmd)
}

void stRequestAddQuestionGmUserCmd::InitAsDefaultInstance() {
  head_ = const_cast< ::Pmd::QuestionBaseData*>(&::Pmd::QuestionBaseData::default_instance());
}

stRequestAddQuestionGmUserCmd::stRequestAddQuestionGmUserCmd(const stRequestAddQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestAddQuestionGmUserCmd)
}

void stRequestAddQuestionGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestAddQuestionGmUserCmd::~stRequestAddQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestAddQuestionGmUserCmd)
  SharedDtor();
}

void stRequestAddQuestionGmUserCmd::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void stRequestAddQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestAddQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestAddQuestionGmUserCmd_descriptor_;
}

const stRequestAddQuestionGmUserCmd& stRequestAddQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestAddQuestionGmUserCmd* stRequestAddQuestionGmUserCmd::default_instance_ = NULL;

stRequestAddQuestionGmUserCmd* stRequestAddQuestionGmUserCmd::New() const {
  return new stRequestAddQuestionGmUserCmd;
}

void stRequestAddQuestionGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_head()) {
      if (head_ != NULL) head_->::Pmd::QuestionBaseData::Clear();
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    num_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestAddQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestAddQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.QuestionBaseData head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestAddQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestAddQuestionGmUserCmd)
  return false;
#undef DO_
}

void stRequestAddQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestAddQuestionGmUserCmd)
  // optional .Pmd.QuestionBaseData head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestAddQuestionGmUserCmd)
}

::google::protobuf::uint8* stRequestAddQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestAddQuestionGmUserCmd)
  // optional .Pmd.QuestionBaseData head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestAddQuestionGmUserCmd)
  return target;
}

int stRequestAddQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.QuestionBaseData head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestAddQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestAddQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestAddQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestAddQuestionGmUserCmd::MergeFrom(const stRequestAddQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::Pmd::QuestionBaseData::MergeFrom(from.head());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestAddQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestAddQuestionGmUserCmd::CopyFrom(const stRequestAddQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestAddQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestAddQuestionGmUserCmd::Swap(stRequestAddQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(desc_, other->desc_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestAddQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestAddQuestionGmUserCmd_descriptor_;
  metadata.reflection = stRequestAddQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnQuestionGmUserCmd::kHeadFieldNumber;
const int stReturnQuestionGmUserCmd::kDescFieldNumber;
const int stReturnQuestionGmUserCmd::kSeqFieldNumber;
const int stReturnQuestionGmUserCmd::kNumFieldNumber;
const int stReturnQuestionGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnQuestionGmUserCmd::stReturnQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnQuestionGmUserCmd)
}

void stReturnQuestionGmUserCmd::InitAsDefaultInstance() {
  head_ = const_cast< ::Pmd::QuestionBaseData*>(&::Pmd::QuestionBaseData::default_instance());
}

stReturnQuestionGmUserCmd::stReturnQuestionGmUserCmd(const stReturnQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnQuestionGmUserCmd)
}

void stReturnQuestionGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnQuestionGmUserCmd::~stReturnQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnQuestionGmUserCmd)
  SharedDtor();
}

void stReturnQuestionGmUserCmd::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void stReturnQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnQuestionGmUserCmd_descriptor_;
}

const stReturnQuestionGmUserCmd& stReturnQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnQuestionGmUserCmd* stReturnQuestionGmUserCmd::default_instance_ = NULL;

stReturnQuestionGmUserCmd* stReturnQuestionGmUserCmd::New() const {
  return new stReturnQuestionGmUserCmd;
}

void stReturnQuestionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnQuestionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(seq_, num_);
    if (has_head()) {
      if (head_ != NULL) head_->::Pmd::QuestionBaseData::Clear();
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.QuestionBaseData head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 3;
      case 3: {
        if (tag == 24) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnQuestionGmUserCmd)
  return false;
#undef DO_
}

void stReturnQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnQuestionGmUserCmd)
  // optional .Pmd.QuestionBaseData head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional uint32 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnQuestionGmUserCmd)
}

::google::protobuf::uint8* stReturnQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnQuestionGmUserCmd)
  // optional .Pmd.QuestionBaseData head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional uint32 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnQuestionGmUserCmd)
  return target;
}

int stReturnQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.QuestionBaseData head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnQuestionGmUserCmd::MergeFrom(const stReturnQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::Pmd::QuestionBaseData::MergeFrom(from.head());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnQuestionGmUserCmd::CopyFrom(const stReturnQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnQuestionGmUserCmd::Swap(stReturnQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(desc_, other->desc_);
    std::swap(seq_, other->seq_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnQuestionGmUserCmd_descriptor_;
  metadata.reflection = stReturnQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSequenceQuestionGmUserCmd::kIdFieldNumber;
const int stSequenceQuestionGmUserCmd::kSeqFieldNumber;
#endif  // !_MSC_VER

stSequenceQuestionGmUserCmd::stSequenceQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stSequenceQuestionGmUserCmd)
}

void stSequenceQuestionGmUserCmd::InitAsDefaultInstance() {
}

stSequenceQuestionGmUserCmd::stSequenceQuestionGmUserCmd(const stSequenceQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stSequenceQuestionGmUserCmd)
}

void stSequenceQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSequenceQuestionGmUserCmd::~stSequenceQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stSequenceQuestionGmUserCmd)
  SharedDtor();
}

void stSequenceQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSequenceQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSequenceQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSequenceQuestionGmUserCmd_descriptor_;
}

const stSequenceQuestionGmUserCmd& stSequenceQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stSequenceQuestionGmUserCmd* stSequenceQuestionGmUserCmd::default_instance_ = NULL;

stSequenceQuestionGmUserCmd* stSequenceQuestionGmUserCmd::New() const {
  return new stSequenceQuestionGmUserCmd;
}

void stSequenceQuestionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stSequenceQuestionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, seq_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSequenceQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stSequenceQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stSequenceQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stSequenceQuestionGmUserCmd)
  return false;
#undef DO_
}

void stSequenceQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stSequenceQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stSequenceQuestionGmUserCmd)
}

::google::protobuf::uint8* stSequenceQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stSequenceQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stSequenceQuestionGmUserCmd)
  return target;
}

int stSequenceQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSequenceQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSequenceQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSequenceQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSequenceQuestionGmUserCmd::MergeFrom(const stSequenceQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSequenceQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSequenceQuestionGmUserCmd::CopyFrom(const stSequenceQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSequenceQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stSequenceQuestionGmUserCmd::Swap(stSequenceQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSequenceQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSequenceQuestionGmUserCmd_descriptor_;
  metadata.reflection = stSequenceQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDeleteQuestionGmUserCmd::kIdFieldNumber;
const int stDeleteQuestionGmUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

stDeleteQuestionGmUserCmd::stDeleteQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stDeleteQuestionGmUserCmd)
}

void stDeleteQuestionGmUserCmd::InitAsDefaultInstance() {
}

stDeleteQuestionGmUserCmd::stDeleteQuestionGmUserCmd(const stDeleteQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stDeleteQuestionGmUserCmd)
}

void stDeleteQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDeleteQuestionGmUserCmd::~stDeleteQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stDeleteQuestionGmUserCmd)
  SharedDtor();
}

void stDeleteQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDeleteQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDeleteQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeleteQuestionGmUserCmd_descriptor_;
}

const stDeleteQuestionGmUserCmd& stDeleteQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stDeleteQuestionGmUserCmd* stDeleteQuestionGmUserCmd::default_instance_ = NULL;

stDeleteQuestionGmUserCmd* stDeleteQuestionGmUserCmd::New() const {
  return new stDeleteQuestionGmUserCmd;
}

void stDeleteQuestionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stDeleteQuestionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDeleteQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stDeleteQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stDeleteQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stDeleteQuestionGmUserCmd)
  return false;
#undef DO_
}

void stDeleteQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stDeleteQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stDeleteQuestionGmUserCmd)
}

::google::protobuf::uint8* stDeleteQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stDeleteQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stDeleteQuestionGmUserCmd)
  return target;
}

int stDeleteQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDeleteQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDeleteQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDeleteQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDeleteQuestionGmUserCmd::MergeFrom(const stDeleteQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDeleteQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDeleteQuestionGmUserCmd::CopyFrom(const stDeleteQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDeleteQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stDeleteQuestionGmUserCmd::Swap(stDeleteQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDeleteQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDeleteQuestionGmUserCmd_descriptor_;
  metadata.reflection = stDeleteQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestQuestionGmUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

stRequestQuestionGmUserCmd::stRequestQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestQuestionGmUserCmd)
}

void stRequestQuestionGmUserCmd::InitAsDefaultInstance() {
}

stRequestQuestionGmUserCmd::stRequestQuestionGmUserCmd(const stRequestQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestQuestionGmUserCmd)
}

void stRequestQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestQuestionGmUserCmd::~stRequestQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestQuestionGmUserCmd)
  SharedDtor();
}

void stRequestQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestQuestionGmUserCmd_descriptor_;
}

const stRequestQuestionGmUserCmd& stRequestQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestQuestionGmUserCmd* stRequestQuestionGmUserCmd::default_instance_ = NULL;

stRequestQuestionGmUserCmd* stRequestQuestionGmUserCmd::New() const {
  return new stRequestQuestionGmUserCmd;
}

void stRequestQuestionGmUserCmd::Clear() {
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestQuestionGmUserCmd)
  return false;
#undef DO_
}

void stRequestQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestQuestionGmUserCmd)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestQuestionGmUserCmd)
}

::google::protobuf::uint8* stRequestQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestQuestionGmUserCmd)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestQuestionGmUserCmd)
  return target;
}

int stRequestQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestQuestionGmUserCmd::MergeFrom(const stRequestQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestQuestionGmUserCmd::CopyFrom(const stRequestQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestQuestionGmUserCmd::Swap(stRequestQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestQuestionGmUserCmd_descriptor_;
  metadata.reflection = stRequestQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestSeqQuestionGmUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

stRequestSeqQuestionGmUserCmd::stRequestSeqQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestSeqQuestionGmUserCmd)
}

void stRequestSeqQuestionGmUserCmd::InitAsDefaultInstance() {
}

stRequestSeqQuestionGmUserCmd::stRequestSeqQuestionGmUserCmd(const stRequestSeqQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestSeqQuestionGmUserCmd)
}

void stRequestSeqQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestSeqQuestionGmUserCmd::~stRequestSeqQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestSeqQuestionGmUserCmd)
  SharedDtor();
}

void stRequestSeqQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestSeqQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestSeqQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestSeqQuestionGmUserCmd_descriptor_;
}

const stRequestSeqQuestionGmUserCmd& stRequestSeqQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestSeqQuestionGmUserCmd* stRequestSeqQuestionGmUserCmd::default_instance_ = NULL;

stRequestSeqQuestionGmUserCmd* stRequestSeqQuestionGmUserCmd::New() const {
  return new stRequestSeqQuestionGmUserCmd;
}

void stRequestSeqQuestionGmUserCmd::Clear() {
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestSeqQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestSeqQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestSeqQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestSeqQuestionGmUserCmd)
  return false;
#undef DO_
}

void stRequestSeqQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestSeqQuestionGmUserCmd)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestSeqQuestionGmUserCmd)
}

::google::protobuf::uint8* stRequestSeqQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestSeqQuestionGmUserCmd)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestSeqQuestionGmUserCmd)
  return target;
}

int stRequestSeqQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestSeqQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestSeqQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestSeqQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestSeqQuestionGmUserCmd::MergeFrom(const stRequestSeqQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestSeqQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestSeqQuestionGmUserCmd::CopyFrom(const stRequestSeqQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestSeqQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestSeqQuestionGmUserCmd::Swap(stRequestSeqQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestSeqQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestSeqQuestionGmUserCmd_descriptor_;
  metadata.reflection = stRequestSeqQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stReturnNoneQuestionGmUserCmd::stReturnNoneQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnNoneQuestionGmUserCmd)
}

void stReturnNoneQuestionGmUserCmd::InitAsDefaultInstance() {
}

stReturnNoneQuestionGmUserCmd::stReturnNoneQuestionGmUserCmd(const stReturnNoneQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnNoneQuestionGmUserCmd)
}

void stReturnNoneQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnNoneQuestionGmUserCmd::~stReturnNoneQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnNoneQuestionGmUserCmd)
  SharedDtor();
}

void stReturnNoneQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnNoneQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnNoneQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnNoneQuestionGmUserCmd_descriptor_;
}

const stReturnNoneQuestionGmUserCmd& stReturnNoneQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnNoneQuestionGmUserCmd* stReturnNoneQuestionGmUserCmd::default_instance_ = NULL;

stReturnNoneQuestionGmUserCmd* stReturnNoneQuestionGmUserCmd::New() const {
  return new stReturnNoneQuestionGmUserCmd;
}

void stReturnNoneQuestionGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnNoneQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnNoneQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnNoneQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnNoneQuestionGmUserCmd)
  return false;
#undef DO_
}

void stReturnNoneQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnNoneQuestionGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnNoneQuestionGmUserCmd)
}

::google::protobuf::uint8* stReturnNoneQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnNoneQuestionGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnNoneQuestionGmUserCmd)
  return target;
}

int stReturnNoneQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnNoneQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnNoneQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnNoneQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnNoneQuestionGmUserCmd::MergeFrom(const stReturnNoneQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnNoneQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnNoneQuestionGmUserCmd::CopyFrom(const stReturnNoneQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnNoneQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnNoneQuestionGmUserCmd::Swap(stReturnNoneQuestionGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnNoneQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnNoneQuestionGmUserCmd_descriptor_;
  metadata.reflection = stReturnNoneQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stUserCmdForwardGmUserCmd::kNumFieldNumber;
const int stUserCmdForwardGmUserCmd::kUseridFieldNumber;
const int stUserCmdForwardGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stUserCmdForwardGmUserCmd::stUserCmdForwardGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stUserCmdForwardGmUserCmd)
}

void stUserCmdForwardGmUserCmd::InitAsDefaultInstance() {
}

stUserCmdForwardGmUserCmd::stUserCmdForwardGmUserCmd(const stUserCmdForwardGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stUserCmdForwardGmUserCmd)
}

void stUserCmdForwardGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = 0u;
  userid_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserCmdForwardGmUserCmd::~stUserCmdForwardGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stUserCmdForwardGmUserCmd)
  SharedDtor();
}

void stUserCmdForwardGmUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stUserCmdForwardGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserCmdForwardGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserCmdForwardGmUserCmd_descriptor_;
}

const stUserCmdForwardGmUserCmd& stUserCmdForwardGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stUserCmdForwardGmUserCmd* stUserCmdForwardGmUserCmd::default_instance_ = NULL;

stUserCmdForwardGmUserCmd* stUserCmdForwardGmUserCmd::New() const {
  return new stUserCmdForwardGmUserCmd;
}

void stUserCmdForwardGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stUserCmdForwardGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(num_, userid_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserCmdForwardGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stUserCmdForwardGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stUserCmdForwardGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stUserCmdForwardGmUserCmd)
  return false;
#undef DO_
}

void stUserCmdForwardGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stUserCmdForwardGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stUserCmdForwardGmUserCmd)
}

::google::protobuf::uint8* stUserCmdForwardGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stUserCmdForwardGmUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stUserCmdForwardGmUserCmd)
  return target;
}

int stUserCmdForwardGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserCmdForwardGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserCmdForwardGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserCmdForwardGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserCmdForwardGmUserCmd::MergeFrom(const stUserCmdForwardGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserCmdForwardGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserCmdForwardGmUserCmd::CopyFrom(const stUserCmdForwardGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserCmdForwardGmUserCmd::IsInitialized() const {

  return true;
}

void stUserCmdForwardGmUserCmd::Swap(stUserCmdForwardGmUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(userid_, other->userid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserCmdForwardGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserCmdForwardGmUserCmd_descriptor_;
  metadata.reflection = stUserCmdForwardGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stProcessQuestionGmUserCmd::kIdFieldNumber;
const int stProcessQuestionGmUserCmd::kGmidFieldNumber;
#endif  // !_MSC_VER

stProcessQuestionGmUserCmd::stProcessQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stProcessQuestionGmUserCmd)
}

void stProcessQuestionGmUserCmd::InitAsDefaultInstance() {
}

stProcessQuestionGmUserCmd::stProcessQuestionGmUserCmd(const stProcessQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stProcessQuestionGmUserCmd)
}

void stProcessQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stProcessQuestionGmUserCmd::~stProcessQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stProcessQuestionGmUserCmd)
  SharedDtor();
}

void stProcessQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stProcessQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stProcessQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stProcessQuestionGmUserCmd_descriptor_;
}

const stProcessQuestionGmUserCmd& stProcessQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stProcessQuestionGmUserCmd* stProcessQuestionGmUserCmd::default_instance_ = NULL;

stProcessQuestionGmUserCmd* stProcessQuestionGmUserCmd::New() const {
  return new stProcessQuestionGmUserCmd;
}

void stProcessQuestionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stProcessQuestionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, gmid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stProcessQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stProcessQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 2;
      case 2: {
        if (tag == 16) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stProcessQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stProcessQuestionGmUserCmd)
  return false;
#undef DO_
}

void stProcessQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stProcessQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stProcessQuestionGmUserCmd)
}

::google::protobuf::uint8* stProcessQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stProcessQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 gmid = 2;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stProcessQuestionGmUserCmd)
  return target;
}

int stProcessQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 gmid = 2;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stProcessQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stProcessQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stProcessQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stProcessQuestionGmUserCmd::MergeFrom(const stProcessQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stProcessQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stProcessQuestionGmUserCmd::CopyFrom(const stProcessQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stProcessQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stProcessQuestionGmUserCmd::Swap(stProcessQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stProcessQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stProcessQuestionGmUserCmd_descriptor_;
  metadata.reflection = stProcessQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGMToolBeginQuestionGmUserCmd::kGmidFieldNumber;
#endif  // !_MSC_VER

stGMToolBeginQuestionGmUserCmd::stGMToolBeginQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stGMToolBeginQuestionGmUserCmd)
}

void stGMToolBeginQuestionGmUserCmd::InitAsDefaultInstance() {
}

stGMToolBeginQuestionGmUserCmd::stGMToolBeginQuestionGmUserCmd(const stGMToolBeginQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stGMToolBeginQuestionGmUserCmd)
}

void stGMToolBeginQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGMToolBeginQuestionGmUserCmd::~stGMToolBeginQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stGMToolBeginQuestionGmUserCmd)
  SharedDtor();
}

void stGMToolBeginQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGMToolBeginQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGMToolBeginQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGMToolBeginQuestionGmUserCmd_descriptor_;
}

const stGMToolBeginQuestionGmUserCmd& stGMToolBeginQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stGMToolBeginQuestionGmUserCmd* stGMToolBeginQuestionGmUserCmd::default_instance_ = NULL;

stGMToolBeginQuestionGmUserCmd* stGMToolBeginQuestionGmUserCmd::New() const {
  return new stGMToolBeginQuestionGmUserCmd;
}

void stGMToolBeginQuestionGmUserCmd::Clear() {
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGMToolBeginQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stGMToolBeginQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stGMToolBeginQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stGMToolBeginQuestionGmUserCmd)
  return false;
#undef DO_
}

void stGMToolBeginQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stGMToolBeginQuestionGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stGMToolBeginQuestionGmUserCmd)
}

::google::protobuf::uint8* stGMToolBeginQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stGMToolBeginQuestionGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stGMToolBeginQuestionGmUserCmd)
  return target;
}

int stGMToolBeginQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGMToolBeginQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGMToolBeginQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGMToolBeginQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGMToolBeginQuestionGmUserCmd::MergeFrom(const stGMToolBeginQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGMToolBeginQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGMToolBeginQuestionGmUserCmd::CopyFrom(const stGMToolBeginQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGMToolBeginQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stGMToolBeginQuestionGmUserCmd::Swap(stGMToolBeginQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGMToolBeginQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGMToolBeginQuestionGmUserCmd_descriptor_;
  metadata.reflection = stGMToolBeginQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGMToolEndQuestionGmUserCmd::kGmidFieldNumber;
#endif  // !_MSC_VER

stGMToolEndQuestionGmUserCmd::stGMToolEndQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stGMToolEndQuestionGmUserCmd)
}

void stGMToolEndQuestionGmUserCmd::InitAsDefaultInstance() {
}

stGMToolEndQuestionGmUserCmd::stGMToolEndQuestionGmUserCmd(const stGMToolEndQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stGMToolEndQuestionGmUserCmd)
}

void stGMToolEndQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGMToolEndQuestionGmUserCmd::~stGMToolEndQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stGMToolEndQuestionGmUserCmd)
  SharedDtor();
}

void stGMToolEndQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGMToolEndQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGMToolEndQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGMToolEndQuestionGmUserCmd_descriptor_;
}

const stGMToolEndQuestionGmUserCmd& stGMToolEndQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stGMToolEndQuestionGmUserCmd* stGMToolEndQuestionGmUserCmd::default_instance_ = NULL;

stGMToolEndQuestionGmUserCmd* stGMToolEndQuestionGmUserCmd::New() const {
  return new stGMToolEndQuestionGmUserCmd;
}

void stGMToolEndQuestionGmUserCmd::Clear() {
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGMToolEndQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stGMToolEndQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stGMToolEndQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stGMToolEndQuestionGmUserCmd)
  return false;
#undef DO_
}

void stGMToolEndQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stGMToolEndQuestionGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stGMToolEndQuestionGmUserCmd)
}

::google::protobuf::uint8* stGMToolEndQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stGMToolEndQuestionGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stGMToolEndQuestionGmUserCmd)
  return target;
}

int stGMToolEndQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGMToolEndQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGMToolEndQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGMToolEndQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGMToolEndQuestionGmUserCmd::MergeFrom(const stGMToolEndQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGMToolEndQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGMToolEndQuestionGmUserCmd::CopyFrom(const stGMToolEndQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGMToolEndQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stGMToolEndQuestionGmUserCmd::Swap(stGMToolEndQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGMToolEndQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGMToolEndQuestionGmUserCmd_descriptor_;
  metadata.reflection = stGMToolEndQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDisableGMChatInputGmUserCmd::kGmidFieldNumber;
const int stDisableGMChatInputGmUserCmd::kGmnameFieldNumber;
const int stDisableGMChatInputGmUserCmd::kRolenameFieldNumber;
const int stDisableGMChatInputGmUserCmd::kIdFieldNumber;
#endif  // !_MSC_VER

stDisableGMChatInputGmUserCmd::stDisableGMChatInputGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stDisableGMChatInputGmUserCmd)
}

void stDisableGMChatInputGmUserCmd::InitAsDefaultInstance() {
}

stDisableGMChatInputGmUserCmd::stDisableGMChatInputGmUserCmd(const stDisableGMChatInputGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stDisableGMChatInputGmUserCmd)
}

void stDisableGMChatInputGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDisableGMChatInputGmUserCmd::~stDisableGMChatInputGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stDisableGMChatInputGmUserCmd)
  SharedDtor();
}

void stDisableGMChatInputGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (rolename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void stDisableGMChatInputGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDisableGMChatInputGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDisableGMChatInputGmUserCmd_descriptor_;
}

const stDisableGMChatInputGmUserCmd& stDisableGMChatInputGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stDisableGMChatInputGmUserCmd* stDisableGMChatInputGmUserCmd::default_instance_ = NULL;

stDisableGMChatInputGmUserCmd* stDisableGMChatInputGmUserCmd::New() const {
  return new stDisableGMChatInputGmUserCmd;
}

void stDisableGMChatInputGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stDisableGMChatInputGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gmid_, id_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rolename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDisableGMChatInputGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stDisableGMChatInputGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gmname;
        break;
      }

      // optional string gmname = 2;
      case 2: {
        if (tag == 18) {
         parse_gmname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rolename;
        break;
      }

      // optional string rolename = 3;
      case 3: {
        if (tag == 26) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rolename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stDisableGMChatInputGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stDisableGMChatInputGmUserCmd)
  return false;
#undef DO_
}

void stDisableGMChatInputGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stDisableGMChatInputGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // optional string gmname = 2;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gmname(), output);
  }

  // optional string rolename = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rolename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rolename(), output);
  }

  // optional uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stDisableGMChatInputGmUserCmd)
}

::google::protobuf::uint8* stDisableGMChatInputGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stDisableGMChatInputGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // optional string gmname = 2;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gmname(), target);
  }

  // optional string rolename = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rolename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }

  // optional uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stDisableGMChatInputGmUserCmd)
  return target;
}

int stDisableGMChatInputGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional string gmname = 2;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional string rolename = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDisableGMChatInputGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDisableGMChatInputGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDisableGMChatInputGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDisableGMChatInputGmUserCmd::MergeFrom(const stDisableGMChatInputGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDisableGMChatInputGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDisableGMChatInputGmUserCmd::CopyFrom(const stDisableGMChatInputGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDisableGMChatInputGmUserCmd::IsInitialized() const {

  return true;
}

void stDisableGMChatInputGmUserCmd::Swap(stDisableGMChatInputGmUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(gmname_, other->gmname_);
    std::swap(rolename_, other->rolename_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDisableGMChatInputGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDisableGMChatInputGmUserCmd_descriptor_;
  metadata.reflection = stDisableGMChatInputGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDeleteQuestionByGmUserCmd::kIdFieldNumber;
const int stDeleteQuestionByGmUserCmd::kUseridFieldNumber;
const int stDeleteQuestionByGmUserCmd::kGmidFieldNumber;
#endif  // !_MSC_VER

stDeleteQuestionByGmUserCmd::stDeleteQuestionByGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stDeleteQuestionByGmUserCmd)
}

void stDeleteQuestionByGmUserCmd::InitAsDefaultInstance() {
}

stDeleteQuestionByGmUserCmd::stDeleteQuestionByGmUserCmd(const stDeleteQuestionByGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stDeleteQuestionByGmUserCmd)
}

void stDeleteQuestionByGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  userid_ = 0u;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDeleteQuestionByGmUserCmd::~stDeleteQuestionByGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stDeleteQuestionByGmUserCmd)
  SharedDtor();
}

void stDeleteQuestionByGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDeleteQuestionByGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDeleteQuestionByGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeleteQuestionByGmUserCmd_descriptor_;
}

const stDeleteQuestionByGmUserCmd& stDeleteQuestionByGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stDeleteQuestionByGmUserCmd* stDeleteQuestionByGmUserCmd::default_instance_ = NULL;

stDeleteQuestionByGmUserCmd* stDeleteQuestionByGmUserCmd::New() const {
  return new stDeleteQuestionByGmUserCmd;
}

void stDeleteQuestionByGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stDeleteQuestionByGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, gmid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDeleteQuestionByGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stDeleteQuestionByGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 3;
      case 3: {
        if (tag == 24) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stDeleteQuestionByGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stDeleteQuestionByGmUserCmd)
  return false;
#undef DO_
}

void stDeleteQuestionByGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stDeleteQuestionByGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stDeleteQuestionByGmUserCmd)
}

::google::protobuf::uint8* stDeleteQuestionByGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stDeleteQuestionByGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  // optional uint32 gmid = 3;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stDeleteQuestionByGmUserCmd)
  return target;
}

int stDeleteQuestionByGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional uint32 gmid = 3;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDeleteQuestionByGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDeleteQuestionByGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDeleteQuestionByGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDeleteQuestionByGmUserCmd::MergeFrom(const stDeleteQuestionByGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDeleteQuestionByGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDeleteQuestionByGmUserCmd::CopyFrom(const stDeleteQuestionByGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDeleteQuestionByGmUserCmd::IsInitialized() const {

  return true;
}

void stDeleteQuestionByGmUserCmd::Swap(stDeleteQuestionByGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDeleteQuestionByGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDeleteQuestionByGmUserCmd_descriptor_;
  metadata.reflection = stDeleteQuestionByGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stQuestionOverGmUserCmd::kReasonFieldNumber;
#endif  // !_MSC_VER

stQuestionOverGmUserCmd::stQuestionOverGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stQuestionOverGmUserCmd)
}

void stQuestionOverGmUserCmd::InitAsDefaultInstance() {
}

stQuestionOverGmUserCmd::stQuestionOverGmUserCmd(const stQuestionOverGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stQuestionOverGmUserCmd)
}

void stQuestionOverGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQuestionOverGmUserCmd::~stQuestionOverGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stQuestionOverGmUserCmd)
  SharedDtor();
}

void stQuestionOverGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQuestionOverGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQuestionOverGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuestionOverGmUserCmd_descriptor_;
}

const stQuestionOverGmUserCmd& stQuestionOverGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stQuestionOverGmUserCmd* stQuestionOverGmUserCmd::default_instance_ = NULL;

stQuestionOverGmUserCmd* stQuestionOverGmUserCmd::New() const {
  return new stQuestionOverGmUserCmd;
}

void stQuestionOverGmUserCmd::Clear() {
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQuestionOverGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stQuestionOverGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reason = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stQuestionOverGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stQuestionOverGmUserCmd)
  return false;
#undef DO_
}

void stQuestionOverGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stQuestionOverGmUserCmd)
  // optional uint32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stQuestionOverGmUserCmd)
}

::google::protobuf::uint8* stQuestionOverGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stQuestionOverGmUserCmd)
  // optional uint32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stQuestionOverGmUserCmd)
  return target;
}

int stQuestionOverGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQuestionOverGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQuestionOverGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQuestionOverGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQuestionOverGmUserCmd::MergeFrom(const stQuestionOverGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQuestionOverGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQuestionOverGmUserCmd::CopyFrom(const stQuestionOverGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQuestionOverGmUserCmd::IsInitialized() const {

  return true;
}

void stQuestionOverGmUserCmd::Swap(stQuestionOverGmUserCmd* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQuestionOverGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQuestionOverGmUserCmd_descriptor_;
  metadata.reflection = stQuestionOverGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stQueryQuestionLimitGmUserCmd::kGmidFieldNumber;
#endif  // !_MSC_VER

stQueryQuestionLimitGmUserCmd::stQueryQuestionLimitGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stQueryQuestionLimitGmUserCmd)
}

void stQueryQuestionLimitGmUserCmd::InitAsDefaultInstance() {
}

stQueryQuestionLimitGmUserCmd::stQueryQuestionLimitGmUserCmd(const stQueryQuestionLimitGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stQueryQuestionLimitGmUserCmd)
}

void stQueryQuestionLimitGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQueryQuestionLimitGmUserCmd::~stQueryQuestionLimitGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stQueryQuestionLimitGmUserCmd)
  SharedDtor();
}

void stQueryQuestionLimitGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQueryQuestionLimitGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQueryQuestionLimitGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryQuestionLimitGmUserCmd_descriptor_;
}

const stQueryQuestionLimitGmUserCmd& stQueryQuestionLimitGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stQueryQuestionLimitGmUserCmd* stQueryQuestionLimitGmUserCmd::default_instance_ = NULL;

stQueryQuestionLimitGmUserCmd* stQueryQuestionLimitGmUserCmd::New() const {
  return new stQueryQuestionLimitGmUserCmd;
}

void stQueryQuestionLimitGmUserCmd::Clear() {
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQueryQuestionLimitGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stQueryQuestionLimitGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stQueryQuestionLimitGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stQueryQuestionLimitGmUserCmd)
  return false;
#undef DO_
}

void stQueryQuestionLimitGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stQueryQuestionLimitGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stQueryQuestionLimitGmUserCmd)
}

::google::protobuf::uint8* stQueryQuestionLimitGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stQueryQuestionLimitGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stQueryQuestionLimitGmUserCmd)
  return target;
}

int stQueryQuestionLimitGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQueryQuestionLimitGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQueryQuestionLimitGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQueryQuestionLimitGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQueryQuestionLimitGmUserCmd::MergeFrom(const stQueryQuestionLimitGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQueryQuestionLimitGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQueryQuestionLimitGmUserCmd::CopyFrom(const stQueryQuestionLimitGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQueryQuestionLimitGmUserCmd::IsInitialized() const {

  return true;
}

void stQueryQuestionLimitGmUserCmd::Swap(stQueryQuestionLimitGmUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQueryQuestionLimitGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQueryQuestionLimitGmUserCmd_descriptor_;
  metadata.reflection = stQueryQuestionLimitGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnQuestionLimitGmUserCmd::kMaxFieldNumber;
const int stReturnQuestionLimitGmUserCmd::kMaxWaitTimeFieldNumber;
const int stReturnQuestionLimitGmUserCmd::kNumFieldNumber;
const int stReturnQuestionLimitGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnQuestionLimitGmUserCmd::stReturnQuestionLimitGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnQuestionLimitGmUserCmd)
}

void stReturnQuestionLimitGmUserCmd::InitAsDefaultInstance() {
}

stReturnQuestionLimitGmUserCmd::stReturnQuestionLimitGmUserCmd(const stReturnQuestionLimitGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnQuestionLimitGmUserCmd)
}

void stReturnQuestionLimitGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_ = 0u;
  maxwaittime_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnQuestionLimitGmUserCmd::~stReturnQuestionLimitGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnQuestionLimitGmUserCmd)
  SharedDtor();
}

void stReturnQuestionLimitGmUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stReturnQuestionLimitGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnQuestionLimitGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnQuestionLimitGmUserCmd_descriptor_;
}

const stReturnQuestionLimitGmUserCmd& stReturnQuestionLimitGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnQuestionLimitGmUserCmd* stReturnQuestionLimitGmUserCmd::default_instance_ = NULL;

stReturnQuestionLimitGmUserCmd* stReturnQuestionLimitGmUserCmd::New() const {
  return new stReturnQuestionLimitGmUserCmd;
}

void stReturnQuestionLimitGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnQuestionLimitGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(max_, maxwaittime_);
    num_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnQuestionLimitGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnQuestionLimitGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxWaitTime;
        break;
      }

      // optional uint32 maxWaitTime = 2;
      case 2: {
        if (tag == 16) {
         parse_maxWaitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxwaittime_)));
          set_has_maxwaittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnQuestionLimitGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnQuestionLimitGmUserCmd)
  return false;
#undef DO_
}

void stReturnQuestionLimitGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnQuestionLimitGmUserCmd)
  // optional uint32 max = 1;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max(), output);
  }

  // optional uint32 maxWaitTime = 2;
  if (has_maxwaittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxwaittime(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnQuestionLimitGmUserCmd)
}

::google::protobuf::uint8* stReturnQuestionLimitGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnQuestionLimitGmUserCmd)
  // optional uint32 max = 1;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max(), target);
  }

  // optional uint32 maxWaitTime = 2;
  if (has_maxwaittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxwaittime(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnQuestionLimitGmUserCmd)
  return target;
}

int stReturnQuestionLimitGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max = 1;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // optional uint32 maxWaitTime = 2;
    if (has_maxwaittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxwaittime());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnQuestionLimitGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnQuestionLimitGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnQuestionLimitGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnQuestionLimitGmUserCmd::MergeFrom(const stReturnQuestionLimitGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_maxwaittime()) {
      set_maxwaittime(from.maxwaittime());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnQuestionLimitGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnQuestionLimitGmUserCmd::CopyFrom(const stReturnQuestionLimitGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnQuestionLimitGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnQuestionLimitGmUserCmd::Swap(stReturnQuestionLimitGmUserCmd* other) {
  if (other != this) {
    std::swap(max_, other->max_);
    std::swap(maxwaittime_, other->maxwaittime_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnQuestionLimitGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnQuestionLimitGmUserCmd_descriptor_;
  metadata.reflection = stReturnQuestionLimitGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stResetQuestionLimitGmUserCmd::kGmidFieldNumber;
const int stResetQuestionLimitGmUserCmd::kMaxFieldNumber;
const int stResetQuestionLimitGmUserCmd::kMaxWaitTimeFieldNumber;
const int stResetQuestionLimitGmUserCmd::kNumFieldNumber;
const int stResetQuestionLimitGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stResetQuestionLimitGmUserCmd::stResetQuestionLimitGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stResetQuestionLimitGmUserCmd)
}

void stResetQuestionLimitGmUserCmd::InitAsDefaultInstance() {
}

stResetQuestionLimitGmUserCmd::stResetQuestionLimitGmUserCmd(const stResetQuestionLimitGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stResetQuestionLimitGmUserCmd)
}

void stResetQuestionLimitGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  max_ = 0u;
  maxwaittime_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetQuestionLimitGmUserCmd::~stResetQuestionLimitGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stResetQuestionLimitGmUserCmd)
  SharedDtor();
}

void stResetQuestionLimitGmUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stResetQuestionLimitGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetQuestionLimitGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetQuestionLimitGmUserCmd_descriptor_;
}

const stResetQuestionLimitGmUserCmd& stResetQuestionLimitGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stResetQuestionLimitGmUserCmd* stResetQuestionLimitGmUserCmd::default_instance_ = NULL;

stResetQuestionLimitGmUserCmd* stResetQuestionLimitGmUserCmd::New() const {
  return new stResetQuestionLimitGmUserCmd;
}

void stResetQuestionLimitGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stResetQuestionLimitGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gmid_, num_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetQuestionLimitGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stResetQuestionLimitGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max;
        break;
      }

      // optional uint32 max = 2;
      case 2: {
        if (tag == 16) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxWaitTime;
        break;
      }

      // optional uint32 maxWaitTime = 3;
      case 3: {
        if (tag == 24) {
         parse_maxWaitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxwaittime_)));
          set_has_maxwaittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stResetQuestionLimitGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stResetQuestionLimitGmUserCmd)
  return false;
#undef DO_
}

void stResetQuestionLimitGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stResetQuestionLimitGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // optional uint32 max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max(), output);
  }

  // optional uint32 maxWaitTime = 3;
  if (has_maxwaittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxwaittime(), output);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stResetQuestionLimitGmUserCmd)
}

::google::protobuf::uint8* stResetQuestionLimitGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stResetQuestionLimitGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // optional uint32 max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max(), target);
  }

  // optional uint32 maxWaitTime = 3;
  if (has_maxwaittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxwaittime(), target);
  }

  // optional uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stResetQuestionLimitGmUserCmd)
  return target;
}

int stResetQuestionLimitGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // optional uint32 maxWaitTime = 3;
    if (has_maxwaittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxwaittime());
    }

    // optional uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetQuestionLimitGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetQuestionLimitGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetQuestionLimitGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetQuestionLimitGmUserCmd::MergeFrom(const stResetQuestionLimitGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_maxwaittime()) {
      set_maxwaittime(from.maxwaittime());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetQuestionLimitGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetQuestionLimitGmUserCmd::CopyFrom(const stResetQuestionLimitGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetQuestionLimitGmUserCmd::IsInitialized() const {

  return true;
}

void stResetQuestionLimitGmUserCmd::Swap(stResetQuestionLimitGmUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(max_, other->max_);
    std::swap(maxwaittime_, other->maxwaittime_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetQuestionLimitGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetQuestionLimitGmUserCmd_descriptor_;
  metadata.reflection = stResetQuestionLimitGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stBroadcastToWorldGmUserCmd::kNameFieldNumber;
const int stBroadcastToWorldGmUserCmd::kZoneidFieldNumber;
const int stBroadcastToWorldGmUserCmd::kCountryidFieldNumber;
const int stBroadcastToWorldGmUserCmd::kSceneidFieldNumber;
const int stBroadcastToWorldGmUserCmd::kProvinceidFieldNumber;
const int stBroadcastToWorldGmUserCmd::kCityidFieldNumber;
const int stBroadcastToWorldGmUserCmd::kChatTypeFieldNumber;
const int stBroadcastToWorldGmUserCmd::kChatposFieldNumber;
const int stBroadcastToWorldGmUserCmd::kColorFieldNumber;
const int stBroadcastToWorldGmUserCmd::kNumFieldNumber;
const int stBroadcastToWorldGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stBroadcastToWorldGmUserCmd::stBroadcastToWorldGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stBroadcastToWorldGmUserCmd)
}

void stBroadcastToWorldGmUserCmd::InitAsDefaultInstance() {
}

stBroadcastToWorldGmUserCmd::stBroadcastToWorldGmUserCmd(const stBroadcastToWorldGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stBroadcastToWorldGmUserCmd)
}

void stBroadcastToWorldGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  countryid_ = 0u;
  sceneid_ = 0u;
  provinceid_ = 0u;
  cityid_ = 0u;
  chattype_ = 0u;
  chatpos_ = 0u;
  color_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastToWorldGmUserCmd::~stBroadcastToWorldGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stBroadcastToWorldGmUserCmd)
  SharedDtor();
}

void stBroadcastToWorldGmUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stBroadcastToWorldGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastToWorldGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastToWorldGmUserCmd_descriptor_;
}

const stBroadcastToWorldGmUserCmd& stBroadcastToWorldGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stBroadcastToWorldGmUserCmd* stBroadcastToWorldGmUserCmd::default_instance_ = NULL;

stBroadcastToWorldGmUserCmd* stBroadcastToWorldGmUserCmd::New() const {
  return new stBroadcastToWorldGmUserCmd;
}

void stBroadcastToWorldGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stBroadcastToWorldGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(zoneid_, chatpos_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    color_ = 0u;
    num_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastToWorldGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stBroadcastToWorldGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 3;
      case 3: {
        if (tag == 24) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4;
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_provinceid;
        break;
      }

      // optional uint32 provinceid = 5;
      case 5: {
        if (tag == 40) {
         parse_provinceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &provinceid_)));
          set_has_provinceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cityid;
        break;
      }

      // optional uint32 cityid = 6;
      case 6: {
        if (tag == 48) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_chatType;
        break;
      }

      // optional uint32 chatType = 7;
      case 7: {
        if (tag == 56) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_chatpos;
        break;
      }

      // optional uint32 chatpos = 8;
      case 8: {
        if (tag == 64) {
         parse_chatpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatpos_)));
          set_has_chatpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_color;
        break;
      }

      // optional uint32 color = 9;
      case 9: {
        if (tag == 72) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num;
        break;
      }

      // optional uint32 num = 10;
      case 10: {
        if (tag == 80) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data;
        break;
      }

      // optional bytes data = 11;
      case 11: {
        if (tag == 90) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stBroadcastToWorldGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stBroadcastToWorldGmUserCmd)
  return false;
#undef DO_
}

void stBroadcastToWorldGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stBroadcastToWorldGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 countryid = 3;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->countryid(), output);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional uint32 provinceid = 5;
  if (has_provinceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->provinceid(), output);
  }

  // optional uint32 cityid = 6;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cityid(), output);
  }

  // optional uint32 chatType = 7;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->chattype(), output);
  }

  // optional uint32 chatpos = 8;
  if (has_chatpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->chatpos(), output);
  }

  // optional uint32 color = 9;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->color(), output);
  }

  // optional uint32 num = 10;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num(), output);
  }

  // optional bytes data = 11;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stBroadcastToWorldGmUserCmd)
}

::google::protobuf::uint8* stBroadcastToWorldGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stBroadcastToWorldGmUserCmd)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 countryid = 3;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->countryid(), target);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional uint32 provinceid = 5;
  if (has_provinceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->provinceid(), target);
  }

  // optional uint32 cityid = 6;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cityid(), target);
  }

  // optional uint32 chatType = 7;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->chattype(), target);
  }

  // optional uint32 chatpos = 8;
  if (has_chatpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->chatpos(), target);
  }

  // optional uint32 color = 9;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->color(), target);
  }

  // optional uint32 num = 10;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num(), target);
  }

  // optional bytes data = 11;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stBroadcastToWorldGmUserCmd)
  return target;
}

int stBroadcastToWorldGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countryid = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 sceneid = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 provinceid = 5;
    if (has_provinceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->provinceid());
    }

    // optional uint32 cityid = 6;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 chatType = 7;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chattype());
    }

    // optional uint32 chatpos = 8;
    if (has_chatpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 color = 9;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 num = 10;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 11;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastToWorldGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastToWorldGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastToWorldGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastToWorldGmUserCmd::MergeFrom(const stBroadcastToWorldGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_provinceid()) {
      set_provinceid(from.provinceid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_chatpos()) {
      set_chatpos(from.chatpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastToWorldGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastToWorldGmUserCmd::CopyFrom(const stBroadcastToWorldGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastToWorldGmUserCmd::IsInitialized() const {

  return true;
}

void stBroadcastToWorldGmUserCmd::Swap(stBroadcastToWorldGmUserCmd* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(provinceid_, other->provinceid_);
    std::swap(cityid_, other->cityid_);
    std::swap(chattype_, other->chattype_);
    std::swap(chatpos_, other->chatpos_);
    std::swap(color_, other->color_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastToWorldGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastToWorldGmUserCmd_descriptor_;
  metadata.reflection = stBroadcastToWorldGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSetActivityNoteGmUserCmd::kGmnameFieldNumber;
const int stSetActivityNoteGmUserCmd::kZoneidFieldNumber;
const int stSetActivityNoteGmUserCmd::kNumFieldNumber;
const int stSetActivityNoteGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stSetActivityNoteGmUserCmd::stSetActivityNoteGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stSetActivityNoteGmUserCmd)
}

void stSetActivityNoteGmUserCmd::InitAsDefaultInstance() {
}

stSetActivityNoteGmUserCmd::stSetActivityNoteGmUserCmd(const stSetActivityNoteGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stSetActivityNoteGmUserCmd)
}

void stSetActivityNoteGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetActivityNoteGmUserCmd::~stSetActivityNoteGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stSetActivityNoteGmUserCmd)
  SharedDtor();
}

void stSetActivityNoteGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stSetActivityNoteGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetActivityNoteGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetActivityNoteGmUserCmd_descriptor_;
}

const stSetActivityNoteGmUserCmd& stSetActivityNoteGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stSetActivityNoteGmUserCmd* stSetActivityNoteGmUserCmd::default_instance_ = NULL;

stSetActivityNoteGmUserCmd* stSetActivityNoteGmUserCmd::New() const {
  return new stSetActivityNoteGmUserCmd;
}

void stSetActivityNoteGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stSetActivityNoteGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(zoneid_, num_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetActivityNoteGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stSetActivityNoteGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gmname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stSetActivityNoteGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stSetActivityNoteGmUserCmd)
  return false;
#undef DO_
}

void stSetActivityNoteGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stSetActivityNoteGmUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gmname(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stSetActivityNoteGmUserCmd)
}

::google::protobuf::uint8* stSetActivityNoteGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stSetActivityNoteGmUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gmname(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stSetActivityNoteGmUserCmd)
  return target;
}

int stSetActivityNoteGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gmname = 1;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetActivityNoteGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetActivityNoteGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetActivityNoteGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetActivityNoteGmUserCmd::MergeFrom(const stSetActivityNoteGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetActivityNoteGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetActivityNoteGmUserCmd::CopyFrom(const stSetActivityNoteGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetActivityNoteGmUserCmd::IsInitialized() const {

  return true;
}

void stSetActivityNoteGmUserCmd::Swap(stSetActivityNoteGmUserCmd* other) {
  if (other != this) {
    std::swap(gmname_, other->gmname_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetActivityNoteGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetActivityNoteGmUserCmd_descriptor_;
  metadata.reflection = stSetActivityNoteGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stRequestRefreshUserQuestionGmUserCmd::stRequestRefreshUserQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestRefreshUserQuestionGmUserCmd)
}

void stRequestRefreshUserQuestionGmUserCmd::InitAsDefaultInstance() {
}

stRequestRefreshUserQuestionGmUserCmd::stRequestRefreshUserQuestionGmUserCmd(const stRequestRefreshUserQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestRefreshUserQuestionGmUserCmd)
}

void stRequestRefreshUserQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestRefreshUserQuestionGmUserCmd::~stRequestRefreshUserQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestRefreshUserQuestionGmUserCmd)
  SharedDtor();
}

void stRequestRefreshUserQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestRefreshUserQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestRefreshUserQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestRefreshUserQuestionGmUserCmd_descriptor_;
}

const stRequestRefreshUserQuestionGmUserCmd& stRequestRefreshUserQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestRefreshUserQuestionGmUserCmd* stRequestRefreshUserQuestionGmUserCmd::default_instance_ = NULL;

stRequestRefreshUserQuestionGmUserCmd* stRequestRefreshUserQuestionGmUserCmd::New() const {
  return new stRequestRefreshUserQuestionGmUserCmd;
}

void stRequestRefreshUserQuestionGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestRefreshUserQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestRefreshUserQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestRefreshUserQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestRefreshUserQuestionGmUserCmd)
  return false;
#undef DO_
}

void stRequestRefreshUserQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestRefreshUserQuestionGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestRefreshUserQuestionGmUserCmd)
}

::google::protobuf::uint8* stRequestRefreshUserQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestRefreshUserQuestionGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestRefreshUserQuestionGmUserCmd)
  return target;
}

int stRequestRefreshUserQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestRefreshUserQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestRefreshUserQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestRefreshUserQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestRefreshUserQuestionGmUserCmd::MergeFrom(const stRequestRefreshUserQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestRefreshUserQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestRefreshUserQuestionGmUserCmd::CopyFrom(const stRequestRefreshUserQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestRefreshUserQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestRefreshUserQuestionGmUserCmd::Swap(stRequestRefreshUserQuestionGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestRefreshUserQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestRefreshUserQuestionGmUserCmd_descriptor_;
  metadata.reflection = stRequestRefreshUserQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestSetUserGoldInGmUserCmd::kSzUserNameFieldNumber;
const int stRequestSetUserGoldInGmUserCmd::kDwGoldFieldNumber;
#endif  // !_MSC_VER

stRequestSetUserGoldInGmUserCmd::stRequestSetUserGoldInGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestSetUserGoldInGmUserCmd)
}

void stRequestSetUserGoldInGmUserCmd::InitAsDefaultInstance() {
}

stRequestSetUserGoldInGmUserCmd::stRequestSetUserGoldInGmUserCmd(const stRequestSetUserGoldInGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestSetUserGoldInGmUserCmd)
}

void stRequestSetUserGoldInGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  szusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dwgold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestSetUserGoldInGmUserCmd::~stRequestSetUserGoldInGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestSetUserGoldInGmUserCmd)
  SharedDtor();
}

void stRequestSetUserGoldInGmUserCmd::SharedDtor() {
  if (szusername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szusername_;
  }
  if (this != default_instance_) {
  }
}

void stRequestSetUserGoldInGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestSetUserGoldInGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestSetUserGoldInGmUserCmd_descriptor_;
}

const stRequestSetUserGoldInGmUserCmd& stRequestSetUserGoldInGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestSetUserGoldInGmUserCmd* stRequestSetUserGoldInGmUserCmd::default_instance_ = NULL;

stRequestSetUserGoldInGmUserCmd* stRequestSetUserGoldInGmUserCmd::New() const {
  return new stRequestSetUserGoldInGmUserCmd;
}

void stRequestSetUserGoldInGmUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_szusername()) {
      if (szusername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szusername_->clear();
      }
    }
    dwgold_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestSetUserGoldInGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestSetUserGoldInGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string szUserName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szusername().data(), this->szusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szusername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dwGold;
        break;
      }

      // optional uint32 dwGold = 2;
      case 2: {
        if (tag == 16) {
         parse_dwGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwgold_)));
          set_has_dwgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestSetUserGoldInGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestSetUserGoldInGmUserCmd)
  return false;
#undef DO_
}

void stRequestSetUserGoldInGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestSetUserGoldInGmUserCmd)
  // optional string szUserName = 1;
  if (has_szusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szusername().data(), this->szusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szusername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szusername(), output);
  }

  // optional uint32 dwGold = 2;
  if (has_dwgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dwgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestSetUserGoldInGmUserCmd)
}

::google::protobuf::uint8* stRequestSetUserGoldInGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestSetUserGoldInGmUserCmd)
  // optional string szUserName = 1;
  if (has_szusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szusername().data(), this->szusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szusername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szusername(), target);
  }

  // optional uint32 dwGold = 2;
  if (has_dwgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dwgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestSetUserGoldInGmUserCmd)
  return target;
}

int stRequestSetUserGoldInGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string szUserName = 1;
    if (has_szusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szusername());
    }

    // optional uint32 dwGold = 2;
    if (has_dwgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwgold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestSetUserGoldInGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestSetUserGoldInGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestSetUserGoldInGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestSetUserGoldInGmUserCmd::MergeFrom(const stRequestSetUserGoldInGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_szusername()) {
      set_szusername(from.szusername());
    }
    if (from.has_dwgold()) {
      set_dwgold(from.dwgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestSetUserGoldInGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestSetUserGoldInGmUserCmd::CopyFrom(const stRequestSetUserGoldInGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestSetUserGoldInGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestSetUserGoldInGmUserCmd::Swap(stRequestSetUserGoldInGmUserCmd* other) {
  if (other != this) {
    std::swap(szusername_, other->szusername_);
    std::swap(dwgold_, other->dwgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestSetUserGoldInGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestSetUserGoldInGmUserCmd_descriptor_;
  metadata.reflection = stRequestSetUserGoldInGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSetPrivilegesGmUserCmd::kPriFieldNumber;
const int stSetPrivilegesGmUserCmd::kIdFieldNumber;
#endif  // !_MSC_VER

stSetPrivilegesGmUserCmd::stSetPrivilegesGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stSetPrivilegesGmUserCmd)
}

void stSetPrivilegesGmUserCmd::InitAsDefaultInstance() {
}

stSetPrivilegesGmUserCmd::stSetPrivilegesGmUserCmd(const stSetPrivilegesGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stSetPrivilegesGmUserCmd)
}

void stSetPrivilegesGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  pri_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetPrivilegesGmUserCmd::~stSetPrivilegesGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stSetPrivilegesGmUserCmd)
  SharedDtor();
}

void stSetPrivilegesGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSetPrivilegesGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetPrivilegesGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetPrivilegesGmUserCmd_descriptor_;
}

const stSetPrivilegesGmUserCmd& stSetPrivilegesGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stSetPrivilegesGmUserCmd* stSetPrivilegesGmUserCmd::default_instance_ = NULL;

stSetPrivilegesGmUserCmd* stSetPrivilegesGmUserCmd::New() const {
  return new stSetPrivilegesGmUserCmd;
}

void stSetPrivilegesGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stSetPrivilegesGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pri_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetPrivilegesGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stSetPrivilegesGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pri = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pri_)));
          set_has_pri();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stSetPrivilegesGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stSetPrivilegesGmUserCmd)
  return false;
#undef DO_
}

void stSetPrivilegesGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stSetPrivilegesGmUserCmd)
  // optional uint32 pri = 1;
  if (has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pri(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stSetPrivilegesGmUserCmd)
}

::google::protobuf::uint8* stSetPrivilegesGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stSetPrivilegesGmUserCmd)
  // optional uint32 pri = 1;
  if (has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pri(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stSetPrivilegesGmUserCmd)
  return target;
}

int stSetPrivilegesGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pri = 1;
    if (has_pri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pri());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetPrivilegesGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetPrivilegesGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetPrivilegesGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetPrivilegesGmUserCmd::MergeFrom(const stSetPrivilegesGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pri()) {
      set_pri(from.pri());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetPrivilegesGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetPrivilegesGmUserCmd::CopyFrom(const stSetPrivilegesGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetPrivilegesGmUserCmd::IsInitialized() const {

  return true;
}

void stSetPrivilegesGmUserCmd::Swap(stSetPrivilegesGmUserCmd* other) {
  if (other != this) {
    std::swap(pri_, other->pri_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetPrivilegesGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetPrivilegesGmUserCmd_descriptor_;
  metadata.reflection = stSetPrivilegesGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestSaveChatGmUserCmd::kHashnumberFieldNumber;
const int stRequestSaveChatGmUserCmd::kGmnameFieldNumber;
const int stRequestSaveChatGmUserCmd::kChattypeFieldNumber;
const int stRequestSaveChatGmUserCmd::kZoneidFieldNumber;
const int stRequestSaveChatGmUserCmd::kCountryidFieldNumber;
const int stRequestSaveChatGmUserCmd::kSceneidFieldNumber;
const int stRequestSaveChatGmUserCmd::kRolenameFieldNumber;
const int stRequestSaveChatGmUserCmd::kNumFieldNumber;
const int stRequestSaveChatGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stRequestSaveChatGmUserCmd::stRequestSaveChatGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestSaveChatGmUserCmd)
}

void stRequestSaveChatGmUserCmd::InitAsDefaultInstance() {
}

stRequestSaveChatGmUserCmd::stRequestSaveChatGmUserCmd(const stRequestSaveChatGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestSaveChatGmUserCmd)
}

void stRequestSaveChatGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hashnumber_ = 0u;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chattype_ = 0u;
  zoneid_ = 0u;
  countryid_ = 0u;
  sceneid_ = 0u;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestSaveChatGmUserCmd::~stRequestSaveChatGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestSaveChatGmUserCmd)
  SharedDtor();
}

void stRequestSaveChatGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (rolename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rolename_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stRequestSaveChatGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestSaveChatGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestSaveChatGmUserCmd_descriptor_;
}

const stRequestSaveChatGmUserCmd& stRequestSaveChatGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestSaveChatGmUserCmd* stRequestSaveChatGmUserCmd::default_instance_ = NULL;

stRequestSaveChatGmUserCmd* stRequestSaveChatGmUserCmd::New() const {
  return new stRequestSaveChatGmUserCmd;
}

void stRequestSaveChatGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stRequestSaveChatGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hashnumber_, countryid_);
    ZR_(sceneid_, num_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rolename_->clear();
      }
    }
  }
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestSaveChatGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestSaveChatGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hashnumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hashnumber_)));
          set_has_hashnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gmname;
        break;
      }

      // optional string gmname = 2;
      case 2: {
        if (tag == 18) {
         parse_gmname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chattype;
        break;
      }

      // optional uint32 chattype = 3;
      case 3: {
        if (tag == 24) {
         parse_chattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 5;
      case 5: {
        if (tag == 40) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 6;
      case 6: {
        if (tag == 48) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rolename;
        break;
      }

      // optional string rolename = 7;
      case 7: {
        if (tag == 58) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rolename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num;
        break;
      }

      // optional uint32 num = 8;
      case 8: {
        if (tag == 64) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // optional bytes data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestSaveChatGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestSaveChatGmUserCmd)
  return false;
#undef DO_
}

void stRequestSaveChatGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestSaveChatGmUserCmd)
  // optional uint32 hashnumber = 1;
  if (has_hashnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hashnumber(), output);
  }

  // optional string gmname = 2;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gmname(), output);
  }

  // optional uint32 chattype = 3;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chattype(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional uint32 countryid = 5;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->countryid(), output);
  }

  // optional uint32 sceneid = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sceneid(), output);
  }

  // optional string rolename = 7;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rolename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rolename(), output);
  }

  // optional uint32 num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num(), output);
  }

  // optional bytes data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestSaveChatGmUserCmd)
}

::google::protobuf::uint8* stRequestSaveChatGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestSaveChatGmUserCmd)
  // optional uint32 hashnumber = 1;
  if (has_hashnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hashnumber(), target);
  }

  // optional string gmname = 2;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gmname(), target);
  }

  // optional uint32 chattype = 3;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chattype(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional uint32 countryid = 5;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->countryid(), target);
  }

  // optional uint32 sceneid = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sceneid(), target);
  }

  // optional string rolename = 7;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rolename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rolename(), target);
  }

  // optional uint32 num = 8;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num(), target);
  }

  // optional bytes data = 9;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestSaveChatGmUserCmd)
  return target;
}

int stRequestSaveChatGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hashnumber = 1;
    if (has_hashnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hashnumber());
    }

    // optional string gmname = 2;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 chattype = 3;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chattype());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countryid = 5;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 sceneid = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional string rolename = 7;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional uint32 num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestSaveChatGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestSaveChatGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestSaveChatGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestSaveChatGmUserCmd::MergeFrom(const stRequestSaveChatGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hashnumber()) {
      set_hashnumber(from.hashnumber());
    }
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestSaveChatGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestSaveChatGmUserCmd::CopyFrom(const stRequestSaveChatGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestSaveChatGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestSaveChatGmUserCmd::Swap(stRequestSaveChatGmUserCmd* other) {
  if (other != this) {
    std::swap(hashnumber_, other->hashnumber_);
    std::swap(gmname_, other->gmname_);
    std::swap(chattype_, other->chattype_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(rolename_, other->rolename_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestSaveChatGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestSaveChatGmUserCmd_descriptor_;
  metadata.reflection = stRequestSaveChatGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGameClientMessageBoxGmUserCmd::kGmnameFieldNumber;
const int stGameClientMessageBoxGmUserCmd::kZoneidFieldNumber;
const int stGameClientMessageBoxGmUserCmd::kCountryidFieldNumber;
const int stGameClientMessageBoxGmUserCmd::kSceneidFieldNumber;
const int stGameClientMessageBoxGmUserCmd::kNumFieldNumber;
const int stGameClientMessageBoxGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stGameClientMessageBoxGmUserCmd::stGameClientMessageBoxGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stGameClientMessageBoxGmUserCmd)
}

void stGameClientMessageBoxGmUserCmd::InitAsDefaultInstance() {
}

stGameClientMessageBoxGmUserCmd::stGameClientMessageBoxGmUserCmd(const stGameClientMessageBoxGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stGameClientMessageBoxGmUserCmd)
}

void stGameClientMessageBoxGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  countryid_ = 0u;
  sceneid_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGameClientMessageBoxGmUserCmd::~stGameClientMessageBoxGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stGameClientMessageBoxGmUserCmd)
  SharedDtor();
}

void stGameClientMessageBoxGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stGameClientMessageBoxGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGameClientMessageBoxGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGameClientMessageBoxGmUserCmd_descriptor_;
}

const stGameClientMessageBoxGmUserCmd& stGameClientMessageBoxGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stGameClientMessageBoxGmUserCmd* stGameClientMessageBoxGmUserCmd::default_instance_ = NULL;

stGameClientMessageBoxGmUserCmd* stGameClientMessageBoxGmUserCmd::New() const {
  return new stGameClientMessageBoxGmUserCmd;
}

void stGameClientMessageBoxGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stGameClientMessageBoxGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(zoneid_, num_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGameClientMessageBoxGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stGameClientMessageBoxGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gmname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 3;
      case 3: {
        if (tag == 24) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4;
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stGameClientMessageBoxGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stGameClientMessageBoxGmUserCmd)
  return false;
#undef DO_
}

void stGameClientMessageBoxGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stGameClientMessageBoxGmUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gmname(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 countryid = 3;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->countryid(), output);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stGameClientMessageBoxGmUserCmd)
}

::google::protobuf::uint8* stGameClientMessageBoxGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stGameClientMessageBoxGmUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gmname(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 countryid = 3;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->countryid(), target);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stGameClientMessageBoxGmUserCmd)
  return target;
}

int stGameClientMessageBoxGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gmname = 1;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countryid = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 sceneid = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGameClientMessageBoxGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGameClientMessageBoxGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGameClientMessageBoxGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGameClientMessageBoxGmUserCmd::MergeFrom(const stGameClientMessageBoxGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGameClientMessageBoxGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGameClientMessageBoxGmUserCmd::CopyFrom(const stGameClientMessageBoxGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGameClientMessageBoxGmUserCmd::IsInitialized() const {

  return true;
}

void stGameClientMessageBoxGmUserCmd::Swap(stGameClientMessageBoxGmUserCmd* other) {
  if (other != this) {
    std::swap(gmname_, other->gmname_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGameClientMessageBoxGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGameClientMessageBoxGmUserCmd_descriptor_;
  metadata.reflection = stGameClientMessageBoxGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGameClientChatMessageGMUserCmd::kGmnameFieldNumber;
const int stGameClientChatMessageGMUserCmd::kUsernameFieldNumber;
const int stGameClientChatMessageGMUserCmd::kZoneidFieldNumber;
const int stGameClientChatMessageGMUserCmd::kCountryidFieldNumber;
const int stGameClientChatMessageGMUserCmd::kSceneidFieldNumber;
const int stGameClientChatMessageGMUserCmd::kByChatTypeFieldNumber;
const int stGameClientChatMessageGMUserCmd::kByChatPosFieldNumber;
const int stGameClientChatMessageGMUserCmd::kColorFieldNumber;
const int stGameClientChatMessageGMUserCmd::kBySizeFieldNumber;
const int stGameClientChatMessageGMUserCmd::kSzInfoFieldNumber;
#endif  // !_MSC_VER

stGameClientChatMessageGMUserCmd::stGameClientChatMessageGMUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stGameClientChatMessageGMUserCmd)
}

void stGameClientChatMessageGMUserCmd::InitAsDefaultInstance() {
}

stGameClientChatMessageGMUserCmd::stGameClientChatMessageGMUserCmd(const stGameClientChatMessageGMUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stGameClientChatMessageGMUserCmd)
}

void stGameClientChatMessageGMUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  countryid_ = 0u;
  sceneid_ = 0u;
  bychattype_ = 0u;
  bychatpos_ = 0u;
  color_ = 0u;
  bysize_ = 0u;
  szinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGameClientChatMessageGMUserCmd::~stGameClientChatMessageGMUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stGameClientChatMessageGMUserCmd)
  SharedDtor();
}

void stGameClientChatMessageGMUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szinfo_;
  }
  if (this != default_instance_) {
  }
}

void stGameClientChatMessageGMUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGameClientChatMessageGMUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGameClientChatMessageGMUserCmd_descriptor_;
}

const stGameClientChatMessageGMUserCmd& stGameClientChatMessageGMUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stGameClientChatMessageGMUserCmd* stGameClientChatMessageGMUserCmd::default_instance_ = NULL;

stGameClientChatMessageGMUserCmd* stGameClientChatMessageGMUserCmd::New() const {
  return new stGameClientChatMessageGMUserCmd;
}

void stGameClientChatMessageGMUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stGameClientChatMessageGMUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(zoneid_, color_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    bysize_ = 0u;
    if (has_szinfo()) {
      if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szinfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGameClientChatMessageGMUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stGameClientChatMessageGMUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gmname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 4;
      case 4: {
        if (tag == 32) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 5;
      case 5: {
        if (tag == 40) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_byChatType;
        break;
      }

      // optional uint32 byChatType = 6;
      case 6: {
        if (tag == 48) {
         parse_byChatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bychattype_)));
          set_has_bychattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_byChatPos;
        break;
      }

      // optional uint32 byChatPos = 7;
      case 7: {
        if (tag == 56) {
         parse_byChatPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bychatpos_)));
          set_has_bychatpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_color;
        break;
      }

      // optional uint32 color = 8;
      case 8: {
        if (tag == 64) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bySize;
        break;
      }

      // optional uint32 bySize = 9;
      case 9: {
        if (tag == 72) {
         parse_bySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bysize_)));
          set_has_bysize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_szInfo;
        break;
      }

      // optional bytes szInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_szInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stGameClientChatMessageGMUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stGameClientChatMessageGMUserCmd)
  return false;
#undef DO_
}

void stGameClientChatMessageGMUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stGameClientChatMessageGMUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gmname(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 countryid = 4;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->countryid(), output);
  }

  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }

  // optional uint32 byChatType = 6;
  if (has_bychattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bychattype(), output);
  }

  // optional uint32 byChatPos = 7;
  if (has_bychatpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bychatpos(), output);
  }

  // optional uint32 color = 8;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->color(), output);
  }

  // optional uint32 bySize = 9;
  if (has_bysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bysize(), output);
  }

  // optional bytes szInfo = 10;
  if (has_szinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->szinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stGameClientChatMessageGMUserCmd)
}

::google::protobuf::uint8* stGameClientChatMessageGMUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stGameClientChatMessageGMUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gmname(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 countryid = 4;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->countryid(), target);
  }

  // optional uint32 sceneid = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }

  // optional uint32 byChatType = 6;
  if (has_bychattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bychattype(), target);
  }

  // optional uint32 byChatPos = 7;
  if (has_bychatpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bychatpos(), target);
  }

  // optional uint32 color = 8;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->color(), target);
  }

  // optional uint32 bySize = 9;
  if (has_bysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bysize(), target);
  }

  // optional bytes szInfo = 10;
  if (has_szinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->szinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stGameClientChatMessageGMUserCmd)
  return target;
}

int stGameClientChatMessageGMUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gmname = 1;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countryid = 4;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 sceneid = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 byChatType = 6;
    if (has_bychattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bychattype());
    }

    // optional uint32 byChatPos = 7;
    if (has_bychatpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bychatpos());
    }

    // optional uint32 color = 8;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 bySize = 9;
    if (has_bysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bysize());
    }

    // optional bytes szInfo = 10;
    if (has_szinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGameClientChatMessageGMUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGameClientChatMessageGMUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGameClientChatMessageGMUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGameClientChatMessageGMUserCmd::MergeFrom(const stGameClientChatMessageGMUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_bychattype()) {
      set_bychattype(from.bychattype());
    }
    if (from.has_bychatpos()) {
      set_bychatpos(from.bychatpos());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bysize()) {
      set_bysize(from.bysize());
    }
    if (from.has_szinfo()) {
      set_szinfo(from.szinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGameClientChatMessageGMUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGameClientChatMessageGMUserCmd::CopyFrom(const stGameClientChatMessageGMUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGameClientChatMessageGMUserCmd::IsInitialized() const {

  return true;
}

void stGameClientChatMessageGMUserCmd::Swap(stGameClientChatMessageGMUserCmd* other) {
  if (other != this) {
    std::swap(gmname_, other->gmname_);
    std::swap(username_, other->username_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(bychattype_, other->bychattype_);
    std::swap(bychatpos_, other->bychatpos_);
    std::swap(color_, other->color_);
    std::swap(bysize_, other->bysize_);
    std::swap(szinfo_, other->szinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGameClientChatMessageGMUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGameClientChatMessageGMUserCmd_descriptor_;
  metadata.reflection = stGameClientChatMessageGMUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestGameClientMessageConfigGmUserCmd::kKeyIDFieldNumber;
#endif  // !_MSC_VER

stRequestGameClientMessageConfigGmUserCmd::stRequestGameClientMessageConfigGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestGameClientMessageConfigGmUserCmd)
}

void stRequestGameClientMessageConfigGmUserCmd::InitAsDefaultInstance() {
}

stRequestGameClientMessageConfigGmUserCmd::stRequestGameClientMessageConfigGmUserCmd(const stRequestGameClientMessageConfigGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestGameClientMessageConfigGmUserCmd)
}

void stRequestGameClientMessageConfigGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  keyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestGameClientMessageConfigGmUserCmd::~stRequestGameClientMessageConfigGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestGameClientMessageConfigGmUserCmd)
  SharedDtor();
}

void stRequestGameClientMessageConfigGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestGameClientMessageConfigGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestGameClientMessageConfigGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestGameClientMessageConfigGmUserCmd_descriptor_;
}

const stRequestGameClientMessageConfigGmUserCmd& stRequestGameClientMessageConfigGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestGameClientMessageConfigGmUserCmd* stRequestGameClientMessageConfigGmUserCmd::default_instance_ = NULL;

stRequestGameClientMessageConfigGmUserCmd* stRequestGameClientMessageConfigGmUserCmd::New() const {
  return new stRequestGameClientMessageConfigGmUserCmd;
}

void stRequestGameClientMessageConfigGmUserCmd::Clear() {
  keyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestGameClientMessageConfigGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestGameClientMessageConfigGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 keyID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyid_)));
          set_has_keyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestGameClientMessageConfigGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestGameClientMessageConfigGmUserCmd)
  return false;
#undef DO_
}

void stRequestGameClientMessageConfigGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestGameClientMessageConfigGmUserCmd)
  // optional uint32 keyID = 1;
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestGameClientMessageConfigGmUserCmd)
}

::google::protobuf::uint8* stRequestGameClientMessageConfigGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestGameClientMessageConfigGmUserCmd)
  // optional uint32 keyID = 1;
  if (has_keyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestGameClientMessageConfigGmUserCmd)
  return target;
}

int stRequestGameClientMessageConfigGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 keyID = 1;
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestGameClientMessageConfigGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestGameClientMessageConfigGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestGameClientMessageConfigGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestGameClientMessageConfigGmUserCmd::MergeFrom(const stRequestGameClientMessageConfigGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyid()) {
      set_keyid(from.keyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestGameClientMessageConfigGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestGameClientMessageConfigGmUserCmd::CopyFrom(const stRequestGameClientMessageConfigGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestGameClientMessageConfigGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestGameClientMessageConfigGmUserCmd::Swap(stRequestGameClientMessageConfigGmUserCmd* other) {
  if (other != this) {
    std::swap(keyid_, other->keyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestGameClientMessageConfigGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestGameClientMessageConfigGmUserCmd_descriptor_;
  metadata.reflection = stRequestGameClientMessageConfigGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnGameClientMessageConfigGmUserCmd::kKeyIDFieldNumber;
const int stReturnGameClientMessageConfigGmUserCmd::kNumFieldNumber;
const int stReturnGameClientMessageConfigGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnGameClientMessageConfigGmUserCmd::stReturnGameClientMessageConfigGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnGameClientMessageConfigGmUserCmd)
}

void stReturnGameClientMessageConfigGmUserCmd::InitAsDefaultInstance() {
}

stReturnGameClientMessageConfigGmUserCmd::stReturnGameClientMessageConfigGmUserCmd(const stReturnGameClientMessageConfigGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnGameClientMessageConfigGmUserCmd)
}

void stReturnGameClientMessageConfigGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyid_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnGameClientMessageConfigGmUserCmd::~stReturnGameClientMessageConfigGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnGameClientMessageConfigGmUserCmd)
  SharedDtor();
}

void stReturnGameClientMessageConfigGmUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stReturnGameClientMessageConfigGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnGameClientMessageConfigGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnGameClientMessageConfigGmUserCmd_descriptor_;
}

const stReturnGameClientMessageConfigGmUserCmd& stReturnGameClientMessageConfigGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnGameClientMessageConfigGmUserCmd* stReturnGameClientMessageConfigGmUserCmd::default_instance_ = NULL;

stReturnGameClientMessageConfigGmUserCmd* stReturnGameClientMessageConfigGmUserCmd::New() const {
  return new stReturnGameClientMessageConfigGmUserCmd;
}

void stReturnGameClientMessageConfigGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnGameClientMessageConfigGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(keyid_, num_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnGameClientMessageConfigGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnGameClientMessageConfigGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 keyID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyid_)));
          set_has_keyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnGameClientMessageConfigGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnGameClientMessageConfigGmUserCmd)
  return false;
#undef DO_
}

void stReturnGameClientMessageConfigGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnGameClientMessageConfigGmUserCmd)
  // optional uint32 keyID = 1;
  if (has_keyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keyid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnGameClientMessageConfigGmUserCmd)
}

::google::protobuf::uint8* stReturnGameClientMessageConfigGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnGameClientMessageConfigGmUserCmd)
  // optional uint32 keyID = 1;
  if (has_keyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keyid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnGameClientMessageConfigGmUserCmd)
  return target;
}

int stReturnGameClientMessageConfigGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 keyID = 1;
    if (has_keyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keyid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnGameClientMessageConfigGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnGameClientMessageConfigGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnGameClientMessageConfigGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnGameClientMessageConfigGmUserCmd::MergeFrom(const stReturnGameClientMessageConfigGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyid()) {
      set_keyid(from.keyid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnGameClientMessageConfigGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnGameClientMessageConfigGmUserCmd::CopyFrom(const stReturnGameClientMessageConfigGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnGameClientMessageConfigGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnGameClientMessageConfigGmUserCmd::Swap(stReturnGameClientMessageConfigGmUserCmd* other) {
  if (other != this) {
    std::swap(keyid_, other->keyid_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnGameClientMessageConfigGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnGameClientMessageConfigGmUserCmd_descriptor_;
  metadata.reflection = stReturnGameClientMessageConfigGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stPlayerSatisfactionGmUserCmd::kGmnameFieldNumber;
const int stPlayerSatisfactionGmUserCmd::kCharnameFieldNumber;
const int stPlayerSatisfactionGmUserCmd::kCharidFieldNumber;
const int stPlayerSatisfactionGmUserCmd::kZoneidFieldNumber;
const int stPlayerSatisfactionGmUserCmd::kCountryidFieldNumber;
const int stPlayerSatisfactionGmUserCmd::kSceneidFieldNumber;
const int stPlayerSatisfactionGmUserCmd::kQuestionidFieldNumber;
const int stPlayerSatisfactionGmUserCmd::kSatisfactionFieldNumber;
const int stPlayerSatisfactionGmUserCmd::kDescFieldNumber;
#endif  // !_MSC_VER

stPlayerSatisfactionGmUserCmd::stPlayerSatisfactionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stPlayerSatisfactionGmUserCmd)
}

void stPlayerSatisfactionGmUserCmd::InitAsDefaultInstance() {
}

stPlayerSatisfactionGmUserCmd::stPlayerSatisfactionGmUserCmd(const stPlayerSatisfactionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stPlayerSatisfactionGmUserCmd)
}

void stPlayerSatisfactionGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charid_ = 0u;
  zoneid_ = 0u;
  countryid_ = 0u;
  sceneid_ = 0u;
  questionid_ = 0u;
  satisfaction_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPlayerSatisfactionGmUserCmd::~stPlayerSatisfactionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stPlayerSatisfactionGmUserCmd)
  SharedDtor();
}

void stPlayerSatisfactionGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void stPlayerSatisfactionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPlayerSatisfactionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerSatisfactionGmUserCmd_descriptor_;
}

const stPlayerSatisfactionGmUserCmd& stPlayerSatisfactionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stPlayerSatisfactionGmUserCmd* stPlayerSatisfactionGmUserCmd::default_instance_ = NULL;

stPlayerSatisfactionGmUserCmd* stPlayerSatisfactionGmUserCmd::New() const {
  return new stPlayerSatisfactionGmUserCmd;
}

void stPlayerSatisfactionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stPlayerSatisfactionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, satisfaction_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }
  if (has_desc()) {
    if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      desc_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPlayerSatisfactionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stPlayerSatisfactionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gmname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (tag == 18) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 5;
      case 5: {
        if (tag == 40) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 6;
      case 6: {
        if (tag == 48) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_questionid;
        break;
      }

      // optional uint32 questionid = 7;
      case 7: {
        if (tag == 56) {
         parse_questionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questionid_)));
          set_has_questionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_satisfaction;
        break;
      }

      // optional uint32 satisfaction = 8;
      case 8: {
        if (tag == 64) {
         parse_satisfaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satisfaction_)));
          set_has_satisfaction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_desc;
        break;
      }

      // optional string desc = 9;
      case 9: {
        if (tag == 74) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stPlayerSatisfactionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stPlayerSatisfactionGmUserCmd)
  return false;
#undef DO_
}

void stPlayerSatisfactionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stPlayerSatisfactionGmUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gmname(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charname(), output);
  }

  // optional uint32 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional uint32 countryid = 5;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->countryid(), output);
  }

  // optional uint32 sceneid = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sceneid(), output);
  }

  // optional uint32 questionid = 7;
  if (has_questionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->questionid(), output);
  }

  // optional uint32 satisfaction = 8;
  if (has_satisfaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->satisfaction(), output);
  }

  // optional string desc = 9;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stPlayerSatisfactionGmUserCmd)
}

::google::protobuf::uint8* stPlayerSatisfactionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stPlayerSatisfactionGmUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gmname(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional uint32 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional uint32 countryid = 5;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->countryid(), target);
  }

  // optional uint32 sceneid = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sceneid(), target);
  }

  // optional uint32 questionid = 7;
  if (has_questionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->questionid(), target);
  }

  // optional uint32 satisfaction = 8;
  if (has_satisfaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->satisfaction(), target);
  }

  // optional string desc = 9;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stPlayerSatisfactionGmUserCmd)
  return target;
}

int stPlayerSatisfactionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gmname = 1;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional uint32 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countryid = 5;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 sceneid = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 questionid = 7;
    if (has_questionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questionid());
    }

    // optional uint32 satisfaction = 8;
    if (has_satisfaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satisfaction());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string desc = 9;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPlayerSatisfactionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPlayerSatisfactionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPlayerSatisfactionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPlayerSatisfactionGmUserCmd::MergeFrom(const stPlayerSatisfactionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_questionid()) {
      set_questionid(from.questionid());
    }
    if (from.has_satisfaction()) {
      set_satisfaction(from.satisfaction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPlayerSatisfactionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPlayerSatisfactionGmUserCmd::CopyFrom(const stPlayerSatisfactionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPlayerSatisfactionGmUserCmd::IsInitialized() const {

  return true;
}

void stPlayerSatisfactionGmUserCmd::Swap(stPlayerSatisfactionGmUserCmd* other) {
  if (other != this) {
    std::swap(gmname_, other->gmname_);
    std::swap(charname_, other->charname_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(questionid_, other->questionid_);
    std::swap(satisfaction_, other->satisfaction_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPlayerSatisfactionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPlayerSatisfactionGmUserCmd_descriptor_;
  metadata.reflection = stPlayerSatisfactionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestMyQuestionGmUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

stRequestMyQuestionGmUserCmd::stRequestMyQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestMyQuestionGmUserCmd)
}

void stRequestMyQuestionGmUserCmd::InitAsDefaultInstance() {
}

stRequestMyQuestionGmUserCmd::stRequestMyQuestionGmUserCmd(const stRequestMyQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestMyQuestionGmUserCmd)
}

void stRequestMyQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestMyQuestionGmUserCmd::~stRequestMyQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestMyQuestionGmUserCmd)
  SharedDtor();
}

void stRequestMyQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestMyQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestMyQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestMyQuestionGmUserCmd_descriptor_;
}

const stRequestMyQuestionGmUserCmd& stRequestMyQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestMyQuestionGmUserCmd* stRequestMyQuestionGmUserCmd::default_instance_ = NULL;

stRequestMyQuestionGmUserCmd* stRequestMyQuestionGmUserCmd::New() const {
  return new stRequestMyQuestionGmUserCmd;
}

void stRequestMyQuestionGmUserCmd::Clear() {
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestMyQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestMyQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestMyQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestMyQuestionGmUserCmd)
  return false;
#undef DO_
}

void stRequestMyQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestMyQuestionGmUserCmd)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestMyQuestionGmUserCmd)
}

::google::protobuf::uint8* stRequestMyQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestMyQuestionGmUserCmd)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestMyQuestionGmUserCmd)
  return target;
}

int stRequestMyQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestMyQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestMyQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestMyQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestMyQuestionGmUserCmd::MergeFrom(const stRequestMyQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestMyQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestMyQuestionGmUserCmd::CopyFrom(const stRequestMyQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestMyQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestMyQuestionGmUserCmd::Swap(stRequestMyQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestMyQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestMyQuestionGmUserCmd_descriptor_;
  metadata.reflection = stRequestMyQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestQuestionSubmitableGmUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

stRequestQuestionSubmitableGmUserCmd::stRequestQuestionSubmitableGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestQuestionSubmitableGmUserCmd)
}

void stRequestQuestionSubmitableGmUserCmd::InitAsDefaultInstance() {
}

stRequestQuestionSubmitableGmUserCmd::stRequestQuestionSubmitableGmUserCmd(const stRequestQuestionSubmitableGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestQuestionSubmitableGmUserCmd)
}

void stRequestQuestionSubmitableGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestQuestionSubmitableGmUserCmd::~stRequestQuestionSubmitableGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestQuestionSubmitableGmUserCmd)
  SharedDtor();
}

void stRequestQuestionSubmitableGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestQuestionSubmitableGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestQuestionSubmitableGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestQuestionSubmitableGmUserCmd_descriptor_;
}

const stRequestQuestionSubmitableGmUserCmd& stRequestQuestionSubmitableGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestQuestionSubmitableGmUserCmd* stRequestQuestionSubmitableGmUserCmd::default_instance_ = NULL;

stRequestQuestionSubmitableGmUserCmd* stRequestQuestionSubmitableGmUserCmd::New() const {
  return new stRequestQuestionSubmitableGmUserCmd;
}

void stRequestQuestionSubmitableGmUserCmd::Clear() {
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestQuestionSubmitableGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestQuestionSubmitableGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestQuestionSubmitableGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestQuestionSubmitableGmUserCmd)
  return false;
#undef DO_
}

void stRequestQuestionSubmitableGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestQuestionSubmitableGmUserCmd)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestQuestionSubmitableGmUserCmd)
}

::google::protobuf::uint8* stRequestQuestionSubmitableGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestQuestionSubmitableGmUserCmd)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestQuestionSubmitableGmUserCmd)
  return target;
}

int stRequestQuestionSubmitableGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestQuestionSubmitableGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestQuestionSubmitableGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestQuestionSubmitableGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestQuestionSubmitableGmUserCmd::MergeFrom(const stRequestQuestionSubmitableGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestQuestionSubmitableGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestQuestionSubmitableGmUserCmd::CopyFrom(const stRequestQuestionSubmitableGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestQuestionSubmitableGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestQuestionSubmitableGmUserCmd::Swap(stRequestQuestionSubmitableGmUserCmd* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestQuestionSubmitableGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestQuestionSubmitableGmUserCmd_descriptor_;
  metadata.reflection = stRequestQuestionSubmitableGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stVerifyOnlineQaGmUserCmd::kStampFieldNumber;
const int stVerifyOnlineQaGmUserCmd::kZoneidFieldNumber;
const int stVerifyOnlineQaGmUserCmd::kSceneidFieldNumber;
const int stVerifyOnlineQaGmUserCmd::kCountryidFieldNumber;
const int stVerifyOnlineQaGmUserCmd::kGmnameFieldNumber;
const int stVerifyOnlineQaGmUserCmd::kUsernameFieldNumber;
#endif  // !_MSC_VER

stVerifyOnlineQaGmUserCmd::stVerifyOnlineQaGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stVerifyOnlineQaGmUserCmd)
}

void stVerifyOnlineQaGmUserCmd::InitAsDefaultInstance() {
}

stVerifyOnlineQaGmUserCmd::stVerifyOnlineQaGmUserCmd(const stVerifyOnlineQaGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stVerifyOnlineQaGmUserCmd)
}

void stVerifyOnlineQaGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stamp_ = 0u;
  zoneid_ = 0u;
  sceneid_ = 0u;
  countryid_ = 0u;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stVerifyOnlineQaGmUserCmd::~stVerifyOnlineQaGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stVerifyOnlineQaGmUserCmd)
  SharedDtor();
}

void stVerifyOnlineQaGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void stVerifyOnlineQaGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stVerifyOnlineQaGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stVerifyOnlineQaGmUserCmd_descriptor_;
}

const stVerifyOnlineQaGmUserCmd& stVerifyOnlineQaGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stVerifyOnlineQaGmUserCmd* stVerifyOnlineQaGmUserCmd::default_instance_ = NULL;

stVerifyOnlineQaGmUserCmd* stVerifyOnlineQaGmUserCmd::New() const {
  return new stVerifyOnlineQaGmUserCmd;
}

void stVerifyOnlineQaGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stVerifyOnlineQaGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(stamp_, countryid_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stVerifyOnlineQaGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stVerifyOnlineQaGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 4;
      case 4: {
        if (tag == 32) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gmname;
        break;
      }

      // optional string gmname = 5;
      case 5: {
        if (tag == 42) {
         parse_gmname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_username;
        break;
      }

      // optional string username = 6;
      case 6: {
        if (tag == 50) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stVerifyOnlineQaGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stVerifyOnlineQaGmUserCmd)
  return false;
#undef DO_
}

void stVerifyOnlineQaGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stVerifyOnlineQaGmUserCmd)
  // optional uint32 stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stamp(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneid(), output);
  }

  // optional uint32 countryid = 4;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->countryid(), output);
  }

  // optional string gmname = 5;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gmname(), output);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stVerifyOnlineQaGmUserCmd)
}

::google::protobuf::uint8* stVerifyOnlineQaGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stVerifyOnlineQaGmUserCmd)
  // optional uint32 stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stamp(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneid(), target);
  }

  // optional uint32 countryid = 4;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->countryid(), target);
  }

  // optional string gmname = 5;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gmname(), target);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stVerifyOnlineQaGmUserCmd)
  return target;
}

int stVerifyOnlineQaGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 countryid = 4;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional string gmname = 5;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional string username = 6;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stVerifyOnlineQaGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stVerifyOnlineQaGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stVerifyOnlineQaGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stVerifyOnlineQaGmUserCmd::MergeFrom(const stVerifyOnlineQaGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stVerifyOnlineQaGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stVerifyOnlineQaGmUserCmd::CopyFrom(const stVerifyOnlineQaGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stVerifyOnlineQaGmUserCmd::IsInitialized() const {

  return true;
}

void stVerifyOnlineQaGmUserCmd::Swap(stVerifyOnlineQaGmUserCmd* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(gmname_, other->gmname_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stVerifyOnlineQaGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stVerifyOnlineQaGmUserCmd_descriptor_;
  metadata.reflection = stVerifyOnlineQaGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stNewGameClientMessageBoxGmUserCmd::kGmnameFieldNumber;
const int stNewGameClientMessageBoxGmUserCmd::kZoneidFieldNumber;
const int stNewGameClientMessageBoxGmUserCmd::kCountryidFieldNumber;
const int stNewGameClientMessageBoxGmUserCmd::kSceneidFieldNumber;
const int stNewGameClientMessageBoxGmUserCmd::kNumFieldNumber;
const int stNewGameClientMessageBoxGmUserCmd::kTypeFieldNumber;
const int stNewGameClientMessageBoxGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stNewGameClientMessageBoxGmUserCmd::stNewGameClientMessageBoxGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stNewGameClientMessageBoxGmUserCmd)
}

void stNewGameClientMessageBoxGmUserCmd::InitAsDefaultInstance() {
}

stNewGameClientMessageBoxGmUserCmd::stNewGameClientMessageBoxGmUserCmd(const stNewGameClientMessageBoxGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stNewGameClientMessageBoxGmUserCmd)
}

void stNewGameClientMessageBoxGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  countryid_ = 0u;
  sceneid_ = 0u;
  num_ = 0u;
  type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNewGameClientMessageBoxGmUserCmd::~stNewGameClientMessageBoxGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stNewGameClientMessageBoxGmUserCmd)
  SharedDtor();
}

void stNewGameClientMessageBoxGmUserCmd::SharedDtor() {
  if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmname_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stNewGameClientMessageBoxGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNewGameClientMessageBoxGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNewGameClientMessageBoxGmUserCmd_descriptor_;
}

const stNewGameClientMessageBoxGmUserCmd& stNewGameClientMessageBoxGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stNewGameClientMessageBoxGmUserCmd* stNewGameClientMessageBoxGmUserCmd::default_instance_ = NULL;

stNewGameClientMessageBoxGmUserCmd* stNewGameClientMessageBoxGmUserCmd::New() const {
  return new stNewGameClientMessageBoxGmUserCmd;
}

void stNewGameClientMessageBoxGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stNewGameClientMessageBoxGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zoneid_, num_);
    if (has_gmname()) {
      if (gmname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gmname_->clear();
      }
    }
    type_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNewGameClientMessageBoxGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stNewGameClientMessageBoxGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gmname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmname().data(), this->gmname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 3;
      case 3: {
        if (tag == 24) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4;
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // optional bytes data = 7;
      case 7: {
        if (tag == 58) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stNewGameClientMessageBoxGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stNewGameClientMessageBoxGmUserCmd)
  return false;
#undef DO_
}

void stNewGameClientMessageBoxGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stNewGameClientMessageBoxGmUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gmname(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 countryid = 3;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->countryid(), output);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional bytes data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stNewGameClientMessageBoxGmUserCmd)
}

::google::protobuf::uint8* stNewGameClientMessageBoxGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stNewGameClientMessageBoxGmUserCmd)
  // optional string gmname = 1;
  if (has_gmname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmname().data(), this->gmname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gmname(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 countryid = 3;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->countryid(), target);
  }

  // optional uint32 sceneid = 4;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional uint32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional bytes data = 7;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stNewGameClientMessageBoxGmUserCmd)
  return target;
}

int stNewGameClientMessageBoxGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gmname = 1;
    if (has_gmname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmname());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 countryid = 3;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 sceneid = 4;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bytes data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNewGameClientMessageBoxGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNewGameClientMessageBoxGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNewGameClientMessageBoxGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNewGameClientMessageBoxGmUserCmd::MergeFrom(const stNewGameClientMessageBoxGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmname()) {
      set_gmname(from.gmname());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNewGameClientMessageBoxGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNewGameClientMessageBoxGmUserCmd::CopyFrom(const stNewGameClientMessageBoxGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNewGameClientMessageBoxGmUserCmd::IsInitialized() const {

  return true;
}

void stNewGameClientMessageBoxGmUserCmd::Swap(stNewGameClientMessageBoxGmUserCmd* other) {
  if (other != this) {
    std::swap(gmname_, other->gmname_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(countryid_, other->countryid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(num_, other->num_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNewGameClientMessageBoxGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNewGameClientMessageBoxGmUserCmd_descriptor_;
  metadata.reflection = stNewGameClientMessageBoxGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestPreProcessQuestionGmUserCmd::kIdFieldNumber;
const int stRequestPreProcessQuestionGmUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

stRequestPreProcessQuestionGmUserCmd::stRequestPreProcessQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestPreProcessQuestionGmUserCmd)
}

void stRequestPreProcessQuestionGmUserCmd::InitAsDefaultInstance() {
}

stRequestPreProcessQuestionGmUserCmd::stRequestPreProcessQuestionGmUserCmd(const stRequestPreProcessQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestPreProcessQuestionGmUserCmd)
}

void stRequestPreProcessQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestPreProcessQuestionGmUserCmd::~stRequestPreProcessQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestPreProcessQuestionGmUserCmd)
  SharedDtor();
}

void stRequestPreProcessQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestPreProcessQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestPreProcessQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestPreProcessQuestionGmUserCmd_descriptor_;
}

const stRequestPreProcessQuestionGmUserCmd& stRequestPreProcessQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestPreProcessQuestionGmUserCmd* stRequestPreProcessQuestionGmUserCmd::default_instance_ = NULL;

stRequestPreProcessQuestionGmUserCmd* stRequestPreProcessQuestionGmUserCmd::New() const {
  return new stRequestPreProcessQuestionGmUserCmd;
}

void stRequestPreProcessQuestionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stRequestPreProcessQuestionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestPreProcessQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestPreProcessQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestPreProcessQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestPreProcessQuestionGmUserCmd)
  return false;
#undef DO_
}

void stRequestPreProcessQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestPreProcessQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestPreProcessQuestionGmUserCmd)
}

::google::protobuf::uint8* stRequestPreProcessQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestPreProcessQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestPreProcessQuestionGmUserCmd)
  return target;
}

int stRequestPreProcessQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestPreProcessQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestPreProcessQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestPreProcessQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestPreProcessQuestionGmUserCmd::MergeFrom(const stRequestPreProcessQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestPreProcessQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestPreProcessQuestionGmUserCmd::CopyFrom(const stRequestPreProcessQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestPreProcessQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestPreProcessQuestionGmUserCmd::Swap(stRequestPreProcessQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestPreProcessQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestPreProcessQuestionGmUserCmd_descriptor_;
  metadata.reflection = stRequestPreProcessQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnPreProcessQuestionGmUserCmd::kHeadFieldNumber;
const int stReturnPreProcessQuestionGmUserCmd::kDescFieldNumber;
const int stReturnPreProcessQuestionGmUserCmd::kSeqFieldNumber;
const int stReturnPreProcessQuestionGmUserCmd::kGmidFieldNumber;
const int stReturnPreProcessQuestionGmUserCmd::kNumFieldNumber;
const int stReturnPreProcessQuestionGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnPreProcessQuestionGmUserCmd::stReturnPreProcessQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnPreProcessQuestionGmUserCmd)
}

void stReturnPreProcessQuestionGmUserCmd::InitAsDefaultInstance() {
  head_ = const_cast< ::Pmd::QuestionBaseData*>(&::Pmd::QuestionBaseData::default_instance());
}

stReturnPreProcessQuestionGmUserCmd::stReturnPreProcessQuestionGmUserCmd(const stReturnPreProcessQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnPreProcessQuestionGmUserCmd)
}

void stReturnPreProcessQuestionGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0u;
  gmid_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnPreProcessQuestionGmUserCmd::~stReturnPreProcessQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnPreProcessQuestionGmUserCmd)
  SharedDtor();
}

void stReturnPreProcessQuestionGmUserCmd::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void stReturnPreProcessQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnPreProcessQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnPreProcessQuestionGmUserCmd_descriptor_;
}

const stReturnPreProcessQuestionGmUserCmd& stReturnPreProcessQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnPreProcessQuestionGmUserCmd* stReturnPreProcessQuestionGmUserCmd::default_instance_ = NULL;

stReturnPreProcessQuestionGmUserCmd* stReturnPreProcessQuestionGmUserCmd::New() const {
  return new stReturnPreProcessQuestionGmUserCmd;
}

void stReturnPreProcessQuestionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnPreProcessQuestionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(seq_, gmid_);
    if (has_head()) {
      if (head_ != NULL) head_->::Pmd::QuestionBaseData::Clear();
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    num_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnPreProcessQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnPreProcessQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.QuestionBaseData head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 3;
      case 3: {
        if (tag == 24) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gmid;
        break;
      }

      // optional uint32 gmid = 4;
      case 4: {
        if (tag == 32) {
         parse_gmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnPreProcessQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnPreProcessQuestionGmUserCmd)
  return false;
#undef DO_
}

void stReturnPreProcessQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnPreProcessQuestionGmUserCmd)
  // optional .Pmd.QuestionBaseData head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional uint32 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq(), output);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gmid(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnPreProcessQuestionGmUserCmd)
}

::google::protobuf::uint8* stReturnPreProcessQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnPreProcessQuestionGmUserCmd)
  // optional .Pmd.QuestionBaseData head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional uint32 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq(), target);
  }

  // optional uint32 gmid = 4;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gmid(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnPreProcessQuestionGmUserCmd)
  return target;
}

int stReturnPreProcessQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.QuestionBaseData head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional uint32 gmid = 4;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnPreProcessQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnPreProcessQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnPreProcessQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnPreProcessQuestionGmUserCmd::MergeFrom(const stReturnPreProcessQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::Pmd::QuestionBaseData::MergeFrom(from.head());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnPreProcessQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnPreProcessQuestionGmUserCmd::CopyFrom(const stReturnPreProcessQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnPreProcessQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnPreProcessQuestionGmUserCmd::Swap(stReturnPreProcessQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(desc_, other->desc_);
    std::swap(seq_, other->seq_);
    std::swap(gmid_, other->gmid_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnPreProcessQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnPreProcessQuestionGmUserCmd_descriptor_;
  metadata.reflection = stReturnPreProcessQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnNowPreProcessQusetGmUserCmd::kIdFieldNumber;
const int stReturnNowPreProcessQusetGmUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

stReturnNowPreProcessQusetGmUserCmd::stReturnNowPreProcessQusetGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnNowPreProcessQusetGmUserCmd)
}

void stReturnNowPreProcessQusetGmUserCmd::InitAsDefaultInstance() {
}

stReturnNowPreProcessQusetGmUserCmd::stReturnNowPreProcessQusetGmUserCmd(const stReturnNowPreProcessQusetGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnNowPreProcessQusetGmUserCmd)
}

void stReturnNowPreProcessQusetGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnNowPreProcessQusetGmUserCmd::~stReturnNowPreProcessQusetGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnNowPreProcessQusetGmUserCmd)
  SharedDtor();
}

void stReturnNowPreProcessQusetGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnNowPreProcessQusetGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnNowPreProcessQusetGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnNowPreProcessQusetGmUserCmd_descriptor_;
}

const stReturnNowPreProcessQusetGmUserCmd& stReturnNowPreProcessQusetGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnNowPreProcessQusetGmUserCmd* stReturnNowPreProcessQusetGmUserCmd::default_instance_ = NULL;

stReturnNowPreProcessQusetGmUserCmd* stReturnNowPreProcessQusetGmUserCmd::New() const {
  return new stReturnNowPreProcessQusetGmUserCmd;
}

void stReturnNowPreProcessQusetGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnNowPreProcessQusetGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnNowPreProcessQusetGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnNowPreProcessQusetGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnNowPreProcessQusetGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnNowPreProcessQusetGmUserCmd)
  return false;
#undef DO_
}

void stReturnNowPreProcessQusetGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnNowPreProcessQusetGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnNowPreProcessQusetGmUserCmd)
}

::google::protobuf::uint8* stReturnNowPreProcessQusetGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnNowPreProcessQusetGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnNowPreProcessQusetGmUserCmd)
  return target;
}

int stReturnNowPreProcessQusetGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnNowPreProcessQusetGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnNowPreProcessQusetGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnNowPreProcessQusetGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnNowPreProcessQusetGmUserCmd::MergeFrom(const stReturnNowPreProcessQusetGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnNowPreProcessQusetGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnNowPreProcessQusetGmUserCmd::CopyFrom(const stReturnNowPreProcessQusetGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnNowPreProcessQusetGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnNowPreProcessQusetGmUserCmd::Swap(stReturnNowPreProcessQusetGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnNowPreProcessQusetGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnNowPreProcessQusetGmUserCmd_descriptor_;
  metadata.reflection = stReturnNowPreProcessQusetGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDeleteProcessedQuestionGmUserCmd::kIdFieldNumber;
const int stDeleteProcessedQuestionGmUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

stDeleteProcessedQuestionGmUserCmd::stDeleteProcessedQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stDeleteProcessedQuestionGmUserCmd)
}

void stDeleteProcessedQuestionGmUserCmd::InitAsDefaultInstance() {
}

stDeleteProcessedQuestionGmUserCmd::stDeleteProcessedQuestionGmUserCmd(const stDeleteProcessedQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stDeleteProcessedQuestionGmUserCmd)
}

void stDeleteProcessedQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDeleteProcessedQuestionGmUserCmd::~stDeleteProcessedQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stDeleteProcessedQuestionGmUserCmd)
  SharedDtor();
}

void stDeleteProcessedQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDeleteProcessedQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDeleteProcessedQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeleteProcessedQuestionGmUserCmd_descriptor_;
}

const stDeleteProcessedQuestionGmUserCmd& stDeleteProcessedQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stDeleteProcessedQuestionGmUserCmd* stDeleteProcessedQuestionGmUserCmd::default_instance_ = NULL;

stDeleteProcessedQuestionGmUserCmd* stDeleteProcessedQuestionGmUserCmd::New() const {
  return new stDeleteProcessedQuestionGmUserCmd;
}

void stDeleteProcessedQuestionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stDeleteProcessedQuestionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDeleteProcessedQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stDeleteProcessedQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional uint32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stDeleteProcessedQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stDeleteProcessedQuestionGmUserCmd)
  return false;
#undef DO_
}

void stDeleteProcessedQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stDeleteProcessedQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stDeleteProcessedQuestionGmUserCmd)
}

::google::protobuf::uint8* stDeleteProcessedQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stDeleteProcessedQuestionGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stDeleteProcessedQuestionGmUserCmd)
  return target;
}

int stDeleteProcessedQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDeleteProcessedQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDeleteProcessedQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDeleteProcessedQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDeleteProcessedQuestionGmUserCmd::MergeFrom(const stDeleteProcessedQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDeleteProcessedQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDeleteProcessedQuestionGmUserCmd::CopyFrom(const stDeleteProcessedQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDeleteProcessedQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stDeleteProcessedQuestionGmUserCmd::Swap(stDeleteProcessedQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDeleteProcessedQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDeleteProcessedQuestionGmUserCmd_descriptor_;
  metadata.reflection = stDeleteProcessedQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestOneQuestionGmUserCmd::kGmidFieldNumber;
#endif  // !_MSC_VER

stRequestOneQuestionGmUserCmd::stRequestOneQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestOneQuestionGmUserCmd)
}

void stRequestOneQuestionGmUserCmd::InitAsDefaultInstance() {
}

stRequestOneQuestionGmUserCmd::stRequestOneQuestionGmUserCmd(const stRequestOneQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestOneQuestionGmUserCmd)
}

void stRequestOneQuestionGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestOneQuestionGmUserCmd::~stRequestOneQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestOneQuestionGmUserCmd)
  SharedDtor();
}

void stRequestOneQuestionGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestOneQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestOneQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestOneQuestionGmUserCmd_descriptor_;
}

const stRequestOneQuestionGmUserCmd& stRequestOneQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestOneQuestionGmUserCmd* stRequestOneQuestionGmUserCmd::default_instance_ = NULL;

stRequestOneQuestionGmUserCmd* stRequestOneQuestionGmUserCmd::New() const {
  return new stRequestOneQuestionGmUserCmd;
}

void stRequestOneQuestionGmUserCmd::Clear() {
  gmid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestOneQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestOneQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestOneQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestOneQuestionGmUserCmd)
  return false;
#undef DO_
}

void stRequestOneQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestOneQuestionGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestOneQuestionGmUserCmd)
}

::google::protobuf::uint8* stRequestOneQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestOneQuestionGmUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestOneQuestionGmUserCmd)
  return target;
}

int stRequestOneQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestOneQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestOneQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestOneQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestOneQuestionGmUserCmd::MergeFrom(const stRequestOneQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestOneQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestOneQuestionGmUserCmd::CopyFrom(const stRequestOneQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestOneQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestOneQuestionGmUserCmd::Swap(stRequestOneQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestOneQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestOneQuestionGmUserCmd_descriptor_;
  metadata.reflection = stRequestOneQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnOneQuestionGmUserCmd::kFlagFieldNumber;
const int stReturnOneQuestionGmUserCmd::kHeadFieldNumber;
const int stReturnOneQuestionGmUserCmd::kDescFieldNumber;
const int stReturnOneQuestionGmUserCmd::kSeqFieldNumber;
const int stReturnOneQuestionGmUserCmd::kNumFieldNumber;
const int stReturnOneQuestionGmUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

stReturnOneQuestionGmUserCmd::stReturnOneQuestionGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnOneQuestionGmUserCmd)
}

void stReturnOneQuestionGmUserCmd::InitAsDefaultInstance() {
  head_ = const_cast< ::Pmd::QuestionBaseData*>(&::Pmd::QuestionBaseData::default_instance());
}

stReturnOneQuestionGmUserCmd::stReturnOneQuestionGmUserCmd(const stReturnOneQuestionGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnOneQuestionGmUserCmd)
}

void stReturnOneQuestionGmUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0u;
  head_ = NULL;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0u;
  num_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnOneQuestionGmUserCmd::~stReturnOneQuestionGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnOneQuestionGmUserCmd)
  SharedDtor();
}

void stReturnOneQuestionGmUserCmd::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void stReturnOneQuestionGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnOneQuestionGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnOneQuestionGmUserCmd_descriptor_;
}

const stReturnOneQuestionGmUserCmd& stReturnOneQuestionGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnOneQuestionGmUserCmd* stReturnOneQuestionGmUserCmd::default_instance_ = NULL;

stReturnOneQuestionGmUserCmd* stReturnOneQuestionGmUserCmd::New() const {
  return new stReturnOneQuestionGmUserCmd;
}

void stReturnOneQuestionGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnOneQuestionGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(flag_, seq_);
    if (has_head()) {
      if (head_ != NULL) head_->::Pmd::QuestionBaseData::Clear();
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    num_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnOneQuestionGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnOneQuestionGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_head;
        break;
      }

      // optional .Pmd.QuestionBaseData head = 2;
      case 2: {
        if (tag == 18) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 4;
      case 4: {
        if (tag == 32) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnOneQuestionGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnOneQuestionGmUserCmd)
  return false;
#undef DO_
}

void stReturnOneQuestionGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnOneQuestionGmUserCmd)
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  // optional .Pmd.QuestionBaseData head = 2;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->head(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  // optional uint32 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnOneQuestionGmUserCmd)
}

::google::protobuf::uint8* stReturnOneQuestionGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnOneQuestionGmUserCmd)
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  // optional .Pmd.QuestionBaseData head = 2;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->head(), target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional uint32 seq = 4;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnOneQuestionGmUserCmd)
  return target;
}

int stReturnOneQuestionGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional .Pmd.QuestionBaseData head = 2;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 seq = 4;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnOneQuestionGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnOneQuestionGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnOneQuestionGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnOneQuestionGmUserCmd::MergeFrom(const stReturnOneQuestionGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_head()) {
      mutable_head()->::Pmd::QuestionBaseData::MergeFrom(from.head());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnOneQuestionGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnOneQuestionGmUserCmd::CopyFrom(const stReturnOneQuestionGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnOneQuestionGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnOneQuestionGmUserCmd::Swap(stReturnOneQuestionGmUserCmd* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(head_, other->head_);
    std::swap(desc_, other->desc_);
    std::swap(seq_, other->seq_);
    std::swap(num_, other->num_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnOneQuestionGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnOneQuestionGmUserCmd_descriptor_;
  metadata.reflection = stReturnOneQuestionGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestResetGmWorkStateGmUserCmd::kIdFieldNumber;
const int stRequestResetGmWorkStateGmUserCmd::kQMaxNumFieldNumber;
const int stRequestResetGmWorkStateGmUserCmd::kAutoRecvFieldNumber;
const int stRequestResetGmWorkStateGmUserCmd::kWorkStateFieldNumber;
const int stRequestResetGmWorkStateGmUserCmd::kWinNumFieldNumber;
#endif  // !_MSC_VER

stRequestResetGmWorkStateGmUserCmd::stRequestResetGmWorkStateGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestResetGmWorkStateGmUserCmd)
}

void stRequestResetGmWorkStateGmUserCmd::InitAsDefaultInstance() {
}

stRequestResetGmWorkStateGmUserCmd::stRequestResetGmWorkStateGmUserCmd(const stRequestResetGmWorkStateGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestResetGmWorkStateGmUserCmd)
}

void stRequestResetGmWorkStateGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  qmaxnum_ = 0u;
  autorecv_ = 0u;
  workstate_ = 0u;
  winnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestResetGmWorkStateGmUserCmd::~stRequestResetGmWorkStateGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestResetGmWorkStateGmUserCmd)
  SharedDtor();
}

void stRequestResetGmWorkStateGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestResetGmWorkStateGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestResetGmWorkStateGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestResetGmWorkStateGmUserCmd_descriptor_;
}

const stRequestResetGmWorkStateGmUserCmd& stRequestResetGmWorkStateGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestResetGmWorkStateGmUserCmd* stRequestResetGmWorkStateGmUserCmd::default_instance_ = NULL;

stRequestResetGmWorkStateGmUserCmd* stRequestResetGmWorkStateGmUserCmd::New() const {
  return new stRequestResetGmWorkStateGmUserCmd;
}

void stRequestResetGmWorkStateGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stRequestResetGmWorkStateGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, winnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestResetGmWorkStateGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestResetGmWorkStateGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_qMaxNum;
        break;
      }

      // optional uint32 qMaxNum = 2;
      case 2: {
        if (tag == 16) {
         parse_qMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qmaxnum_)));
          set_has_qmaxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_autoRecv;
        break;
      }

      // optional uint32 autoRecv = 3;
      case 3: {
        if (tag == 24) {
         parse_autoRecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autorecv_)));
          set_has_autorecv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_workState;
        break;
      }

      // optional uint32 workState = 4;
      case 4: {
        if (tag == 32) {
         parse_workState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workstate_)));
          set_has_workstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_winNum;
        break;
      }

      // optional uint32 winNum = 5;
      case 5: {
        if (tag == 40) {
         parse_winNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestResetGmWorkStateGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestResetGmWorkStateGmUserCmd)
  return false;
#undef DO_
}

void stRequestResetGmWorkStateGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestResetGmWorkStateGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 qMaxNum = 2;
  if (has_qmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qmaxnum(), output);
  }

  // optional uint32 autoRecv = 3;
  if (has_autorecv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->autorecv(), output);
  }

  // optional uint32 workState = 4;
  if (has_workstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->workstate(), output);
  }

  // optional uint32 winNum = 5;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->winnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestResetGmWorkStateGmUserCmd)
}

::google::protobuf::uint8* stRequestResetGmWorkStateGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestResetGmWorkStateGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 qMaxNum = 2;
  if (has_qmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qmaxnum(), target);
  }

  // optional uint32 autoRecv = 3;
  if (has_autorecv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->autorecv(), target);
  }

  // optional uint32 workState = 4;
  if (has_workstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->workstate(), target);
  }

  // optional uint32 winNum = 5;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->winnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestResetGmWorkStateGmUserCmd)
  return target;
}

int stRequestResetGmWorkStateGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 qMaxNum = 2;
    if (has_qmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qmaxnum());
    }

    // optional uint32 autoRecv = 3;
    if (has_autorecv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autorecv());
    }

    // optional uint32 workState = 4;
    if (has_workstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workstate());
    }

    // optional uint32 winNum = 5;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestResetGmWorkStateGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestResetGmWorkStateGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestResetGmWorkStateGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestResetGmWorkStateGmUserCmd::MergeFrom(const stRequestResetGmWorkStateGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_qmaxnum()) {
      set_qmaxnum(from.qmaxnum());
    }
    if (from.has_autorecv()) {
      set_autorecv(from.autorecv());
    }
    if (from.has_workstate()) {
      set_workstate(from.workstate());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestResetGmWorkStateGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestResetGmWorkStateGmUserCmd::CopyFrom(const stRequestResetGmWorkStateGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestResetGmWorkStateGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestResetGmWorkStateGmUserCmd::Swap(stRequestResetGmWorkStateGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(qmaxnum_, other->qmaxnum_);
    std::swap(autorecv_, other->autorecv_);
    std::swap(workstate_, other->workstate_);
    std::swap(winnum_, other->winnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestResetGmWorkStateGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestResetGmWorkStateGmUserCmd_descriptor_;
  metadata.reflection = stRequestResetGmWorkStateGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stReturnResetGmWorkStateGmUserCmd::kIdFieldNumber;
const int stReturnResetGmWorkStateGmUserCmd::kQMaxNumFieldNumber;
const int stReturnResetGmWorkStateGmUserCmd::kAutoRecvFieldNumber;
const int stReturnResetGmWorkStateGmUserCmd::kWorkStateFieldNumber;
const int stReturnResetGmWorkStateGmUserCmd::kWinNumFieldNumber;
#endif  // !_MSC_VER

stReturnResetGmWorkStateGmUserCmd::stReturnResetGmWorkStateGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stReturnResetGmWorkStateGmUserCmd)
}

void stReturnResetGmWorkStateGmUserCmd::InitAsDefaultInstance() {
}

stReturnResetGmWorkStateGmUserCmd::stReturnResetGmWorkStateGmUserCmd(const stReturnResetGmWorkStateGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stReturnResetGmWorkStateGmUserCmd)
}

void stReturnResetGmWorkStateGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  qmaxnum_ = 0u;
  autorecv_ = 0u;
  workstate_ = 0u;
  winnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReturnResetGmWorkStateGmUserCmd::~stReturnResetGmWorkStateGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stReturnResetGmWorkStateGmUserCmd)
  SharedDtor();
}

void stReturnResetGmWorkStateGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReturnResetGmWorkStateGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReturnResetGmWorkStateGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReturnResetGmWorkStateGmUserCmd_descriptor_;
}

const stReturnResetGmWorkStateGmUserCmd& stReturnResetGmWorkStateGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stReturnResetGmWorkStateGmUserCmd* stReturnResetGmWorkStateGmUserCmd::default_instance_ = NULL;

stReturnResetGmWorkStateGmUserCmd* stReturnResetGmWorkStateGmUserCmd::New() const {
  return new stReturnResetGmWorkStateGmUserCmd;
}

void stReturnResetGmWorkStateGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stReturnResetGmWorkStateGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, winnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReturnResetGmWorkStateGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stReturnResetGmWorkStateGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_qMaxNum;
        break;
      }

      // optional uint32 qMaxNum = 2;
      case 2: {
        if (tag == 16) {
         parse_qMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qmaxnum_)));
          set_has_qmaxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_autoRecv;
        break;
      }

      // optional uint32 autoRecv = 3;
      case 3: {
        if (tag == 24) {
         parse_autoRecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autorecv_)));
          set_has_autorecv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_workState;
        break;
      }

      // optional uint32 workState = 4;
      case 4: {
        if (tag == 32) {
         parse_workState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workstate_)));
          set_has_workstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_winNum;
        break;
      }

      // optional uint32 winNum = 5;
      case 5: {
        if (tag == 40) {
         parse_winNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stReturnResetGmWorkStateGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stReturnResetGmWorkStateGmUserCmd)
  return false;
#undef DO_
}

void stReturnResetGmWorkStateGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stReturnResetGmWorkStateGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 qMaxNum = 2;
  if (has_qmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qmaxnum(), output);
  }

  // optional uint32 autoRecv = 3;
  if (has_autorecv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->autorecv(), output);
  }

  // optional uint32 workState = 4;
  if (has_workstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->workstate(), output);
  }

  // optional uint32 winNum = 5;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->winnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stReturnResetGmWorkStateGmUserCmd)
}

::google::protobuf::uint8* stReturnResetGmWorkStateGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stReturnResetGmWorkStateGmUserCmd)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 qMaxNum = 2;
  if (has_qmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qmaxnum(), target);
  }

  // optional uint32 autoRecv = 3;
  if (has_autorecv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->autorecv(), target);
  }

  // optional uint32 workState = 4;
  if (has_workstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->workstate(), target);
  }

  // optional uint32 winNum = 5;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->winnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stReturnResetGmWorkStateGmUserCmd)
  return target;
}

int stReturnResetGmWorkStateGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 qMaxNum = 2;
    if (has_qmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qmaxnum());
    }

    // optional uint32 autoRecv = 3;
    if (has_autorecv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autorecv());
    }

    // optional uint32 workState = 4;
    if (has_workstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workstate());
    }

    // optional uint32 winNum = 5;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReturnResetGmWorkStateGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReturnResetGmWorkStateGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReturnResetGmWorkStateGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReturnResetGmWorkStateGmUserCmd::MergeFrom(const stReturnResetGmWorkStateGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_qmaxnum()) {
      set_qmaxnum(from.qmaxnum());
    }
    if (from.has_autorecv()) {
      set_autorecv(from.autorecv());
    }
    if (from.has_workstate()) {
      set_workstate(from.workstate());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReturnResetGmWorkStateGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReturnResetGmWorkStateGmUserCmd::CopyFrom(const stReturnResetGmWorkStateGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReturnResetGmWorkStateGmUserCmd::IsInitialized() const {

  return true;
}

void stReturnResetGmWorkStateGmUserCmd::Swap(stReturnResetGmWorkStateGmUserCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(qmaxnum_, other->qmaxnum_);
    std::swap(autorecv_, other->autorecv_);
    std::swap(workstate_, other->workstate_);
    std::swap(winnum_, other->winnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReturnResetGmWorkStateGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReturnResetGmWorkStateGmUserCmd_descriptor_;
  metadata.reflection = stReturnResetGmWorkStateGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGmCommandUserCmd::kNumFieldNumber;
const int stGmCommandUserCmd::kStrFieldNumber;
#endif  // !_MSC_VER

stGmCommandUserCmd::stGmCommandUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stGmCommandUserCmd)
}

void stGmCommandUserCmd::InitAsDefaultInstance() {
}

stGmCommandUserCmd::stGmCommandUserCmd(const stGmCommandUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stGmCommandUserCmd)
}

void stGmCommandUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGmCommandUserCmd::~stGmCommandUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stGmCommandUserCmd)
  SharedDtor();
}

void stGmCommandUserCmd::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void stGmCommandUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGmCommandUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGmCommandUserCmd_descriptor_;
}

const stGmCommandUserCmd& stGmCommandUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stGmCommandUserCmd* stGmCommandUserCmd::default_instance_ = NULL;

stGmCommandUserCmd* stGmCommandUserCmd::New() const {
  return new stGmCommandUserCmd;
}

void stGmCommandUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    num_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGmCommandUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stGmCommandUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional bytes str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stGmCommandUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stGmCommandUserCmd)
  return false;
#undef DO_
}

void stGmCommandUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stGmCommandUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional bytes str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stGmCommandUserCmd)
}

::google::protobuf::uint8* stGmCommandUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stGmCommandUserCmd)
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional bytes str = 2;
  if (has_str()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stGmCommandUserCmd)
  return target;
}

int stGmCommandUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bytes str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGmCommandUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGmCommandUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGmCommandUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGmCommandUserCmd::MergeFrom(const stGmCommandUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGmCommandUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGmCommandUserCmd::CopyFrom(const stGmCommandUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGmCommandUserCmd::IsInitialized() const {

  return true;
}

void stGmCommandUserCmd::Swap(stGmCommandUserCmd* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGmCommandUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGmCommandUserCmd_descriptor_;
  metadata.reflection = stGmCommandUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGmCommandToSceneUserCmd::kGmidFieldNumber;
const int stGmCommandToSceneUserCmd::kStrFieldNumber;
#endif  // !_MSC_VER

stGmCommandToSceneUserCmd::stGmCommandToSceneUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stGmCommandToSceneUserCmd)
}

void stGmCommandToSceneUserCmd::InitAsDefaultInstance() {
}

stGmCommandToSceneUserCmd::stGmCommandToSceneUserCmd(const stGmCommandToSceneUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stGmCommandToSceneUserCmd)
}

void stGmCommandToSceneUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGmCommandToSceneUserCmd::~stGmCommandToSceneUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stGmCommandToSceneUserCmd)
  SharedDtor();
}

void stGmCommandToSceneUserCmd::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void stGmCommandToSceneUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGmCommandToSceneUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGmCommandToSceneUserCmd_descriptor_;
}

const stGmCommandToSceneUserCmd& stGmCommandToSceneUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stGmCommandToSceneUserCmd* stGmCommandToSceneUserCmd::default_instance_ = NULL;

stGmCommandToSceneUserCmd* stGmCommandToSceneUserCmd::New() const {
  return new stGmCommandToSceneUserCmd;
}

void stGmCommandToSceneUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    gmid_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGmCommandToSceneUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stGmCommandToSceneUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional bytes str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stGmCommandToSceneUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stGmCommandToSceneUserCmd)
  return false;
#undef DO_
}

void stGmCommandToSceneUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stGmCommandToSceneUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // optional bytes str = 2;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stGmCommandToSceneUserCmd)
}

::google::protobuf::uint8* stGmCommandToSceneUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stGmCommandToSceneUserCmd)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // optional bytes str = 2;
  if (has_str()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stGmCommandToSceneUserCmd)
  return target;
}

int stGmCommandToSceneUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional bytes str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGmCommandToSceneUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGmCommandToSceneUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGmCommandToSceneUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGmCommandToSceneUserCmd::MergeFrom(const stGmCommandToSceneUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGmCommandToSceneUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGmCommandToSceneUserCmd::CopyFrom(const stGmCommandToSceneUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGmCommandToSceneUserCmd::IsInitialized() const {

  return true;
}

void stGmCommandToSceneUserCmd::Swap(stGmCommandToSceneUserCmd* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGmCommandToSceneUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGmCommandToSceneUserCmd_descriptor_;
  metadata.reflection = stGmCommandToSceneUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

stForceChangeSexGmUserCmd::stForceChangeSexGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stForceChangeSexGmUserCmd)
}

void stForceChangeSexGmUserCmd::InitAsDefaultInstance() {
}

stForceChangeSexGmUserCmd::stForceChangeSexGmUserCmd(const stForceChangeSexGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stForceChangeSexGmUserCmd)
}

void stForceChangeSexGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForceChangeSexGmUserCmd::~stForceChangeSexGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stForceChangeSexGmUserCmd)
  SharedDtor();
}

void stForceChangeSexGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stForceChangeSexGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForceChangeSexGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForceChangeSexGmUserCmd_descriptor_;
}

const stForceChangeSexGmUserCmd& stForceChangeSexGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stForceChangeSexGmUserCmd* stForceChangeSexGmUserCmd::default_instance_ = NULL;

stForceChangeSexGmUserCmd* stForceChangeSexGmUserCmd::New() const {
  return new stForceChangeSexGmUserCmd;
}

void stForceChangeSexGmUserCmd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForceChangeSexGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stForceChangeSexGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stForceChangeSexGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stForceChangeSexGmUserCmd)
  return false;
#undef DO_
}

void stForceChangeSexGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stForceChangeSexGmUserCmd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stForceChangeSexGmUserCmd)
}

::google::protobuf::uint8* stForceChangeSexGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stForceChangeSexGmUserCmd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stForceChangeSexGmUserCmd)
  return target;
}

int stForceChangeSexGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForceChangeSexGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForceChangeSexGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForceChangeSexGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForceChangeSexGmUserCmd::MergeFrom(const stForceChangeSexGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForceChangeSexGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForceChangeSexGmUserCmd::CopyFrom(const stForceChangeSexGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForceChangeSexGmUserCmd::IsInitialized() const {

  return true;
}

void stForceChangeSexGmUserCmd::Swap(stForceChangeSexGmUserCmd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForceChangeSexGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForceChangeSexGmUserCmd_descriptor_;
  metadata.reflection = stForceChangeSexGmUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRequestMobileInfoGmUserCmd::kMobileFieldNumber;
const int stRequestMobileInfoGmUserCmd::kAccidFieldNumber;
#endif  // !_MSC_VER

stRequestMobileInfoGmUserCmd::stRequestMobileInfoGmUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stRequestMobileInfoGmUserCmd)
}

void stRequestMobileInfoGmUserCmd::InitAsDefaultInstance() {
}

stRequestMobileInfoGmUserCmd::stRequestMobileInfoGmUserCmd(const stRequestMobileInfoGmUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stRequestMobileInfoGmUserCmd)
}

void stRequestMobileInfoGmUserCmd::SharedCtor() {
  _cached_size_ = 0;
  mobile_ = GOOGLE_ULONGLONG(0);
  accid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRequestMobileInfoGmUserCmd::~stRequestMobileInfoGmUserCmd() {
  // @@protoc_insertion_point(destructor:Pmd.stRequestMobileInfoGmUserCmd)
  SharedDtor();
}

void stRequestMobileInfoGmUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRequestMobileInfoGmUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRequestMobileInfoGmUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRequestMobileInfoGmUserCmd_descriptor_;
}

const stRequestMobileInfoGmUserCmd& stRequestMobileInfoGmUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gmcommand_2eproto();
  return *default_instance_;
}

stRequestMobileInfoGmUserCmd* stRequestMobileInfoGmUserCmd::default_instance_ = NULL;

stRequestMobileInfoGmUserCmd* stRequestMobileInfoGmUserCmd::New() const {
  return new stRequestMobileInfoGmUserCmd;
}

void stRequestMobileInfoGmUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stRequestMobileInfoGmUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mobile_, accid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRequestMobileInfoGmUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stRequestMobileInfoGmUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mobile = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mobile_)));
          set_has_mobile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // optional uint32 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stRequestMobileInfoGmUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stRequestMobileInfoGmUserCmd)
  return false;
#undef DO_
}

void stRequestMobileInfoGmUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stRequestMobileInfoGmUserCmd)
  // optional uint64 mobile = 1;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mobile(), output);
  }

  // optional uint32 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stRequestMobileInfoGmUserCmd)
}

::google::protobuf::uint8* stRequestMobileInfoGmUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stRequestMobileInfoGmUserCmd)
  // optional uint64 mobile = 1;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mobile(), target);
  }

  // optional uint32 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stRequestMobileInfoGmUserCmd)
  return target;
}

int stRequestMobileInfoGmUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mobile = 1;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mobile());
    }

    // optional uint32 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRequestMobileInfoGmUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRequestMobileInfoGmUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRequestMobileInfoGmUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRequestMobileInfoGmUserCmd::MergeFrom(const stRequestMobileInfoGmUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRequestMobileInfoGmUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRequestMobileInfoGmUserCmd::CopyFrom(const stRequestMobileInfoGmUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRequestMobileInfoGmUserCmd::IsInitialized() const {

  return true;
}

void stRequestMobileInfoGmUserCmd::Swap(stRequestMobileInfoGmUserCmd* other) {
  if (other != this) {
    std::swap(mobile_, other->mobile_);
    std::swap(accid_, other->accid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRequestMobileInfoGmUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRequestMobileInfoGmUserCmd_descriptor_;
  metadata.reflection = stRequestMobileInfoGmUserCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
