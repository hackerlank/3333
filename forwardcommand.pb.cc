// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: forwardcommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "forwardcommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* Forward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Forward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Forward_Param_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserJsMessageForwardUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserJsMessageForwardUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebSocketForwardUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebSocketForwardUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebSocketForwardUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebSocketForwardUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* BehaviorMessageForwardUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorMessageForwardUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BehaviorMessageForwardUserPmd_CS_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_forwardcommand_2eproto() {
  protobuf_AddDesc_forwardcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "forwardcommand.proto");
  GOOGLE_CHECK(file != NULL);
  Forward_descriptor_ = file->message_type(0);
  static const int Forward_offsets_[1] = {
  };
  Forward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Forward_descriptor_,
      Forward::default_instance_,
      Forward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Forward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Forward));
  Forward_Param_descriptor_ = Forward_descriptor_->enum_type(0);
  UserJsMessageForwardUserPmd_CS_descriptor_ = file->message_type(1);
  static const int UserJsMessageForwardUserPmd_CS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserJsMessageForwardUserPmd_CS, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserJsMessageForwardUserPmd_CS, msgbytes_),
  };
  UserJsMessageForwardUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserJsMessageForwardUserPmd_CS_descriptor_,
      UserJsMessageForwardUserPmd_CS::default_instance_,
      UserJsMessageForwardUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserJsMessageForwardUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserJsMessageForwardUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserJsMessageForwardUserPmd_CS));
  WebSocketForwardUserPmd_C_descriptor_ = file->message_type(2);
  static const int WebSocketForwardUserPmd_C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_C, accountid_),
  };
  WebSocketForwardUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebSocketForwardUserPmd_C_descriptor_,
      WebSocketForwardUserPmd_C::default_instance_,
      WebSocketForwardUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebSocketForwardUserPmd_C));
  WebSocketForwardUserPmd_S_descriptor_ = file->message_type(3);
  static const int WebSocketForwardUserPmd_S_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_S, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_S, jsongatewayurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_S, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_S, logintempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_S, gatewayurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_S, gatewayurltcp_),
  };
  WebSocketForwardUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebSocketForwardUserPmd_S_descriptor_,
      WebSocketForwardUserPmd_S::default_instance_,
      WebSocketForwardUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebSocketForwardUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebSocketForwardUserPmd_S));
  BehaviorMessageForwardUserPmd_CS_descriptor_ = file->message_type(4);
  static const int BehaviorMessageForwardUserPmd_CS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorMessageForwardUserPmd_CS, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorMessageForwardUserPmd_CS, type_),
  };
  BehaviorMessageForwardUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorMessageForwardUserPmd_CS_descriptor_,
      BehaviorMessageForwardUserPmd_CS::default_instance_,
      BehaviorMessageForwardUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorMessageForwardUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorMessageForwardUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorMessageForwardUserPmd_CS));
  BehaviorMessageForwardUserPmd_CS_Type_descriptor_ = BehaviorMessageForwardUserPmd_CS_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_forwardcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Forward_descriptor_, &Forward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserJsMessageForwardUserPmd_CS_descriptor_, &UserJsMessageForwardUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebSocketForwardUserPmd_C_descriptor_, &WebSocketForwardUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebSocketForwardUserPmd_S_descriptor_, &WebSocketForwardUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorMessageForwardUserPmd_CS_descriptor_, &BehaviorMessageForwardUserPmd_CS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_forwardcommand_2eproto() {
  delete Forward::default_instance_;
  delete Forward_reflection_;
  delete UserJsMessageForwardUserPmd_CS::default_instance_;
  delete UserJsMessageForwardUserPmd_CS_reflection_;
  delete WebSocketForwardUserPmd_C::default_instance_;
  delete WebSocketForwardUserPmd_C_reflection_;
  delete WebSocketForwardUserPmd_S::default_instance_;
  delete WebSocketForwardUserPmd_S_reflection_;
  delete BehaviorMessageForwardUserPmd_CS::default_instance_;
  delete BehaviorMessageForwardUserPmd_CS_reflection_;
}

void protobuf_AddDesc_forwardcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024forwardcommand.proto\022\003Pmd\"\233\001\n\007Forward\""
    "\217\001\n\005Param\022\"\n\036UserJsMessageForwardUserPmd"
    "_CS\020\001\022\035\n\031WebSocketForwardUserPmd_C\020\004\022\035\n\031"
    "WebSocketForwardUserPmd_S\020\005\022$\n BehaviorM"
    "essageForwardUserPmd_CS\020\006\"\?\n\036UserJsMessa"
    "geForwardUserPmd_CS\022\013\n\003msg\030\001 \001(\t\022\020\n\010msgb"
    "ytes\030\002 \001(\014\".\n\031WebSocketForwardUserPmd_C\022"
    "\021\n\taccountid\030\001 \002(\004\"\227\001\n\031WebSocketForwardU"
    "serPmd_S\022\021\n\taccountid\030\002 \002(\004\022\026\n\016jsongatew"
    "ayurl\030\004 \002(\t\022\017\n\007tokenid\030\005 \002(\004\022\023\n\013logintem"
    "pid\030\006 \002(\004\022\022\n\ngatewayurl\030\007 \002(\t\022\025\n\rgateway"
    "urltcp\030\010 \002(\t\"\235\001\n BehaviorMessageForwardU"
    "serPmd_CS\022\013\n\003msg\030\001 \003(\t\022D\n\004type\030\002 \001(\0162*.P"
    "md.BehaviorMessageForwardUserPmd_CS.Type"
    ":\nNormalText\"&\n\004Type\022\016\n\nNormalText\020\001\022\016\n\n"
    "UploadTree\020\002", 612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "forwardcommand.proto", &protobuf_RegisterTypes);
  Forward::default_instance_ = new Forward();
  UserJsMessageForwardUserPmd_CS::default_instance_ = new UserJsMessageForwardUserPmd_CS();
  WebSocketForwardUserPmd_C::default_instance_ = new WebSocketForwardUserPmd_C();
  WebSocketForwardUserPmd_S::default_instance_ = new WebSocketForwardUserPmd_S();
  BehaviorMessageForwardUserPmd_CS::default_instance_ = new BehaviorMessageForwardUserPmd_CS();
  Forward::default_instance_->InitAsDefaultInstance();
  UserJsMessageForwardUserPmd_CS::default_instance_->InitAsDefaultInstance();
  WebSocketForwardUserPmd_C::default_instance_->InitAsDefaultInstance();
  WebSocketForwardUserPmd_S::default_instance_->InitAsDefaultInstance();
  BehaviorMessageForwardUserPmd_CS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_forwardcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_forwardcommand_2eproto {
  StaticDescriptorInitializer_forwardcommand_2eproto() {
    protobuf_AddDesc_forwardcommand_2eproto();
  }
} static_descriptor_initializer_forwardcommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Forward_Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Forward_Param_descriptor_;
}
bool Forward_Param_IsValid(int value) {
  switch(value) {
    case 1:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Forward_Param Forward::UserJsMessageForwardUserPmd_CS;
const Forward_Param Forward::WebSocketForwardUserPmd_C;
const Forward_Param Forward::WebSocketForwardUserPmd_S;
const Forward_Param Forward::BehaviorMessageForwardUserPmd_CS;
const Forward_Param Forward::Param_MIN;
const Forward_Param Forward::Param_MAX;
const int Forward::Param_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Forward::Forward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.Forward)
}

void Forward::InitAsDefaultInstance() {
}

Forward::Forward(const Forward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.Forward)
}

void Forward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Forward::~Forward() {
  // @@protoc_insertion_point(destructor:Pmd.Forward)
  SharedDtor();
}

void Forward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Forward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Forward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Forward_descriptor_;
}

const Forward& Forward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_forwardcommand_2eproto();
  return *default_instance_;
}

Forward* Forward::default_instance_ = NULL;

Forward* Forward::New() const {
  return new Forward;
}

void Forward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Forward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.Forward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.Forward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.Forward)
  return false;
#undef DO_
}

void Forward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.Forward)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.Forward)
}

::google::protobuf::uint8* Forward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.Forward)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.Forward)
  return target;
}

int Forward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Forward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Forward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Forward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Forward::MergeFrom(const Forward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Forward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Forward::CopyFrom(const Forward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Forward::IsInitialized() const {

  return true;
}

void Forward::Swap(Forward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Forward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Forward_descriptor_;
  metadata.reflection = Forward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserJsMessageForwardUserPmd_CS::kMsgFieldNumber;
const int UserJsMessageForwardUserPmd_CS::kMsgbytesFieldNumber;
#endif  // !_MSC_VER

UserJsMessageForwardUserPmd_CS::UserJsMessageForwardUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserJsMessageForwardUserPmd_CS)
}

void UserJsMessageForwardUserPmd_CS::InitAsDefaultInstance() {
}

UserJsMessageForwardUserPmd_CS::UserJsMessageForwardUserPmd_CS(const UserJsMessageForwardUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserJsMessageForwardUserPmd_CS)
}

void UserJsMessageForwardUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserJsMessageForwardUserPmd_CS::~UserJsMessageForwardUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.UserJsMessageForwardUserPmd_CS)
  SharedDtor();
}

void UserJsMessageForwardUserPmd_CS::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msgbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgbytes_;
  }
  if (this != default_instance_) {
  }
}

void UserJsMessageForwardUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserJsMessageForwardUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserJsMessageForwardUserPmd_CS_descriptor_;
}

const UserJsMessageForwardUserPmd_CS& UserJsMessageForwardUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_forwardcommand_2eproto();
  return *default_instance_;
}

UserJsMessageForwardUserPmd_CS* UserJsMessageForwardUserPmd_CS::default_instance_ = NULL;

UserJsMessageForwardUserPmd_CS* UserJsMessageForwardUserPmd_CS::New() const {
  return new UserJsMessageForwardUserPmd_CS;
}

void UserJsMessageForwardUserPmd_CS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
    if (has_msgbytes()) {
      if (msgbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgbytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserJsMessageForwardUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserJsMessageForwardUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgbytes;
        break;
      }

      // optional bytes msgbytes = 2;
      case 2: {
        if (tag == 18) {
         parse_msgbytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgbytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserJsMessageForwardUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserJsMessageForwardUserPmd_CS)
  return false;
#undef DO_
}

void UserJsMessageForwardUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserJsMessageForwardUserPmd_CS)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // optional bytes msgbytes = 2;
  if (has_msgbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msgbytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserJsMessageForwardUserPmd_CS)
}

::google::protobuf::uint8* UserJsMessageForwardUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserJsMessageForwardUserPmd_CS)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional bytes msgbytes = 2;
  if (has_msgbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msgbytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserJsMessageForwardUserPmd_CS)
  return target;
}

int UserJsMessageForwardUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional bytes msgbytes = 2;
    if (has_msgbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgbytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserJsMessageForwardUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserJsMessageForwardUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserJsMessageForwardUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserJsMessageForwardUserPmd_CS::MergeFrom(const UserJsMessageForwardUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_msgbytes()) {
      set_msgbytes(from.msgbytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserJsMessageForwardUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserJsMessageForwardUserPmd_CS::CopyFrom(const UserJsMessageForwardUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserJsMessageForwardUserPmd_CS::IsInitialized() const {

  return true;
}

void UserJsMessageForwardUserPmd_CS::Swap(UserJsMessageForwardUserPmd_CS* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(msgbytes_, other->msgbytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserJsMessageForwardUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserJsMessageForwardUserPmd_CS_descriptor_;
  metadata.reflection = UserJsMessageForwardUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebSocketForwardUserPmd_C::kAccountidFieldNumber;
#endif  // !_MSC_VER

WebSocketForwardUserPmd_C::WebSocketForwardUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.WebSocketForwardUserPmd_C)
}

void WebSocketForwardUserPmd_C::InitAsDefaultInstance() {
}

WebSocketForwardUserPmd_C::WebSocketForwardUserPmd_C(const WebSocketForwardUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.WebSocketForwardUserPmd_C)
}

void WebSocketForwardUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebSocketForwardUserPmd_C::~WebSocketForwardUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.WebSocketForwardUserPmd_C)
  SharedDtor();
}

void WebSocketForwardUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebSocketForwardUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebSocketForwardUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebSocketForwardUserPmd_C_descriptor_;
}

const WebSocketForwardUserPmd_C& WebSocketForwardUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_forwardcommand_2eproto();
  return *default_instance_;
}

WebSocketForwardUserPmd_C* WebSocketForwardUserPmd_C::default_instance_ = NULL;

WebSocketForwardUserPmd_C* WebSocketForwardUserPmd_C::New() const {
  return new WebSocketForwardUserPmd_C;
}

void WebSocketForwardUserPmd_C::Clear() {
  accountid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebSocketForwardUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.WebSocketForwardUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.WebSocketForwardUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.WebSocketForwardUserPmd_C)
  return false;
#undef DO_
}

void WebSocketForwardUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.WebSocketForwardUserPmd_C)
  // required uint64 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.WebSocketForwardUserPmd_C)
}

::google::protobuf::uint8* WebSocketForwardUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.WebSocketForwardUserPmd_C)
  // required uint64 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.WebSocketForwardUserPmd_C)
  return target;
}

int WebSocketForwardUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebSocketForwardUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebSocketForwardUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebSocketForwardUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebSocketForwardUserPmd_C::MergeFrom(const WebSocketForwardUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebSocketForwardUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSocketForwardUserPmd_C::CopyFrom(const WebSocketForwardUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketForwardUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WebSocketForwardUserPmd_C::Swap(WebSocketForwardUserPmd_C* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebSocketForwardUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebSocketForwardUserPmd_C_descriptor_;
  metadata.reflection = WebSocketForwardUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebSocketForwardUserPmd_S::kAccountidFieldNumber;
const int WebSocketForwardUserPmd_S::kJsongatewayurlFieldNumber;
const int WebSocketForwardUserPmd_S::kTokenidFieldNumber;
const int WebSocketForwardUserPmd_S::kLogintempidFieldNumber;
const int WebSocketForwardUserPmd_S::kGatewayurlFieldNumber;
const int WebSocketForwardUserPmd_S::kGatewayurltcpFieldNumber;
#endif  // !_MSC_VER

WebSocketForwardUserPmd_S::WebSocketForwardUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.WebSocketForwardUserPmd_S)
}

void WebSocketForwardUserPmd_S::InitAsDefaultInstance() {
}

WebSocketForwardUserPmd_S::WebSocketForwardUserPmd_S(const WebSocketForwardUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.WebSocketForwardUserPmd_S)
}

void WebSocketForwardUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  jsongatewayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tokenid_ = GOOGLE_ULONGLONG(0);
  logintempid_ = GOOGLE_ULONGLONG(0);
  gatewayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayurltcp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebSocketForwardUserPmd_S::~WebSocketForwardUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.WebSocketForwardUserPmd_S)
  SharedDtor();
}

void WebSocketForwardUserPmd_S::SharedDtor() {
  if (jsongatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jsongatewayurl_;
  }
  if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatewayurl_;
  }
  if (gatewayurltcp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatewayurltcp_;
  }
  if (this != default_instance_) {
  }
}

void WebSocketForwardUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebSocketForwardUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebSocketForwardUserPmd_S_descriptor_;
}

const WebSocketForwardUserPmd_S& WebSocketForwardUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_forwardcommand_2eproto();
  return *default_instance_;
}

WebSocketForwardUserPmd_S* WebSocketForwardUserPmd_S::default_instance_ = NULL;

WebSocketForwardUserPmd_S* WebSocketForwardUserPmd_S::New() const {
  return new WebSocketForwardUserPmd_S;
}

void WebSocketForwardUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WebSocketForwardUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(tokenid_, logintempid_);
    accountid_ = GOOGLE_ULONGLONG(0);
    if (has_jsongatewayurl()) {
      if (jsongatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jsongatewayurl_->clear();
      }
    }
    if (has_gatewayurl()) {
      if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gatewayurl_->clear();
      }
    }
    if (has_gatewayurltcp()) {
      if (gatewayurltcp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gatewayurltcp_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebSocketForwardUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.WebSocketForwardUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 accountid = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_jsongatewayurl;
        break;
      }

      // required string jsongatewayurl = 4;
      case 4: {
        if (tag == 34) {
         parse_jsongatewayurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsongatewayurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jsongatewayurl().data(), this->jsongatewayurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jsongatewayurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tokenid;
        break;
      }

      // required uint64 tokenid = 5;
      case 5: {
        if (tag == 40) {
         parse_tokenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenid_)));
          set_has_tokenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_logintempid;
        break;
      }

      // required uint64 logintempid = 6;
      case 6: {
        if (tag == 48) {
         parse_logintempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintempid_)));
          set_has_logintempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gatewayurl;
        break;
      }

      // required string gatewayurl = 7;
      case 7: {
        if (tag == 58) {
         parse_gatewayurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gatewayurl().data(), this->gatewayurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gatewayurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gatewayurltcp;
        break;
      }

      // required string gatewayurltcp = 8;
      case 8: {
        if (tag == 66) {
         parse_gatewayurltcp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayurltcp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gatewayurltcp().data(), this->gatewayurltcp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gatewayurltcp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.WebSocketForwardUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.WebSocketForwardUserPmd_S)
  return false;
#undef DO_
}

void WebSocketForwardUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.WebSocketForwardUserPmd_S)
  // required uint64 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accountid(), output);
  }

  // required string jsongatewayurl = 4;
  if (has_jsongatewayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsongatewayurl().data(), this->jsongatewayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jsongatewayurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jsongatewayurl(), output);
  }

  // required uint64 tokenid = 5;
  if (has_tokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->tokenid(), output);
  }

  // required uint64 logintempid = 6;
  if (has_logintempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->logintempid(), output);
  }

  // required string gatewayurl = 7;
  if (has_gatewayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurl().data(), this->gatewayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gatewayurl(), output);
  }

  // required string gatewayurltcp = 8;
  if (has_gatewayurltcp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurltcp().data(), this->gatewayurltcp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurltcp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->gatewayurltcp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.WebSocketForwardUserPmd_S)
}

::google::protobuf::uint8* WebSocketForwardUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.WebSocketForwardUserPmd_S)
  // required uint64 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accountid(), target);
  }

  // required string jsongatewayurl = 4;
  if (has_jsongatewayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsongatewayurl().data(), this->jsongatewayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jsongatewayurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jsongatewayurl(), target);
  }

  // required uint64 tokenid = 5;
  if (has_tokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->tokenid(), target);
  }

  // required uint64 logintempid = 6;
  if (has_logintempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->logintempid(), target);
  }

  // required string gatewayurl = 7;
  if (has_gatewayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurl().data(), this->gatewayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gatewayurl(), target);
  }

  // required string gatewayurltcp = 8;
  if (has_gatewayurltcp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurltcp().data(), this->gatewayurltcp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurltcp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->gatewayurltcp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.WebSocketForwardUserPmd_S)
  return target;
}

int WebSocketForwardUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // required string jsongatewayurl = 4;
    if (has_jsongatewayurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsongatewayurl());
    }

    // required uint64 tokenid = 5;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tokenid());
    }

    // required uint64 logintempid = 6;
    if (has_logintempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintempid());
    }

    // required string gatewayurl = 7;
    if (has_gatewayurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayurl());
    }

    // required string gatewayurltcp = 8;
    if (has_gatewayurltcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayurltcp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebSocketForwardUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebSocketForwardUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebSocketForwardUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebSocketForwardUserPmd_S::MergeFrom(const WebSocketForwardUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_jsongatewayurl()) {
      set_jsongatewayurl(from.jsongatewayurl());
    }
    if (from.has_tokenid()) {
      set_tokenid(from.tokenid());
    }
    if (from.has_logintempid()) {
      set_logintempid(from.logintempid());
    }
    if (from.has_gatewayurl()) {
      set_gatewayurl(from.gatewayurl());
    }
    if (from.has_gatewayurltcp()) {
      set_gatewayurltcp(from.gatewayurltcp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebSocketForwardUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSocketForwardUserPmd_S::CopyFrom(const WebSocketForwardUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketForwardUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void WebSocketForwardUserPmd_S::Swap(WebSocketForwardUserPmd_S* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(jsongatewayurl_, other->jsongatewayurl_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(logintempid_, other->logintempid_);
    std::swap(gatewayurl_, other->gatewayurl_);
    std::swap(gatewayurltcp_, other->gatewayurltcp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebSocketForwardUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebSocketForwardUserPmd_S_descriptor_;
  metadata.reflection = WebSocketForwardUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BehaviorMessageForwardUserPmd_CS_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorMessageForwardUserPmd_CS_Type_descriptor_;
}
bool BehaviorMessageForwardUserPmd_CS_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BehaviorMessageForwardUserPmd_CS_Type BehaviorMessageForwardUserPmd_CS::NormalText;
const BehaviorMessageForwardUserPmd_CS_Type BehaviorMessageForwardUserPmd_CS::UploadTree;
const BehaviorMessageForwardUserPmd_CS_Type BehaviorMessageForwardUserPmd_CS::Type_MIN;
const BehaviorMessageForwardUserPmd_CS_Type BehaviorMessageForwardUserPmd_CS::Type_MAX;
const int BehaviorMessageForwardUserPmd_CS::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BehaviorMessageForwardUserPmd_CS::kMsgFieldNumber;
const int BehaviorMessageForwardUserPmd_CS::kTypeFieldNumber;
#endif  // !_MSC_VER

BehaviorMessageForwardUserPmd_CS::BehaviorMessageForwardUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.BehaviorMessageForwardUserPmd_CS)
}

void BehaviorMessageForwardUserPmd_CS::InitAsDefaultInstance() {
}

BehaviorMessageForwardUserPmd_CS::BehaviorMessageForwardUserPmd_CS(const BehaviorMessageForwardUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.BehaviorMessageForwardUserPmd_CS)
}

void BehaviorMessageForwardUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorMessageForwardUserPmd_CS::~BehaviorMessageForwardUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.BehaviorMessageForwardUserPmd_CS)
  SharedDtor();
}

void BehaviorMessageForwardUserPmd_CS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BehaviorMessageForwardUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorMessageForwardUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorMessageForwardUserPmd_CS_descriptor_;
}

const BehaviorMessageForwardUserPmd_CS& BehaviorMessageForwardUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_forwardcommand_2eproto();
  return *default_instance_;
}

BehaviorMessageForwardUserPmd_CS* BehaviorMessageForwardUserPmd_CS::default_instance_ = NULL;

BehaviorMessageForwardUserPmd_CS* BehaviorMessageForwardUserPmd_CS::New() const {
  return new BehaviorMessageForwardUserPmd_CS;
}

void BehaviorMessageForwardUserPmd_CS::Clear() {
  type_ = 1;
  msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorMessageForwardUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.BehaviorMessageForwardUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string msg = 1;
      case 1: {
        if (tag == 10) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg(this->msg_size() - 1).data(),
            this->msg(this->msg_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_msg;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Pmd.BehaviorMessageForwardUserPmd_CS.Type type = 2 [default = NormalText];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pmd::BehaviorMessageForwardUserPmd_CS_Type_IsValid(value)) {
            set_type(static_cast< ::Pmd::BehaviorMessageForwardUserPmd_CS_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.BehaviorMessageForwardUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.BehaviorMessageForwardUserPmd_CS)
  return false;
#undef DO_
}

void BehaviorMessageForwardUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.BehaviorMessageForwardUserPmd_CS)
  // repeated string msg = 1;
  for (int i = 0; i < this->msg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->msg(i).data(), this->msg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "msg");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(i), output);
  }

  // optional .Pmd.BehaviorMessageForwardUserPmd_CS.Type type = 2 [default = NormalText];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.BehaviorMessageForwardUserPmd_CS)
}

::google::protobuf::uint8* BehaviorMessageForwardUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.BehaviorMessageForwardUserPmd_CS)
  // repeated string msg = 1;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg(i).data(), this->msg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->msg(i), target);
  }

  // optional .Pmd.BehaviorMessageForwardUserPmd_CS.Type type = 2 [default = NormalText];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.BehaviorMessageForwardUserPmd_CS)
  return target;
}

int BehaviorMessageForwardUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Pmd.BehaviorMessageForwardUserPmd_CS.Type type = 2 [default = NormalText];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string msg = 1;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorMessageForwardUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorMessageForwardUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorMessageForwardUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorMessageForwardUserPmd_CS::MergeFrom(const BehaviorMessageForwardUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorMessageForwardUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorMessageForwardUserPmd_CS::CopyFrom(const BehaviorMessageForwardUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorMessageForwardUserPmd_CS::IsInitialized() const {

  return true;
}

void BehaviorMessageForwardUserPmd_CS::Swap(BehaviorMessageForwardUserPmd_CS* other) {
  if (other != this) {
    msg_.Swap(&other->msg_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorMessageForwardUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorMessageForwardUserPmd_CS_descriptor_;
  metadata.reflection = BehaviorMessageForwardUserPmd_CS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
