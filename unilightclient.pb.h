// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unilightclient.proto

#ifndef PROTOBUF_unilightclient_2eproto__INCLUDED
#define PROTOBUF_unilightclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "pmd.pb.h"
#include "logincommand.pb.h"
// @@protoc_insertion_point(includes)

namespace Pmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_unilightclient_2eproto();
void protobuf_AssignDesc_unilightclient_2eproto();
void protobuf_ShutdownFile_unilightclient_2eproto();

class Any;
class HttpPackage;
class HttpPackageReturn;
class RequestZoneList;
class RequestSelectZone;
class RequestSelectZoneReturn;
class PlatTokenLogin;
class PlatTokenLoginReturn;

// ===================================================================

class Any : public ::google::protobuf::Message {
 public:
  Any();
  virtual ~Any();

  Any(const Any& from);

  inline Any& operator=(const Any& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Any& default_instance();

  void Swap(Any* other);

  // implements Message ----------------------------------------------

  Any* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Any& from);
  void MergeFrom(const Any& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pmd.Any)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_unilightclient_2eproto();
  friend void protobuf_AssignDesc_unilightclient_2eproto();
  friend void protobuf_ShutdownFile_unilightclient_2eproto();

  void InitAsDefaultInstance();
  static Any* default_instance_;
};
// -------------------------------------------------------------------

class HttpPackage : public ::google::protobuf::Message {
 public:
  HttpPackage();
  virtual ~HttpPackage();

  HttpPackage(const HttpPackage& from);

  inline HttpPackage& operator=(const HttpPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpPackage& default_instance();

  void Swap(HttpPackage* other);

  // implements Message ----------------------------------------------

  HttpPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpPackage& from);
  void MergeFrom(const HttpPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string do = 1;
  inline bool has_do_() const;
  inline void clear_do_();
  static const int kDoFieldNumber = 1;
  inline const ::std::string& do_() const;
  inline void set_do_(const ::std::string& value);
  inline void set_do_(const char* value);
  inline void set_do_(const char* value, size_t size);
  inline ::std::string* mutable_do_();
  inline ::std::string* release_do_();
  inline void set_allocated_do_(::std::string* do_);

  // required .Pmd.Any data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Pmd::Any& data() const;
  inline ::Pmd::Any* mutable_data();
  inline ::Pmd::Any* release_data();
  inline void set_allocated_data(::Pmd::Any* data);

  // required uint32 gameid = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 3;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // optional string unigame_plat_login = 7;
  inline bool has_unigame_plat_login() const;
  inline void clear_unigame_plat_login();
  static const int kUnigamePlatLoginFieldNumber = 7;
  inline const ::std::string& unigame_plat_login() const;
  inline void set_unigame_plat_login(const ::std::string& value);
  inline void set_unigame_plat_login(const char* value);
  inline void set_unigame_plat_login(const char* value, size_t size);
  inline ::std::string* mutable_unigame_plat_login();
  inline ::std::string* release_unigame_plat_login();
  inline void set_allocated_unigame_plat_login(::std::string* unigame_plat_login);

  // required uint64 unigame_plat_timestamp = 8;
  inline bool has_unigame_plat_timestamp() const;
  inline void clear_unigame_plat_timestamp();
  static const int kUnigamePlatTimestampFieldNumber = 8;
  inline ::google::protobuf::uint64 unigame_plat_timestamp() const;
  inline void set_unigame_plat_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.HttpPackage)
 private:
  inline void set_has_do_();
  inline void clear_has_do_();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_unigame_plat_login();
  inline void clear_has_unigame_plat_login();
  inline void set_has_unigame_plat_timestamp();
  inline void clear_has_unigame_plat_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* do__;
  ::Pmd::Any* data_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* uid_;
  ::std::string* sid_;
  ::std::string* unigame_plat_login_;
  ::google::protobuf::uint64 unigame_plat_timestamp_;
  friend void  protobuf_AddDesc_unilightclient_2eproto();
  friend void protobuf_AssignDesc_unilightclient_2eproto();
  friend void protobuf_ShutdownFile_unilightclient_2eproto();

  void InitAsDefaultInstance();
  static HttpPackage* default_instance_;
};
// -------------------------------------------------------------------

class HttpPackageReturn : public ::google::protobuf::Message {
 public:
  HttpPackageReturn();
  virtual ~HttpPackageReturn();

  HttpPackageReturn(const HttpPackageReturn& from);

  inline HttpPackageReturn& operator=(const HttpPackageReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpPackageReturn& default_instance();

  void Swap(HttpPackageReturn* other);

  // implements Message ----------------------------------------------

  HttpPackageReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpPackageReturn& from);
  void MergeFrom(const HttpPackageReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string do = 1;
  inline bool has_do_() const;
  inline void clear_do_();
  static const int kDoFieldNumber = 1;
  inline const ::std::string& do_() const;
  inline void set_do_(const ::std::string& value);
  inline void set_do_(const char* value);
  inline void set_do_(const char* value, size_t size);
  inline ::std::string* mutable_do_();
  inline ::std::string* release_do_();
  inline void set_allocated_do_(::std::string* do_);

  // required .Pmd.Any data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Pmd::Any& data() const;
  inline ::Pmd::Any* mutable_data();
  inline ::Pmd::Any* release_data();
  inline void set_allocated_data(::Pmd::Any* data);

  // required uint32 gameid = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 3;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional .Pmd.HttpReturnCode errno = 7;
  inline bool has_errno() const;
  inline void clear_errno();
  static const int kErrnoFieldNumber = 7;
  inline ::Pmd::HttpReturnCode errno() const;
  inline void set_errno(::Pmd::HttpReturnCode value);

  // @@protoc_insertion_point(class_scope:Pmd.HttpPackageReturn)
 private:
  inline void set_has_do_();
  inline void clear_has_do_();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_errno();
  inline void clear_has_errno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* do__;
  ::Pmd::Any* data_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 zoneid_;
  int errno_;
  friend void  protobuf_AddDesc_unilightclient_2eproto();
  friend void protobuf_AssignDesc_unilightclient_2eproto();
  friend void protobuf_ShutdownFile_unilightclient_2eproto();

  void InitAsDefaultInstance();
  static HttpPackageReturn* default_instance_;
};
// -------------------------------------------------------------------

class RequestZoneList : public ::google::protobuf::Message {
 public:
  RequestZoneList();
  virtual ~RequestZoneList();

  RequestZoneList(const RequestZoneList& from);

  inline RequestZoneList& operator=(const RequestZoneList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestZoneList& default_instance();

  void Swap(RequestZoneList* other);

  // implements Message ----------------------------------------------

  RequestZoneList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestZoneList& from);
  void MergeFrom(const RequestZoneList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gamename = 1;
  inline bool has_gamename() const;
  inline void clear_gamename();
  static const int kGamenameFieldNumber = 1;
  inline const ::std::string& gamename() const;
  inline void set_gamename(const ::std::string& value);
  inline void set_gamename(const char* value);
  inline void set_gamename(const char* value, size_t size);
  inline ::std::string* mutable_gamename();
  inline ::std::string* release_gamename();
  inline void set_allocated_gamename(::std::string* gamename);

  // required uint32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // repeated .Pmd.ZoneInfo zonelist = 3;
  inline int zonelist_size() const;
  inline void clear_zonelist();
  static const int kZonelistFieldNumber = 3;
  inline const ::Pmd::ZoneInfo& zonelist(int index) const;
  inline ::Pmd::ZoneInfo* mutable_zonelist(int index);
  inline ::Pmd::ZoneInfo* add_zonelist();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo >&
      zonelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo >*
      mutable_zonelist();

  // @@protoc_insertion_point(class_scope:Pmd.RequestZoneList)
 private:
  inline void set_has_gamename();
  inline void clear_has_gamename();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gamename_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo > zonelist_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_unilightclient_2eproto();
  friend void protobuf_AssignDesc_unilightclient_2eproto();
  friend void protobuf_ShutdownFile_unilightclient_2eproto();

  void InitAsDefaultInstance();
  static RequestZoneList* default_instance_;
};
// -------------------------------------------------------------------

class RequestSelectZone : public ::google::protobuf::Message {
 public:
  RequestSelectZone();
  virtual ~RequestSelectZone();

  RequestSelectZone(const RequestSelectZone& from);

  inline RequestSelectZone& operator=(const RequestSelectZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSelectZone& default_instance();

  void Swap(RequestSelectZone* other);

  // implements Message ----------------------------------------------

  RequestSelectZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSelectZone& from);
  void MergeFrom(const RequestSelectZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pmd.RequestSelectZone)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_unilightclient_2eproto();
  friend void protobuf_AssignDesc_unilightclient_2eproto();
  friend void protobuf_ShutdownFile_unilightclient_2eproto();

  void InitAsDefaultInstance();
  static RequestSelectZone* default_instance_;
};
// -------------------------------------------------------------------

class RequestSelectZoneReturn : public ::google::protobuf::Message {
 public:
  RequestSelectZoneReturn();
  virtual ~RequestSelectZoneReturn();

  RequestSelectZoneReturn(const RequestSelectZoneReturn& from);

  inline RequestSelectZoneReturn& operator=(const RequestSelectZoneReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSelectZoneReturn& default_instance();

  void Swap(RequestSelectZoneReturn* other);

  // implements Message ----------------------------------------------

  RequestSelectZoneReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSelectZoneReturn& from);
  void MergeFrom(const RequestSelectZoneReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string gatewayurl = 1;
  inline bool has_gatewayurl() const;
  inline void clear_gatewayurl();
  static const int kGatewayurlFieldNumber = 1;
  inline const ::std::string& gatewayurl() const;
  inline void set_gatewayurl(const ::std::string& value);
  inline void set_gatewayurl(const char* value);
  inline void set_gatewayurl(const char* value, size_t size);
  inline ::std::string* mutable_gatewayurl();
  inline ::std::string* release_gatewayurl();
  inline void set_allocated_gatewayurl(::std::string* gatewayurl);

  // optional bool separatezoneuid = 2;
  inline bool has_separatezoneuid() const;
  inline void clear_separatezoneuid();
  static const int kSeparatezoneuidFieldNumber = 2;
  inline bool separatezoneuid() const;
  inline void set_separatezoneuid(bool value);

  // optional uint64 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.RequestSelectZoneReturn)
 private:
  inline void set_has_gatewayurl();
  inline void clear_has_gatewayurl();
  inline void set_has_separatezoneuid();
  inline void clear_has_separatezoneuid();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gatewayurl_;
  ::google::protobuf::uint64 uid_;
  bool separatezoneuid_;
  friend void  protobuf_AddDesc_unilightclient_2eproto();
  friend void protobuf_AssignDesc_unilightclient_2eproto();
  friend void protobuf_ShutdownFile_unilightclient_2eproto();

  void InitAsDefaultInstance();
  static RequestSelectZoneReturn* default_instance_;
};
// -------------------------------------------------------------------

class PlatTokenLogin : public ::google::protobuf::Message {
 public:
  PlatTokenLogin();
  virtual ~PlatTokenLogin();

  PlatTokenLogin(const PlatTokenLogin& from);

  inline PlatTokenLogin& operator=(const PlatTokenLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlatTokenLogin& default_instance();

  void Swap(PlatTokenLogin* other);

  // implements Message ----------------------------------------------

  PlatTokenLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlatTokenLogin& from);
  void MergeFrom(const PlatTokenLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Pmd.PlatInfo platinfo = 1;
  inline bool has_platinfo() const;
  inline void clear_platinfo();
  static const int kPlatinfoFieldNumber = 1;
  inline const ::Pmd::PlatInfo& platinfo() const;
  inline ::Pmd::PlatInfo* mutable_platinfo();
  inline ::Pmd::PlatInfo* release_platinfo();
  inline void set_allocated_platinfo(::Pmd::PlatInfo* platinfo);

  // @@protoc_insertion_point(class_scope:Pmd.PlatTokenLogin)
 private:
  inline void set_has_platinfo();
  inline void clear_has_platinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::PlatInfo* platinfo_;
  friend void  protobuf_AddDesc_unilightclient_2eproto();
  friend void protobuf_AssignDesc_unilightclient_2eproto();
  friend void protobuf_ShutdownFile_unilightclient_2eproto();

  void InitAsDefaultInstance();
  static PlatTokenLogin* default_instance_;
};
// -------------------------------------------------------------------

class PlatTokenLoginReturn : public ::google::protobuf::Message {
 public:
  PlatTokenLoginReturn();
  virtual ~PlatTokenLoginReturn();

  PlatTokenLoginReturn(const PlatTokenLoginReturn& from);

  inline PlatTokenLoginReturn& operator=(const PlatTokenLoginReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlatTokenLoginReturn& default_instance();

  void Swap(PlatTokenLoginReturn* other);

  // implements Message ----------------------------------------------

  PlatTokenLoginReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlatTokenLoginReturn& from);
  void MergeFrom(const PlatTokenLoginReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Pmd.PlatInfo platinfo = 1;
  inline bool has_platinfo() const;
  inline void clear_platinfo();
  static const int kPlatinfoFieldNumber = 1;
  inline const ::Pmd::PlatInfo& platinfo() const;
  inline ::Pmd::PlatInfo* mutable_platinfo();
  inline ::Pmd::PlatInfo* release_platinfo();
  inline void set_allocated_platinfo(::Pmd::PlatInfo* platinfo);

  // required string uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // required string sid = 4;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 4;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // required string unigame_plat_key = 5;
  inline bool has_unigame_plat_key() const;
  inline void clear_unigame_plat_key();
  static const int kUnigamePlatKeyFieldNumber = 5;
  inline const ::std::string& unigame_plat_key() const;
  inline void set_unigame_plat_key(const ::std::string& value);
  inline void set_unigame_plat_key(const char* value);
  inline void set_unigame_plat_key(const char* value, size_t size);
  inline ::std::string* mutable_unigame_plat_key();
  inline ::std::string* release_unigame_plat_key();
  inline void set_allocated_unigame_plat_key(::std::string* unigame_plat_key);

  // required string unigame_plat_login = 6;
  inline bool has_unigame_plat_login() const;
  inline void clear_unigame_plat_login();
  static const int kUnigamePlatLoginFieldNumber = 6;
  inline const ::std::string& unigame_plat_login() const;
  inline void set_unigame_plat_login(const ::std::string& value);
  inline void set_unigame_plat_login(const char* value);
  inline void set_unigame_plat_login(const char* value, size_t size);
  inline ::std::string* mutable_unigame_plat_login();
  inline ::std::string* release_unigame_plat_login();
  inline void set_allocated_unigame_plat_login(::std::string* unigame_plat_login);

  // required uint32 unigame_plat_login_life = 7;
  inline bool has_unigame_plat_login_life() const;
  inline void clear_unigame_plat_login_life();
  static const int kUnigamePlatLoginLifeFieldNumber = 7;
  inline ::google::protobuf::uint32 unigame_plat_login_life() const;
  inline void set_unigame_plat_login_life(::google::protobuf::uint32 value);

  // optional string timezone_name = 8;
  inline bool has_timezone_name() const;
  inline void clear_timezone_name();
  static const int kTimezoneNameFieldNumber = 8;
  inline const ::std::string& timezone_name() const;
  inline void set_timezone_name(const ::std::string& value);
  inline void set_timezone_name(const char* value);
  inline void set_timezone_name(const char* value, size_t size);
  inline ::std::string* mutable_timezone_name();
  inline ::std::string* release_timezone_name();
  inline void set_allocated_timezone_name(::std::string* timezone_name);

  // required int32 timezone_offset = 9;
  inline bool has_timezone_offset() const;
  inline void clear_timezone_offset();
  static const int kTimezoneOffsetFieldNumber = 9;
  inline ::google::protobuf::int32 timezone_offset() const;
  inline void set_timezone_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pmd.PlatTokenLoginReturn)
 private:
  inline void set_has_platinfo();
  inline void clear_has_platinfo();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_unigame_plat_key();
  inline void clear_has_unigame_plat_key();
  inline void set_has_unigame_plat_login();
  inline void clear_has_unigame_plat_login();
  inline void set_has_unigame_plat_login_life();
  inline void clear_has_unigame_plat_login_life();
  inline void set_has_timezone_name();
  inline void clear_has_timezone_name();
  inline void set_has_timezone_offset();
  inline void clear_has_timezone_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::PlatInfo* platinfo_;
  ::std::string* uid_;
  ::std::string* sid_;
  ::std::string* unigame_plat_key_;
  ::std::string* unigame_plat_login_;
  ::std::string* timezone_name_;
  ::google::protobuf::uint32 unigame_plat_login_life_;
  ::google::protobuf::int32 timezone_offset_;
  friend void  protobuf_AddDesc_unilightclient_2eproto();
  friend void protobuf_AssignDesc_unilightclient_2eproto();
  friend void protobuf_ShutdownFile_unilightclient_2eproto();

  void InitAsDefaultInstance();
  static PlatTokenLoginReturn* default_instance_;
};
// ===================================================================


// ===================================================================

// Any

// -------------------------------------------------------------------

// HttpPackage

// required string do = 1;
inline bool HttpPackage::has_do_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpPackage::set_has_do_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpPackage::clear_has_do_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpPackage::clear_do_() {
  if (do__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__->clear();
  }
  clear_has_do_();
}
inline const ::std::string& HttpPackage::do_() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackage.do)
  return *do__;
}
inline void HttpPackage::set_do_(const ::std::string& value) {
  set_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__ = new ::std::string;
  }
  do__->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.HttpPackage.do)
}
inline void HttpPackage::set_do_(const char* value) {
  set_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__ = new ::std::string;
  }
  do__->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.HttpPackage.do)
}
inline void HttpPackage::set_do_(const char* value, size_t size) {
  set_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__ = new ::std::string;
  }
  do__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.HttpPackage.do)
}
inline ::std::string* HttpPackage::mutable_do_() {
  set_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.HttpPackage.do)
  return do__;
}
inline ::std::string* HttpPackage::release_do_() {
  clear_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = do__;
    do__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpPackage::set_allocated_do_(::std::string* do_) {
  if (do__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete do__;
  }
  if (do_) {
    set_has_do_();
    do__ = do_;
  } else {
    clear_has_do_();
    do__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.HttpPackage.do)
}

// required .Pmd.Any data = 2;
inline bool HttpPackage::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpPackage::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpPackage::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpPackage::clear_data() {
  if (data_ != NULL) data_->::Pmd::Any::Clear();
  clear_has_data();
}
inline const ::Pmd::Any& HttpPackage::data() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackage.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Pmd::Any* HttpPackage::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Pmd::Any;
  // @@protoc_insertion_point(field_mutable:Pmd.HttpPackage.data)
  return data_;
}
inline ::Pmd::Any* HttpPackage::release_data() {
  clear_has_data();
  ::Pmd::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void HttpPackage::set_allocated_data(::Pmd::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.HttpPackage.data)
}

// required uint32 gameid = 3;
inline bool HttpPackage::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpPackage::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpPackage::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpPackage::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 HttpPackage::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackage.gameid)
  return gameid_;
}
inline void HttpPackage::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.HttpPackage.gameid)
}

// required uint32 zoneid = 4;
inline bool HttpPackage::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HttpPackage::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HttpPackage::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HttpPackage::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 HttpPackage::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackage.zoneid)
  return zoneid_;
}
inline void HttpPackage::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.HttpPackage.zoneid)
}

// optional string uid = 5;
inline bool HttpPackage::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HttpPackage::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HttpPackage::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HttpPackage::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& HttpPackage::uid() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackage.uid)
  return *uid_;
}
inline void HttpPackage::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.HttpPackage.uid)
}
inline void HttpPackage::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.HttpPackage.uid)
}
inline void HttpPackage::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.HttpPackage.uid)
}
inline ::std::string* HttpPackage::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.HttpPackage.uid)
  return uid_;
}
inline ::std::string* HttpPackage::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpPackage::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.HttpPackage.uid)
}

// optional string sid = 6;
inline bool HttpPackage::has_sid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HttpPackage::set_has_sid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HttpPackage::clear_has_sid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HttpPackage::clear_sid() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& HttpPackage::sid() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackage.sid)
  return *sid_;
}
inline void HttpPackage::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.HttpPackage.sid)
}
inline void HttpPackage::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.HttpPackage.sid)
}
inline void HttpPackage::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.HttpPackage.sid)
}
inline ::std::string* HttpPackage::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.HttpPackage.sid)
  return sid_;
}
inline ::std::string* HttpPackage::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpPackage::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.HttpPackage.sid)
}

// optional string unigame_plat_login = 7;
inline bool HttpPackage::has_unigame_plat_login() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HttpPackage::set_has_unigame_plat_login() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HttpPackage::clear_has_unigame_plat_login() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HttpPackage::clear_unigame_plat_login() {
  if (unigame_plat_login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_->clear();
  }
  clear_has_unigame_plat_login();
}
inline const ::std::string& HttpPackage::unigame_plat_login() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackage.unigame_plat_login)
  return *unigame_plat_login_;
}
inline void HttpPackage::set_unigame_plat_login(const ::std::string& value) {
  set_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_ = new ::std::string;
  }
  unigame_plat_login_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.HttpPackage.unigame_plat_login)
}
inline void HttpPackage::set_unigame_plat_login(const char* value) {
  set_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_ = new ::std::string;
  }
  unigame_plat_login_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.HttpPackage.unigame_plat_login)
}
inline void HttpPackage::set_unigame_plat_login(const char* value, size_t size) {
  set_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_ = new ::std::string;
  }
  unigame_plat_login_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.HttpPackage.unigame_plat_login)
}
inline ::std::string* HttpPackage::mutable_unigame_plat_login() {
  set_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.HttpPackage.unigame_plat_login)
  return unigame_plat_login_;
}
inline ::std::string* HttpPackage::release_unigame_plat_login() {
  clear_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unigame_plat_login_;
    unigame_plat_login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpPackage::set_allocated_unigame_plat_login(::std::string* unigame_plat_login) {
  if (unigame_plat_login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unigame_plat_login_;
  }
  if (unigame_plat_login) {
    set_has_unigame_plat_login();
    unigame_plat_login_ = unigame_plat_login;
  } else {
    clear_has_unigame_plat_login();
    unigame_plat_login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.HttpPackage.unigame_plat_login)
}

// required uint64 unigame_plat_timestamp = 8;
inline bool HttpPackage::has_unigame_plat_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HttpPackage::set_has_unigame_plat_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HttpPackage::clear_has_unigame_plat_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HttpPackage::clear_unigame_plat_timestamp() {
  unigame_plat_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_unigame_plat_timestamp();
}
inline ::google::protobuf::uint64 HttpPackage::unigame_plat_timestamp() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackage.unigame_plat_timestamp)
  return unigame_plat_timestamp_;
}
inline void HttpPackage::set_unigame_plat_timestamp(::google::protobuf::uint64 value) {
  set_has_unigame_plat_timestamp();
  unigame_plat_timestamp_ = value;
  // @@protoc_insertion_point(field_set:Pmd.HttpPackage.unigame_plat_timestamp)
}

// -------------------------------------------------------------------

// HttpPackageReturn

// required string do = 1;
inline bool HttpPackageReturn::has_do_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpPackageReturn::set_has_do_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpPackageReturn::clear_has_do_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpPackageReturn::clear_do_() {
  if (do__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__->clear();
  }
  clear_has_do_();
}
inline const ::std::string& HttpPackageReturn::do_() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackageReturn.do)
  return *do__;
}
inline void HttpPackageReturn::set_do_(const ::std::string& value) {
  set_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__ = new ::std::string;
  }
  do__->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.HttpPackageReturn.do)
}
inline void HttpPackageReturn::set_do_(const char* value) {
  set_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__ = new ::std::string;
  }
  do__->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.HttpPackageReturn.do)
}
inline void HttpPackageReturn::set_do_(const char* value, size_t size) {
  set_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__ = new ::std::string;
  }
  do__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.HttpPackageReturn.do)
}
inline ::std::string* HttpPackageReturn::mutable_do_() {
  set_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    do__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.HttpPackageReturn.do)
  return do__;
}
inline ::std::string* HttpPackageReturn::release_do_() {
  clear_has_do_();
  if (do__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = do__;
    do__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HttpPackageReturn::set_allocated_do_(::std::string* do_) {
  if (do__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete do__;
  }
  if (do_) {
    set_has_do_();
    do__ = do_;
  } else {
    clear_has_do_();
    do__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.HttpPackageReturn.do)
}

// required .Pmd.Any data = 2;
inline bool HttpPackageReturn::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpPackageReturn::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpPackageReturn::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpPackageReturn::clear_data() {
  if (data_ != NULL) data_->::Pmd::Any::Clear();
  clear_has_data();
}
inline const ::Pmd::Any& HttpPackageReturn::data() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackageReturn.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Pmd::Any* HttpPackageReturn::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Pmd::Any;
  // @@protoc_insertion_point(field_mutable:Pmd.HttpPackageReturn.data)
  return data_;
}
inline ::Pmd::Any* HttpPackageReturn::release_data() {
  clear_has_data();
  ::Pmd::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void HttpPackageReturn::set_allocated_data(::Pmd::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.HttpPackageReturn.data)
}

// required uint32 gameid = 3;
inline bool HttpPackageReturn::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpPackageReturn::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpPackageReturn::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpPackageReturn::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 HttpPackageReturn::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackageReturn.gameid)
  return gameid_;
}
inline void HttpPackageReturn::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.HttpPackageReturn.gameid)
}

// optional uint32 zoneid = 4;
inline bool HttpPackageReturn::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HttpPackageReturn::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HttpPackageReturn::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HttpPackageReturn::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 HttpPackageReturn::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackageReturn.zoneid)
  return zoneid_;
}
inline void HttpPackageReturn::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.HttpPackageReturn.zoneid)
}

// optional .Pmd.HttpReturnCode errno = 7;
inline bool HttpPackageReturn::has_errno() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HttpPackageReturn::set_has_errno() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HttpPackageReturn::clear_has_errno() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HttpPackageReturn::clear_errno() {
  errno_ = 0;
  clear_has_errno();
}
inline ::Pmd::HttpReturnCode HttpPackageReturn::errno() const {
  // @@protoc_insertion_point(field_get:Pmd.HttpPackageReturn.errno)
  return static_cast< ::Pmd::HttpReturnCode >(errno_);
}
inline void HttpPackageReturn::set_errno(::Pmd::HttpReturnCode value) {
  assert(::Pmd::HttpReturnCode_IsValid(value));
  set_has_errno();
  errno_ = value;
  // @@protoc_insertion_point(field_set:Pmd.HttpPackageReturn.errno)
}

// -------------------------------------------------------------------

// RequestZoneList

// optional string gamename = 1;
inline bool RequestZoneList::has_gamename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestZoneList::set_has_gamename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestZoneList::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestZoneList::clear_gamename() {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_->clear();
  }
  clear_has_gamename();
}
inline const ::std::string& RequestZoneList::gamename() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestZoneList.gamename)
  return *gamename_;
}
inline void RequestZoneList::set_gamename(const ::std::string& value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestZoneList.gamename)
}
inline void RequestZoneList::set_gamename(const char* value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestZoneList.gamename)
}
inline void RequestZoneList::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestZoneList.gamename)
}
inline ::std::string* RequestZoneList::mutable_gamename() {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestZoneList.gamename)
  return gamename_;
}
inline ::std::string* RequestZoneList::release_gamename() {
  clear_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gamename_;
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestZoneList::set_allocated_gamename(::std::string* gamename) {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (gamename) {
    set_has_gamename();
    gamename_ = gamename;
  } else {
    clear_has_gamename();
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestZoneList.gamename)
}

// required uint32 gameid = 2;
inline bool RequestZoneList::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestZoneList::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestZoneList::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestZoneList::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 RequestZoneList::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestZoneList.gameid)
  return gameid_;
}
inline void RequestZoneList::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestZoneList.gameid)
}

// repeated .Pmd.ZoneInfo zonelist = 3;
inline int RequestZoneList::zonelist_size() const {
  return zonelist_.size();
}
inline void RequestZoneList::clear_zonelist() {
  zonelist_.Clear();
}
inline const ::Pmd::ZoneInfo& RequestZoneList::zonelist(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.RequestZoneList.zonelist)
  return zonelist_.Get(index);
}
inline ::Pmd::ZoneInfo* RequestZoneList::mutable_zonelist(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.RequestZoneList.zonelist)
  return zonelist_.Mutable(index);
}
inline ::Pmd::ZoneInfo* RequestZoneList::add_zonelist() {
  // @@protoc_insertion_point(field_add:Pmd.RequestZoneList.zonelist)
  return zonelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo >&
RequestZoneList::zonelist() const {
  // @@protoc_insertion_point(field_list:Pmd.RequestZoneList.zonelist)
  return zonelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo >*
RequestZoneList::mutable_zonelist() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.RequestZoneList.zonelist)
  return &zonelist_;
}

// -------------------------------------------------------------------

// RequestSelectZone

// -------------------------------------------------------------------

// RequestSelectZoneReturn

// required string gatewayurl = 1;
inline bool RequestSelectZoneReturn::has_gatewayurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestSelectZoneReturn::set_has_gatewayurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestSelectZoneReturn::clear_has_gatewayurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestSelectZoneReturn::clear_gatewayurl() {
  if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_->clear();
  }
  clear_has_gatewayurl();
}
inline const ::std::string& RequestSelectZoneReturn::gatewayurl() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestSelectZoneReturn.gatewayurl)
  return *gatewayurl_;
}
inline void RequestSelectZoneReturn::set_gatewayurl(const ::std::string& value) {
  set_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_ = new ::std::string;
  }
  gatewayurl_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestSelectZoneReturn.gatewayurl)
}
inline void RequestSelectZoneReturn::set_gatewayurl(const char* value) {
  set_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_ = new ::std::string;
  }
  gatewayurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestSelectZoneReturn.gatewayurl)
}
inline void RequestSelectZoneReturn::set_gatewayurl(const char* value, size_t size) {
  set_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_ = new ::std::string;
  }
  gatewayurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestSelectZoneReturn.gatewayurl)
}
inline ::std::string* RequestSelectZoneReturn::mutable_gatewayurl() {
  set_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestSelectZoneReturn.gatewayurl)
  return gatewayurl_;
}
inline ::std::string* RequestSelectZoneReturn::release_gatewayurl() {
  clear_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gatewayurl_;
    gatewayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestSelectZoneReturn::set_allocated_gatewayurl(::std::string* gatewayurl) {
  if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatewayurl_;
  }
  if (gatewayurl) {
    set_has_gatewayurl();
    gatewayurl_ = gatewayurl;
  } else {
    clear_has_gatewayurl();
    gatewayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestSelectZoneReturn.gatewayurl)
}

// optional bool separatezoneuid = 2;
inline bool RequestSelectZoneReturn::has_separatezoneuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestSelectZoneReturn::set_has_separatezoneuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestSelectZoneReturn::clear_has_separatezoneuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestSelectZoneReturn::clear_separatezoneuid() {
  separatezoneuid_ = false;
  clear_has_separatezoneuid();
}
inline bool RequestSelectZoneReturn::separatezoneuid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestSelectZoneReturn.separatezoneuid)
  return separatezoneuid_;
}
inline void RequestSelectZoneReturn::set_separatezoneuid(bool value) {
  set_has_separatezoneuid();
  separatezoneuid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestSelectZoneReturn.separatezoneuid)
}

// optional uint64 uid = 3;
inline bool RequestSelectZoneReturn::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestSelectZoneReturn::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestSelectZoneReturn::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestSelectZoneReturn::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 RequestSelectZoneReturn::uid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestSelectZoneReturn.uid)
  return uid_;
}
inline void RequestSelectZoneReturn::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestSelectZoneReturn.uid)
}

// -------------------------------------------------------------------

// PlatTokenLogin

// required .Pmd.PlatInfo platinfo = 1;
inline bool PlatTokenLogin::has_platinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlatTokenLogin::set_has_platinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlatTokenLogin::clear_has_platinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlatTokenLogin::clear_platinfo() {
  if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
  clear_has_platinfo();
}
inline const ::Pmd::PlatInfo& PlatTokenLogin::platinfo() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLogin.platinfo)
  return platinfo_ != NULL ? *platinfo_ : *default_instance_->platinfo_;
}
inline ::Pmd::PlatInfo* PlatTokenLogin::mutable_platinfo() {
  set_has_platinfo();
  if (platinfo_ == NULL) platinfo_ = new ::Pmd::PlatInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.PlatTokenLogin.platinfo)
  return platinfo_;
}
inline ::Pmd::PlatInfo* PlatTokenLogin::release_platinfo() {
  clear_has_platinfo();
  ::Pmd::PlatInfo* temp = platinfo_;
  platinfo_ = NULL;
  return temp;
}
inline void PlatTokenLogin::set_allocated_platinfo(::Pmd::PlatInfo* platinfo) {
  delete platinfo_;
  platinfo_ = platinfo;
  if (platinfo) {
    set_has_platinfo();
  } else {
    clear_has_platinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatTokenLogin.platinfo)
}

// -------------------------------------------------------------------

// PlatTokenLoginReturn

// optional .Pmd.PlatInfo platinfo = 1;
inline bool PlatTokenLoginReturn::has_platinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlatTokenLoginReturn::set_has_platinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlatTokenLoginReturn::clear_has_platinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlatTokenLoginReturn::clear_platinfo() {
  if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
  clear_has_platinfo();
}
inline const ::Pmd::PlatInfo& PlatTokenLoginReturn::platinfo() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLoginReturn.platinfo)
  return platinfo_ != NULL ? *platinfo_ : *default_instance_->platinfo_;
}
inline ::Pmd::PlatInfo* PlatTokenLoginReturn::mutable_platinfo() {
  set_has_platinfo();
  if (platinfo_ == NULL) platinfo_ = new ::Pmd::PlatInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.PlatTokenLoginReturn.platinfo)
  return platinfo_;
}
inline ::Pmd::PlatInfo* PlatTokenLoginReturn::release_platinfo() {
  clear_has_platinfo();
  ::Pmd::PlatInfo* temp = platinfo_;
  platinfo_ = NULL;
  return temp;
}
inline void PlatTokenLoginReturn::set_allocated_platinfo(::Pmd::PlatInfo* platinfo) {
  delete platinfo_;
  platinfo_ = platinfo;
  if (platinfo) {
    set_has_platinfo();
  } else {
    clear_has_platinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatTokenLoginReturn.platinfo)
}

// required string uid = 3;
inline bool PlatTokenLoginReturn::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlatTokenLoginReturn::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlatTokenLoginReturn::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlatTokenLoginReturn::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& PlatTokenLoginReturn::uid() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLoginReturn.uid)
  return *uid_;
}
inline void PlatTokenLoginReturn::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatTokenLoginReturn.uid)
}
inline void PlatTokenLoginReturn::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatTokenLoginReturn.uid)
}
inline void PlatTokenLoginReturn::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatTokenLoginReturn.uid)
}
inline ::std::string* PlatTokenLoginReturn::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatTokenLoginReturn.uid)
  return uid_;
}
inline ::std::string* PlatTokenLoginReturn::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatTokenLoginReturn::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatTokenLoginReturn.uid)
}

// required string sid = 4;
inline bool PlatTokenLoginReturn::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlatTokenLoginReturn::set_has_sid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlatTokenLoginReturn::clear_has_sid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlatTokenLoginReturn::clear_sid() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& PlatTokenLoginReturn::sid() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLoginReturn.sid)
  return *sid_;
}
inline void PlatTokenLoginReturn::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatTokenLoginReturn.sid)
}
inline void PlatTokenLoginReturn::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatTokenLoginReturn.sid)
}
inline void PlatTokenLoginReturn::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatTokenLoginReturn.sid)
}
inline ::std::string* PlatTokenLoginReturn::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatTokenLoginReturn.sid)
  return sid_;
}
inline ::std::string* PlatTokenLoginReturn::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatTokenLoginReturn::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatTokenLoginReturn.sid)
}

// required string unigame_plat_key = 5;
inline bool PlatTokenLoginReturn::has_unigame_plat_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlatTokenLoginReturn::set_has_unigame_plat_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlatTokenLoginReturn::clear_has_unigame_plat_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlatTokenLoginReturn::clear_unigame_plat_key() {
  if (unigame_plat_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_key_->clear();
  }
  clear_has_unigame_plat_key();
}
inline const ::std::string& PlatTokenLoginReturn::unigame_plat_key() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLoginReturn.unigame_plat_key)
  return *unigame_plat_key_;
}
inline void PlatTokenLoginReturn::set_unigame_plat_key(const ::std::string& value) {
  set_has_unigame_plat_key();
  if (unigame_plat_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_key_ = new ::std::string;
  }
  unigame_plat_key_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatTokenLoginReturn.unigame_plat_key)
}
inline void PlatTokenLoginReturn::set_unigame_plat_key(const char* value) {
  set_has_unigame_plat_key();
  if (unigame_plat_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_key_ = new ::std::string;
  }
  unigame_plat_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatTokenLoginReturn.unigame_plat_key)
}
inline void PlatTokenLoginReturn::set_unigame_plat_key(const char* value, size_t size) {
  set_has_unigame_plat_key();
  if (unigame_plat_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_key_ = new ::std::string;
  }
  unigame_plat_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatTokenLoginReturn.unigame_plat_key)
}
inline ::std::string* PlatTokenLoginReturn::mutable_unigame_plat_key() {
  set_has_unigame_plat_key();
  if (unigame_plat_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatTokenLoginReturn.unigame_plat_key)
  return unigame_plat_key_;
}
inline ::std::string* PlatTokenLoginReturn::release_unigame_plat_key() {
  clear_has_unigame_plat_key();
  if (unigame_plat_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unigame_plat_key_;
    unigame_plat_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatTokenLoginReturn::set_allocated_unigame_plat_key(::std::string* unigame_plat_key) {
  if (unigame_plat_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unigame_plat_key_;
  }
  if (unigame_plat_key) {
    set_has_unigame_plat_key();
    unigame_plat_key_ = unigame_plat_key;
  } else {
    clear_has_unigame_plat_key();
    unigame_plat_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatTokenLoginReturn.unigame_plat_key)
}

// required string unigame_plat_login = 6;
inline bool PlatTokenLoginReturn::has_unigame_plat_login() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlatTokenLoginReturn::set_has_unigame_plat_login() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlatTokenLoginReturn::clear_has_unigame_plat_login() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlatTokenLoginReturn::clear_unigame_plat_login() {
  if (unigame_plat_login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_->clear();
  }
  clear_has_unigame_plat_login();
}
inline const ::std::string& PlatTokenLoginReturn::unigame_plat_login() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLoginReturn.unigame_plat_login)
  return *unigame_plat_login_;
}
inline void PlatTokenLoginReturn::set_unigame_plat_login(const ::std::string& value) {
  set_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_ = new ::std::string;
  }
  unigame_plat_login_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatTokenLoginReturn.unigame_plat_login)
}
inline void PlatTokenLoginReturn::set_unigame_plat_login(const char* value) {
  set_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_ = new ::std::string;
  }
  unigame_plat_login_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatTokenLoginReturn.unigame_plat_login)
}
inline void PlatTokenLoginReturn::set_unigame_plat_login(const char* value, size_t size) {
  set_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_ = new ::std::string;
  }
  unigame_plat_login_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatTokenLoginReturn.unigame_plat_login)
}
inline ::std::string* PlatTokenLoginReturn::mutable_unigame_plat_login() {
  set_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unigame_plat_login_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatTokenLoginReturn.unigame_plat_login)
  return unigame_plat_login_;
}
inline ::std::string* PlatTokenLoginReturn::release_unigame_plat_login() {
  clear_has_unigame_plat_login();
  if (unigame_plat_login_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unigame_plat_login_;
    unigame_plat_login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatTokenLoginReturn::set_allocated_unigame_plat_login(::std::string* unigame_plat_login) {
  if (unigame_plat_login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unigame_plat_login_;
  }
  if (unigame_plat_login) {
    set_has_unigame_plat_login();
    unigame_plat_login_ = unigame_plat_login;
  } else {
    clear_has_unigame_plat_login();
    unigame_plat_login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatTokenLoginReturn.unigame_plat_login)
}

// required uint32 unigame_plat_login_life = 7;
inline bool PlatTokenLoginReturn::has_unigame_plat_login_life() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlatTokenLoginReturn::set_has_unigame_plat_login_life() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlatTokenLoginReturn::clear_has_unigame_plat_login_life() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlatTokenLoginReturn::clear_unigame_plat_login_life() {
  unigame_plat_login_life_ = 0u;
  clear_has_unigame_plat_login_life();
}
inline ::google::protobuf::uint32 PlatTokenLoginReturn::unigame_plat_login_life() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLoginReturn.unigame_plat_login_life)
  return unigame_plat_login_life_;
}
inline void PlatTokenLoginReturn::set_unigame_plat_login_life(::google::protobuf::uint32 value) {
  set_has_unigame_plat_login_life();
  unigame_plat_login_life_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PlatTokenLoginReturn.unigame_plat_login_life)
}

// optional string timezone_name = 8;
inline bool PlatTokenLoginReturn::has_timezone_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlatTokenLoginReturn::set_has_timezone_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlatTokenLoginReturn::clear_has_timezone_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlatTokenLoginReturn::clear_timezone_name() {
  if (timezone_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_name_->clear();
  }
  clear_has_timezone_name();
}
inline const ::std::string& PlatTokenLoginReturn::timezone_name() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLoginReturn.timezone_name)
  return *timezone_name_;
}
inline void PlatTokenLoginReturn::set_timezone_name(const ::std::string& value) {
  set_has_timezone_name();
  if (timezone_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_name_ = new ::std::string;
  }
  timezone_name_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatTokenLoginReturn.timezone_name)
}
inline void PlatTokenLoginReturn::set_timezone_name(const char* value) {
  set_has_timezone_name();
  if (timezone_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_name_ = new ::std::string;
  }
  timezone_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatTokenLoginReturn.timezone_name)
}
inline void PlatTokenLoginReturn::set_timezone_name(const char* value, size_t size) {
  set_has_timezone_name();
  if (timezone_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_name_ = new ::std::string;
  }
  timezone_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatTokenLoginReturn.timezone_name)
}
inline ::std::string* PlatTokenLoginReturn::mutable_timezone_name() {
  set_has_timezone_name();
  if (timezone_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezone_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatTokenLoginReturn.timezone_name)
  return timezone_name_;
}
inline ::std::string* PlatTokenLoginReturn::release_timezone_name() {
  clear_has_timezone_name();
  if (timezone_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timezone_name_;
    timezone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatTokenLoginReturn::set_allocated_timezone_name(::std::string* timezone_name) {
  if (timezone_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timezone_name_;
  }
  if (timezone_name) {
    set_has_timezone_name();
    timezone_name_ = timezone_name;
  } else {
    clear_has_timezone_name();
    timezone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatTokenLoginReturn.timezone_name)
}

// required int32 timezone_offset = 9;
inline bool PlatTokenLoginReturn::has_timezone_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlatTokenLoginReturn::set_has_timezone_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlatTokenLoginReturn::clear_has_timezone_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlatTokenLoginReturn::clear_timezone_offset() {
  timezone_offset_ = 0;
  clear_has_timezone_offset();
}
inline ::google::protobuf::int32 PlatTokenLoginReturn::timezone_offset() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatTokenLoginReturn.timezone_offset)
  return timezone_offset_;
}
inline void PlatTokenLoginReturn::set_timezone_offset(::google::protobuf::int32 value) {
  set_has_timezone_offset();
  timezone_offset_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PlatTokenLoginReturn.timezone_offset)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_unilightclient_2eproto__INCLUDED
