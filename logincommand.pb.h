// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logincommand.proto

#ifndef PROTOBUF_logincommand_2eproto__INCLUDED
#define PROTOBUF_logincommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logincommand_2eproto();
void protobuf_AssignDesc_logincommand_2eproto();
void protobuf_ShutdownFile_logincommand_2eproto();

class Login;
class AccountTokenVerifyLoginUserPmd_CS;
class PushAccountVerifyLoginUserPmd_C;
class AccountTokenVerifyReturnLoginUserPmd_S;
class ZoneInfo;
class ZoneInfoListLoginUserPmd_S;
class RequestZoneInfoListLoginUserPmd_C;
class RequestUserZoneInfoLoginUserPmd_C;
class UserZoneInfo;
class RequestUserZoneInfoLoginUserPmd_S;
class MobileRegistRequestRandCodeLoginUserPmd_C;
class MobileRegistReturnRandCodeLoginUserPmd_S;
class MobileRegistRequestCreateAccountLoginUserPmd_C;
class MobileRegistReturnCreateAccountFailLoginUserPmd_S;
class EmailRegistRequestCreateAccountLoginUserPmd_C;
class EmailRegistReturnCreateAccountLoginUserPmd_S;
class UserRequestPlatTokenByPasswordLoginUserPmd_C;
class UserRequestPlatTokenByThirdLoginUserPmd_C;
class UserRequestPlatTokenLoginOkLoginUserPmd_S;
class UserRequestPlatTokenLoginFailLoginUserPmd_S;
class UserLoginRequestLoginUserPmd_C;
class UserLoginReturnFailLoginUserPmd_S;
class UserLoginReturnOkLoginUserPmd_S;
class UserLoginTokenLoginUserPmd_C;
class ClientLogUrlLoginUserPmd_S;
class MessageBoxLoginUserPmd_S;
class RequestAccountRegisterLoginUserPmd_C;
class ReturnAccountRegisterLoginUserPmd_S;
class UserLogoutTokenLoginUserPmd_C;
class UserLoginReconnectLoginUserPmd_C;
class ReconnectKickoutLoginUserPmd_S;
class ReconnectErrorLoginUserPmd_S;
class ServerKickoutLoginUserPmd_S;
class PlatInfo;
class ThirdPlatLoginUserPmd_C;
class SetServerLangLoginUserPmd_C;
class RequestClientIPLoginUserPmd_C;
class ReturnClientIPLoginUserPmd_S;
class CheckVersionLoginUserPmd_C;
class BehaviorClientVerifyLoginUserPmd_C;
class RequestSupoortGameListLoginUserPmd_C;
class ReturnSupoortGameListLoginUserPmd_S_Game;
class ReturnSupoortGameListLoginUserPmd_S;

enum Login_Param {
  Login_Param_AccountTokenVerifyLoginUserPmd_CS = 1,
  Login_Param_AccountTokenVerifyReturnLoginUserPmd_S = 2,
  Login_Param_ZoneInfoListLoginUserPmd_S = 3,
  Login_Param_UserLoginRequestLoginUserPmd_C = 4,
  Login_Param_UserLoginReturnFailLoginUserPmd_S = 5,
  Login_Param_UserLoginReturnOkLoginUserPmd_S = 6,
  Login_Param_UserLoginTokenLoginUserPmd_C = 7,
  Login_Param_ClientLogUrlLoginUserPmd_S = 8,
  Login_Param_MessageBoxLoginUserPmd_S = 9,
  Login_Param_RequestAccountRegisterLoginUserPmd_C = 10,
  Login_Param_ReturnAccountRegisterLoginUserPmd_S = 11,
  Login_Param_UserLogoutTokenLoginUserPmd_C = 12,
  Login_Param_UserLoginReconnectLoginUserPmd_C = 13,
  Login_Param_ReconnectKickoutLoginUserPmd_S = 14,
  Login_Param_ServerKickoutLoginUserPmd_S = 15,
  Login_Param_RequestZoneInfoListLoginUserPmd_C = 16,
  Login_Param_SetServerLangLoginUserPmd_C = 17,
  Login_Param_RequestClientIPLoginUserPmd_C = 18,
  Login_Param_ReturnClientIPLoginUserPmd_S = 19,
  Login_Param_ReconnectErrorLoginUserPmd_S = 20,
  Login_Param_CheckVersionLoginUserPmd_C = 21,
  Login_Param_PushAccountVerifyLoginUserPmd_C = 22,
  Login_Param_BehaviorClientVerifyLoginUserPmd_C = 23,
  Login_Param_RequestUserZoneInfoLoginUserPmd_C = 24,
  Login_Param_RequestUserZoneInfoLoginUserPmd_S = 25,
  Login_Param_MobileRegistRequestRandCodeLoginUserPmd_C = 26,
  Login_Param_MobileRegistReturnRandCodeLoginUserPmd_S = 27,
  Login_Param_MobileRegistRequestCreateAccountLoginUserPmd_C = 28,
  Login_Param_MobileRegistReturnCreateAccountFailLoginUserPmd_S = 29,
  Login_Param_RequestSupoortGameListLoginUserPmd_C = 30,
  Login_Param_ReturnSupoortGameListLoginUserPmd_S = 31,
  Login_Param_UserRequestPlatTokenByPasswordLoginUserPmd_C = 32,
  Login_Param_UserRequestPlatTokenByThirdLoginUserPmd_C = 33,
  Login_Param_UserRequestPlatTokenLoginOkLoginUserPmd_S = 34,
  Login_Param_UserRequestPlatTokenLoginFailLoginUserPmd_S = 35,
  Login_Param_EmailRegistRequestCreateAccountLoginUserPmd_C = 36,
  Login_Param_EmailRegistReturnCreateAccountLoginUserPmd_S = 37
};
bool Login_Param_IsValid(int value);
const Login_Param Login_Param_Param_MIN = Login_Param_AccountTokenVerifyLoginUserPmd_CS;
const Login_Param Login_Param_Param_MAX = Login_Param_EmailRegistReturnCreateAccountLoginUserPmd_S;
const int Login_Param_Param_ARRAYSIZE = Login_Param_Param_MAX + 1;

const ::google::protobuf::EnumDescriptor* Login_Param_descriptor();
inline const ::std::string& Login_Param_Name(Login_Param value) {
  return ::google::protobuf::internal::NameOfEnum(
    Login_Param_descriptor(), value);
}
inline bool Login_Param_Parse(
    const ::std::string& name, Login_Param* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Login_Param>(
    Login_Param_descriptor(), name, value);
}
enum VerifyReturnReason {
  LoginOk = 0,
  TokenFindError = 1,
  TokenDiffError = 2,
  VersionError = 3
};
bool VerifyReturnReason_IsValid(int value);
const VerifyReturnReason VerifyReturnReason_MIN = LoginOk;
const VerifyReturnReason VerifyReturnReason_MAX = VersionError;
const int VerifyReturnReason_ARRAYSIZE = VerifyReturnReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* VerifyReturnReason_descriptor();
inline const ::std::string& VerifyReturnReason_Name(VerifyReturnReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    VerifyReturnReason_descriptor(), value);
}
inline bool VerifyReturnReason_Parse(
    const ::std::string& name, VerifyReturnReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VerifyReturnReason>(
    VerifyReturnReason_descriptor(), name, value);
}
enum ZoneState {
  Shutdown = 0,
  Normal = 1,
  Fullly = 2,
  Starting = 3
};
bool ZoneState_IsValid(int value);
const ZoneState ZoneState_MIN = Shutdown;
const ZoneState ZoneState_MAX = Starting;
const int ZoneState_ARRAYSIZE = ZoneState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZoneState_descriptor();
inline const ::std::string& ZoneState_Name(ZoneState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZoneState_descriptor(), value);
}
inline bool ZoneState_Parse(
    const ::std::string& name, ZoneState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZoneState>(
    ZoneState_descriptor(), name, value);
}
enum LoginReturnFailReason {
  Password = 1,
  ServerShutdown = 2,
  VersionTooLow = 3,
  UserTokenFind = 4,
  UserTokenTempId = 5,
  UserTokenTimeOut = 6,
  LoginDulicate = 7,
  NoGatewaytDown = 8,
  AccountUsing = 9
};
bool LoginReturnFailReason_IsValid(int value);
const LoginReturnFailReason LoginReturnFailReason_MIN = Password;
const LoginReturnFailReason LoginReturnFailReason_MAX = AccountUsing;
const int LoginReturnFailReason_ARRAYSIZE = LoginReturnFailReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginReturnFailReason_descriptor();
inline const ::std::string& LoginReturnFailReason_Name(LoginReturnFailReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginReturnFailReason_descriptor(), value);
}
inline bool LoginReturnFailReason_Parse(
    const ::std::string& name, LoginReturnFailReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginReturnFailReason>(
    LoginReturnFailReason_descriptor(), name, value);
}
enum PlatType {
  PlatType_Normal = 0,
  PlatType_UC = 4,
  PlatType_LeZhuan = 67,
  PlatType_WeChat = 68,
  PlatType_Play68 = 69,
  PlatType_AiBei = 70,
  PlatType_Facebook = 71,
  PlatType_GooglePlay = 72,
  PlatType_XingZhiZhu = 73,
  PlatType_HuoWu = 74,
  PlatType_CaiGuo = 77,
  PlatType_1758 = 79,
  PlatType_DAPAI = 80,
  PlatType_HILE = 82,
  PlatType_AAY = 86,
  PlatType_WEIYOU = 90,
  PlatType_9g = 99,
  PlatType_MOBILE = 129,
  PlatType_XueChi = 133,
  PlatType_Egret = 134,
  PlatType_AoXin = 140,
  PlatType_HUOSU = 145,
  PlatType_RONGQIANG = 151,
  PlatType_WXApp = 152,
  PlatType_RongQiangApp = 153
};
bool PlatType_IsValid(int value);
const PlatType PlatType_MIN = PlatType_Normal;
const PlatType PlatType_MAX = PlatType_RongQiangApp;
const int PlatType_ARRAYSIZE = PlatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlatType_descriptor();
inline const ::std::string& PlatType_Name(PlatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlatType_descriptor(), value);
}
inline bool PlatType_Parse(
    const ::std::string& name, PlatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlatType>(
    PlatType_descriptor(), name, value);
}
// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Login_Param Param;
  static const Param AccountTokenVerifyLoginUserPmd_CS = Login_Param_AccountTokenVerifyLoginUserPmd_CS;
  static const Param AccountTokenVerifyReturnLoginUserPmd_S = Login_Param_AccountTokenVerifyReturnLoginUserPmd_S;
  static const Param ZoneInfoListLoginUserPmd_S = Login_Param_ZoneInfoListLoginUserPmd_S;
  static const Param UserLoginRequestLoginUserPmd_C = Login_Param_UserLoginRequestLoginUserPmd_C;
  static const Param UserLoginReturnFailLoginUserPmd_S = Login_Param_UserLoginReturnFailLoginUserPmd_S;
  static const Param UserLoginReturnOkLoginUserPmd_S = Login_Param_UserLoginReturnOkLoginUserPmd_S;
  static const Param UserLoginTokenLoginUserPmd_C = Login_Param_UserLoginTokenLoginUserPmd_C;
  static const Param ClientLogUrlLoginUserPmd_S = Login_Param_ClientLogUrlLoginUserPmd_S;
  static const Param MessageBoxLoginUserPmd_S = Login_Param_MessageBoxLoginUserPmd_S;
  static const Param RequestAccountRegisterLoginUserPmd_C = Login_Param_RequestAccountRegisterLoginUserPmd_C;
  static const Param ReturnAccountRegisterLoginUserPmd_S = Login_Param_ReturnAccountRegisterLoginUserPmd_S;
  static const Param UserLogoutTokenLoginUserPmd_C = Login_Param_UserLogoutTokenLoginUserPmd_C;
  static const Param UserLoginReconnectLoginUserPmd_C = Login_Param_UserLoginReconnectLoginUserPmd_C;
  static const Param ReconnectKickoutLoginUserPmd_S = Login_Param_ReconnectKickoutLoginUserPmd_S;
  static const Param ServerKickoutLoginUserPmd_S = Login_Param_ServerKickoutLoginUserPmd_S;
  static const Param RequestZoneInfoListLoginUserPmd_C = Login_Param_RequestZoneInfoListLoginUserPmd_C;
  static const Param SetServerLangLoginUserPmd_C = Login_Param_SetServerLangLoginUserPmd_C;
  static const Param RequestClientIPLoginUserPmd_C = Login_Param_RequestClientIPLoginUserPmd_C;
  static const Param ReturnClientIPLoginUserPmd_S = Login_Param_ReturnClientIPLoginUserPmd_S;
  static const Param ReconnectErrorLoginUserPmd_S = Login_Param_ReconnectErrorLoginUserPmd_S;
  static const Param CheckVersionLoginUserPmd_C = Login_Param_CheckVersionLoginUserPmd_C;
  static const Param PushAccountVerifyLoginUserPmd_C = Login_Param_PushAccountVerifyLoginUserPmd_C;
  static const Param BehaviorClientVerifyLoginUserPmd_C = Login_Param_BehaviorClientVerifyLoginUserPmd_C;
  static const Param RequestUserZoneInfoLoginUserPmd_C = Login_Param_RequestUserZoneInfoLoginUserPmd_C;
  static const Param RequestUserZoneInfoLoginUserPmd_S = Login_Param_RequestUserZoneInfoLoginUserPmd_S;
  static const Param MobileRegistRequestRandCodeLoginUserPmd_C = Login_Param_MobileRegistRequestRandCodeLoginUserPmd_C;
  static const Param MobileRegistReturnRandCodeLoginUserPmd_S = Login_Param_MobileRegistReturnRandCodeLoginUserPmd_S;
  static const Param MobileRegistRequestCreateAccountLoginUserPmd_C = Login_Param_MobileRegistRequestCreateAccountLoginUserPmd_C;
  static const Param MobileRegistReturnCreateAccountFailLoginUserPmd_S = Login_Param_MobileRegistReturnCreateAccountFailLoginUserPmd_S;
  static const Param RequestSupoortGameListLoginUserPmd_C = Login_Param_RequestSupoortGameListLoginUserPmd_C;
  static const Param ReturnSupoortGameListLoginUserPmd_S = Login_Param_ReturnSupoortGameListLoginUserPmd_S;
  static const Param UserRequestPlatTokenByPasswordLoginUserPmd_C = Login_Param_UserRequestPlatTokenByPasswordLoginUserPmd_C;
  static const Param UserRequestPlatTokenByThirdLoginUserPmd_C = Login_Param_UserRequestPlatTokenByThirdLoginUserPmd_C;
  static const Param UserRequestPlatTokenLoginOkLoginUserPmd_S = Login_Param_UserRequestPlatTokenLoginOkLoginUserPmd_S;
  static const Param UserRequestPlatTokenLoginFailLoginUserPmd_S = Login_Param_UserRequestPlatTokenLoginFailLoginUserPmd_S;
  static const Param EmailRegistRequestCreateAccountLoginUserPmd_C = Login_Param_EmailRegistRequestCreateAccountLoginUserPmd_C;
  static const Param EmailRegistReturnCreateAccountLoginUserPmd_S = Login_Param_EmailRegistReturnCreateAccountLoginUserPmd_S;
  static inline bool Param_IsValid(int value) {
    return Login_Param_IsValid(value);
  }
  static const Param Param_MIN =
    Login_Param_Param_MIN;
  static const Param Param_MAX =
    Login_Param_Param_MAX;
  static const int Param_ARRAYSIZE =
    Login_Param_Param_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Param_descriptor() {
    return Login_Param_descriptor();
  }
  static inline const ::std::string& Param_Name(Param value) {
    return Login_Param_Name(value);
  }
  static inline bool Param_Parse(const ::std::string& name,
      Param* value) {
    return Login_Param_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pmd.Login)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class AccountTokenVerifyLoginUserPmd_CS : public ::google::protobuf::Message {
 public:
  AccountTokenVerifyLoginUserPmd_CS();
  virtual ~AccountTokenVerifyLoginUserPmd_CS();

  AccountTokenVerifyLoginUserPmd_CS(const AccountTokenVerifyLoginUserPmd_CS& from);

  inline AccountTokenVerifyLoginUserPmd_CS& operator=(const AccountTokenVerifyLoginUserPmd_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountTokenVerifyLoginUserPmd_CS& default_instance();

  void Swap(AccountTokenVerifyLoginUserPmd_CS* other);

  // implements Message ----------------------------------------------

  AccountTokenVerifyLoginUserPmd_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountTokenVerifyLoginUserPmd_CS& from);
  void MergeFrom(const AccountTokenVerifyLoginUserPmd_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional string mid = 5;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 5;
  inline const ::std::string& mid() const;
  inline void set_mid(const ::std::string& value);
  inline void set_mid(const char* value);
  inline void set_mid(const char* value, size_t size);
  inline ::std::string* mutable_mid();
  inline ::std::string* release_mid();
  inline void set_allocated_mid(::std::string* mid);

  // optional uint32 platid = 6;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 6;
  inline ::google::protobuf::uint32 platid() const;
  inline void set_platid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 7;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 7;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 gameversion = 8;
  inline bool has_gameversion() const;
  inline void clear_gameversion();
  static const int kGameversionFieldNumber = 8;
  inline ::google::protobuf::uint32 gameversion() const;
  inline void set_gameversion(::google::protobuf::uint32 value);

  // optional string compress = 9;
  inline bool has_compress() const;
  inline void clear_compress();
  static const int kCompressFieldNumber = 9;
  inline const ::std::string& compress() const;
  inline void set_compress(const ::std::string& value);
  inline void set_compress(const char* value);
  inline void set_compress(const char* value, size_t size);
  inline ::std::string* mutable_compress();
  inline ::std::string* release_compress();
  inline void set_allocated_compress(::std::string* compress);

  // optional string encrypt = 10;
  inline bool has_encrypt() const;
  inline void clear_encrypt();
  static const int kEncryptFieldNumber = 10;
  inline const ::std::string& encrypt() const;
  inline void set_encrypt(const ::std::string& value);
  inline void set_encrypt(const char* value);
  inline void set_encrypt(const char* value, size_t size);
  inline ::std::string* mutable_encrypt();
  inline ::std::string* release_encrypt();
  inline void set_allocated_encrypt(::std::string* encrypt);

  // optional string encryptkey = 11;
  inline bool has_encryptkey() const;
  inline void clear_encryptkey();
  static const int kEncryptkeyFieldNumber = 11;
  inline const ::std::string& encryptkey() const;
  inline void set_encryptkey(const ::std::string& value);
  inline void set_encryptkey(const char* value);
  inline void set_encryptkey(const char* value, size_t size);
  inline ::std::string* mutable_encryptkey();
  inline ::std::string* release_encryptkey();
  inline void set_allocated_encryptkey(::std::string* encryptkey);

  // @@protoc_insertion_point(class_scope:Pmd.AccountTokenVerifyLoginUserPmd_CS)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_platid();
  inline void clear_has_platid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_gameversion();
  inline void clear_has_gameversion();
  inline void set_has_compress();
  inline void clear_has_compress();
  inline void set_has_encrypt();
  inline void clear_has_encrypt();
  inline void set_has_encryptkey();
  inline void clear_has_encryptkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* account_;
  ::std::string* token_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 gameid_;
  ::std::string* mid_;
  ::google::protobuf::uint32 platid_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* compress_;
  ::std::string* encrypt_;
  ::std::string* encryptkey_;
  ::google::protobuf::uint32 gameversion_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static AccountTokenVerifyLoginUserPmd_CS* default_instance_;
};
// -------------------------------------------------------------------

class PushAccountVerifyLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  PushAccountVerifyLoginUserPmd_C();
  virtual ~PushAccountVerifyLoginUserPmd_C();

  PushAccountVerifyLoginUserPmd_C(const PushAccountVerifyLoginUserPmd_C& from);

  inline PushAccountVerifyLoginUserPmd_C& operator=(const PushAccountVerifyLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushAccountVerifyLoginUserPmd_C& default_instance();

  void Swap(PushAccountVerifyLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  PushAccountVerifyLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushAccountVerifyLoginUserPmd_C& from);
  void MergeFrom(const PushAccountVerifyLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 accid = 1;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 1;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional string mid = 6;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 6;
  inline const ::std::string& mid() const;
  inline void set_mid(const ::std::string& value);
  inline void set_mid(const char* value);
  inline void set_mid(const char* value, size_t size);
  inline ::std::string* mutable_mid();
  inline ::std::string* release_mid();
  inline void set_allocated_mid(::std::string* mid);

  // optional uint32 gameversion = 7;
  inline bool has_gameversion() const;
  inline void clear_gameversion();
  static const int kGameversionFieldNumber = 7;
  inline ::google::protobuf::uint32 gameversion() const;
  inline void set_gameversion(::google::protobuf::uint32 value);

  // optional string compress = 8;
  inline bool has_compress() const;
  inline void clear_compress();
  static const int kCompressFieldNumber = 8;
  inline const ::std::string& compress() const;
  inline void set_compress(const ::std::string& value);
  inline void set_compress(const char* value);
  inline void set_compress(const char* value, size_t size);
  inline ::std::string* mutable_compress();
  inline ::std::string* release_compress();
  inline void set_allocated_compress(::std::string* compress);

  // optional string encrypt = 9;
  inline bool has_encrypt() const;
  inline void clear_encrypt();
  static const int kEncryptFieldNumber = 9;
  inline const ::std::string& encrypt() const;
  inline void set_encrypt(const ::std::string& value);
  inline void set_encrypt(const char* value);
  inline void set_encrypt(const char* value, size_t size);
  inline ::std::string* mutable_encrypt();
  inline ::std::string* release_encrypt();
  inline void set_allocated_encrypt(::std::string* encrypt);

  // optional string encryptkey = 10;
  inline bool has_encryptkey() const;
  inline void clear_encryptkey();
  static const int kEncryptkeyFieldNumber = 10;
  inline const ::std::string& encryptkey() const;
  inline void set_encryptkey(const ::std::string& value);
  inline void set_encryptkey(const char* value);
  inline void set_encryptkey(const char* value, size_t size);
  inline ::std::string* mutable_encryptkey();
  inline ::std::string* release_encryptkey();
  inline void set_allocated_encryptkey(::std::string* encryptkey);

  // @@protoc_insertion_point(class_scope:Pmd.PushAccountVerifyLoginUserPmd_C)
 private:
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_gameversion();
  inline void clear_has_gameversion();
  inline void set_has_compress();
  inline void clear_has_compress();
  inline void set_has_encrypt();
  inline void clear_has_encrypt();
  inline void set_has_encryptkey();
  inline void clear_has_encryptkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 accid_;
  ::std::string* account_;
  ::std::string* token_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 version_;
  ::std::string* mid_;
  ::std::string* compress_;
  ::std::string* encrypt_;
  ::std::string* encryptkey_;
  ::google::protobuf::uint32 gameversion_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static PushAccountVerifyLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class AccountTokenVerifyReturnLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  AccountTokenVerifyReturnLoginUserPmd_S();
  virtual ~AccountTokenVerifyReturnLoginUserPmd_S();

  AccountTokenVerifyReturnLoginUserPmd_S(const AccountTokenVerifyReturnLoginUserPmd_S& from);

  inline AccountTokenVerifyReturnLoginUserPmd_S& operator=(const AccountTokenVerifyReturnLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountTokenVerifyReturnLoginUserPmd_S& default_instance();

  void Swap(AccountTokenVerifyReturnLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  AccountTokenVerifyReturnLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountTokenVerifyReturnLoginUserPmd_S& from);
  void MergeFrom(const AccountTokenVerifyReturnLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Pmd.VerifyReturnReason retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::Pmd::VerifyReturnReason retcode() const;
  inline void set_retcode(::Pmd::VerifyReturnReason value);

  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  int retcode_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static AccountTokenVerifyReturnLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class ZoneInfo : public ::google::protobuf::Message {
 public:
  ZoneInfo();
  virtual ~ZoneInfo();

  ZoneInfo(const ZoneInfo& from);

  inline ZoneInfo& operator=(const ZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneInfo& default_instance();

  void Swap(ZoneInfo* other);

  // implements Message ----------------------------------------------

  ZoneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneInfo& from);
  void MergeFrom(const ZoneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required string zonename = 2;
  inline bool has_zonename() const;
  inline void clear_zonename();
  static const int kZonenameFieldNumber = 2;
  inline const ::std::string& zonename() const;
  inline void set_zonename(const ::std::string& value);
  inline void set_zonename(const char* value);
  inline void set_zonename(const char* value, size_t size);
  inline ::std::string* mutable_zonename();
  inline ::std::string* release_zonename();
  inline void set_allocated_zonename(::std::string* zonename);

  // optional .Pmd.ZoneState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::Pmd::ZoneState state() const;
  inline void set_state(::Pmd::ZoneState value);

  // optional string opentime = 4;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpentimeFieldNumber = 4;
  inline const ::std::string& opentime() const;
  inline void set_opentime(const ::std::string& value);
  inline void set_opentime(const char* value);
  inline void set_opentime(const char* value, size_t size);
  inline ::std::string* mutable_opentime();
  inline ::std::string* release_opentime();
  inline void set_allocated_opentime(::std::string* opentime);

  // @@protoc_insertion_point(class_scope:Pmd.ZoneInfo)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_zonename();
  inline void clear_has_zonename();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_opentime();
  inline void clear_has_opentime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* zonename_;
  ::google::protobuf::uint32 zoneid_;
  int state_;
  ::std::string* opentime_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ZoneInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZoneInfoListLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  ZoneInfoListLoginUserPmd_S();
  virtual ~ZoneInfoListLoginUserPmd_S();

  ZoneInfoListLoginUserPmd_S(const ZoneInfoListLoginUserPmd_S& from);

  inline ZoneInfoListLoginUserPmd_S& operator=(const ZoneInfoListLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneInfoListLoginUserPmd_S& default_instance();

  void Swap(ZoneInfoListLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  ZoneInfoListLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneInfoListLoginUserPmd_S& from);
  void MergeFrom(const ZoneInfoListLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gamename = 1;
  inline bool has_gamename() const;
  inline void clear_gamename();
  static const int kGamenameFieldNumber = 1;
  inline const ::std::string& gamename() const;
  inline void set_gamename(const ::std::string& value);
  inline void set_gamename(const char* value);
  inline void set_gamename(const char* value, size_t size);
  inline ::std::string* mutable_gamename();
  inline ::std::string* release_gamename();
  inline void set_allocated_gamename(::std::string* gamename);

  // required uint32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // repeated .Pmd.ZoneInfo zonelist = 3;
  inline int zonelist_size() const;
  inline void clear_zonelist();
  static const int kZonelistFieldNumber = 3;
  inline const ::Pmd::ZoneInfo& zonelist(int index) const;
  inline ::Pmd::ZoneInfo* mutable_zonelist(int index);
  inline ::Pmd::ZoneInfo* add_zonelist();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo >&
      zonelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo >*
      mutable_zonelist();

  // @@protoc_insertion_point(class_scope:Pmd.ZoneInfoListLoginUserPmd_S)
 private:
  inline void set_has_gamename();
  inline void clear_has_gamename();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gamename_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo > zonelist_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ZoneInfoListLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class RequestZoneInfoListLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  RequestZoneInfoListLoginUserPmd_C();
  virtual ~RequestZoneInfoListLoginUserPmd_C();

  RequestZoneInfoListLoginUserPmd_C(const RequestZoneInfoListLoginUserPmd_C& from);

  inline RequestZoneInfoListLoginUserPmd_C& operator=(const RequestZoneInfoListLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestZoneInfoListLoginUserPmd_C& default_instance();

  void Swap(RequestZoneInfoListLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  RequestZoneInfoListLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestZoneInfoListLoginUserPmd_C& from);
  void MergeFrom(const RequestZoneInfoListLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.RequestZoneInfoListLoginUserPmd_C)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static RequestZoneInfoListLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class RequestUserZoneInfoLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  RequestUserZoneInfoLoginUserPmd_C();
  virtual ~RequestUserZoneInfoLoginUserPmd_C();

  RequestUserZoneInfoLoginUserPmd_C(const RequestUserZoneInfoLoginUserPmd_C& from);

  inline RequestUserZoneInfoLoginUserPmd_C& operator=(const RequestUserZoneInfoLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestUserZoneInfoLoginUserPmd_C& default_instance();

  void Swap(RequestUserZoneInfoLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  RequestUserZoneInfoLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestUserZoneInfoLoginUserPmd_C& from);
  void MergeFrom(const RequestUserZoneInfoLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.RequestUserZoneInfoLoginUserPmd_C)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static RequestUserZoneInfoLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class UserZoneInfo : public ::google::protobuf::Message {
 public:
  UserZoneInfo();
  virtual ~UserZoneInfo();

  UserZoneInfo(const UserZoneInfo& from);

  inline UserZoneInfo& operator=(const UserZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserZoneInfo& default_instance();

  void Swap(UserZoneInfo* other);

  // implements Message ----------------------------------------------

  UserZoneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserZoneInfo& from);
  void MergeFrom(const UserZoneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string charname = 1;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 1;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // required .Pmd.ZoneInfo zoneinfo = 2;
  inline bool has_zoneinfo() const;
  inline void clear_zoneinfo();
  static const int kZoneinfoFieldNumber = 2;
  inline const ::Pmd::ZoneInfo& zoneinfo() const;
  inline ::Pmd::ZoneInfo* mutable_zoneinfo();
  inline ::Pmd::ZoneInfo* release_zoneinfo();
  inline void set_allocated_zoneinfo(::Pmd::ZoneInfo* zoneinfo);

  // required uint32 onlinenum = 3;
  inline bool has_onlinenum() const;
  inline void clear_onlinenum();
  static const int kOnlinenumFieldNumber = 3;
  inline ::google::protobuf::uint32 onlinenum() const;
  inline void set_onlinenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.UserZoneInfo)
 private:
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_zoneinfo();
  inline void clear_has_zoneinfo();
  inline void set_has_onlinenum();
  inline void clear_has_onlinenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* charname_;
  ::Pmd::ZoneInfo* zoneinfo_;
  ::google::protobuf::uint32 onlinenum_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserZoneInfo* default_instance_;
};
// -------------------------------------------------------------------

class RequestUserZoneInfoLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  RequestUserZoneInfoLoginUserPmd_S();
  virtual ~RequestUserZoneInfoLoginUserPmd_S();

  RequestUserZoneInfoLoginUserPmd_S(const RequestUserZoneInfoLoginUserPmd_S& from);

  inline RequestUserZoneInfoLoginUserPmd_S& operator=(const RequestUserZoneInfoLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestUserZoneInfoLoginUserPmd_S& default_instance();

  void Swap(RequestUserZoneInfoLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  RequestUserZoneInfoLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestUserZoneInfoLoginUserPmd_S& from);
  void MergeFrom(const RequestUserZoneInfoLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pmd.UserZoneInfo userzoneinfo = 1;
  inline int userzoneinfo_size() const;
  inline void clear_userzoneinfo();
  static const int kUserzoneinfoFieldNumber = 1;
  inline const ::Pmd::UserZoneInfo& userzoneinfo(int index) const;
  inline ::Pmd::UserZoneInfo* mutable_userzoneinfo(int index);
  inline ::Pmd::UserZoneInfo* add_userzoneinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::UserZoneInfo >&
      userzoneinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::UserZoneInfo >*
      mutable_userzoneinfo();

  // @@protoc_insertion_point(class_scope:Pmd.RequestUserZoneInfoLoginUserPmd_S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::UserZoneInfo > userzoneinfo_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static RequestUserZoneInfoLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class MobileRegistRequestRandCodeLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  MobileRegistRequestRandCodeLoginUserPmd_C();
  virtual ~MobileRegistRequestRandCodeLoginUserPmd_C();

  MobileRegistRequestRandCodeLoginUserPmd_C(const MobileRegistRequestRandCodeLoginUserPmd_C& from);

  inline MobileRegistRequestRandCodeLoginUserPmd_C& operator=(const MobileRegistRequestRandCodeLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileRegistRequestRandCodeLoginUserPmd_C& default_instance();

  void Swap(MobileRegistRequestRandCodeLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  MobileRegistRequestRandCodeLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileRegistRequestRandCodeLoginUserPmd_C& from);
  void MergeFrom(const MobileRegistRequestRandCodeLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string mobilenum = 1;
  inline bool has_mobilenum() const;
  inline void clear_mobilenum();
  static const int kMobilenumFieldNumber = 1;
  inline const ::std::string& mobilenum() const;
  inline void set_mobilenum(const ::std::string& value);
  inline void set_mobilenum(const char* value);
  inline void set_mobilenum(const char* value, size_t size);
  inline ::std::string* mutable_mobilenum();
  inline ::std::string* release_mobilenum();
  inline void set_allocated_mobilenum(::std::string* mobilenum);

  // required uint32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
 private:
  inline void set_has_mobilenum();
  inline void clear_has_mobilenum();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mobilenum_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static MobileRegistRequestRandCodeLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class MobileRegistReturnRandCodeLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  MobileRegistReturnRandCodeLoginUserPmd_S();
  virtual ~MobileRegistReturnRandCodeLoginUserPmd_S();

  MobileRegistReturnRandCodeLoginUserPmd_S(const MobileRegistReturnRandCodeLoginUserPmd_S& from);

  inline MobileRegistReturnRandCodeLoginUserPmd_S& operator=(const MobileRegistReturnRandCodeLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileRegistReturnRandCodeLoginUserPmd_S& default_instance();

  void Swap(MobileRegistReturnRandCodeLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  MobileRegistReturnRandCodeLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileRegistReturnRandCodeLoginUserPmd_S& from);
  void MergeFrom(const MobileRegistReturnRandCodeLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional uint64 timeout = 3;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  inline ::google::protobuf::uint64 timeout() const;
  inline void set_timeout(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  ::google::protobuf::uint64 timeout_;
  ::google::protobuf::uint32 retcode_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static MobileRegistReturnRandCodeLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class MobileRegistRequestCreateAccountLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  MobileRegistRequestCreateAccountLoginUserPmd_C();
  virtual ~MobileRegistRequestCreateAccountLoginUserPmd_C();

  MobileRegistRequestCreateAccountLoginUserPmd_C(const MobileRegistRequestCreateAccountLoginUserPmd_C& from);

  inline MobileRegistRequestCreateAccountLoginUserPmd_C& operator=(const MobileRegistRequestCreateAccountLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileRegistRequestCreateAccountLoginUserPmd_C& default_instance();

  void Swap(MobileRegistRequestCreateAccountLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  MobileRegistRequestCreateAccountLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileRegistRequestCreateAccountLoginUserPmd_C& from);
  void MergeFrom(const MobileRegistRequestCreateAccountLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string mobilenum = 1;
  inline bool has_mobilenum() const;
  inline void clear_mobilenum();
  static const int kMobilenumFieldNumber = 1;
  inline const ::std::string& mobilenum() const;
  inline void set_mobilenum(const ::std::string& value);
  inline void set_mobilenum(const char* value);
  inline void set_mobilenum(const char* value, size_t size);
  inline ::std::string* mutable_mobilenum();
  inline ::std::string* release_mobilenum();
  inline void set_allocated_mobilenum(::std::string* mobilenum);

  // required string randcode = 2;
  inline bool has_randcode() const;
  inline void clear_randcode();
  static const int kRandcodeFieldNumber = 2;
  inline const ::std::string& randcode() const;
  inline void set_randcode(const ::std::string& value);
  inline void set_randcode(const char* value);
  inline void set_randcode(const char* value, size_t size);
  inline ::std::string* mutable_randcode();
  inline ::std::string* release_randcode();
  inline void set_allocated_randcode(::std::string* randcode);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required uint32 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
 private:
  inline void set_has_mobilenum();
  inline void clear_has_mobilenum();
  inline void set_has_randcode();
  inline void clear_has_randcode();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mobilenum_;
  ::std::string* randcode_;
  ::std::string* password_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static MobileRegistRequestCreateAccountLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class MobileRegistReturnCreateAccountFailLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  MobileRegistReturnCreateAccountFailLoginUserPmd_S();
  virtual ~MobileRegistReturnCreateAccountFailLoginUserPmd_S();

  MobileRegistReturnCreateAccountFailLoginUserPmd_S(const MobileRegistReturnCreateAccountFailLoginUserPmd_S& from);

  inline MobileRegistReturnCreateAccountFailLoginUserPmd_S& operator=(const MobileRegistReturnCreateAccountFailLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileRegistReturnCreateAccountFailLoginUserPmd_S& default_instance();

  void Swap(MobileRegistReturnCreateAccountFailLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  MobileRegistReturnCreateAccountFailLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MobileRegistReturnCreateAccountFailLoginUserPmd_S& from);
  void MergeFrom(const MobileRegistReturnCreateAccountFailLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  ::google::protobuf::uint32 retcode_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static MobileRegistReturnCreateAccountFailLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class EmailRegistRequestCreateAccountLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  EmailRegistRequestCreateAccountLoginUserPmd_C();
  virtual ~EmailRegistRequestCreateAccountLoginUserPmd_C();

  EmailRegistRequestCreateAccountLoginUserPmd_C(const EmailRegistRequestCreateAccountLoginUserPmd_C& from);

  inline EmailRegistRequestCreateAccountLoginUserPmd_C& operator=(const EmailRegistRequestCreateAccountLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailRegistRequestCreateAccountLoginUserPmd_C& default_instance();

  void Swap(EmailRegistRequestCreateAccountLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  EmailRegistRequestCreateAccountLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmailRegistRequestCreateAccountLoginUserPmd_C& from);
  void MergeFrom(const EmailRegistRequestCreateAccountLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string email = 1;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 1;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required uint32 gameid = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 3;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional bool isbind = 4;
  inline bool has_isbind() const;
  inline void clear_isbind();
  static const int kIsbindFieldNumber = 4;
  inline bool isbind() const;
  inline void set_isbind(bool value);

  // optional uint64 uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
 private:
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_isbind();
  inline void clear_has_isbind();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* email_;
  ::std::string* password_;
  ::google::protobuf::uint32 gameid_;
  bool isbind_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static EmailRegistRequestCreateAccountLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class EmailRegistReturnCreateAccountLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  EmailRegistReturnCreateAccountLoginUserPmd_S();
  virtual ~EmailRegistReturnCreateAccountLoginUserPmd_S();

  EmailRegistReturnCreateAccountLoginUserPmd_S(const EmailRegistReturnCreateAccountLoginUserPmd_S& from);

  inline EmailRegistReturnCreateAccountLoginUserPmd_S& operator=(const EmailRegistReturnCreateAccountLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailRegistReturnCreateAccountLoginUserPmd_S& default_instance();

  void Swap(EmailRegistReturnCreateAccountLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  EmailRegistReturnCreateAccountLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmailRegistReturnCreateAccountLoginUserPmd_S& from);
  void MergeFrom(const EmailRegistReturnCreateAccountLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional uint64 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 retcode_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static EmailRegistReturnCreateAccountLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class UserRequestPlatTokenByPasswordLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  UserRequestPlatTokenByPasswordLoginUserPmd_C();
  virtual ~UserRequestPlatTokenByPasswordLoginUserPmd_C();

  UserRequestPlatTokenByPasswordLoginUserPmd_C(const UserRequestPlatTokenByPasswordLoginUserPmd_C& from);

  inline UserRequestPlatTokenByPasswordLoginUserPmd_C& operator=(const UserRequestPlatTokenByPasswordLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequestPlatTokenByPasswordLoginUserPmd_C& default_instance();

  void Swap(UserRequestPlatTokenByPasswordLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  UserRequestPlatTokenByPasswordLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRequestPlatTokenByPasswordLoginUserPmd_C& from);
  void MergeFrom(const UserRequestPlatTokenByPasswordLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // required uint32 platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline ::google::protobuf::uint32 platid() const;
  inline void set_platid(::google::protobuf::uint32 value);

  // required string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_platid();
  inline void clear_has_platid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 platid_;
  ::std::string* account_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserRequestPlatTokenByPasswordLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class UserRequestPlatTokenByThirdLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  UserRequestPlatTokenByThirdLoginUserPmd_C();
  virtual ~UserRequestPlatTokenByThirdLoginUserPmd_C();

  UserRequestPlatTokenByThirdLoginUserPmd_C(const UserRequestPlatTokenByThirdLoginUserPmd_C& from);

  inline UserRequestPlatTokenByThirdLoginUserPmd_C& operator=(const UserRequestPlatTokenByThirdLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequestPlatTokenByThirdLoginUserPmd_C& default_instance();

  void Swap(UserRequestPlatTokenByThirdLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  UserRequestPlatTokenByThirdLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRequestPlatTokenByThirdLoginUserPmd_C& from);
  void MergeFrom(const UserRequestPlatTokenByThirdLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Pmd.PlatInfo platinfo = 1;
  inline bool has_platinfo() const;
  inline void clear_platinfo();
  static const int kPlatinfoFieldNumber = 1;
  inline const ::Pmd::PlatInfo& platinfo() const;
  inline ::Pmd::PlatInfo* mutable_platinfo();
  inline ::Pmd::PlatInfo* release_platinfo();
  inline void set_allocated_platinfo(::Pmd::PlatInfo* platinfo);

  // required uint32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
 private:
  inline void set_has_platinfo();
  inline void clear_has_platinfo();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::PlatInfo* platinfo_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserRequestPlatTokenByThirdLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class UserRequestPlatTokenLoginOkLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  UserRequestPlatTokenLoginOkLoginUserPmd_S();
  virtual ~UserRequestPlatTokenLoginOkLoginUserPmd_S();

  UserRequestPlatTokenLoginOkLoginUserPmd_S(const UserRequestPlatTokenLoginOkLoginUserPmd_S& from);

  inline UserRequestPlatTokenLoginOkLoginUserPmd_S& operator=(const UserRequestPlatTokenLoginOkLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequestPlatTokenLoginOkLoginUserPmd_S& default_instance();

  void Swap(UserRequestPlatTokenLoginOkLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  UserRequestPlatTokenLoginOkLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRequestPlatTokenLoginOkLoginUserPmd_S& from);
  void MergeFrom(const UserRequestPlatTokenLoginOkLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // required string platkey = 2;
  inline bool has_platkey() const;
  inline void clear_platkey();
  static const int kPlatkeyFieldNumber = 2;
  inline const ::std::string& platkey() const;
  inline void set_platkey(const ::std::string& value);
  inline void set_platkey(const char* value);
  inline void set_platkey(const char* value, size_t size);
  inline ::std::string* mutable_platkey();
  inline ::std::string* release_platkey();
  inline void set_allocated_platkey(::std::string* platkey);

  // required string platlogin = 3;
  inline bool has_platlogin() const;
  inline void clear_platlogin();
  static const int kPlatloginFieldNumber = 3;
  inline const ::std::string& platlogin() const;
  inline void set_platlogin(const ::std::string& value);
  inline void set_platlogin(const char* value);
  inline void set_platlogin(const char* value, size_t size);
  inline ::std::string* mutable_platlogin();
  inline ::std::string* release_platlogin();
  inline void set_allocated_platlogin(::std::string* platlogin);

  // required uint32 platloginlife = 4;
  inline bool has_platloginlife() const;
  inline void clear_platloginlife();
  static const int kPlatloginlifeFieldNumber = 4;
  inline ::google::protobuf::uint32 platloginlife() const;
  inline void set_platloginlife(::google::protobuf::uint32 value);

  // required string timezonename = 5;
  inline bool has_timezonename() const;
  inline void clear_timezonename();
  static const int kTimezonenameFieldNumber = 5;
  inline const ::std::string& timezonename() const;
  inline void set_timezonename(const ::std::string& value);
  inline void set_timezonename(const char* value);
  inline void set_timezonename(const char* value, size_t size);
  inline ::std::string* mutable_timezonename();
  inline ::std::string* release_timezonename();
  inline void set_allocated_timezonename(::std::string* timezonename);

  // optional int32 timezoneoffset = 6;
  inline bool has_timezoneoffset() const;
  inline void clear_timezoneoffset();
  static const int kTimezoneoffsetFieldNumber = 6;
  inline ::google::protobuf::int32 timezoneoffset() const;
  inline void set_timezoneoffset(::google::protobuf::int32 value);

  // optional .Pmd.PlatInfo platinfo = 7;
  inline bool has_platinfo() const;
  inline void clear_platinfo();
  static const int kPlatinfoFieldNumber = 7;
  inline const ::Pmd::PlatInfo& platinfo() const;
  inline ::Pmd::PlatInfo* mutable_platinfo();
  inline ::Pmd::PlatInfo* release_platinfo();
  inline void set_allocated_platinfo(::Pmd::PlatInfo* platinfo);

  // @@protoc_insertion_point(class_scope:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_platkey();
  inline void clear_has_platkey();
  inline void set_has_platlogin();
  inline void clear_has_platlogin();
  inline void set_has_platloginlife();
  inline void clear_has_platloginlife();
  inline void set_has_timezonename();
  inline void clear_has_timezonename();
  inline void set_has_timezoneoffset();
  inline void clear_has_timezoneoffset();
  inline void set_has_platinfo();
  inline void clear_has_platinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* platkey_;
  ::std::string* platlogin_;
  ::std::string* timezonename_;
  ::google::protobuf::uint32 platloginlife_;
  ::google::protobuf::int32 timezoneoffset_;
  ::Pmd::PlatInfo* platinfo_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserRequestPlatTokenLoginOkLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class UserRequestPlatTokenLoginFailLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  UserRequestPlatTokenLoginFailLoginUserPmd_S();
  virtual ~UserRequestPlatTokenLoginFailLoginUserPmd_S();

  UserRequestPlatTokenLoginFailLoginUserPmd_S(const UserRequestPlatTokenLoginFailLoginUserPmd_S& from);

  inline UserRequestPlatTokenLoginFailLoginUserPmd_S& operator=(const UserRequestPlatTokenLoginFailLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequestPlatTokenLoginFailLoginUserPmd_S& default_instance();

  void Swap(UserRequestPlatTokenLoginFailLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  UserRequestPlatTokenLoginFailLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRequestPlatTokenLoginFailLoginUserPmd_S& from);
  void MergeFrom(const UserRequestPlatTokenLoginFailLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // required string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  ::google::protobuf::uint32 retcode_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserRequestPlatTokenLoginFailLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginRequestLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  UserLoginRequestLoginUserPmd_C();
  virtual ~UserLoginRequestLoginUserPmd_C();

  UserLoginRequestLoginUserPmd_C(const UserLoginRequestLoginUserPmd_C& from);

  inline UserLoginRequestLoginUserPmd_C& operator=(const UserLoginRequestLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginRequestLoginUserPmd_C& default_instance();

  void Swap(UserLoginRequestLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  UserLoginRequestLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginRequestLoginUserPmd_C& from);
  void MergeFrom(const UserLoginRequestLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 2;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 gameversion = 3;
  inline bool has_gameversion() const;
  inline void clear_gameversion();
  static const int kGameversionFieldNumber = 3;
  inline ::google::protobuf::uint32 gameversion() const;
  inline void set_gameversion(::google::protobuf::uint32 value);

  // optional string mid = 4;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 4;
  inline const ::std::string& mid() const;
  inline void set_mid(const ::std::string& value);
  inline void set_mid(const char* value);
  inline void set_mid(const char* value, size_t size);
  inline ::std::string* mutable_mid();
  inline ::std::string* release_mid();
  inline void set_allocated_mid(::std::string* mid);

  // @@protoc_insertion_point(class_scope:Pmd.UserLoginRequestLoginUserPmd_C)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_gameversion();
  inline void clear_has_gameversion();
  inline void set_has_mid();
  inline void clear_has_mid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* mid_;
  ::google::protobuf::uint32 gameversion_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserLoginRequestLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginReturnFailLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  UserLoginReturnFailLoginUserPmd_S();
  virtual ~UserLoginReturnFailLoginUserPmd_S();

  UserLoginReturnFailLoginUserPmd_S(const UserLoginReturnFailLoginUserPmd_S& from);

  inline UserLoginReturnFailLoginUserPmd_S& operator=(const UserLoginReturnFailLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginReturnFailLoginUserPmd_S& default_instance();

  void Swap(UserLoginReturnFailLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  UserLoginReturnFailLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginReturnFailLoginUserPmd_S& from);
  void MergeFrom(const UserLoginReturnFailLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Pmd.LoginReturnFailReason retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::Pmd::LoginReturnFailReason retcode() const;
  inline void set_retcode(::Pmd::LoginReturnFailReason value);

  // required string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:Pmd.UserLoginReturnFailLoginUserPmd_S)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  int retcode_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserLoginReturnFailLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginReturnOkLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  UserLoginReturnOkLoginUserPmd_S();
  virtual ~UserLoginReturnOkLoginUserPmd_S();

  UserLoginReturnOkLoginUserPmd_S(const UserLoginReturnOkLoginUserPmd_S& from);

  inline UserLoginReturnOkLoginUserPmd_S& operator=(const UserLoginReturnOkLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginReturnOkLoginUserPmd_S& default_instance();

  void Swap(UserLoginReturnOkLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  UserLoginReturnOkLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginReturnOkLoginUserPmd_S& from);
  void MergeFrom(const UserLoginReturnOkLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional uint64 logintempid = 2;
  inline bool has_logintempid() const;
  inline void clear_logintempid();
  static const int kLogintempidFieldNumber = 2;
  inline ::google::protobuf::uint64 logintempid() const;
  inline void set_logintempid(::google::protobuf::uint64 value);

  // optional uint64 tokenid = 3;
  inline bool has_tokenid() const;
  inline void clear_tokenid();
  static const int kTokenidFieldNumber = 3;
  inline ::google::protobuf::uint64 tokenid() const;
  inline void set_tokenid(::google::protobuf::uint64 value);

  // optional string gatewayurl = 4;
  inline bool has_gatewayurl() const;
  inline void clear_gatewayurl();
  static const int kGatewayurlFieldNumber = 4;
  inline const ::std::string& gatewayurl() const;
  inline void set_gatewayurl(const ::std::string& value);
  inline void set_gatewayurl(const char* value);
  inline void set_gatewayurl(const char* value, size_t size);
  inline ::std::string* mutable_gatewayurl();
  inline ::std::string* release_gatewayurl();
  inline void set_allocated_gatewayurl(::std::string* gatewayurl);

  // optional uint32 gameid = 5;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 5;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 6;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 6;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional bool separatezoneuid = 7;
  inline bool has_separatezoneuid() const;
  inline void clear_separatezoneuid();
  static const int kSeparatezoneuidFieldNumber = 7;
  inline bool separatezoneuid() const;
  inline void set_separatezoneuid(bool value);

  // optional string zoneuid = 8;
  inline bool has_zoneuid() const;
  inline void clear_zoneuid();
  static const int kZoneuidFieldNumber = 8;
  inline const ::std::string& zoneuid() const;
  inline void set_zoneuid(const ::std::string& value);
  inline void set_zoneuid(const char* value);
  inline void set_zoneuid(const char* value, size_t size);
  inline ::std::string* mutable_zoneuid();
  inline ::std::string* release_zoneuid();
  inline void set_allocated_zoneuid(::std::string* zoneuid);

  // optional string gatewayurltcp = 9;
  inline bool has_gatewayurltcp() const;
  inline void clear_gatewayurltcp();
  static const int kGatewayurltcpFieldNumber = 9;
  inline const ::std::string& gatewayurltcp() const;
  inline void set_gatewayurltcp(const ::std::string& value);
  inline void set_gatewayurltcp(const char* value);
  inline void set_gatewayurltcp(const char* value, size_t size);
  inline ::std::string* mutable_gatewayurltcp();
  inline ::std::string* release_gatewayurltcp();
  inline void set_allocated_gatewayurltcp(::std::string* gatewayurltcp);

  // @@protoc_insertion_point(class_scope:Pmd.UserLoginReturnOkLoginUserPmd_S)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_logintempid();
  inline void clear_has_logintempid();
  inline void set_has_tokenid();
  inline void clear_has_tokenid();
  inline void set_has_gatewayurl();
  inline void clear_has_gatewayurl();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_separatezoneuid();
  inline void clear_has_separatezoneuid();
  inline void set_has_zoneuid();
  inline void clear_has_zoneuid();
  inline void set_has_gatewayurltcp();
  inline void clear_has_gatewayurltcp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 accountid_;
  ::google::protobuf::uint64 logintempid_;
  ::google::protobuf::uint64 tokenid_;
  ::std::string* gatewayurl_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* zoneuid_;
  ::std::string* gatewayurltcp_;
  bool separatezoneuid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserLoginReturnOkLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginTokenLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  UserLoginTokenLoginUserPmd_C();
  virtual ~UserLoginTokenLoginUserPmd_C();

  UserLoginTokenLoginUserPmd_C(const UserLoginTokenLoginUserPmd_C& from);

  inline UserLoginTokenLoginUserPmd_C& operator=(const UserLoginTokenLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginTokenLoginUserPmd_C& default_instance();

  void Swap(UserLoginTokenLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  UserLoginTokenLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginTokenLoginUserPmd_C& from);
  void MergeFrom(const UserLoginTokenLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 2;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint64 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // required uint64 logintempid = 4;
  inline bool has_logintempid() const;
  inline void clear_logintempid();
  static const int kLogintempidFieldNumber = 4;
  inline ::google::protobuf::uint64 logintempid() const;
  inline void set_logintempid(::google::protobuf::uint64 value);

  // required uint32 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // required string tokenmd5 = 6;
  inline bool has_tokenmd5() const;
  inline void clear_tokenmd5();
  static const int kTokenmd5FieldNumber = 6;
  inline const ::std::string& tokenmd5() const;
  inline void set_tokenmd5(const ::std::string& value);
  inline void set_tokenmd5(const char* value);
  inline void set_tokenmd5(const char* value, size_t size);
  inline ::std::string* mutable_tokenmd5();
  inline ::std::string* release_tokenmd5();
  inline void set_allocated_tokenmd5(::std::string* tokenmd5);

  // optional string compress = 8;
  inline bool has_compress() const;
  inline void clear_compress();
  static const int kCompressFieldNumber = 8;
  inline const ::std::string& compress() const;
  inline void set_compress(const ::std::string& value);
  inline void set_compress(const char* value);
  inline void set_compress(const char* value, size_t size);
  inline ::std::string* mutable_compress();
  inline ::std::string* release_compress();
  inline void set_allocated_compress(::std::string* compress);

  // optional string encrypt = 9;
  inline bool has_encrypt() const;
  inline void clear_encrypt();
  static const int kEncryptFieldNumber = 9;
  inline const ::std::string& encrypt() const;
  inline void set_encrypt(const ::std::string& value);
  inline void set_encrypt(const char* value);
  inline void set_encrypt(const char* value, size_t size);
  inline ::std::string* mutable_encrypt();
  inline ::std::string* release_encrypt();
  inline void set_allocated_encrypt(::std::string* encrypt);

  // optional string encryptkey = 10;
  inline bool has_encryptkey() const;
  inline void clear_encryptkey();
  static const int kEncryptkeyFieldNumber = 10;
  inline const ::std::string& encryptkey() const;
  inline void set_encryptkey(const ::std::string& value);
  inline void set_encryptkey(const char* value);
  inline void set_encryptkey(const char* value, size_t size);
  inline ::std::string* mutable_encryptkey();
  inline ::std::string* release_encryptkey();
  inline void set_allocated_encryptkey(::std::string* encryptkey);

  // @@protoc_insertion_point(class_scope:Pmd.UserLoginTokenLoginUserPmd_C)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_logintempid();
  inline void clear_has_logintempid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_tokenmd5();
  inline void clear_has_tokenmd5();
  inline void set_has_compress();
  inline void clear_has_compress();
  inline void set_has_encrypt();
  inline void clear_has_encrypt();
  inline void set_has_encryptkey();
  inline void clear_has_encryptkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint64 accountid_;
  ::google::protobuf::uint64 logintempid_;
  ::std::string* tokenmd5_;
  ::std::string* compress_;
  ::std::string* encrypt_;
  ::std::string* encryptkey_;
  ::google::protobuf::uint32 timestamp_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserLoginTokenLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class ClientLogUrlLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  ClientLogUrlLoginUserPmd_S();
  virtual ~ClientLogUrlLoginUserPmd_S();

  ClientLogUrlLoginUserPmd_S(const ClientLogUrlLoginUserPmd_S& from);

  inline ClientLogUrlLoginUserPmd_S& operator=(const ClientLogUrlLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientLogUrlLoginUserPmd_S& default_instance();

  void Swap(ClientLogUrlLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  ClientLogUrlLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientLogUrlLoginUserPmd_S& from);
  void MergeFrom(const ClientLogUrlLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string loglevel = 1;
  inline bool has_loglevel() const;
  inline void clear_loglevel();
  static const int kLoglevelFieldNumber = 1;
  inline const ::std::string& loglevel() const;
  inline void set_loglevel(const ::std::string& value);
  inline void set_loglevel(const char* value);
  inline void set_loglevel(const char* value, size_t size);
  inline ::std::string* mutable_loglevel();
  inline ::std::string* release_loglevel();
  inline void set_allocated_loglevel(::std::string* loglevel);

  // required string logurl = 2;
  inline bool has_logurl() const;
  inline void clear_logurl();
  static const int kLogurlFieldNumber = 2;
  inline const ::std::string& logurl() const;
  inline void set_logurl(const ::std::string& value);
  inline void set_logurl(const char* value);
  inline void set_logurl(const char* value, size_t size);
  inline ::std::string* mutable_logurl();
  inline ::std::string* release_logurl();
  inline void set_allocated_logurl(::std::string* logurl);

  // required bool distinct = 3;
  inline bool has_distinct() const;
  inline void clear_distinct();
  static const int kDistinctFieldNumber = 3;
  inline bool distinct() const;
  inline void set_distinct(bool value);

  // @@protoc_insertion_point(class_scope:Pmd.ClientLogUrlLoginUserPmd_S)
 private:
  inline void set_has_loglevel();
  inline void clear_has_loglevel();
  inline void set_has_logurl();
  inline void clear_has_logurl();
  inline void set_has_distinct();
  inline void clear_has_distinct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* loglevel_;
  ::std::string* logurl_;
  bool distinct_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ClientLogUrlLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class MessageBoxLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  MessageBoxLoginUserPmd_S();
  virtual ~MessageBoxLoginUserPmd_S();

  MessageBoxLoginUserPmd_S(const MessageBoxLoginUserPmd_S& from);

  inline MessageBoxLoginUserPmd_S& operator=(const MessageBoxLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBoxLoginUserPmd_S& default_instance();

  void Swap(MessageBoxLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  MessageBoxLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageBoxLoginUserPmd_S& from);
  void MergeFrom(const MessageBoxLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string btnleft = 1;
  inline bool has_btnleft() const;
  inline void clear_btnleft();
  static const int kBtnleftFieldNumber = 1;
  inline const ::std::string& btnleft() const;
  inline void set_btnleft(const ::std::string& value);
  inline void set_btnleft(const char* value);
  inline void set_btnleft(const char* value, size_t size);
  inline ::std::string* mutable_btnleft();
  inline ::std::string* release_btnleft();
  inline void set_allocated_btnleft(::std::string* btnleft);

  // optional string btnmiddle = 2;
  inline bool has_btnmiddle() const;
  inline void clear_btnmiddle();
  static const int kBtnmiddleFieldNumber = 2;
  inline const ::std::string& btnmiddle() const;
  inline void set_btnmiddle(const ::std::string& value);
  inline void set_btnmiddle(const char* value);
  inline void set_btnmiddle(const char* value, size_t size);
  inline ::std::string* mutable_btnmiddle();
  inline ::std::string* release_btnmiddle();
  inline void set_allocated_btnmiddle(::std::string* btnmiddle);

  // optional string btnright = 3;
  inline bool has_btnright() const;
  inline void clear_btnright();
  static const int kBtnrightFieldNumber = 3;
  inline const ::std::string& btnright() const;
  inline void set_btnright(const ::std::string& value);
  inline void set_btnright(const char* value);
  inline void set_btnright(const char* value, size_t size);
  inline ::std::string* mutable_btnright();
  inline ::std::string* release_btnright();
  inline void set_allocated_btnright(::std::string* btnright);

  // optional string info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:Pmd.MessageBoxLoginUserPmd_S)
 private:
  inline void set_has_btnleft();
  inline void clear_has_btnleft();
  inline void set_has_btnmiddle();
  inline void clear_has_btnmiddle();
  inline void set_has_btnright();
  inline void clear_has_btnright();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* btnleft_;
  ::std::string* btnmiddle_;
  ::std::string* btnright_;
  ::std::string* info_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static MessageBoxLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class RequestAccountRegisterLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  RequestAccountRegisterLoginUserPmd_C();
  virtual ~RequestAccountRegisterLoginUserPmd_C();

  RequestAccountRegisterLoginUserPmd_C(const RequestAccountRegisterLoginUserPmd_C& from);

  inline RequestAccountRegisterLoginUserPmd_C& operator=(const RequestAccountRegisterLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestAccountRegisterLoginUserPmd_C& default_instance();

  void Swap(RequestAccountRegisterLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  RequestAccountRegisterLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestAccountRegisterLoginUserPmd_C& from);
  void MergeFrom(const RequestAccountRegisterLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string code = 3;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:Pmd.RequestAccountRegisterLoginUserPmd_C)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* account_;
  ::std::string* password_;
  ::std::string* code_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static RequestAccountRegisterLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class ReturnAccountRegisterLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  ReturnAccountRegisterLoginUserPmd_S();
  virtual ~ReturnAccountRegisterLoginUserPmd_S();

  ReturnAccountRegisterLoginUserPmd_S(const ReturnAccountRegisterLoginUserPmd_S& from);

  inline ReturnAccountRegisterLoginUserPmd_S& operator=(const ReturnAccountRegisterLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnAccountRegisterLoginUserPmd_S& default_instance();

  void Swap(ReturnAccountRegisterLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  ReturnAccountRegisterLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnAccountRegisterLoginUserPmd_S& from);
  void MergeFrom(const ReturnAccountRegisterLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required uint64 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.ReturnAccountRegisterLoginUserPmd_S)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* account_;
  ::google::protobuf::uint64 accountid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ReturnAccountRegisterLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class UserLogoutTokenLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  UserLogoutTokenLoginUserPmd_C();
  virtual ~UserLogoutTokenLoginUserPmd_C();

  UserLogoutTokenLoginUserPmd_C(const UserLogoutTokenLoginUserPmd_C& from);

  inline UserLogoutTokenLoginUserPmd_C& operator=(const UserLogoutTokenLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogoutTokenLoginUserPmd_C& default_instance();

  void Swap(UserLogoutTokenLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  UserLogoutTokenLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogoutTokenLoginUserPmd_C& from);
  void MergeFrom(const UserLogoutTokenLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pmd.UserLogoutTokenLoginUserPmd_C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserLogoutTokenLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginReconnectLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  UserLoginReconnectLoginUserPmd_C();
  virtual ~UserLoginReconnectLoginUserPmd_C();

  UserLoginReconnectLoginUserPmd_C(const UserLoginReconnectLoginUserPmd_C& from);

  inline UserLoginReconnectLoginUserPmd_C& operator=(const UserLoginReconnectLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginReconnectLoginUserPmd_C& default_instance();

  void Swap(UserLoginReconnectLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  UserLoginReconnectLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginReconnectLoginUserPmd_C& from);
  void MergeFrom(const UserLoginReconnectLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional uint32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // optional string tokenmd5 = 3;
  inline bool has_tokenmd5() const;
  inline void clear_tokenmd5();
  static const int kTokenmd5FieldNumber = 3;
  inline const ::std::string& tokenmd5() const;
  inline void set_tokenmd5(const ::std::string& value);
  inline void set_tokenmd5(const char* value);
  inline void set_tokenmd5(const char* value, size_t size);
  inline ::std::string* mutable_tokenmd5();
  inline ::std::string* release_tokenmd5();
  inline void set_allocated_tokenmd5(::std::string* tokenmd5);

  // optional uint64 logintempid = 4;
  inline bool has_logintempid() const;
  inline void clear_logintempid();
  static const int kLogintempidFieldNumber = 4;
  inline ::google::protobuf::uint64 logintempid() const;
  inline void set_logintempid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.UserLoginReconnectLoginUserPmd_C)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_tokenmd5();
  inline void clear_has_tokenmd5();
  inline void set_has_logintempid();
  inline void clear_has_logintempid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 accountid_;
  ::std::string* tokenmd5_;
  ::google::protobuf::uint64 logintempid_;
  ::google::protobuf::uint32 timestamp_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static UserLoginReconnectLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class ReconnectKickoutLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  ReconnectKickoutLoginUserPmd_S();
  virtual ~ReconnectKickoutLoginUserPmd_S();

  ReconnectKickoutLoginUserPmd_S(const ReconnectKickoutLoginUserPmd_S& from);

  inline ReconnectKickoutLoginUserPmd_S& operator=(const ReconnectKickoutLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconnectKickoutLoginUserPmd_S& default_instance();

  void Swap(ReconnectKickoutLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  ReconnectKickoutLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconnectKickoutLoginUserPmd_S& from);
  void MergeFrom(const ReconnectKickoutLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 1;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:Pmd.ReconnectKickoutLoginUserPmd_S)
 private:
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ReconnectKickoutLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class ReconnectErrorLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  ReconnectErrorLoginUserPmd_S();
  virtual ~ReconnectErrorLoginUserPmd_S();

  ReconnectErrorLoginUserPmd_S(const ReconnectErrorLoginUserPmd_S& from);

  inline ReconnectErrorLoginUserPmd_S& operator=(const ReconnectErrorLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconnectErrorLoginUserPmd_S& default_instance();

  void Swap(ReconnectErrorLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  ReconnectErrorLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconnectErrorLoginUserPmd_S& from);
  void MergeFrom(const ReconnectErrorLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 1;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:Pmd.ReconnectErrorLoginUserPmd_S)
 private:
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* desc_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ReconnectErrorLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class ServerKickoutLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  ServerKickoutLoginUserPmd_S();
  virtual ~ServerKickoutLoginUserPmd_S();

  ServerKickoutLoginUserPmd_S(const ServerKickoutLoginUserPmd_S& from);

  inline ServerKickoutLoginUserPmd_S& operator=(const ServerKickoutLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerKickoutLoginUserPmd_S& default_instance();

  void Swap(ServerKickoutLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  ServerKickoutLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerKickoutLoginUserPmd_S& from);
  void MergeFrom(const ServerKickoutLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint64 accountid() const;
  inline void set_accountid(::google::protobuf::uint64 value);

  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:Pmd.ServerKickoutLoginUserPmd_S)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 accountid_;
  ::std::string* desc_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ServerKickoutLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class PlatInfo : public ::google::protobuf::Message {
 public:
  PlatInfo();
  virtual ~PlatInfo();

  PlatInfo(const PlatInfo& from);

  inline PlatInfo& operator=(const PlatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlatInfo& default_instance();

  void Swap(PlatInfo* other);

  // implements Message ----------------------------------------------

  PlatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlatInfo& from);
  void MergeFrom(const PlatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required .Pmd.PlatType platid = 2;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 2;
  inline ::Pmd::PlatType platid() const;
  inline void set_platid(::Pmd::PlatType value);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline const ::std::string& gender() const;
  inline void set_gender(const ::std::string& value);
  inline void set_gender(const char* value);
  inline void set_gender(const char* value, size_t size);
  inline ::std::string* mutable_gender();
  inline ::std::string* release_gender();
  inline void set_allocated_gender(::std::string* gender);

  // optional string nickname = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional string sign = 8;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 8;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string faceurl = 10;
  inline bool has_faceurl() const;
  inline void clear_faceurl();
  static const int kFaceurlFieldNumber = 10;
  inline const ::std::string& faceurl() const;
  inline void set_faceurl(const ::std::string& value);
  inline void set_faceurl(const char* value);
  inline void set_faceurl(const char* value, size_t size);
  inline ::std::string* mutable_faceurl();
  inline ::std::string* release_faceurl();
  inline void set_allocated_faceurl(::std::string* faceurl);

  // optional string extdata = 11;
  inline bool has_extdata() const;
  inline void clear_extdata();
  static const int kExtdataFieldNumber = 11;
  inline const ::std::string& extdata() const;
  inline void set_extdata(const ::std::string& value);
  inline void set_extdata(const char* value);
  inline void set_extdata(const char* value, size_t size);
  inline ::std::string* mutable_extdata();
  inline ::std::string* release_extdata();
  inline void set_allocated_extdata(::std::string* extdata);

  // optional string uid = 12;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 12;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:Pmd.PlatInfo)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_platid();
  inline void clear_has_platid();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_faceurl();
  inline void clear_has_faceurl();
  inline void set_has_extdata();
  inline void clear_has_extdata();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* account_;
  ::std::string* email_;
  ::std::string* gender_;
  ::std::string* nickname_;
  ::std::string* timestamp_;
  ::std::string* sign_;
  ::std::string* faceurl_;
  ::std::string* extdata_;
  ::std::string* uid_;
  int platid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static PlatInfo* default_instance_;
};
// -------------------------------------------------------------------

class ThirdPlatLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  ThirdPlatLoginUserPmd_C();
  virtual ~ThirdPlatLoginUserPmd_C();

  ThirdPlatLoginUserPmd_C(const ThirdPlatLoginUserPmd_C& from);

  inline ThirdPlatLoginUserPmd_C& operator=(const ThirdPlatLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThirdPlatLoginUserPmd_C& default_instance();

  void Swap(ThirdPlatLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  ThirdPlatLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThirdPlatLoginUserPmd_C& from);
  void MergeFrom(const ThirdPlatLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Pmd.PlatInfo platinfo = 1;
  inline bool has_platinfo() const;
  inline void clear_platinfo();
  static const int kPlatinfoFieldNumber = 1;
  inline const ::Pmd::PlatInfo& platinfo() const;
  inline ::Pmd::PlatInfo* mutable_platinfo();
  inline ::Pmd::PlatInfo* release_platinfo();
  inline void set_allocated_platinfo(::Pmd::PlatInfo* platinfo);

  // required uint32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // required string sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // required string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:Pmd.ThirdPlatLoginUserPmd_C)
 private:
  inline void set_has_platinfo();
  inline void clear_has_platinfo();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::PlatInfo* platinfo_;
  ::std::string* sid_;
  ::std::string* uid_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ThirdPlatLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class SetServerLangLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  SetServerLangLoginUserPmd_C();
  virtual ~SetServerLangLoginUserPmd_C();

  SetServerLangLoginUserPmd_C(const SetServerLangLoginUserPmd_C& from);

  inline SetServerLangLoginUserPmd_C& operator=(const SetServerLangLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetServerLangLoginUserPmd_C& default_instance();

  void Swap(SetServerLangLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  SetServerLangLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetServerLangLoginUserPmd_C& from);
  void MergeFrom(const SetServerLangLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string lang = 1;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 1;
  inline const ::std::string& lang() const;
  inline void set_lang(const ::std::string& value);
  inline void set_lang(const char* value);
  inline void set_lang(const char* value, size_t size);
  inline ::std::string* mutable_lang();
  inline ::std::string* release_lang();
  inline void set_allocated_lang(::std::string* lang);

  // required int32 gameregion = 2;
  inline bool has_gameregion() const;
  inline void clear_gameregion();
  static const int kGameregionFieldNumber = 2;
  inline ::google::protobuf::int32 gameregion() const;
  inline void set_gameregion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pmd.SetServerLangLoginUserPmd_C)
 private:
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_gameregion();
  inline void clear_has_gameregion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* lang_;
  ::google::protobuf::int32 gameregion_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static SetServerLangLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class RequestClientIPLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  RequestClientIPLoginUserPmd_C();
  virtual ~RequestClientIPLoginUserPmd_C();

  RequestClientIPLoginUserPmd_C(const RequestClientIPLoginUserPmd_C& from);

  inline RequestClientIPLoginUserPmd_C& operator=(const RequestClientIPLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestClientIPLoginUserPmd_C& default_instance();

  void Swap(RequestClientIPLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  RequestClientIPLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestClientIPLoginUserPmd_C& from);
  void MergeFrom(const RequestClientIPLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pmd.RequestClientIPLoginUserPmd_C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static RequestClientIPLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class ReturnClientIPLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  ReturnClientIPLoginUserPmd_S();
  virtual ~ReturnClientIPLoginUserPmd_S();

  ReturnClientIPLoginUserPmd_S(const ReturnClientIPLoginUserPmd_S& from);

  inline ReturnClientIPLoginUserPmd_S& operator=(const ReturnClientIPLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnClientIPLoginUserPmd_S& default_instance();

  void Swap(ReturnClientIPLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  ReturnClientIPLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnClientIPLoginUserPmd_S& from);
  void MergeFrom(const ReturnClientIPLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pstrip = 1;
  inline bool has_pstrip() const;
  inline void clear_pstrip();
  static const int kPstripFieldNumber = 1;
  inline const ::std::string& pstrip() const;
  inline void set_pstrip(const ::std::string& value);
  inline void set_pstrip(const char* value);
  inline void set_pstrip(const char* value, size_t size);
  inline ::std::string* mutable_pstrip();
  inline ::std::string* release_pstrip();
  inline void set_allocated_pstrip(::std::string* pstrip);

  // @@protoc_insertion_point(class_scope:Pmd.ReturnClientIPLoginUserPmd_S)
 private:
  inline void set_has_pstrip();
  inline void clear_has_pstrip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pstrip_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ReturnClientIPLoginUserPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class CheckVersionLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  CheckVersionLoginUserPmd_C();
  virtual ~CheckVersionLoginUserPmd_C();

  CheckVersionLoginUserPmd_C(const CheckVersionLoginUserPmd_C& from);

  inline CheckVersionLoginUserPmd_C& operator=(const CheckVersionLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckVersionLoginUserPmd_C& default_instance();

  void Swap(CheckVersionLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  CheckVersionLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckVersionLoginUserPmd_C& from);
  void MergeFrom(const CheckVersionLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 default_charid = 1;
  inline bool has_default_charid() const;
  inline void clear_default_charid();
  static const int kDefaultCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 default_charid() const;
  inline void set_default_charid(::google::protobuf::uint32 value);

  // optional uint32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.CheckVersionLoginUserPmd_C)
 private:
  inline void set_has_default_charid();
  inline void clear_has_default_charid();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 default_charid_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static CheckVersionLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class BehaviorClientVerifyLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  BehaviorClientVerifyLoginUserPmd_C();
  virtual ~BehaviorClientVerifyLoginUserPmd_C();

  BehaviorClientVerifyLoginUserPmd_C(const BehaviorClientVerifyLoginUserPmd_C& from);

  inline BehaviorClientVerifyLoginUserPmd_C& operator=(const BehaviorClientVerifyLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BehaviorClientVerifyLoginUserPmd_C& default_instance();

  void Swap(BehaviorClientVerifyLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  BehaviorClientVerifyLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BehaviorClientVerifyLoginUserPmd_C& from);
  void MergeFrom(const BehaviorClientVerifyLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // optional string mid = 5;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 5;
  inline const ::std::string& mid() const;
  inline void set_mid(const ::std::string& value);
  inline void set_mid(const char* value);
  inline void set_mid(const char* value, size_t size);
  inline ::std::string* mutable_mid();
  inline ::std::string* release_mid();
  inline void set_allocated_mid(::std::string* mid);

  // optional uint32 platid = 6;
  inline bool has_platid() const;
  inline void clear_platid();
  static const int kPlatidFieldNumber = 6;
  inline ::google::protobuf::uint32 platid() const;
  inline void set_platid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 7;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 7;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 gameversion = 8;
  inline bool has_gameversion() const;
  inline void clear_gameversion();
  static const int kGameversionFieldNumber = 8;
  inline ::google::protobuf::uint32 gameversion() const;
  inline void set_gameversion(::google::protobuf::uint32 value);

  // optional string compress = 9;
  inline bool has_compress() const;
  inline void clear_compress();
  static const int kCompressFieldNumber = 9;
  inline const ::std::string& compress() const;
  inline void set_compress(const ::std::string& value);
  inline void set_compress(const char* value);
  inline void set_compress(const char* value, size_t size);
  inline ::std::string* mutable_compress();
  inline ::std::string* release_compress();
  inline void set_allocated_compress(::std::string* compress);

  // optional string encrypt = 10;
  inline bool has_encrypt() const;
  inline void clear_encrypt();
  static const int kEncryptFieldNumber = 10;
  inline const ::std::string& encrypt() const;
  inline void set_encrypt(const ::std::string& value);
  inline void set_encrypt(const char* value);
  inline void set_encrypt(const char* value, size_t size);
  inline ::std::string* mutable_encrypt();
  inline ::std::string* release_encrypt();
  inline void set_allocated_encrypt(::std::string* encrypt);

  // optional string encryptkey = 11;
  inline bool has_encryptkey() const;
  inline void clear_encryptkey();
  static const int kEncryptkeyFieldNumber = 11;
  inline const ::std::string& encryptkey() const;
  inline void set_encryptkey(const ::std::string& value);
  inline void set_encryptkey(const char* value);
  inline void set_encryptkey(const char* value, size_t size);
  inline ::std::string* mutable_encryptkey();
  inline ::std::string* release_encryptkey();
  inline void set_allocated_encryptkey(::std::string* encryptkey);

  // @@protoc_insertion_point(class_scope:Pmd.BehaviorClientVerifyLoginUserPmd_C)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_platid();
  inline void clear_has_platid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_gameversion();
  inline void clear_has_gameversion();
  inline void set_has_compress();
  inline void clear_has_compress();
  inline void set_has_encrypt();
  inline void clear_has_encrypt();
  inline void set_has_encryptkey();
  inline void clear_has_encryptkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* account_;
  ::std::string* token_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 gameid_;
  ::std::string* mid_;
  ::google::protobuf::uint32 platid_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* compress_;
  ::std::string* encrypt_;
  ::std::string* encryptkey_;
  ::google::protobuf::uint32 gameversion_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static BehaviorClientVerifyLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class RequestSupoortGameListLoginUserPmd_C : public ::google::protobuf::Message {
 public:
  RequestSupoortGameListLoginUserPmd_C();
  virtual ~RequestSupoortGameListLoginUserPmd_C();

  RequestSupoortGameListLoginUserPmd_C(const RequestSupoortGameListLoginUserPmd_C& from);

  inline RequestSupoortGameListLoginUserPmd_C& operator=(const RequestSupoortGameListLoginUserPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestSupoortGameListLoginUserPmd_C& default_instance();

  void Swap(RequestSupoortGameListLoginUserPmd_C* other);

  // implements Message ----------------------------------------------

  RequestSupoortGameListLoginUserPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestSupoortGameListLoginUserPmd_C& from);
  void MergeFrom(const RequestSupoortGameListLoginUserPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pmd.RequestSupoortGameListLoginUserPmd_C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static RequestSupoortGameListLoginUserPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class ReturnSupoortGameListLoginUserPmd_S_Game : public ::google::protobuf::Message {
 public:
  ReturnSupoortGameListLoginUserPmd_S_Game();
  virtual ~ReturnSupoortGameListLoginUserPmd_S_Game();

  ReturnSupoortGameListLoginUserPmd_S_Game(const ReturnSupoortGameListLoginUserPmd_S_Game& from);

  inline ReturnSupoortGameListLoginUserPmd_S_Game& operator=(const ReturnSupoortGameListLoginUserPmd_S_Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnSupoortGameListLoginUserPmd_S_Game& default_instance();

  void Swap(ReturnSupoortGameListLoginUserPmd_S_Game* other);

  // implements Message ----------------------------------------------

  ReturnSupoortGameListLoginUserPmd_S_Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnSupoortGameListLoginUserPmd_S_Game& from);
  void MergeFrom(const ReturnSupoortGameListLoginUserPmd_S_Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gamename = 1;
  inline bool has_gamename() const;
  inline void clear_gamename();
  static const int kGamenameFieldNumber = 1;
  inline const ::std::string& gamename() const;
  inline void set_gamename(const ::std::string& value);
  inline void set_gamename(const char* value);
  inline void set_gamename(const char* value, size_t size);
  inline ::std::string* mutable_gamename();
  inline ::std::string* release_gamename();
  inline void set_allocated_gamename(::std::string* gamename);

  // required uint32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
 private:
  inline void set_has_gamename();
  inline void clear_has_gamename();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gamename_;
  ::google::protobuf::uint32 gameid_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ReturnSupoortGameListLoginUserPmd_S_Game* default_instance_;
};
// -------------------------------------------------------------------

class ReturnSupoortGameListLoginUserPmd_S : public ::google::protobuf::Message {
 public:
  ReturnSupoortGameListLoginUserPmd_S();
  virtual ~ReturnSupoortGameListLoginUserPmd_S();

  ReturnSupoortGameListLoginUserPmd_S(const ReturnSupoortGameListLoginUserPmd_S& from);

  inline ReturnSupoortGameListLoginUserPmd_S& operator=(const ReturnSupoortGameListLoginUserPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnSupoortGameListLoginUserPmd_S& default_instance();

  void Swap(ReturnSupoortGameListLoginUserPmd_S* other);

  // implements Message ----------------------------------------------

  ReturnSupoortGameListLoginUserPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnSupoortGameListLoginUserPmd_S& from);
  void MergeFrom(const ReturnSupoortGameListLoginUserPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pmd.ReturnSupoortGameListLoginUserPmd_S_Game gamelist = 1;
  inline int gamelist_size() const;
  inline void clear_gamelist();
  static const int kGamelistFieldNumber = 1;
  inline const ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game& gamelist(int index) const;
  inline ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game* mutable_gamelist(int index);
  inline ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game* add_gamelist();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game >&
      gamelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game >*
      mutable_gamelist();

  // @@protoc_insertion_point(class_scope:Pmd.ReturnSupoortGameListLoginUserPmd_S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game > gamelist_;
  friend void  protobuf_AddDesc_logincommand_2eproto();
  friend void protobuf_AssignDesc_logincommand_2eproto();
  friend void protobuf_ShutdownFile_logincommand_2eproto();

  void InitAsDefaultInstance();
  static ReturnSupoortGameListLoginUserPmd_S* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// -------------------------------------------------------------------

// AccountTokenVerifyLoginUserPmd_CS

// required string account = 1;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountTokenVerifyLoginUserPmd_CS::account() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.account)
  return *account_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.account)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.AccountTokenVerifyLoginUserPmd_CS.account)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.AccountTokenVerifyLoginUserPmd_CS.account)
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.AccountTokenVerifyLoginUserPmd_CS.account)
  return account_;
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.AccountTokenVerifyLoginUserPmd_CS.account)
}

// required string token = 2;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& AccountTokenVerifyLoginUserPmd_CS::token() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.token)
  return *token_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.token)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.AccountTokenVerifyLoginUserPmd_CS.token)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.AccountTokenVerifyLoginUserPmd_CS.token)
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.AccountTokenVerifyLoginUserPmd_CS.token)
  return token_;
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.AccountTokenVerifyLoginUserPmd_CS.token)
}

// required uint32 version = 3;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 AccountTokenVerifyLoginUserPmd_CS::version() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.version)
  return version_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.version)
}

// optional uint32 gameid = 4;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 AccountTokenVerifyLoginUserPmd_CS::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.gameid)
  return gameid_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.gameid)
}

// optional string mid = 5;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_mid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_mid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_mid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_mid() {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_->clear();
  }
  clear_has_mid();
}
inline const ::std::string& AccountTokenVerifyLoginUserPmd_CS::mid() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.mid)
  return *mid_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_mid(const ::std::string& value) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.mid)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_mid(const char* value) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.AccountTokenVerifyLoginUserPmd_CS.mid)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_mid(const char* value, size_t size) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.AccountTokenVerifyLoginUserPmd_CS.mid)
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::mutable_mid() {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.AccountTokenVerifyLoginUserPmd_CS.mid)
  return mid_;
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::release_mid() {
  clear_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mid_;
    mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_allocated_mid(::std::string* mid) {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (mid) {
    set_has_mid();
    mid_ = mid;
  } else {
    clear_has_mid();
    mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.AccountTokenVerifyLoginUserPmd_CS.mid)
}

// optional uint32 platid = 6;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_platid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_platid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_platid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_platid() {
  platid_ = 0u;
  clear_has_platid();
}
inline ::google::protobuf::uint32 AccountTokenVerifyLoginUserPmd_CS::platid() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.platid)
  return platid_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_platid(::google::protobuf::uint32 value) {
  set_has_platid();
  platid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.platid)
}

// optional uint32 zoneid = 7;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_zoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_zoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 AccountTokenVerifyLoginUserPmd_CS::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.zoneid)
  return zoneid_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.zoneid)
}

// optional uint32 gameversion = 8;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_gameversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_gameversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_gameversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_gameversion() {
  gameversion_ = 0u;
  clear_has_gameversion();
}
inline ::google::protobuf::uint32 AccountTokenVerifyLoginUserPmd_CS::gameversion() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.gameversion)
  return gameversion_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_gameversion(::google::protobuf::uint32 value) {
  set_has_gameversion();
  gameversion_ = value;
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.gameversion)
}

// optional string compress = 9;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_compress() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_compress() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_compress() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_compress() {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_->clear();
  }
  clear_has_compress();
}
inline const ::std::string& AccountTokenVerifyLoginUserPmd_CS::compress() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.compress)
  return *compress_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_compress(const ::std::string& value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.compress)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_compress(const char* value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.AccountTokenVerifyLoginUserPmd_CS.compress)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_compress(const char* value, size_t size) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.AccountTokenVerifyLoginUserPmd_CS.compress)
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::mutable_compress() {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.AccountTokenVerifyLoginUserPmd_CS.compress)
  return compress_;
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::release_compress() {
  clear_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = compress_;
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_allocated_compress(::std::string* compress) {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (compress) {
    set_has_compress();
    compress_ = compress;
  } else {
    clear_has_compress();
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.AccountTokenVerifyLoginUserPmd_CS.compress)
}

// optional string encrypt = 10;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_encrypt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_encrypt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_encrypt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_encrypt() {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_->clear();
  }
  clear_has_encrypt();
}
inline const ::std::string& AccountTokenVerifyLoginUserPmd_CS::encrypt() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.encrypt)
  return *encrypt_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_encrypt(const ::std::string& value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.encrypt)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_encrypt(const char* value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.AccountTokenVerifyLoginUserPmd_CS.encrypt)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_encrypt(const char* value, size_t size) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.AccountTokenVerifyLoginUserPmd_CS.encrypt)
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::mutable_encrypt() {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.AccountTokenVerifyLoginUserPmd_CS.encrypt)
  return encrypt_;
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::release_encrypt() {
  clear_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypt_;
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_allocated_encrypt(::std::string* encrypt) {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encrypt) {
    set_has_encrypt();
    encrypt_ = encrypt;
  } else {
    clear_has_encrypt();
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.AccountTokenVerifyLoginUserPmd_CS.encrypt)
}

// optional string encryptkey = 11;
inline bool AccountTokenVerifyLoginUserPmd_CS::has_encryptkey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_has_encryptkey() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_has_encryptkey() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AccountTokenVerifyLoginUserPmd_CS::clear_encryptkey() {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_->clear();
  }
  clear_has_encryptkey();
}
inline const ::std::string& AccountTokenVerifyLoginUserPmd_CS::encryptkey() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyLoginUserPmd_CS.encryptkey)
  return *encryptkey_;
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_encryptkey(const ::std::string& value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyLoginUserPmd_CS.encryptkey)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_encryptkey(const char* value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.AccountTokenVerifyLoginUserPmd_CS.encryptkey)
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_encryptkey(const char* value, size_t size) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.AccountTokenVerifyLoginUserPmd_CS.encryptkey)
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::mutable_encryptkey() {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.AccountTokenVerifyLoginUserPmd_CS.encryptkey)
  return encryptkey_;
}
inline ::std::string* AccountTokenVerifyLoginUserPmd_CS::release_encryptkey() {
  clear_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encryptkey_;
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountTokenVerifyLoginUserPmd_CS::set_allocated_encryptkey(::std::string* encryptkey) {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (encryptkey) {
    set_has_encryptkey();
    encryptkey_ = encryptkey;
  } else {
    clear_has_encryptkey();
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.AccountTokenVerifyLoginUserPmd_CS.encryptkey)
}

// -------------------------------------------------------------------

// PushAccountVerifyLoginUserPmd_C

// optional uint64 accid = 1;
inline bool PushAccountVerifyLoginUserPmd_C::has_accid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_accid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_accid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 PushAccountVerifyLoginUserPmd_C::accid() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.accid)
  return accid_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.accid)
}

// optional string account = 2;
inline bool PushAccountVerifyLoginUserPmd_C::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PushAccountVerifyLoginUserPmd_C::account() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.account)
  return *account_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.account)
}
inline void PushAccountVerifyLoginUserPmd_C::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PushAccountVerifyLoginUserPmd_C.account)
}
inline void PushAccountVerifyLoginUserPmd_C::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PushAccountVerifyLoginUserPmd_C.account)
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PushAccountVerifyLoginUserPmd_C.account)
  return account_;
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushAccountVerifyLoginUserPmd_C::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PushAccountVerifyLoginUserPmd_C.account)
}

// optional uint32 zoneid = 3;
inline bool PushAccountVerifyLoginUserPmd_C::has_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 PushAccountVerifyLoginUserPmd_C::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.zoneid)
  return zoneid_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.zoneid)
}

// optional string token = 4;
inline bool PushAccountVerifyLoginUserPmd_C::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& PushAccountVerifyLoginUserPmd_C::token() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.token)
  return *token_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.token)
}
inline void PushAccountVerifyLoginUserPmd_C::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PushAccountVerifyLoginUserPmd_C.token)
}
inline void PushAccountVerifyLoginUserPmd_C::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PushAccountVerifyLoginUserPmd_C.token)
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PushAccountVerifyLoginUserPmd_C.token)
  return token_;
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushAccountVerifyLoginUserPmd_C::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PushAccountVerifyLoginUserPmd_C.token)
}

// optional uint32 version = 5;
inline bool PushAccountVerifyLoginUserPmd_C::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PushAccountVerifyLoginUserPmd_C::version() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.version)
  return version_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.version)
}

// optional string mid = 6;
inline bool PushAccountVerifyLoginUserPmd_C::has_mid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_mid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_mid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_mid() {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_->clear();
  }
  clear_has_mid();
}
inline const ::std::string& PushAccountVerifyLoginUserPmd_C::mid() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.mid)
  return *mid_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_mid(const ::std::string& value) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.mid)
}
inline void PushAccountVerifyLoginUserPmd_C::set_mid(const char* value) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PushAccountVerifyLoginUserPmd_C.mid)
}
inline void PushAccountVerifyLoginUserPmd_C::set_mid(const char* value, size_t size) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PushAccountVerifyLoginUserPmd_C.mid)
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::mutable_mid() {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PushAccountVerifyLoginUserPmd_C.mid)
  return mid_;
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::release_mid() {
  clear_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mid_;
    mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushAccountVerifyLoginUserPmd_C::set_allocated_mid(::std::string* mid) {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (mid) {
    set_has_mid();
    mid_ = mid;
  } else {
    clear_has_mid();
    mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PushAccountVerifyLoginUserPmd_C.mid)
}

// optional uint32 gameversion = 7;
inline bool PushAccountVerifyLoginUserPmd_C::has_gameversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_gameversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_gameversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_gameversion() {
  gameversion_ = 0u;
  clear_has_gameversion();
}
inline ::google::protobuf::uint32 PushAccountVerifyLoginUserPmd_C::gameversion() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.gameversion)
  return gameversion_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_gameversion(::google::protobuf::uint32 value) {
  set_has_gameversion();
  gameversion_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.gameversion)
}

// optional string compress = 8;
inline bool PushAccountVerifyLoginUserPmd_C::has_compress() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_compress() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_compress() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_compress() {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_->clear();
  }
  clear_has_compress();
}
inline const ::std::string& PushAccountVerifyLoginUserPmd_C::compress() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.compress)
  return *compress_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_compress(const ::std::string& value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.compress)
}
inline void PushAccountVerifyLoginUserPmd_C::set_compress(const char* value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PushAccountVerifyLoginUserPmd_C.compress)
}
inline void PushAccountVerifyLoginUserPmd_C::set_compress(const char* value, size_t size) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PushAccountVerifyLoginUserPmd_C.compress)
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::mutable_compress() {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PushAccountVerifyLoginUserPmd_C.compress)
  return compress_;
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::release_compress() {
  clear_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = compress_;
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushAccountVerifyLoginUserPmd_C::set_allocated_compress(::std::string* compress) {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (compress) {
    set_has_compress();
    compress_ = compress;
  } else {
    clear_has_compress();
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PushAccountVerifyLoginUserPmd_C.compress)
}

// optional string encrypt = 9;
inline bool PushAccountVerifyLoginUserPmd_C::has_encrypt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_encrypt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_encrypt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_encrypt() {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_->clear();
  }
  clear_has_encrypt();
}
inline const ::std::string& PushAccountVerifyLoginUserPmd_C::encrypt() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.encrypt)
  return *encrypt_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_encrypt(const ::std::string& value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.encrypt)
}
inline void PushAccountVerifyLoginUserPmd_C::set_encrypt(const char* value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PushAccountVerifyLoginUserPmd_C.encrypt)
}
inline void PushAccountVerifyLoginUserPmd_C::set_encrypt(const char* value, size_t size) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PushAccountVerifyLoginUserPmd_C.encrypt)
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::mutable_encrypt() {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PushAccountVerifyLoginUserPmd_C.encrypt)
  return encrypt_;
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::release_encrypt() {
  clear_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypt_;
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushAccountVerifyLoginUserPmd_C::set_allocated_encrypt(::std::string* encrypt) {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encrypt) {
    set_has_encrypt();
    encrypt_ = encrypt;
  } else {
    clear_has_encrypt();
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PushAccountVerifyLoginUserPmd_C.encrypt)
}

// optional string encryptkey = 10;
inline bool PushAccountVerifyLoginUserPmd_C::has_encryptkey() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PushAccountVerifyLoginUserPmd_C::set_has_encryptkey() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_has_encryptkey() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PushAccountVerifyLoginUserPmd_C::clear_encryptkey() {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_->clear();
  }
  clear_has_encryptkey();
}
inline const ::std::string& PushAccountVerifyLoginUserPmd_C::encryptkey() const {
  // @@protoc_insertion_point(field_get:Pmd.PushAccountVerifyLoginUserPmd_C.encryptkey)
  return *encryptkey_;
}
inline void PushAccountVerifyLoginUserPmd_C::set_encryptkey(const ::std::string& value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PushAccountVerifyLoginUserPmd_C.encryptkey)
}
inline void PushAccountVerifyLoginUserPmd_C::set_encryptkey(const char* value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PushAccountVerifyLoginUserPmd_C.encryptkey)
}
inline void PushAccountVerifyLoginUserPmd_C::set_encryptkey(const char* value, size_t size) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PushAccountVerifyLoginUserPmd_C.encryptkey)
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::mutable_encryptkey() {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PushAccountVerifyLoginUserPmd_C.encryptkey)
  return encryptkey_;
}
inline ::std::string* PushAccountVerifyLoginUserPmd_C::release_encryptkey() {
  clear_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encryptkey_;
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushAccountVerifyLoginUserPmd_C::set_allocated_encryptkey(::std::string* encryptkey) {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (encryptkey) {
    set_has_encryptkey();
    encryptkey_ = encryptkey;
  } else {
    clear_has_encryptkey();
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PushAccountVerifyLoginUserPmd_C.encryptkey)
}

// -------------------------------------------------------------------

// AccountTokenVerifyReturnLoginUserPmd_S

// required .Pmd.VerifyReturnReason retcode = 1;
inline bool AccountTokenVerifyReturnLoginUserPmd_S::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::Pmd::VerifyReturnReason AccountTokenVerifyReturnLoginUserPmd_S::retcode() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyReturnLoginUserPmd_S.retcode)
  return static_cast< ::Pmd::VerifyReturnReason >(retcode_);
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::set_retcode(::Pmd::VerifyReturnReason value) {
  assert(::Pmd::VerifyReturnReason_IsValid(value));
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyReturnLoginUserPmd_S.retcode)
}

// optional string desc = 2;
inline bool AccountTokenVerifyReturnLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& AccountTokenVerifyReturnLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.AccountTokenVerifyReturnLoginUserPmd_S.desc)
  return *desc_;
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.AccountTokenVerifyReturnLoginUserPmd_S.desc)
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.AccountTokenVerifyReturnLoginUserPmd_S.desc)
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.AccountTokenVerifyReturnLoginUserPmd_S.desc)
}
inline ::std::string* AccountTokenVerifyReturnLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.AccountTokenVerifyReturnLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* AccountTokenVerifyReturnLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccountTokenVerifyReturnLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.AccountTokenVerifyReturnLoginUserPmd_S.desc)
}

// -------------------------------------------------------------------

// ZoneInfo

// required uint32 zoneid = 1;
inline bool ZoneInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ZoneInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.ZoneInfo.zoneid)
  return zoneid_;
}
inline void ZoneInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ZoneInfo.zoneid)
}

// required string zonename = 2;
inline bool ZoneInfo::has_zonename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneInfo::set_has_zonename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneInfo::clear_has_zonename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneInfo::clear_zonename() {
  if (zonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zonename_->clear();
  }
  clear_has_zonename();
}
inline const ::std::string& ZoneInfo::zonename() const {
  // @@protoc_insertion_point(field_get:Pmd.ZoneInfo.zonename)
  return *zonename_;
}
inline void ZoneInfo::set_zonename(const ::std::string& value) {
  set_has_zonename();
  if (zonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zonename_ = new ::std::string;
  }
  zonename_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ZoneInfo.zonename)
}
inline void ZoneInfo::set_zonename(const char* value) {
  set_has_zonename();
  if (zonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zonename_ = new ::std::string;
  }
  zonename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ZoneInfo.zonename)
}
inline void ZoneInfo::set_zonename(const char* value, size_t size) {
  set_has_zonename();
  if (zonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zonename_ = new ::std::string;
  }
  zonename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ZoneInfo.zonename)
}
inline ::std::string* ZoneInfo::mutable_zonename() {
  set_has_zonename();
  if (zonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zonename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ZoneInfo.zonename)
  return zonename_;
}
inline ::std::string* ZoneInfo::release_zonename() {
  clear_has_zonename();
  if (zonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = zonename_;
    zonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZoneInfo::set_allocated_zonename(::std::string* zonename) {
  if (zonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zonename_;
  }
  if (zonename) {
    set_has_zonename();
    zonename_ = zonename;
  } else {
    clear_has_zonename();
    zonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ZoneInfo.zonename)
}

// optional .Pmd.ZoneState state = 3;
inline bool ZoneInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::Pmd::ZoneState ZoneInfo::state() const {
  // @@protoc_insertion_point(field_get:Pmd.ZoneInfo.state)
  return static_cast< ::Pmd::ZoneState >(state_);
}
inline void ZoneInfo::set_state(::Pmd::ZoneState value) {
  assert(::Pmd::ZoneState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ZoneInfo.state)
}

// optional string opentime = 4;
inline bool ZoneInfo::has_opentime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneInfo::set_has_opentime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneInfo::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneInfo::clear_opentime() {
  if (opentime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opentime_->clear();
  }
  clear_has_opentime();
}
inline const ::std::string& ZoneInfo::opentime() const {
  // @@protoc_insertion_point(field_get:Pmd.ZoneInfo.opentime)
  return *opentime_;
}
inline void ZoneInfo::set_opentime(const ::std::string& value) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ZoneInfo.opentime)
}
inline void ZoneInfo::set_opentime(const char* value) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ZoneInfo.opentime)
}
inline void ZoneInfo::set_opentime(const char* value, size_t size) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ZoneInfo.opentime)
}
inline ::std::string* ZoneInfo::mutable_opentime() {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opentime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ZoneInfo.opentime)
  return opentime_;
}
inline ::std::string* ZoneInfo::release_opentime() {
  clear_has_opentime();
  if (opentime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opentime_;
    opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZoneInfo::set_allocated_opentime(::std::string* opentime) {
  if (opentime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opentime_;
  }
  if (opentime) {
    set_has_opentime();
    opentime_ = opentime;
  } else {
    clear_has_opentime();
    opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ZoneInfo.opentime)
}

// -------------------------------------------------------------------

// ZoneInfoListLoginUserPmd_S

// optional string gamename = 1;
inline bool ZoneInfoListLoginUserPmd_S::has_gamename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneInfoListLoginUserPmd_S::set_has_gamename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneInfoListLoginUserPmd_S::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneInfoListLoginUserPmd_S::clear_gamename() {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_->clear();
  }
  clear_has_gamename();
}
inline const ::std::string& ZoneInfoListLoginUserPmd_S::gamename() const {
  // @@protoc_insertion_point(field_get:Pmd.ZoneInfoListLoginUserPmd_S.gamename)
  return *gamename_;
}
inline void ZoneInfoListLoginUserPmd_S::set_gamename(const ::std::string& value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ZoneInfoListLoginUserPmd_S.gamename)
}
inline void ZoneInfoListLoginUserPmd_S::set_gamename(const char* value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ZoneInfoListLoginUserPmd_S.gamename)
}
inline void ZoneInfoListLoginUserPmd_S::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ZoneInfoListLoginUserPmd_S.gamename)
}
inline ::std::string* ZoneInfoListLoginUserPmd_S::mutable_gamename() {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ZoneInfoListLoginUserPmd_S.gamename)
  return gamename_;
}
inline ::std::string* ZoneInfoListLoginUserPmd_S::release_gamename() {
  clear_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gamename_;
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ZoneInfoListLoginUserPmd_S::set_allocated_gamename(::std::string* gamename) {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (gamename) {
    set_has_gamename();
    gamename_ = gamename;
  } else {
    clear_has_gamename();
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ZoneInfoListLoginUserPmd_S.gamename)
}

// required uint32 gameid = 2;
inline bool ZoneInfoListLoginUserPmd_S::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneInfoListLoginUserPmd_S::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneInfoListLoginUserPmd_S::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneInfoListLoginUserPmd_S::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 ZoneInfoListLoginUserPmd_S::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.ZoneInfoListLoginUserPmd_S.gameid)
  return gameid_;
}
inline void ZoneInfoListLoginUserPmd_S::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ZoneInfoListLoginUserPmd_S.gameid)
}

// repeated .Pmd.ZoneInfo zonelist = 3;
inline int ZoneInfoListLoginUserPmd_S::zonelist_size() const {
  return zonelist_.size();
}
inline void ZoneInfoListLoginUserPmd_S::clear_zonelist() {
  zonelist_.Clear();
}
inline const ::Pmd::ZoneInfo& ZoneInfoListLoginUserPmd_S::zonelist(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.ZoneInfoListLoginUserPmd_S.zonelist)
  return zonelist_.Get(index);
}
inline ::Pmd::ZoneInfo* ZoneInfoListLoginUserPmd_S::mutable_zonelist(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.ZoneInfoListLoginUserPmd_S.zonelist)
  return zonelist_.Mutable(index);
}
inline ::Pmd::ZoneInfo* ZoneInfoListLoginUserPmd_S::add_zonelist() {
  // @@protoc_insertion_point(field_add:Pmd.ZoneInfoListLoginUserPmd_S.zonelist)
  return zonelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo >&
ZoneInfoListLoginUserPmd_S::zonelist() const {
  // @@protoc_insertion_point(field_list:Pmd.ZoneInfoListLoginUserPmd_S.zonelist)
  return zonelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::ZoneInfo >*
ZoneInfoListLoginUserPmd_S::mutable_zonelist() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.ZoneInfoListLoginUserPmd_S.zonelist)
  return &zonelist_;
}

// -------------------------------------------------------------------

// RequestZoneInfoListLoginUserPmd_C

// required uint32 gameid = 1;
inline bool RequestZoneInfoListLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestZoneInfoListLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestZoneInfoListLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestZoneInfoListLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 RequestZoneInfoListLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestZoneInfoListLoginUserPmd_C.gameid)
  return gameid_;
}
inline void RequestZoneInfoListLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestZoneInfoListLoginUserPmd_C.gameid)
}

// -------------------------------------------------------------------

// RequestUserZoneInfoLoginUserPmd_C

// required uint32 gameid = 1;
inline bool RequestUserZoneInfoLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestUserZoneInfoLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestUserZoneInfoLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestUserZoneInfoLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 RequestUserZoneInfoLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUserZoneInfoLoginUserPmd_C.gameid)
  return gameid_;
}
inline void RequestUserZoneInfoLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUserZoneInfoLoginUserPmd_C.gameid)
}

// -------------------------------------------------------------------

// UserZoneInfo

// required string charname = 1;
inline bool UserZoneInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserZoneInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserZoneInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserZoneInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& UserZoneInfo::charname() const {
  // @@protoc_insertion_point(field_get:Pmd.UserZoneInfo.charname)
  return *charname_;
}
inline void UserZoneInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserZoneInfo.charname)
}
inline void UserZoneInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserZoneInfo.charname)
}
inline void UserZoneInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserZoneInfo.charname)
}
inline ::std::string* UserZoneInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    charname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserZoneInfo.charname)
  return charname_;
}
inline ::std::string* UserZoneInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserZoneInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserZoneInfo.charname)
}

// required .Pmd.ZoneInfo zoneinfo = 2;
inline bool UserZoneInfo::has_zoneinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserZoneInfo::set_has_zoneinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserZoneInfo::clear_has_zoneinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserZoneInfo::clear_zoneinfo() {
  if (zoneinfo_ != NULL) zoneinfo_->::Pmd::ZoneInfo::Clear();
  clear_has_zoneinfo();
}
inline const ::Pmd::ZoneInfo& UserZoneInfo::zoneinfo() const {
  // @@protoc_insertion_point(field_get:Pmd.UserZoneInfo.zoneinfo)
  return zoneinfo_ != NULL ? *zoneinfo_ : *default_instance_->zoneinfo_;
}
inline ::Pmd::ZoneInfo* UserZoneInfo::mutable_zoneinfo() {
  set_has_zoneinfo();
  if (zoneinfo_ == NULL) zoneinfo_ = new ::Pmd::ZoneInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.UserZoneInfo.zoneinfo)
  return zoneinfo_;
}
inline ::Pmd::ZoneInfo* UserZoneInfo::release_zoneinfo() {
  clear_has_zoneinfo();
  ::Pmd::ZoneInfo* temp = zoneinfo_;
  zoneinfo_ = NULL;
  return temp;
}
inline void UserZoneInfo::set_allocated_zoneinfo(::Pmd::ZoneInfo* zoneinfo) {
  delete zoneinfo_;
  zoneinfo_ = zoneinfo;
  if (zoneinfo) {
    set_has_zoneinfo();
  } else {
    clear_has_zoneinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserZoneInfo.zoneinfo)
}

// required uint32 onlinenum = 3;
inline bool UserZoneInfo::has_onlinenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserZoneInfo::set_has_onlinenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserZoneInfo::clear_has_onlinenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserZoneInfo::clear_onlinenum() {
  onlinenum_ = 0u;
  clear_has_onlinenum();
}
inline ::google::protobuf::uint32 UserZoneInfo::onlinenum() const {
  // @@protoc_insertion_point(field_get:Pmd.UserZoneInfo.onlinenum)
  return onlinenum_;
}
inline void UserZoneInfo::set_onlinenum(::google::protobuf::uint32 value) {
  set_has_onlinenum();
  onlinenum_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserZoneInfo.onlinenum)
}

// -------------------------------------------------------------------

// RequestUserZoneInfoLoginUserPmd_S

// repeated .Pmd.UserZoneInfo userzoneinfo = 1;
inline int RequestUserZoneInfoLoginUserPmd_S::userzoneinfo_size() const {
  return userzoneinfo_.size();
}
inline void RequestUserZoneInfoLoginUserPmd_S::clear_userzoneinfo() {
  userzoneinfo_.Clear();
}
inline const ::Pmd::UserZoneInfo& RequestUserZoneInfoLoginUserPmd_S::userzoneinfo(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUserZoneInfoLoginUserPmd_S.userzoneinfo)
  return userzoneinfo_.Get(index);
}
inline ::Pmd::UserZoneInfo* RequestUserZoneInfoLoginUserPmd_S::mutable_userzoneinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.RequestUserZoneInfoLoginUserPmd_S.userzoneinfo)
  return userzoneinfo_.Mutable(index);
}
inline ::Pmd::UserZoneInfo* RequestUserZoneInfoLoginUserPmd_S::add_userzoneinfo() {
  // @@protoc_insertion_point(field_add:Pmd.RequestUserZoneInfoLoginUserPmd_S.userzoneinfo)
  return userzoneinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::UserZoneInfo >&
RequestUserZoneInfoLoginUserPmd_S::userzoneinfo() const {
  // @@protoc_insertion_point(field_list:Pmd.RequestUserZoneInfoLoginUserPmd_S.userzoneinfo)
  return userzoneinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::UserZoneInfo >*
RequestUserZoneInfoLoginUserPmd_S::mutable_userzoneinfo() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.RequestUserZoneInfoLoginUserPmd_S.userzoneinfo)
  return &userzoneinfo_;
}

// -------------------------------------------------------------------

// MobileRegistRequestRandCodeLoginUserPmd_C

// required string mobilenum = 1;
inline bool MobileRegistRequestRandCodeLoginUserPmd_C::has_mobilenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::set_has_mobilenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::clear_has_mobilenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::clear_mobilenum() {
  if (mobilenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_->clear();
  }
  clear_has_mobilenum();
}
inline const ::std::string& MobileRegistRequestRandCodeLoginUserPmd_C::mobilenum() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C.mobilenum)
  return *mobilenum_;
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::set_mobilenum(const ::std::string& value) {
  set_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_ = new ::std::string;
  }
  mobilenum_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C.mobilenum)
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::set_mobilenum(const char* value) {
  set_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_ = new ::std::string;
  }
  mobilenum_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C.mobilenum)
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::set_mobilenum(const char* value, size_t size) {
  set_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_ = new ::std::string;
  }
  mobilenum_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C.mobilenum)
}
inline ::std::string* MobileRegistRequestRandCodeLoginUserPmd_C::mutable_mobilenum() {
  set_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C.mobilenum)
  return mobilenum_;
}
inline ::std::string* MobileRegistRequestRandCodeLoginUserPmd_C::release_mobilenum() {
  clear_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilenum_;
    mobilenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::set_allocated_mobilenum(::std::string* mobilenum) {
  if (mobilenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilenum_;
  }
  if (mobilenum) {
    set_has_mobilenum();
    mobilenum_ = mobilenum;
  } else {
    clear_has_mobilenum();
    mobilenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C.mobilenum)
}

// required uint32 gameid = 2;
inline bool MobileRegistRequestRandCodeLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 MobileRegistRequestRandCodeLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C.gameid)
  return gameid_;
}
inline void MobileRegistRequestRandCodeLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C.gameid)
}

// -------------------------------------------------------------------

// MobileRegistReturnRandCodeLoginUserPmd_S

// required uint32 retcode = 1;
inline bool MobileRegistReturnRandCodeLoginUserPmd_S::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 MobileRegistReturnRandCodeLoginUserPmd_S::retcode() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.retcode)
  return retcode_;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.retcode)
}

// optional string desc = 2;
inline bool MobileRegistReturnRandCodeLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& MobileRegistReturnRandCodeLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.desc)
  return *desc_;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.desc)
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.desc)
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.desc)
}
inline ::std::string* MobileRegistReturnRandCodeLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* MobileRegistReturnRandCodeLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.desc)
}

// optional uint64 timeout = 3;
inline bool MobileRegistReturnRandCodeLoginUserPmd_S::has_timeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_has_timeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::clear_timeout() {
  timeout_ = GOOGLE_ULONGLONG(0);
  clear_has_timeout();
}
inline ::google::protobuf::uint64 MobileRegistReturnRandCodeLoginUserPmd_S::timeout() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.timeout)
  return timeout_;
}
inline void MobileRegistReturnRandCodeLoginUserPmd_S::set_timeout(::google::protobuf::uint64 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S.timeout)
}

// -------------------------------------------------------------------

// MobileRegistRequestCreateAccountLoginUserPmd_C

// required string mobilenum = 1;
inline bool MobileRegistRequestCreateAccountLoginUserPmd_C::has_mobilenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_has_mobilenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::clear_has_mobilenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::clear_mobilenum() {
  if (mobilenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_->clear();
  }
  clear_has_mobilenum();
}
inline const ::std::string& MobileRegistRequestCreateAccountLoginUserPmd_C::mobilenum() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.mobilenum)
  return *mobilenum_;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_mobilenum(const ::std::string& value) {
  set_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_ = new ::std::string;
  }
  mobilenum_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.mobilenum)
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_mobilenum(const char* value) {
  set_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_ = new ::std::string;
  }
  mobilenum_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.mobilenum)
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_mobilenum(const char* value, size_t size) {
  set_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_ = new ::std::string;
  }
  mobilenum_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.mobilenum)
}
inline ::std::string* MobileRegistRequestCreateAccountLoginUserPmd_C::mutable_mobilenum() {
  set_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mobilenum_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.mobilenum)
  return mobilenum_;
}
inline ::std::string* MobileRegistRequestCreateAccountLoginUserPmd_C::release_mobilenum() {
  clear_has_mobilenum();
  if (mobilenum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mobilenum_;
    mobilenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_allocated_mobilenum(::std::string* mobilenum) {
  if (mobilenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilenum_;
  }
  if (mobilenum) {
    set_has_mobilenum();
    mobilenum_ = mobilenum;
  } else {
    clear_has_mobilenum();
    mobilenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.mobilenum)
}

// required string randcode = 2;
inline bool MobileRegistRequestCreateAccountLoginUserPmd_C::has_randcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_has_randcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::clear_has_randcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::clear_randcode() {
  if (randcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    randcode_->clear();
  }
  clear_has_randcode();
}
inline const ::std::string& MobileRegistRequestCreateAccountLoginUserPmd_C::randcode() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.randcode)
  return *randcode_;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_randcode(const ::std::string& value) {
  set_has_randcode();
  if (randcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    randcode_ = new ::std::string;
  }
  randcode_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.randcode)
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_randcode(const char* value) {
  set_has_randcode();
  if (randcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    randcode_ = new ::std::string;
  }
  randcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.randcode)
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_randcode(const char* value, size_t size) {
  set_has_randcode();
  if (randcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    randcode_ = new ::std::string;
  }
  randcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.randcode)
}
inline ::std::string* MobileRegistRequestCreateAccountLoginUserPmd_C::mutable_randcode() {
  set_has_randcode();
  if (randcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    randcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.randcode)
  return randcode_;
}
inline ::std::string* MobileRegistRequestCreateAccountLoginUserPmd_C::release_randcode() {
  clear_has_randcode();
  if (randcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = randcode_;
    randcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_allocated_randcode(::std::string* randcode) {
  if (randcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete randcode_;
  }
  if (randcode) {
    set_has_randcode();
    randcode_ = randcode;
  } else {
    clear_has_randcode();
    randcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.randcode)
}

// required string password = 3;
inline bool MobileRegistRequestCreateAccountLoginUserPmd_C::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MobileRegistRequestCreateAccountLoginUserPmd_C::password() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.password)
  return *password_;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.password)
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.password)
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.password)
}
inline ::std::string* MobileRegistRequestCreateAccountLoginUserPmd_C::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.password)
  return password_;
}
inline ::std::string* MobileRegistRequestCreateAccountLoginUserPmd_C::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.password)
}

// required uint32 gameid = 4;
inline bool MobileRegistRequestCreateAccountLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 MobileRegistRequestCreateAccountLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.gameid)
  return gameid_;
}
inline void MobileRegistRequestCreateAccountLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C.gameid)
}

// -------------------------------------------------------------------

// MobileRegistReturnCreateAccountFailLoginUserPmd_S

// required uint32 retcode = 1;
inline bool MobileRegistReturnCreateAccountFailLoginUserPmd_S::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 MobileRegistReturnCreateAccountFailLoginUserPmd_S::retcode() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S.retcode)
  return retcode_;
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S.retcode)
}

// optional string desc = 2;
inline bool MobileRegistReturnCreateAccountFailLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& MobileRegistReturnCreateAccountFailLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S.desc)
  return *desc_;
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S.desc)
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S.desc)
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S.desc)
}
inline ::std::string* MobileRegistReturnCreateAccountFailLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* MobileRegistReturnCreateAccountFailLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MobileRegistReturnCreateAccountFailLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S.desc)
}

// -------------------------------------------------------------------

// EmailRegistRequestCreateAccountLoginUserPmd_C

// required string email = 1;
inline bool EmailRegistRequestCreateAccountLoginUserPmd_C::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& EmailRegistRequestCreateAccountLoginUserPmd_C::email() const {
  // @@protoc_insertion_point(field_get:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.email)
  return *email_;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.email)
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.email)
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.email)
}
inline ::std::string* EmailRegistRequestCreateAccountLoginUserPmd_C::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.email)
  return email_;
}
inline ::std::string* EmailRegistRequestCreateAccountLoginUserPmd_C::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.email)
}

// required string password = 2;
inline bool EmailRegistRequestCreateAccountLoginUserPmd_C::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& EmailRegistRequestCreateAccountLoginUserPmd_C::password() const {
  // @@protoc_insertion_point(field_get:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.password)
  return *password_;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.password)
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.password)
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.password)
}
inline ::std::string* EmailRegistRequestCreateAccountLoginUserPmd_C::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.password)
  return password_;
}
inline ::std::string* EmailRegistRequestCreateAccountLoginUserPmd_C::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.password)
}

// required uint32 gameid = 3;
inline bool EmailRegistRequestCreateAccountLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 EmailRegistRequestCreateAccountLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.gameid)
  return gameid_;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.gameid)
}

// optional bool isbind = 4;
inline bool EmailRegistRequestCreateAccountLoginUserPmd_C::has_isbind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_has_isbind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_has_isbind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_isbind() {
  isbind_ = false;
  clear_has_isbind();
}
inline bool EmailRegistRequestCreateAccountLoginUserPmd_C::isbind() const {
  // @@protoc_insertion_point(field_get:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.isbind)
  return isbind_;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_isbind(bool value) {
  set_has_isbind();
  isbind_ = value;
  // @@protoc_insertion_point(field_set:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.isbind)
}

// optional uint64 uid = 5;
inline bool EmailRegistRequestCreateAccountLoginUserPmd_C::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 EmailRegistRequestCreateAccountLoginUserPmd_C::uid() const {
  // @@protoc_insertion_point(field_get:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.uid)
  return uid_;
}
inline void EmailRegistRequestCreateAccountLoginUserPmd_C::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C.uid)
}

// -------------------------------------------------------------------

// EmailRegistReturnCreateAccountLoginUserPmd_S

// required uint32 retcode = 1;
inline bool EmailRegistReturnCreateAccountLoginUserPmd_S::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 EmailRegistReturnCreateAccountLoginUserPmd_S::retcode() const {
  // @@protoc_insertion_point(field_get:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.retcode)
  return retcode_;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.retcode)
}

// optional string desc = 2;
inline bool EmailRegistReturnCreateAccountLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& EmailRegistReturnCreateAccountLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.desc)
  return *desc_;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.desc)
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.desc)
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.desc)
}
inline ::std::string* EmailRegistReturnCreateAccountLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* EmailRegistReturnCreateAccountLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.desc)
}

// optional uint64 uid = 3;
inline bool EmailRegistReturnCreateAccountLoginUserPmd_S::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 EmailRegistReturnCreateAccountLoginUserPmd_S::uid() const {
  // @@protoc_insertion_point(field_get:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.uid)
  return uid_;
}
inline void EmailRegistReturnCreateAccountLoginUserPmd_S::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S.uid)
}

// -------------------------------------------------------------------

// UserRequestPlatTokenByPasswordLoginUserPmd_C

// required uint32 gameid = 1;
inline bool UserRequestPlatTokenByPasswordLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 UserRequestPlatTokenByPasswordLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.gameid)
  return gameid_;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.gameid)
}

// required uint32 platid = 2;
inline bool UserRequestPlatTokenByPasswordLoginUserPmd_C::has_platid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_has_platid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::clear_has_platid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::clear_platid() {
  platid_ = 0u;
  clear_has_platid();
}
inline ::google::protobuf::uint32 UserRequestPlatTokenByPasswordLoginUserPmd_C::platid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.platid)
  return platid_;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_platid(::google::protobuf::uint32 value) {
  set_has_platid();
  platid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.platid)
}

// required string account = 3;
inline bool UserRequestPlatTokenByPasswordLoginUserPmd_C::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& UserRequestPlatTokenByPasswordLoginUserPmd_C::account() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.account)
  return *account_;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.account)
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.account)
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.account)
}
inline ::std::string* UserRequestPlatTokenByPasswordLoginUserPmd_C::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.account)
  return account_;
}
inline ::std::string* UserRequestPlatTokenByPasswordLoginUserPmd_C::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.account)
}

// required string password = 4;
inline bool UserRequestPlatTokenByPasswordLoginUserPmd_C::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& UserRequestPlatTokenByPasswordLoginUserPmd_C::password() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.password)
  return *password_;
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.password)
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.password)
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.password)
}
inline ::std::string* UserRequestPlatTokenByPasswordLoginUserPmd_C::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.password)
  return password_;
}
inline ::std::string* UserRequestPlatTokenByPasswordLoginUserPmd_C::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRequestPlatTokenByPasswordLoginUserPmd_C::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C.password)
}

// -------------------------------------------------------------------

// UserRequestPlatTokenByThirdLoginUserPmd_C

// required .Pmd.PlatInfo platinfo = 1;
inline bool UserRequestPlatTokenByThirdLoginUserPmd_C::has_platinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRequestPlatTokenByThirdLoginUserPmd_C::set_has_platinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRequestPlatTokenByThirdLoginUserPmd_C::clear_has_platinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRequestPlatTokenByThirdLoginUserPmd_C::clear_platinfo() {
  if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
  clear_has_platinfo();
}
inline const ::Pmd::PlatInfo& UserRequestPlatTokenByThirdLoginUserPmd_C::platinfo() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C.platinfo)
  return platinfo_ != NULL ? *platinfo_ : *default_instance_->platinfo_;
}
inline ::Pmd::PlatInfo* UserRequestPlatTokenByThirdLoginUserPmd_C::mutable_platinfo() {
  set_has_platinfo();
  if (platinfo_ == NULL) platinfo_ = new ::Pmd::PlatInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C.platinfo)
  return platinfo_;
}
inline ::Pmd::PlatInfo* UserRequestPlatTokenByThirdLoginUserPmd_C::release_platinfo() {
  clear_has_platinfo();
  ::Pmd::PlatInfo* temp = platinfo_;
  platinfo_ = NULL;
  return temp;
}
inline void UserRequestPlatTokenByThirdLoginUserPmd_C::set_allocated_platinfo(::Pmd::PlatInfo* platinfo) {
  delete platinfo_;
  platinfo_ = platinfo;
  if (platinfo) {
    set_has_platinfo();
  } else {
    clear_has_platinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C.platinfo)
}

// required uint32 gameid = 2;
inline bool UserRequestPlatTokenByThirdLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRequestPlatTokenByThirdLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRequestPlatTokenByThirdLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRequestPlatTokenByThirdLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 UserRequestPlatTokenByThirdLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C.gameid)
  return gameid_;
}
inline void UserRequestPlatTokenByThirdLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C.gameid)
}

// -------------------------------------------------------------------

// UserRequestPlatTokenLoginOkLoginUserPmd_S

// required uint64 uid = 1;
inline bool UserRequestPlatTokenLoginOkLoginUserPmd_S::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 UserRequestPlatTokenLoginOkLoginUserPmd_S::uid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.uid)
  return uid_;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.uid)
}

// required string platkey = 2;
inline bool UserRequestPlatTokenLoginOkLoginUserPmd_S::has_platkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_has_platkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_has_platkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_platkey() {
  if (platkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platkey_->clear();
  }
  clear_has_platkey();
}
inline const ::std::string& UserRequestPlatTokenLoginOkLoginUserPmd_S::platkey() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platkey)
  return *platkey_;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_platkey(const ::std::string& value) {
  set_has_platkey();
  if (platkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platkey_ = new ::std::string;
  }
  platkey_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platkey)
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_platkey(const char* value) {
  set_has_platkey();
  if (platkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platkey_ = new ::std::string;
  }
  platkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platkey)
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_platkey(const char* value, size_t size) {
  set_has_platkey();
  if (platkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platkey_ = new ::std::string;
  }
  platkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platkey)
}
inline ::std::string* UserRequestPlatTokenLoginOkLoginUserPmd_S::mutable_platkey() {
  set_has_platkey();
  if (platkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platkey)
  return platkey_;
}
inline ::std::string* UserRequestPlatTokenLoginOkLoginUserPmd_S::release_platkey() {
  clear_has_platkey();
  if (platkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platkey_;
    platkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_allocated_platkey(::std::string* platkey) {
  if (platkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platkey_;
  }
  if (platkey) {
    set_has_platkey();
    platkey_ = platkey;
  } else {
    clear_has_platkey();
    platkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platkey)
}

// required string platlogin = 3;
inline bool UserRequestPlatTokenLoginOkLoginUserPmd_S::has_platlogin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_has_platlogin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_has_platlogin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_platlogin() {
  if (platlogin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platlogin_->clear();
  }
  clear_has_platlogin();
}
inline const ::std::string& UserRequestPlatTokenLoginOkLoginUserPmd_S::platlogin() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platlogin)
  return *platlogin_;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_platlogin(const ::std::string& value) {
  set_has_platlogin();
  if (platlogin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platlogin_ = new ::std::string;
  }
  platlogin_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platlogin)
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_platlogin(const char* value) {
  set_has_platlogin();
  if (platlogin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platlogin_ = new ::std::string;
  }
  platlogin_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platlogin)
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_platlogin(const char* value, size_t size) {
  set_has_platlogin();
  if (platlogin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platlogin_ = new ::std::string;
  }
  platlogin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platlogin)
}
inline ::std::string* UserRequestPlatTokenLoginOkLoginUserPmd_S::mutable_platlogin() {
  set_has_platlogin();
  if (platlogin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platlogin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platlogin)
  return platlogin_;
}
inline ::std::string* UserRequestPlatTokenLoginOkLoginUserPmd_S::release_platlogin() {
  clear_has_platlogin();
  if (platlogin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platlogin_;
    platlogin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_allocated_platlogin(::std::string* platlogin) {
  if (platlogin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platlogin_;
  }
  if (platlogin) {
    set_has_platlogin();
    platlogin_ = platlogin;
  } else {
    clear_has_platlogin();
    platlogin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platlogin)
}

// required uint32 platloginlife = 4;
inline bool UserRequestPlatTokenLoginOkLoginUserPmd_S::has_platloginlife() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_has_platloginlife() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_has_platloginlife() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_platloginlife() {
  platloginlife_ = 0u;
  clear_has_platloginlife();
}
inline ::google::protobuf::uint32 UserRequestPlatTokenLoginOkLoginUserPmd_S::platloginlife() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platloginlife)
  return platloginlife_;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_platloginlife(::google::protobuf::uint32 value) {
  set_has_platloginlife();
  platloginlife_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platloginlife)
}

// required string timezonename = 5;
inline bool UserRequestPlatTokenLoginOkLoginUserPmd_S::has_timezonename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_has_timezonename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_has_timezonename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_timezonename() {
  if (timezonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezonename_->clear();
  }
  clear_has_timezonename();
}
inline const ::std::string& UserRequestPlatTokenLoginOkLoginUserPmd_S::timezonename() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.timezonename)
  return *timezonename_;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_timezonename(const ::std::string& value) {
  set_has_timezonename();
  if (timezonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezonename_ = new ::std::string;
  }
  timezonename_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.timezonename)
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_timezonename(const char* value) {
  set_has_timezonename();
  if (timezonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezonename_ = new ::std::string;
  }
  timezonename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.timezonename)
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_timezonename(const char* value, size_t size) {
  set_has_timezonename();
  if (timezonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezonename_ = new ::std::string;
  }
  timezonename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.timezonename)
}
inline ::std::string* UserRequestPlatTokenLoginOkLoginUserPmd_S::mutable_timezonename() {
  set_has_timezonename();
  if (timezonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timezonename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.timezonename)
  return timezonename_;
}
inline ::std::string* UserRequestPlatTokenLoginOkLoginUserPmd_S::release_timezonename() {
  clear_has_timezonename();
  if (timezonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timezonename_;
    timezonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_allocated_timezonename(::std::string* timezonename) {
  if (timezonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timezonename_;
  }
  if (timezonename) {
    set_has_timezonename();
    timezonename_ = timezonename;
  } else {
    clear_has_timezonename();
    timezonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.timezonename)
}

// optional int32 timezoneoffset = 6;
inline bool UserRequestPlatTokenLoginOkLoginUserPmd_S::has_timezoneoffset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_has_timezoneoffset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_has_timezoneoffset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_timezoneoffset() {
  timezoneoffset_ = 0;
  clear_has_timezoneoffset();
}
inline ::google::protobuf::int32 UserRequestPlatTokenLoginOkLoginUserPmd_S::timezoneoffset() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.timezoneoffset)
  return timezoneoffset_;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_timezoneoffset(::google::protobuf::int32 value) {
  set_has_timezoneoffset();
  timezoneoffset_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.timezoneoffset)
}

// optional .Pmd.PlatInfo platinfo = 7;
inline bool UserRequestPlatTokenLoginOkLoginUserPmd_S::has_platinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_has_platinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_has_platinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::clear_platinfo() {
  if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
  clear_has_platinfo();
}
inline const ::Pmd::PlatInfo& UserRequestPlatTokenLoginOkLoginUserPmd_S::platinfo() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platinfo)
  return platinfo_ != NULL ? *platinfo_ : *default_instance_->platinfo_;
}
inline ::Pmd::PlatInfo* UserRequestPlatTokenLoginOkLoginUserPmd_S::mutable_platinfo() {
  set_has_platinfo();
  if (platinfo_ == NULL) platinfo_ = new ::Pmd::PlatInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platinfo)
  return platinfo_;
}
inline ::Pmd::PlatInfo* UserRequestPlatTokenLoginOkLoginUserPmd_S::release_platinfo() {
  clear_has_platinfo();
  ::Pmd::PlatInfo* temp = platinfo_;
  platinfo_ = NULL;
  return temp;
}
inline void UserRequestPlatTokenLoginOkLoginUserPmd_S::set_allocated_platinfo(::Pmd::PlatInfo* platinfo) {
  delete platinfo_;
  platinfo_ = platinfo;
  if (platinfo) {
    set_has_platinfo();
  } else {
    clear_has_platinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S.platinfo)
}

// -------------------------------------------------------------------

// UserRequestPlatTokenLoginFailLoginUserPmd_S

// required uint32 retcode = 1;
inline bool UserRequestPlatTokenLoginFailLoginUserPmd_S::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 UserRequestPlatTokenLoginFailLoginUserPmd_S::retcode() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S.retcode)
  return retcode_;
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S.retcode)
}

// required string desc = 2;
inline bool UserRequestPlatTokenLoginFailLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& UserRequestPlatTokenLoginFailLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S.desc)
  return *desc_;
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S.desc)
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S.desc)
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S.desc)
}
inline ::std::string* UserRequestPlatTokenLoginFailLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* UserRequestPlatTokenLoginFailLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRequestPlatTokenLoginFailLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S.desc)
}

// -------------------------------------------------------------------

// UserLoginRequestLoginUserPmd_C

// required uint32 gameid = 1;
inline bool UserLoginRequestLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginRequestLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginRequestLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginRequestLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 UserLoginRequestLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginRequestLoginUserPmd_C.gameid)
  return gameid_;
}
inline void UserLoginRequestLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginRequestLoginUserPmd_C.gameid)
}

// required uint32 zoneid = 2;
inline bool UserLoginRequestLoginUserPmd_C::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginRequestLoginUserPmd_C::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginRequestLoginUserPmd_C::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginRequestLoginUserPmd_C::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 UserLoginRequestLoginUserPmd_C::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginRequestLoginUserPmd_C.zoneid)
  return zoneid_;
}
inline void UserLoginRequestLoginUserPmd_C::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginRequestLoginUserPmd_C.zoneid)
}

// required uint32 gameversion = 3;
inline bool UserLoginRequestLoginUserPmd_C::has_gameversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginRequestLoginUserPmd_C::set_has_gameversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginRequestLoginUserPmd_C::clear_has_gameversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginRequestLoginUserPmd_C::clear_gameversion() {
  gameversion_ = 0u;
  clear_has_gameversion();
}
inline ::google::protobuf::uint32 UserLoginRequestLoginUserPmd_C::gameversion() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginRequestLoginUserPmd_C.gameversion)
  return gameversion_;
}
inline void UserLoginRequestLoginUserPmd_C::set_gameversion(::google::protobuf::uint32 value) {
  set_has_gameversion();
  gameversion_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginRequestLoginUserPmd_C.gameversion)
}

// optional string mid = 4;
inline bool UserLoginRequestLoginUserPmd_C::has_mid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLoginRequestLoginUserPmd_C::set_has_mid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLoginRequestLoginUserPmd_C::clear_has_mid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLoginRequestLoginUserPmd_C::clear_mid() {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_->clear();
  }
  clear_has_mid();
}
inline const ::std::string& UserLoginRequestLoginUserPmd_C::mid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginRequestLoginUserPmd_C.mid)
  return *mid_;
}
inline void UserLoginRequestLoginUserPmd_C::set_mid(const ::std::string& value) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginRequestLoginUserPmd_C.mid)
}
inline void UserLoginRequestLoginUserPmd_C::set_mid(const char* value) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginRequestLoginUserPmd_C.mid)
}
inline void UserLoginRequestLoginUserPmd_C::set_mid(const char* value, size_t size) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginRequestLoginUserPmd_C.mid)
}
inline ::std::string* UserLoginRequestLoginUserPmd_C::mutable_mid() {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginRequestLoginUserPmd_C.mid)
  return mid_;
}
inline ::std::string* UserLoginRequestLoginUserPmd_C::release_mid() {
  clear_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mid_;
    mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginRequestLoginUserPmd_C::set_allocated_mid(::std::string* mid) {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (mid) {
    set_has_mid();
    mid_ = mid;
  } else {
    clear_has_mid();
    mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginRequestLoginUserPmd_C.mid)
}

// -------------------------------------------------------------------

// UserLoginReturnFailLoginUserPmd_S

// required .Pmd.LoginReturnFailReason retcode = 1;
inline bool UserLoginReturnFailLoginUserPmd_S::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginReturnFailLoginUserPmd_S::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginReturnFailLoginUserPmd_S::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginReturnFailLoginUserPmd_S::clear_retcode() {
  retcode_ = 1;
  clear_has_retcode();
}
inline ::Pmd::LoginReturnFailReason UserLoginReturnFailLoginUserPmd_S::retcode() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnFailLoginUserPmd_S.retcode)
  return static_cast< ::Pmd::LoginReturnFailReason >(retcode_);
}
inline void UserLoginReturnFailLoginUserPmd_S::set_retcode(::Pmd::LoginReturnFailReason value) {
  assert(::Pmd::LoginReturnFailReason_IsValid(value));
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnFailLoginUserPmd_S.retcode)
}

// required string desc = 2;
inline bool UserLoginReturnFailLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginReturnFailLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginReturnFailLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginReturnFailLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& UserLoginReturnFailLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnFailLoginUserPmd_S.desc)
  return *desc_;
}
inline void UserLoginReturnFailLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnFailLoginUserPmd_S.desc)
}
inline void UserLoginReturnFailLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginReturnFailLoginUserPmd_S.desc)
}
inline void UserLoginReturnFailLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginReturnFailLoginUserPmd_S.desc)
}
inline ::std::string* UserLoginReturnFailLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginReturnFailLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* UserLoginReturnFailLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginReturnFailLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginReturnFailLoginUserPmd_S.desc)
}

// -------------------------------------------------------------------

// UserLoginReturnOkLoginUserPmd_S

// required uint64 accountid = 1;
inline bool UserLoginReturnOkLoginUserPmd_S::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 UserLoginReturnOkLoginUserPmd_S::accountid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.accountid)
  return accountid_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.accountid)
}

// optional uint64 logintempid = 2;
inline bool UserLoginReturnOkLoginUserPmd_S::has_logintempid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_logintempid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_logintempid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_logintempid() {
  logintempid_ = GOOGLE_ULONGLONG(0);
  clear_has_logintempid();
}
inline ::google::protobuf::uint64 UserLoginReturnOkLoginUserPmd_S::logintempid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.logintempid)
  return logintempid_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_logintempid(::google::protobuf::uint64 value) {
  set_has_logintempid();
  logintempid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.logintempid)
}

// optional uint64 tokenid = 3;
inline bool UserLoginReturnOkLoginUserPmd_S::has_tokenid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_tokenid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_tokenid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_tokenid() {
  tokenid_ = GOOGLE_ULONGLONG(0);
  clear_has_tokenid();
}
inline ::google::protobuf::uint64 UserLoginReturnOkLoginUserPmd_S::tokenid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.tokenid)
  return tokenid_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_tokenid(::google::protobuf::uint64 value) {
  set_has_tokenid();
  tokenid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.tokenid)
}

// optional string gatewayurl = 4;
inline bool UserLoginReturnOkLoginUserPmd_S::has_gatewayurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_gatewayurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_gatewayurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_gatewayurl() {
  if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_->clear();
  }
  clear_has_gatewayurl();
}
inline const ::std::string& UserLoginReturnOkLoginUserPmd_S::gatewayurl() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurl)
  return *gatewayurl_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_gatewayurl(const ::std::string& value) {
  set_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_ = new ::std::string;
  }
  gatewayurl_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurl)
}
inline void UserLoginReturnOkLoginUserPmd_S::set_gatewayurl(const char* value) {
  set_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_ = new ::std::string;
  }
  gatewayurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurl)
}
inline void UserLoginReturnOkLoginUserPmd_S::set_gatewayurl(const char* value, size_t size) {
  set_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_ = new ::std::string;
  }
  gatewayurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurl)
}
inline ::std::string* UserLoginReturnOkLoginUserPmd_S::mutable_gatewayurl() {
  set_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurl)
  return gatewayurl_;
}
inline ::std::string* UserLoginReturnOkLoginUserPmd_S::release_gatewayurl() {
  clear_has_gatewayurl();
  if (gatewayurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gatewayurl_;
    gatewayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginReturnOkLoginUserPmd_S::set_allocated_gatewayurl(::std::string* gatewayurl) {
  if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatewayurl_;
  }
  if (gatewayurl) {
    set_has_gatewayurl();
    gatewayurl_ = gatewayurl;
  } else {
    clear_has_gatewayurl();
    gatewayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurl)
}

// optional uint32 gameid = 5;
inline bool UserLoginReturnOkLoginUserPmd_S::has_gameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_gameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 UserLoginReturnOkLoginUserPmd_S::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.gameid)
  return gameid_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.gameid)
}

// optional uint32 zoneid = 6;
inline bool UserLoginReturnOkLoginUserPmd_S::has_zoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_zoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 UserLoginReturnOkLoginUserPmd_S::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.zoneid)
  return zoneid_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.zoneid)
}

// optional bool separatezoneuid = 7;
inline bool UserLoginReturnOkLoginUserPmd_S::has_separatezoneuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_separatezoneuid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_separatezoneuid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_separatezoneuid() {
  separatezoneuid_ = false;
  clear_has_separatezoneuid();
}
inline bool UserLoginReturnOkLoginUserPmd_S::separatezoneuid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.separatezoneuid)
  return separatezoneuid_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_separatezoneuid(bool value) {
  set_has_separatezoneuid();
  separatezoneuid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.separatezoneuid)
}

// optional string zoneuid = 8;
inline bool UserLoginReturnOkLoginUserPmd_S::has_zoneuid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_zoneuid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_zoneuid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_zoneuid() {
  if (zoneuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zoneuid_->clear();
  }
  clear_has_zoneuid();
}
inline const ::std::string& UserLoginReturnOkLoginUserPmd_S::zoneuid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.zoneuid)
  return *zoneuid_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_zoneuid(const ::std::string& value) {
  set_has_zoneuid();
  if (zoneuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zoneuid_ = new ::std::string;
  }
  zoneuid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.zoneuid)
}
inline void UserLoginReturnOkLoginUserPmd_S::set_zoneuid(const char* value) {
  set_has_zoneuid();
  if (zoneuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zoneuid_ = new ::std::string;
  }
  zoneuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginReturnOkLoginUserPmd_S.zoneuid)
}
inline void UserLoginReturnOkLoginUserPmd_S::set_zoneuid(const char* value, size_t size) {
  set_has_zoneuid();
  if (zoneuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zoneuid_ = new ::std::string;
  }
  zoneuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginReturnOkLoginUserPmd_S.zoneuid)
}
inline ::std::string* UserLoginReturnOkLoginUserPmd_S::mutable_zoneuid() {
  set_has_zoneuid();
  if (zoneuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    zoneuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginReturnOkLoginUserPmd_S.zoneuid)
  return zoneuid_;
}
inline ::std::string* UserLoginReturnOkLoginUserPmd_S::release_zoneuid() {
  clear_has_zoneuid();
  if (zoneuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = zoneuid_;
    zoneuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginReturnOkLoginUserPmd_S::set_allocated_zoneuid(::std::string* zoneuid) {
  if (zoneuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zoneuid_;
  }
  if (zoneuid) {
    set_has_zoneuid();
    zoneuid_ = zoneuid;
  } else {
    clear_has_zoneuid();
    zoneuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginReturnOkLoginUserPmd_S.zoneuid)
}

// optional string gatewayurltcp = 9;
inline bool UserLoginReturnOkLoginUserPmd_S::has_gatewayurltcp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_has_gatewayurltcp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_has_gatewayurltcp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserLoginReturnOkLoginUserPmd_S::clear_gatewayurltcp() {
  if (gatewayurltcp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurltcp_->clear();
  }
  clear_has_gatewayurltcp();
}
inline const ::std::string& UserLoginReturnOkLoginUserPmd_S::gatewayurltcp() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurltcp)
  return *gatewayurltcp_;
}
inline void UserLoginReturnOkLoginUserPmd_S::set_gatewayurltcp(const ::std::string& value) {
  set_has_gatewayurltcp();
  if (gatewayurltcp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurltcp_ = new ::std::string;
  }
  gatewayurltcp_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurltcp)
}
inline void UserLoginReturnOkLoginUserPmd_S::set_gatewayurltcp(const char* value) {
  set_has_gatewayurltcp();
  if (gatewayurltcp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurltcp_ = new ::std::string;
  }
  gatewayurltcp_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurltcp)
}
inline void UserLoginReturnOkLoginUserPmd_S::set_gatewayurltcp(const char* value, size_t size) {
  set_has_gatewayurltcp();
  if (gatewayurltcp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurltcp_ = new ::std::string;
  }
  gatewayurltcp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurltcp)
}
inline ::std::string* UserLoginReturnOkLoginUserPmd_S::mutable_gatewayurltcp() {
  set_has_gatewayurltcp();
  if (gatewayurltcp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gatewayurltcp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurltcp)
  return gatewayurltcp_;
}
inline ::std::string* UserLoginReturnOkLoginUserPmd_S::release_gatewayurltcp() {
  clear_has_gatewayurltcp();
  if (gatewayurltcp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gatewayurltcp_;
    gatewayurltcp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginReturnOkLoginUserPmd_S::set_allocated_gatewayurltcp(::std::string* gatewayurltcp) {
  if (gatewayurltcp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatewayurltcp_;
  }
  if (gatewayurltcp) {
    set_has_gatewayurltcp();
    gatewayurltcp_ = gatewayurltcp;
  } else {
    clear_has_gatewayurltcp();
    gatewayurltcp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginReturnOkLoginUserPmd_S.gatewayurltcp)
}

// -------------------------------------------------------------------

// UserLoginTokenLoginUserPmd_C

// required uint32 gameid = 1;
inline bool UserLoginTokenLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 UserLoginTokenLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.gameid)
  return gameid_;
}
inline void UserLoginTokenLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.gameid)
}

// required uint32 zoneid = 2;
inline bool UserLoginTokenLoginUserPmd_C::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 UserLoginTokenLoginUserPmd_C::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.zoneid)
  return zoneid_;
}
inline void UserLoginTokenLoginUserPmd_C::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.zoneid)
}

// required uint64 accountid = 3;
inline bool UserLoginTokenLoginUserPmd_C::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 UserLoginTokenLoginUserPmd_C::accountid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.accountid)
  return accountid_;
}
inline void UserLoginTokenLoginUserPmd_C::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.accountid)
}

// required uint64 logintempid = 4;
inline bool UserLoginTokenLoginUserPmd_C::has_logintempid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_logintempid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_logintempid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_logintempid() {
  logintempid_ = GOOGLE_ULONGLONG(0);
  clear_has_logintempid();
}
inline ::google::protobuf::uint64 UserLoginTokenLoginUserPmd_C::logintempid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.logintempid)
  return logintempid_;
}
inline void UserLoginTokenLoginUserPmd_C::set_logintempid(::google::protobuf::uint64 value) {
  set_has_logintempid();
  logintempid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.logintempid)
}

// required uint32 timestamp = 5;
inline bool UserLoginTokenLoginUserPmd_C::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 UserLoginTokenLoginUserPmd_C::timestamp() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.timestamp)
  return timestamp_;
}
inline void UserLoginTokenLoginUserPmd_C::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.timestamp)
}

// required string tokenmd5 = 6;
inline bool UserLoginTokenLoginUserPmd_C::has_tokenmd5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_tokenmd5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_tokenmd5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_tokenmd5() {
  if (tokenmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_->clear();
  }
  clear_has_tokenmd5();
}
inline const ::std::string& UserLoginTokenLoginUserPmd_C::tokenmd5() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.tokenmd5)
  return *tokenmd5_;
}
inline void UserLoginTokenLoginUserPmd_C::set_tokenmd5(const ::std::string& value) {
  set_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_ = new ::std::string;
  }
  tokenmd5_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.tokenmd5)
}
inline void UserLoginTokenLoginUserPmd_C::set_tokenmd5(const char* value) {
  set_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_ = new ::std::string;
  }
  tokenmd5_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginTokenLoginUserPmd_C.tokenmd5)
}
inline void UserLoginTokenLoginUserPmd_C::set_tokenmd5(const char* value, size_t size) {
  set_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_ = new ::std::string;
  }
  tokenmd5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginTokenLoginUserPmd_C.tokenmd5)
}
inline ::std::string* UserLoginTokenLoginUserPmd_C::mutable_tokenmd5() {
  set_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginTokenLoginUserPmd_C.tokenmd5)
  return tokenmd5_;
}
inline ::std::string* UserLoginTokenLoginUserPmd_C::release_tokenmd5() {
  clear_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tokenmd5_;
    tokenmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginTokenLoginUserPmd_C::set_allocated_tokenmd5(::std::string* tokenmd5) {
  if (tokenmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tokenmd5_;
  }
  if (tokenmd5) {
    set_has_tokenmd5();
    tokenmd5_ = tokenmd5;
  } else {
    clear_has_tokenmd5();
    tokenmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginTokenLoginUserPmd_C.tokenmd5)
}

// optional string compress = 8;
inline bool UserLoginTokenLoginUserPmd_C::has_compress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_compress() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_compress() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_compress() {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_->clear();
  }
  clear_has_compress();
}
inline const ::std::string& UserLoginTokenLoginUserPmd_C::compress() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.compress)
  return *compress_;
}
inline void UserLoginTokenLoginUserPmd_C::set_compress(const ::std::string& value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.compress)
}
inline void UserLoginTokenLoginUserPmd_C::set_compress(const char* value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginTokenLoginUserPmd_C.compress)
}
inline void UserLoginTokenLoginUserPmd_C::set_compress(const char* value, size_t size) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginTokenLoginUserPmd_C.compress)
}
inline ::std::string* UserLoginTokenLoginUserPmd_C::mutable_compress() {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginTokenLoginUserPmd_C.compress)
  return compress_;
}
inline ::std::string* UserLoginTokenLoginUserPmd_C::release_compress() {
  clear_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = compress_;
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginTokenLoginUserPmd_C::set_allocated_compress(::std::string* compress) {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (compress) {
    set_has_compress();
    compress_ = compress;
  } else {
    clear_has_compress();
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginTokenLoginUserPmd_C.compress)
}

// optional string encrypt = 9;
inline bool UserLoginTokenLoginUserPmd_C::has_encrypt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_encrypt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_encrypt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_encrypt() {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_->clear();
  }
  clear_has_encrypt();
}
inline const ::std::string& UserLoginTokenLoginUserPmd_C::encrypt() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.encrypt)
  return *encrypt_;
}
inline void UserLoginTokenLoginUserPmd_C::set_encrypt(const ::std::string& value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.encrypt)
}
inline void UserLoginTokenLoginUserPmd_C::set_encrypt(const char* value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginTokenLoginUserPmd_C.encrypt)
}
inline void UserLoginTokenLoginUserPmd_C::set_encrypt(const char* value, size_t size) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginTokenLoginUserPmd_C.encrypt)
}
inline ::std::string* UserLoginTokenLoginUserPmd_C::mutable_encrypt() {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginTokenLoginUserPmd_C.encrypt)
  return encrypt_;
}
inline ::std::string* UserLoginTokenLoginUserPmd_C::release_encrypt() {
  clear_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypt_;
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginTokenLoginUserPmd_C::set_allocated_encrypt(::std::string* encrypt) {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encrypt) {
    set_has_encrypt();
    encrypt_ = encrypt;
  } else {
    clear_has_encrypt();
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginTokenLoginUserPmd_C.encrypt)
}

// optional string encryptkey = 10;
inline bool UserLoginTokenLoginUserPmd_C::has_encryptkey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserLoginTokenLoginUserPmd_C::set_has_encryptkey() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_has_encryptkey() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserLoginTokenLoginUserPmd_C::clear_encryptkey() {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_->clear();
  }
  clear_has_encryptkey();
}
inline const ::std::string& UserLoginTokenLoginUserPmd_C::encryptkey() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginTokenLoginUserPmd_C.encryptkey)
  return *encryptkey_;
}
inline void UserLoginTokenLoginUserPmd_C::set_encryptkey(const ::std::string& value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginTokenLoginUserPmd_C.encryptkey)
}
inline void UserLoginTokenLoginUserPmd_C::set_encryptkey(const char* value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginTokenLoginUserPmd_C.encryptkey)
}
inline void UserLoginTokenLoginUserPmd_C::set_encryptkey(const char* value, size_t size) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginTokenLoginUserPmd_C.encryptkey)
}
inline ::std::string* UserLoginTokenLoginUserPmd_C::mutable_encryptkey() {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginTokenLoginUserPmd_C.encryptkey)
  return encryptkey_;
}
inline ::std::string* UserLoginTokenLoginUserPmd_C::release_encryptkey() {
  clear_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encryptkey_;
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginTokenLoginUserPmd_C::set_allocated_encryptkey(::std::string* encryptkey) {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (encryptkey) {
    set_has_encryptkey();
    encryptkey_ = encryptkey;
  } else {
    clear_has_encryptkey();
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginTokenLoginUserPmd_C.encryptkey)
}

// -------------------------------------------------------------------

// ClientLogUrlLoginUserPmd_S

// required string loglevel = 1;
inline bool ClientLogUrlLoginUserPmd_S::has_loglevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientLogUrlLoginUserPmd_S::set_has_loglevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientLogUrlLoginUserPmd_S::clear_has_loglevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientLogUrlLoginUserPmd_S::clear_loglevel() {
  if (loglevel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loglevel_->clear();
  }
  clear_has_loglevel();
}
inline const ::std::string& ClientLogUrlLoginUserPmd_S::loglevel() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientLogUrlLoginUserPmd_S.loglevel)
  return *loglevel_;
}
inline void ClientLogUrlLoginUserPmd_S::set_loglevel(const ::std::string& value) {
  set_has_loglevel();
  if (loglevel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loglevel_ = new ::std::string;
  }
  loglevel_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ClientLogUrlLoginUserPmd_S.loglevel)
}
inline void ClientLogUrlLoginUserPmd_S::set_loglevel(const char* value) {
  set_has_loglevel();
  if (loglevel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loglevel_ = new ::std::string;
  }
  loglevel_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ClientLogUrlLoginUserPmd_S.loglevel)
}
inline void ClientLogUrlLoginUserPmd_S::set_loglevel(const char* value, size_t size) {
  set_has_loglevel();
  if (loglevel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loglevel_ = new ::std::string;
  }
  loglevel_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ClientLogUrlLoginUserPmd_S.loglevel)
}
inline ::std::string* ClientLogUrlLoginUserPmd_S::mutable_loglevel() {
  set_has_loglevel();
  if (loglevel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loglevel_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ClientLogUrlLoginUserPmd_S.loglevel)
  return loglevel_;
}
inline ::std::string* ClientLogUrlLoginUserPmd_S::release_loglevel() {
  clear_has_loglevel();
  if (loglevel_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loglevel_;
    loglevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientLogUrlLoginUserPmd_S::set_allocated_loglevel(::std::string* loglevel) {
  if (loglevel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loglevel_;
  }
  if (loglevel) {
    set_has_loglevel();
    loglevel_ = loglevel;
  } else {
    clear_has_loglevel();
    loglevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ClientLogUrlLoginUserPmd_S.loglevel)
}

// required string logurl = 2;
inline bool ClientLogUrlLoginUserPmd_S::has_logurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientLogUrlLoginUserPmd_S::set_has_logurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientLogUrlLoginUserPmd_S::clear_has_logurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientLogUrlLoginUserPmd_S::clear_logurl() {
  if (logurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logurl_->clear();
  }
  clear_has_logurl();
}
inline const ::std::string& ClientLogUrlLoginUserPmd_S::logurl() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientLogUrlLoginUserPmd_S.logurl)
  return *logurl_;
}
inline void ClientLogUrlLoginUserPmd_S::set_logurl(const ::std::string& value) {
  set_has_logurl();
  if (logurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logurl_ = new ::std::string;
  }
  logurl_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ClientLogUrlLoginUserPmd_S.logurl)
}
inline void ClientLogUrlLoginUserPmd_S::set_logurl(const char* value) {
  set_has_logurl();
  if (logurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logurl_ = new ::std::string;
  }
  logurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ClientLogUrlLoginUserPmd_S.logurl)
}
inline void ClientLogUrlLoginUserPmd_S::set_logurl(const char* value, size_t size) {
  set_has_logurl();
  if (logurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logurl_ = new ::std::string;
  }
  logurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ClientLogUrlLoginUserPmd_S.logurl)
}
inline ::std::string* ClientLogUrlLoginUserPmd_S::mutable_logurl() {
  set_has_logurl();
  if (logurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ClientLogUrlLoginUserPmd_S.logurl)
  return logurl_;
}
inline ::std::string* ClientLogUrlLoginUserPmd_S::release_logurl() {
  clear_has_logurl();
  if (logurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logurl_;
    logurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientLogUrlLoginUserPmd_S::set_allocated_logurl(::std::string* logurl) {
  if (logurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logurl_;
  }
  if (logurl) {
    set_has_logurl();
    logurl_ = logurl;
  } else {
    clear_has_logurl();
    logurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ClientLogUrlLoginUserPmd_S.logurl)
}

// required bool distinct = 3;
inline bool ClientLogUrlLoginUserPmd_S::has_distinct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientLogUrlLoginUserPmd_S::set_has_distinct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientLogUrlLoginUserPmd_S::clear_has_distinct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientLogUrlLoginUserPmd_S::clear_distinct() {
  distinct_ = false;
  clear_has_distinct();
}
inline bool ClientLogUrlLoginUserPmd_S::distinct() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientLogUrlLoginUserPmd_S.distinct)
  return distinct_;
}
inline void ClientLogUrlLoginUserPmd_S::set_distinct(bool value) {
  set_has_distinct();
  distinct_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ClientLogUrlLoginUserPmd_S.distinct)
}

// -------------------------------------------------------------------

// MessageBoxLoginUserPmd_S

// optional string btnleft = 1;
inline bool MessageBoxLoginUserPmd_S::has_btnleft() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageBoxLoginUserPmd_S::set_has_btnleft() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageBoxLoginUserPmd_S::clear_has_btnleft() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageBoxLoginUserPmd_S::clear_btnleft() {
  if (btnleft_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnleft_->clear();
  }
  clear_has_btnleft();
}
inline const ::std::string& MessageBoxLoginUserPmd_S::btnleft() const {
  // @@protoc_insertion_point(field_get:Pmd.MessageBoxLoginUserPmd_S.btnleft)
  return *btnleft_;
}
inline void MessageBoxLoginUserPmd_S::set_btnleft(const ::std::string& value) {
  set_has_btnleft();
  if (btnleft_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnleft_ = new ::std::string;
  }
  btnleft_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MessageBoxLoginUserPmd_S.btnleft)
}
inline void MessageBoxLoginUserPmd_S::set_btnleft(const char* value) {
  set_has_btnleft();
  if (btnleft_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnleft_ = new ::std::string;
  }
  btnleft_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MessageBoxLoginUserPmd_S.btnleft)
}
inline void MessageBoxLoginUserPmd_S::set_btnleft(const char* value, size_t size) {
  set_has_btnleft();
  if (btnleft_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnleft_ = new ::std::string;
  }
  btnleft_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MessageBoxLoginUserPmd_S.btnleft)
}
inline ::std::string* MessageBoxLoginUserPmd_S::mutable_btnleft() {
  set_has_btnleft();
  if (btnleft_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnleft_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MessageBoxLoginUserPmd_S.btnleft)
  return btnleft_;
}
inline ::std::string* MessageBoxLoginUserPmd_S::release_btnleft() {
  clear_has_btnleft();
  if (btnleft_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = btnleft_;
    btnleft_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageBoxLoginUserPmd_S::set_allocated_btnleft(::std::string* btnleft) {
  if (btnleft_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btnleft_;
  }
  if (btnleft) {
    set_has_btnleft();
    btnleft_ = btnleft;
  } else {
    clear_has_btnleft();
    btnleft_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MessageBoxLoginUserPmd_S.btnleft)
}

// optional string btnmiddle = 2;
inline bool MessageBoxLoginUserPmd_S::has_btnmiddle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageBoxLoginUserPmd_S::set_has_btnmiddle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageBoxLoginUserPmd_S::clear_has_btnmiddle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageBoxLoginUserPmd_S::clear_btnmiddle() {
  if (btnmiddle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnmiddle_->clear();
  }
  clear_has_btnmiddle();
}
inline const ::std::string& MessageBoxLoginUserPmd_S::btnmiddle() const {
  // @@protoc_insertion_point(field_get:Pmd.MessageBoxLoginUserPmd_S.btnmiddle)
  return *btnmiddle_;
}
inline void MessageBoxLoginUserPmd_S::set_btnmiddle(const ::std::string& value) {
  set_has_btnmiddle();
  if (btnmiddle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnmiddle_ = new ::std::string;
  }
  btnmiddle_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MessageBoxLoginUserPmd_S.btnmiddle)
}
inline void MessageBoxLoginUserPmd_S::set_btnmiddle(const char* value) {
  set_has_btnmiddle();
  if (btnmiddle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnmiddle_ = new ::std::string;
  }
  btnmiddle_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MessageBoxLoginUserPmd_S.btnmiddle)
}
inline void MessageBoxLoginUserPmd_S::set_btnmiddle(const char* value, size_t size) {
  set_has_btnmiddle();
  if (btnmiddle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnmiddle_ = new ::std::string;
  }
  btnmiddle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MessageBoxLoginUserPmd_S.btnmiddle)
}
inline ::std::string* MessageBoxLoginUserPmd_S::mutable_btnmiddle() {
  set_has_btnmiddle();
  if (btnmiddle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnmiddle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MessageBoxLoginUserPmd_S.btnmiddle)
  return btnmiddle_;
}
inline ::std::string* MessageBoxLoginUserPmd_S::release_btnmiddle() {
  clear_has_btnmiddle();
  if (btnmiddle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = btnmiddle_;
    btnmiddle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageBoxLoginUserPmd_S::set_allocated_btnmiddle(::std::string* btnmiddle) {
  if (btnmiddle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btnmiddle_;
  }
  if (btnmiddle) {
    set_has_btnmiddle();
    btnmiddle_ = btnmiddle;
  } else {
    clear_has_btnmiddle();
    btnmiddle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MessageBoxLoginUserPmd_S.btnmiddle)
}

// optional string btnright = 3;
inline bool MessageBoxLoginUserPmd_S::has_btnright() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageBoxLoginUserPmd_S::set_has_btnright() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageBoxLoginUserPmd_S::clear_has_btnright() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageBoxLoginUserPmd_S::clear_btnright() {
  if (btnright_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnright_->clear();
  }
  clear_has_btnright();
}
inline const ::std::string& MessageBoxLoginUserPmd_S::btnright() const {
  // @@protoc_insertion_point(field_get:Pmd.MessageBoxLoginUserPmd_S.btnright)
  return *btnright_;
}
inline void MessageBoxLoginUserPmd_S::set_btnright(const ::std::string& value) {
  set_has_btnright();
  if (btnright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnright_ = new ::std::string;
  }
  btnright_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MessageBoxLoginUserPmd_S.btnright)
}
inline void MessageBoxLoginUserPmd_S::set_btnright(const char* value) {
  set_has_btnright();
  if (btnright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnright_ = new ::std::string;
  }
  btnright_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MessageBoxLoginUserPmd_S.btnright)
}
inline void MessageBoxLoginUserPmd_S::set_btnright(const char* value, size_t size) {
  set_has_btnright();
  if (btnright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnright_ = new ::std::string;
  }
  btnright_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MessageBoxLoginUserPmd_S.btnright)
}
inline ::std::string* MessageBoxLoginUserPmd_S::mutable_btnright() {
  set_has_btnright();
  if (btnright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    btnright_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MessageBoxLoginUserPmd_S.btnright)
  return btnright_;
}
inline ::std::string* MessageBoxLoginUserPmd_S::release_btnright() {
  clear_has_btnright();
  if (btnright_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = btnright_;
    btnright_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageBoxLoginUserPmd_S::set_allocated_btnright(::std::string* btnright) {
  if (btnright_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btnright_;
  }
  if (btnright) {
    set_has_btnright();
    btnright_ = btnright;
  } else {
    clear_has_btnright();
    btnright_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MessageBoxLoginUserPmd_S.btnright)
}

// optional string info = 4;
inline bool MessageBoxLoginUserPmd_S::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageBoxLoginUserPmd_S::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageBoxLoginUserPmd_S::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageBoxLoginUserPmd_S::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& MessageBoxLoginUserPmd_S::info() const {
  // @@protoc_insertion_point(field_get:Pmd.MessageBoxLoginUserPmd_S.info)
  return *info_;
}
inline void MessageBoxLoginUserPmd_S::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.MessageBoxLoginUserPmd_S.info)
}
inline void MessageBoxLoginUserPmd_S::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.MessageBoxLoginUserPmd_S.info)
}
inline void MessageBoxLoginUserPmd_S::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.MessageBoxLoginUserPmd_S.info)
}
inline ::std::string* MessageBoxLoginUserPmd_S::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.MessageBoxLoginUserPmd_S.info)
  return info_;
}
inline ::std::string* MessageBoxLoginUserPmd_S::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageBoxLoginUserPmd_S::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.MessageBoxLoginUserPmd_S.info)
}

// -------------------------------------------------------------------

// RequestAccountRegisterLoginUserPmd_C

// required string account = 1;
inline bool RequestAccountRegisterLoginUserPmd_C::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAccountRegisterLoginUserPmd_C::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestAccountRegisterLoginUserPmd_C::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestAccountRegisterLoginUserPmd_C::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RequestAccountRegisterLoginUserPmd_C::account() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestAccountRegisterLoginUserPmd_C.account)
  return *account_;
}
inline void RequestAccountRegisterLoginUserPmd_C::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestAccountRegisterLoginUserPmd_C.account)
}
inline void RequestAccountRegisterLoginUserPmd_C::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestAccountRegisterLoginUserPmd_C.account)
}
inline void RequestAccountRegisterLoginUserPmd_C::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestAccountRegisterLoginUserPmd_C.account)
}
inline ::std::string* RequestAccountRegisterLoginUserPmd_C::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestAccountRegisterLoginUserPmd_C.account)
  return account_;
}
inline ::std::string* RequestAccountRegisterLoginUserPmd_C::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestAccountRegisterLoginUserPmd_C::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestAccountRegisterLoginUserPmd_C.account)
}

// required string password = 2;
inline bool RequestAccountRegisterLoginUserPmd_C::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestAccountRegisterLoginUserPmd_C::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestAccountRegisterLoginUserPmd_C::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestAccountRegisterLoginUserPmd_C::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RequestAccountRegisterLoginUserPmd_C::password() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestAccountRegisterLoginUserPmd_C.password)
  return *password_;
}
inline void RequestAccountRegisterLoginUserPmd_C::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestAccountRegisterLoginUserPmd_C.password)
}
inline void RequestAccountRegisterLoginUserPmd_C::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestAccountRegisterLoginUserPmd_C.password)
}
inline void RequestAccountRegisterLoginUserPmd_C::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestAccountRegisterLoginUserPmd_C.password)
}
inline ::std::string* RequestAccountRegisterLoginUserPmd_C::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestAccountRegisterLoginUserPmd_C.password)
  return password_;
}
inline ::std::string* RequestAccountRegisterLoginUserPmd_C::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestAccountRegisterLoginUserPmd_C::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestAccountRegisterLoginUserPmd_C.password)
}

// optional string code = 3;
inline bool RequestAccountRegisterLoginUserPmd_C::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestAccountRegisterLoginUserPmd_C::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestAccountRegisterLoginUserPmd_C::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestAccountRegisterLoginUserPmd_C::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& RequestAccountRegisterLoginUserPmd_C::code() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestAccountRegisterLoginUserPmd_C.code)
  return *code_;
}
inline void RequestAccountRegisterLoginUserPmd_C::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestAccountRegisterLoginUserPmd_C.code)
}
inline void RequestAccountRegisterLoginUserPmd_C::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestAccountRegisterLoginUserPmd_C.code)
}
inline void RequestAccountRegisterLoginUserPmd_C::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestAccountRegisterLoginUserPmd_C.code)
}
inline ::std::string* RequestAccountRegisterLoginUserPmd_C::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestAccountRegisterLoginUserPmd_C.code)
  return code_;
}
inline ::std::string* RequestAccountRegisterLoginUserPmd_C::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestAccountRegisterLoginUserPmd_C::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestAccountRegisterLoginUserPmd_C.code)
}

// -------------------------------------------------------------------

// ReturnAccountRegisterLoginUserPmd_S

// required string account = 1;
inline bool ReturnAccountRegisterLoginUserPmd_S::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReturnAccountRegisterLoginUserPmd_S::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReturnAccountRegisterLoginUserPmd_S::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReturnAccountRegisterLoginUserPmd_S::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& ReturnAccountRegisterLoginUserPmd_S::account() const {
  // @@protoc_insertion_point(field_get:Pmd.ReturnAccountRegisterLoginUserPmd_S.account)
  return *account_;
}
inline void ReturnAccountRegisterLoginUserPmd_S::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ReturnAccountRegisterLoginUserPmd_S.account)
}
inline void ReturnAccountRegisterLoginUserPmd_S::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ReturnAccountRegisterLoginUserPmd_S.account)
}
inline void ReturnAccountRegisterLoginUserPmd_S::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ReturnAccountRegisterLoginUserPmd_S.account)
}
inline ::std::string* ReturnAccountRegisterLoginUserPmd_S::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ReturnAccountRegisterLoginUserPmd_S.account)
  return account_;
}
inline ::std::string* ReturnAccountRegisterLoginUserPmd_S::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReturnAccountRegisterLoginUserPmd_S::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ReturnAccountRegisterLoginUserPmd_S.account)
}

// required uint64 accountid = 2;
inline bool ReturnAccountRegisterLoginUserPmd_S::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReturnAccountRegisterLoginUserPmd_S::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReturnAccountRegisterLoginUserPmd_S::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReturnAccountRegisterLoginUserPmd_S::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 ReturnAccountRegisterLoginUserPmd_S::accountid() const {
  // @@protoc_insertion_point(field_get:Pmd.ReturnAccountRegisterLoginUserPmd_S.accountid)
  return accountid_;
}
inline void ReturnAccountRegisterLoginUserPmd_S::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ReturnAccountRegisterLoginUserPmd_S.accountid)
}

// -------------------------------------------------------------------

// UserLogoutTokenLoginUserPmd_C

// -------------------------------------------------------------------

// UserLoginReconnectLoginUserPmd_C

// optional uint64 accountid = 1;
inline bool UserLoginReconnectLoginUserPmd_C::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginReconnectLoginUserPmd_C::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginReconnectLoginUserPmd_C::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginReconnectLoginUserPmd_C::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 UserLoginReconnectLoginUserPmd_C::accountid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReconnectLoginUserPmd_C.accountid)
  return accountid_;
}
inline void UserLoginReconnectLoginUserPmd_C::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReconnectLoginUserPmd_C.accountid)
}

// optional uint32 timestamp = 2;
inline bool UserLoginReconnectLoginUserPmd_C::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginReconnectLoginUserPmd_C::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginReconnectLoginUserPmd_C::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginReconnectLoginUserPmd_C::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 UserLoginReconnectLoginUserPmd_C::timestamp() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReconnectLoginUserPmd_C.timestamp)
  return timestamp_;
}
inline void UserLoginReconnectLoginUserPmd_C::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReconnectLoginUserPmd_C.timestamp)
}

// optional string tokenmd5 = 3;
inline bool UserLoginReconnectLoginUserPmd_C::has_tokenmd5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginReconnectLoginUserPmd_C::set_has_tokenmd5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginReconnectLoginUserPmd_C::clear_has_tokenmd5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginReconnectLoginUserPmd_C::clear_tokenmd5() {
  if (tokenmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_->clear();
  }
  clear_has_tokenmd5();
}
inline const ::std::string& UserLoginReconnectLoginUserPmd_C::tokenmd5() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReconnectLoginUserPmd_C.tokenmd5)
  return *tokenmd5_;
}
inline void UserLoginReconnectLoginUserPmd_C::set_tokenmd5(const ::std::string& value) {
  set_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_ = new ::std::string;
  }
  tokenmd5_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReconnectLoginUserPmd_C.tokenmd5)
}
inline void UserLoginReconnectLoginUserPmd_C::set_tokenmd5(const char* value) {
  set_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_ = new ::std::string;
  }
  tokenmd5_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.UserLoginReconnectLoginUserPmd_C.tokenmd5)
}
inline void UserLoginReconnectLoginUserPmd_C::set_tokenmd5(const char* value, size_t size) {
  set_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_ = new ::std::string;
  }
  tokenmd5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.UserLoginReconnectLoginUserPmd_C.tokenmd5)
}
inline ::std::string* UserLoginReconnectLoginUserPmd_C::mutable_tokenmd5() {
  set_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tokenmd5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.UserLoginReconnectLoginUserPmd_C.tokenmd5)
  return tokenmd5_;
}
inline ::std::string* UserLoginReconnectLoginUserPmd_C::release_tokenmd5() {
  clear_has_tokenmd5();
  if (tokenmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tokenmd5_;
    tokenmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserLoginReconnectLoginUserPmd_C::set_allocated_tokenmd5(::std::string* tokenmd5) {
  if (tokenmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tokenmd5_;
  }
  if (tokenmd5) {
    set_has_tokenmd5();
    tokenmd5_ = tokenmd5;
  } else {
    clear_has_tokenmd5();
    tokenmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.UserLoginReconnectLoginUserPmd_C.tokenmd5)
}

// optional uint64 logintempid = 4;
inline bool UserLoginReconnectLoginUserPmd_C::has_logintempid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLoginReconnectLoginUserPmd_C::set_has_logintempid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLoginReconnectLoginUserPmd_C::clear_has_logintempid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLoginReconnectLoginUserPmd_C::clear_logintempid() {
  logintempid_ = GOOGLE_ULONGLONG(0);
  clear_has_logintempid();
}
inline ::google::protobuf::uint64 UserLoginReconnectLoginUserPmd_C::logintempid() const {
  // @@protoc_insertion_point(field_get:Pmd.UserLoginReconnectLoginUserPmd_C.logintempid)
  return logintempid_;
}
inline void UserLoginReconnectLoginUserPmd_C::set_logintempid(::google::protobuf::uint64 value) {
  set_has_logintempid();
  logintempid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.UserLoginReconnectLoginUserPmd_C.logintempid)
}

// -------------------------------------------------------------------

// ReconnectKickoutLoginUserPmd_S

// optional string desc = 1;
inline bool ReconnectKickoutLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconnectKickoutLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconnectKickoutLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconnectKickoutLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& ReconnectKickoutLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.ReconnectKickoutLoginUserPmd_S.desc)
  return *desc_;
}
inline void ReconnectKickoutLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ReconnectKickoutLoginUserPmd_S.desc)
}
inline void ReconnectKickoutLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ReconnectKickoutLoginUserPmd_S.desc)
}
inline void ReconnectKickoutLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ReconnectKickoutLoginUserPmd_S.desc)
}
inline ::std::string* ReconnectKickoutLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ReconnectKickoutLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* ReconnectKickoutLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconnectKickoutLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ReconnectKickoutLoginUserPmd_S.desc)
}

// -------------------------------------------------------------------

// ReconnectErrorLoginUserPmd_S

// optional string desc = 1;
inline bool ReconnectErrorLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconnectErrorLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconnectErrorLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconnectErrorLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& ReconnectErrorLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.ReconnectErrorLoginUserPmd_S.desc)
  return *desc_;
}
inline void ReconnectErrorLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ReconnectErrorLoginUserPmd_S.desc)
}
inline void ReconnectErrorLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ReconnectErrorLoginUserPmd_S.desc)
}
inline void ReconnectErrorLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ReconnectErrorLoginUserPmd_S.desc)
}
inline ::std::string* ReconnectErrorLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ReconnectErrorLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* ReconnectErrorLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconnectErrorLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ReconnectErrorLoginUserPmd_S.desc)
}

// -------------------------------------------------------------------

// ServerKickoutLoginUserPmd_S

// required uint64 accountid = 1;
inline bool ServerKickoutLoginUserPmd_S::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerKickoutLoginUserPmd_S::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerKickoutLoginUserPmd_S::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerKickoutLoginUserPmd_S::clear_accountid() {
  accountid_ = GOOGLE_ULONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::uint64 ServerKickoutLoginUserPmd_S::accountid() const {
  // @@protoc_insertion_point(field_get:Pmd.ServerKickoutLoginUserPmd_S.accountid)
  return accountid_;
}
inline void ServerKickoutLoginUserPmd_S::set_accountid(::google::protobuf::uint64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ServerKickoutLoginUserPmd_S.accountid)
}

// optional string desc = 2;
inline bool ServerKickoutLoginUserPmd_S::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerKickoutLoginUserPmd_S::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerKickoutLoginUserPmd_S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerKickoutLoginUserPmd_S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& ServerKickoutLoginUserPmd_S::desc() const {
  // @@protoc_insertion_point(field_get:Pmd.ServerKickoutLoginUserPmd_S.desc)
  return *desc_;
}
inline void ServerKickoutLoginUserPmd_S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ServerKickoutLoginUserPmd_S.desc)
}
inline void ServerKickoutLoginUserPmd_S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ServerKickoutLoginUserPmd_S.desc)
}
inline void ServerKickoutLoginUserPmd_S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ServerKickoutLoginUserPmd_S.desc)
}
inline ::std::string* ServerKickoutLoginUserPmd_S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ServerKickoutLoginUserPmd_S.desc)
  return desc_;
}
inline ::std::string* ServerKickoutLoginUserPmd_S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerKickoutLoginUserPmd_S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ServerKickoutLoginUserPmd_S.desc)
}

// -------------------------------------------------------------------

// PlatInfo

// required string account = 1;
inline bool PlatInfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlatInfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlatInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlatInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& PlatInfo::account() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.account)
  return *account_;
}
inline void PlatInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.account)
}
inline void PlatInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.account)
}
inline void PlatInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.account)
}
inline ::std::string* PlatInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.account)
  return account_;
}
inline ::std::string* PlatInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.account)
}

// required .Pmd.PlatType platid = 2;
inline bool PlatInfo::has_platid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlatInfo::set_has_platid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlatInfo::clear_has_platid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlatInfo::clear_platid() {
  platid_ = 0;
  clear_has_platid();
}
inline ::Pmd::PlatType PlatInfo::platid() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.platid)
  return static_cast< ::Pmd::PlatType >(platid_);
}
inline void PlatInfo::set_platid(::Pmd::PlatType value) {
  assert(::Pmd::PlatType_IsValid(value));
  set_has_platid();
  platid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.platid)
}

// optional string email = 3;
inline bool PlatInfo::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlatInfo::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlatInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlatInfo::clear_email() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PlatInfo::email() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.email)
  return *email_;
}
inline void PlatInfo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.email)
}
inline void PlatInfo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.email)
}
inline void PlatInfo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.email)
}
inline ::std::string* PlatInfo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    email_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.email)
  return email_;
}
inline ::std::string* PlatInfo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.email)
}

// optional string gender = 4;
inline bool PlatInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlatInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlatInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlatInfo::clear_gender() {
  if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_->clear();
  }
  clear_has_gender();
}
inline const ::std::string& PlatInfo::gender() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.gender)
  return *gender_;
}
inline void PlatInfo::set_gender(const ::std::string& value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.gender)
}
inline void PlatInfo::set_gender(const char* value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.gender)
}
inline void PlatInfo::set_gender(const char* value, size_t size) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_ = new ::std::string;
  }
  gender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.gender)
}
inline ::std::string* PlatInfo::mutable_gender() {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.gender)
  return gender_;
}
inline ::std::string* PlatInfo::release_gender() {
  clear_has_gender();
  if (gender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gender_;
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_gender(::std::string* gender) {
  if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gender_;
  }
  if (gender) {
    set_has_gender();
    gender_ = gender;
  } else {
    clear_has_gender();
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.gender)
}

// optional string nickname = 5;
inline bool PlatInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlatInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlatInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlatInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& PlatInfo::nickname() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.nickname)
  return *nickname_;
}
inline void PlatInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.nickname)
}
inline void PlatInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.nickname)
}
inline void PlatInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.nickname)
}
inline ::std::string* PlatInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.nickname)
  return nickname_;
}
inline ::std::string* PlatInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.nickname)
}

// optional string timestamp = 6;
inline bool PlatInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlatInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlatInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlatInfo::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& PlatInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.timestamp)
  return *timestamp_;
}
inline void PlatInfo::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.timestamp)
}
inline void PlatInfo::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.timestamp)
}
inline void PlatInfo::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.timestamp)
}
inline ::std::string* PlatInfo::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    timestamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.timestamp)
  return timestamp_;
}
inline ::std::string* PlatInfo::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.timestamp)
}

// optional string sign = 8;
inline bool PlatInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlatInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlatInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlatInfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& PlatInfo::sign() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.sign)
  return *sign_;
}
inline void PlatInfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.sign)
}
inline void PlatInfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.sign)
}
inline void PlatInfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.sign)
}
inline ::std::string* PlatInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.sign)
  return sign_;
}
inline ::std::string* PlatInfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.sign)
}

// optional string faceurl = 10;
inline bool PlatInfo::has_faceurl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlatInfo::set_has_faceurl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlatInfo::clear_has_faceurl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlatInfo::clear_faceurl() {
  if (faceurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    faceurl_->clear();
  }
  clear_has_faceurl();
}
inline const ::std::string& PlatInfo::faceurl() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.faceurl)
  return *faceurl_;
}
inline void PlatInfo::set_faceurl(const ::std::string& value) {
  set_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    faceurl_ = new ::std::string;
  }
  faceurl_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.faceurl)
}
inline void PlatInfo::set_faceurl(const char* value) {
  set_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    faceurl_ = new ::std::string;
  }
  faceurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.faceurl)
}
inline void PlatInfo::set_faceurl(const char* value, size_t size) {
  set_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    faceurl_ = new ::std::string;
  }
  faceurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.faceurl)
}
inline ::std::string* PlatInfo::mutable_faceurl() {
  set_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    faceurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.faceurl)
  return faceurl_;
}
inline ::std::string* PlatInfo::release_faceurl() {
  clear_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = faceurl_;
    faceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_faceurl(::std::string* faceurl) {
  if (faceurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete faceurl_;
  }
  if (faceurl) {
    set_has_faceurl();
    faceurl_ = faceurl;
  } else {
    clear_has_faceurl();
    faceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.faceurl)
}

// optional string extdata = 11;
inline bool PlatInfo::has_extdata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlatInfo::set_has_extdata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlatInfo::clear_has_extdata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlatInfo::clear_extdata() {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_->clear();
  }
  clear_has_extdata();
}
inline const ::std::string& PlatInfo::extdata() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.extdata)
  return *extdata_;
}
inline void PlatInfo::set_extdata(const ::std::string& value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.extdata)
}
inline void PlatInfo::set_extdata(const char* value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.extdata)
}
inline void PlatInfo::set_extdata(const char* value, size_t size) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.extdata)
}
inline ::std::string* PlatInfo::mutable_extdata() {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.extdata)
  return extdata_;
}
inline ::std::string* PlatInfo::release_extdata() {
  clear_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extdata_;
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_extdata(::std::string* extdata) {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (extdata) {
    set_has_extdata();
    extdata_ = extdata;
  } else {
    clear_has_extdata();
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.extdata)
}

// optional string uid = 12;
inline bool PlatInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlatInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlatInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlatInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& PlatInfo::uid() const {
  // @@protoc_insertion_point(field_get:Pmd.PlatInfo.uid)
  return *uid_;
}
inline void PlatInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.PlatInfo.uid)
}
inline void PlatInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.PlatInfo.uid)
}
inline void PlatInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.PlatInfo.uid)
}
inline ::std::string* PlatInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.PlatInfo.uid)
  return uid_;
}
inline ::std::string* PlatInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlatInfo::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.PlatInfo.uid)
}

// -------------------------------------------------------------------

// ThirdPlatLoginUserPmd_C

// required .Pmd.PlatInfo platinfo = 1;
inline bool ThirdPlatLoginUserPmd_C::has_platinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThirdPlatLoginUserPmd_C::set_has_platinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThirdPlatLoginUserPmd_C::clear_has_platinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThirdPlatLoginUserPmd_C::clear_platinfo() {
  if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
  clear_has_platinfo();
}
inline const ::Pmd::PlatInfo& ThirdPlatLoginUserPmd_C::platinfo() const {
  // @@protoc_insertion_point(field_get:Pmd.ThirdPlatLoginUserPmd_C.platinfo)
  return platinfo_ != NULL ? *platinfo_ : *default_instance_->platinfo_;
}
inline ::Pmd::PlatInfo* ThirdPlatLoginUserPmd_C::mutable_platinfo() {
  set_has_platinfo();
  if (platinfo_ == NULL) platinfo_ = new ::Pmd::PlatInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.ThirdPlatLoginUserPmd_C.platinfo)
  return platinfo_;
}
inline ::Pmd::PlatInfo* ThirdPlatLoginUserPmd_C::release_platinfo() {
  clear_has_platinfo();
  ::Pmd::PlatInfo* temp = platinfo_;
  platinfo_ = NULL;
  return temp;
}
inline void ThirdPlatLoginUserPmd_C::set_allocated_platinfo(::Pmd::PlatInfo* platinfo) {
  delete platinfo_;
  platinfo_ = platinfo;
  if (platinfo) {
    set_has_platinfo();
  } else {
    clear_has_platinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ThirdPlatLoginUserPmd_C.platinfo)
}

// required uint32 gameid = 2;
inline bool ThirdPlatLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThirdPlatLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThirdPlatLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThirdPlatLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 ThirdPlatLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.ThirdPlatLoginUserPmd_C.gameid)
  return gameid_;
}
inline void ThirdPlatLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ThirdPlatLoginUserPmd_C.gameid)
}

// required string sid = 3;
inline bool ThirdPlatLoginUserPmd_C::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThirdPlatLoginUserPmd_C::set_has_sid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThirdPlatLoginUserPmd_C::clear_has_sid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThirdPlatLoginUserPmd_C::clear_sid() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& ThirdPlatLoginUserPmd_C::sid() const {
  // @@protoc_insertion_point(field_get:Pmd.ThirdPlatLoginUserPmd_C.sid)
  return *sid_;
}
inline void ThirdPlatLoginUserPmd_C::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ThirdPlatLoginUserPmd_C.sid)
}
inline void ThirdPlatLoginUserPmd_C::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ThirdPlatLoginUserPmd_C.sid)
}
inline void ThirdPlatLoginUserPmd_C::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ThirdPlatLoginUserPmd_C.sid)
}
inline ::std::string* ThirdPlatLoginUserPmd_C::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ThirdPlatLoginUserPmd_C.sid)
  return sid_;
}
inline ::std::string* ThirdPlatLoginUserPmd_C::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ThirdPlatLoginUserPmd_C::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ThirdPlatLoginUserPmd_C.sid)
}

// required string uid = 4;
inline bool ThirdPlatLoginUserPmd_C::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThirdPlatLoginUserPmd_C::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThirdPlatLoginUserPmd_C::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThirdPlatLoginUserPmd_C::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& ThirdPlatLoginUserPmd_C::uid() const {
  // @@protoc_insertion_point(field_get:Pmd.ThirdPlatLoginUserPmd_C.uid)
  return *uid_;
}
inline void ThirdPlatLoginUserPmd_C::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ThirdPlatLoginUserPmd_C.uid)
}
inline void ThirdPlatLoginUserPmd_C::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ThirdPlatLoginUserPmd_C.uid)
}
inline void ThirdPlatLoginUserPmd_C::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ThirdPlatLoginUserPmd_C.uid)
}
inline ::std::string* ThirdPlatLoginUserPmd_C::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ThirdPlatLoginUserPmd_C.uid)
  return uid_;
}
inline ::std::string* ThirdPlatLoginUserPmd_C::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ThirdPlatLoginUserPmd_C::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ThirdPlatLoginUserPmd_C.uid)
}

// -------------------------------------------------------------------

// SetServerLangLoginUserPmd_C

// required string lang = 1;
inline bool SetServerLangLoginUserPmd_C::has_lang() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetServerLangLoginUserPmd_C::set_has_lang() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetServerLangLoginUserPmd_C::clear_has_lang() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetServerLangLoginUserPmd_C::clear_lang() {
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_->clear();
  }
  clear_has_lang();
}
inline const ::std::string& SetServerLangLoginUserPmd_C::lang() const {
  // @@protoc_insertion_point(field_get:Pmd.SetServerLangLoginUserPmd_C.lang)
  return *lang_;
}
inline void SetServerLangLoginUserPmd_C::set_lang(const ::std::string& value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.SetServerLangLoginUserPmd_C.lang)
}
inline void SetServerLangLoginUserPmd_C::set_lang(const char* value) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.SetServerLangLoginUserPmd_C.lang)
}
inline void SetServerLangLoginUserPmd_C::set_lang(const char* value, size_t size) {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  lang_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.SetServerLangLoginUserPmd_C.lang)
}
inline ::std::string* SetServerLangLoginUserPmd_C::mutable_lang() {
  set_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lang_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.SetServerLangLoginUserPmd_C.lang)
  return lang_;
}
inline ::std::string* SetServerLangLoginUserPmd_C::release_lang() {
  clear_has_lang();
  if (lang_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lang_;
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SetServerLangLoginUserPmd_C::set_allocated_lang(::std::string* lang) {
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (lang) {
    set_has_lang();
    lang_ = lang;
  } else {
    clear_has_lang();
    lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.SetServerLangLoginUserPmd_C.lang)
}

// required int32 gameregion = 2;
inline bool SetServerLangLoginUserPmd_C::has_gameregion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetServerLangLoginUserPmd_C::set_has_gameregion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetServerLangLoginUserPmd_C::clear_has_gameregion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetServerLangLoginUserPmd_C::clear_gameregion() {
  gameregion_ = 0;
  clear_has_gameregion();
}
inline ::google::protobuf::int32 SetServerLangLoginUserPmd_C::gameregion() const {
  // @@protoc_insertion_point(field_get:Pmd.SetServerLangLoginUserPmd_C.gameregion)
  return gameregion_;
}
inline void SetServerLangLoginUserPmd_C::set_gameregion(::google::protobuf::int32 value) {
  set_has_gameregion();
  gameregion_ = value;
  // @@protoc_insertion_point(field_set:Pmd.SetServerLangLoginUserPmd_C.gameregion)
}

// -------------------------------------------------------------------

// RequestClientIPLoginUserPmd_C

// -------------------------------------------------------------------

// ReturnClientIPLoginUserPmd_S

// required string pstrip = 1;
inline bool ReturnClientIPLoginUserPmd_S::has_pstrip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReturnClientIPLoginUserPmd_S::set_has_pstrip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReturnClientIPLoginUserPmd_S::clear_has_pstrip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReturnClientIPLoginUserPmd_S::clear_pstrip() {
  if (pstrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pstrip_->clear();
  }
  clear_has_pstrip();
}
inline const ::std::string& ReturnClientIPLoginUserPmd_S::pstrip() const {
  // @@protoc_insertion_point(field_get:Pmd.ReturnClientIPLoginUserPmd_S.pstrip)
  return *pstrip_;
}
inline void ReturnClientIPLoginUserPmd_S::set_pstrip(const ::std::string& value) {
  set_has_pstrip();
  if (pstrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pstrip_ = new ::std::string;
  }
  pstrip_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ReturnClientIPLoginUserPmd_S.pstrip)
}
inline void ReturnClientIPLoginUserPmd_S::set_pstrip(const char* value) {
  set_has_pstrip();
  if (pstrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pstrip_ = new ::std::string;
  }
  pstrip_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ReturnClientIPLoginUserPmd_S.pstrip)
}
inline void ReturnClientIPLoginUserPmd_S::set_pstrip(const char* value, size_t size) {
  set_has_pstrip();
  if (pstrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pstrip_ = new ::std::string;
  }
  pstrip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ReturnClientIPLoginUserPmd_S.pstrip)
}
inline ::std::string* ReturnClientIPLoginUserPmd_S::mutable_pstrip() {
  set_has_pstrip();
  if (pstrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pstrip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ReturnClientIPLoginUserPmd_S.pstrip)
  return pstrip_;
}
inline ::std::string* ReturnClientIPLoginUserPmd_S::release_pstrip() {
  clear_has_pstrip();
  if (pstrip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pstrip_;
    pstrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReturnClientIPLoginUserPmd_S::set_allocated_pstrip(::std::string* pstrip) {
  if (pstrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pstrip_;
  }
  if (pstrip) {
    set_has_pstrip();
    pstrip_ = pstrip;
  } else {
    clear_has_pstrip();
    pstrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ReturnClientIPLoginUserPmd_S.pstrip)
}

// -------------------------------------------------------------------

// CheckVersionLoginUserPmd_C

// optional uint32 default_charid = 1;
inline bool CheckVersionLoginUserPmd_C::has_default_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckVersionLoginUserPmd_C::set_has_default_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckVersionLoginUserPmd_C::clear_has_default_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckVersionLoginUserPmd_C::clear_default_charid() {
  default_charid_ = 0u;
  clear_has_default_charid();
}
inline ::google::protobuf::uint32 CheckVersionLoginUserPmd_C::default_charid() const {
  // @@protoc_insertion_point(field_get:Pmd.CheckVersionLoginUserPmd_C.default_charid)
  return default_charid_;
}
inline void CheckVersionLoginUserPmd_C::set_default_charid(::google::protobuf::uint32 value) {
  set_has_default_charid();
  default_charid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.CheckVersionLoginUserPmd_C.default_charid)
}

// optional uint32 version = 2;
inline bool CheckVersionLoginUserPmd_C::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckVersionLoginUserPmd_C::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckVersionLoginUserPmd_C::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckVersionLoginUserPmd_C::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CheckVersionLoginUserPmd_C::version() const {
  // @@protoc_insertion_point(field_get:Pmd.CheckVersionLoginUserPmd_C.version)
  return version_;
}
inline void CheckVersionLoginUserPmd_C::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Pmd.CheckVersionLoginUserPmd_C.version)
}

// -------------------------------------------------------------------

// BehaviorClientVerifyLoginUserPmd_C

// required string account = 1;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& BehaviorClientVerifyLoginUserPmd_C::account() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.account)
  return *account_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.account)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.BehaviorClientVerifyLoginUserPmd_C.account)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.BehaviorClientVerifyLoginUserPmd_C.account)
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.BehaviorClientVerifyLoginUserPmd_C.account)
  return account_;
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.BehaviorClientVerifyLoginUserPmd_C.account)
}

// required string token = 2;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& BehaviorClientVerifyLoginUserPmd_C::token() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.token)
  return *token_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.token)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.BehaviorClientVerifyLoginUserPmd_C.token)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.BehaviorClientVerifyLoginUserPmd_C.token)
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.BehaviorClientVerifyLoginUserPmd_C.token)
  return token_;
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.BehaviorClientVerifyLoginUserPmd_C.token)
}

// required uint32 version = 3;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BehaviorClientVerifyLoginUserPmd_C::version() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.version)
  return version_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.version)
}

// optional uint32 gameid = 4;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 BehaviorClientVerifyLoginUserPmd_C::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.gameid)
  return gameid_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.gameid)
}

// optional string mid = 5;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_mid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_mid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_mid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_mid() {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_->clear();
  }
  clear_has_mid();
}
inline const ::std::string& BehaviorClientVerifyLoginUserPmd_C::mid() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.mid)
  return *mid_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_mid(const ::std::string& value) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.mid)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_mid(const char* value) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.BehaviorClientVerifyLoginUserPmd_C.mid)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_mid(const char* value, size_t size) {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  mid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.BehaviorClientVerifyLoginUserPmd_C.mid)
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::mutable_mid() {
  set_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.BehaviorClientVerifyLoginUserPmd_C.mid)
  return mid_;
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::release_mid() {
  clear_has_mid();
  if (mid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mid_;
    mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_allocated_mid(::std::string* mid) {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (mid) {
    set_has_mid();
    mid_ = mid;
  } else {
    clear_has_mid();
    mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.BehaviorClientVerifyLoginUserPmd_C.mid)
}

// optional uint32 platid = 6;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_platid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_platid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_platid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_platid() {
  platid_ = 0u;
  clear_has_platid();
}
inline ::google::protobuf::uint32 BehaviorClientVerifyLoginUserPmd_C::platid() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.platid)
  return platid_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_platid(::google::protobuf::uint32 value) {
  set_has_platid();
  platid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.platid)
}

// optional uint32 zoneid = 7;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_zoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_zoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 BehaviorClientVerifyLoginUserPmd_C::zoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.zoneid)
  return zoneid_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.zoneid)
}

// optional uint32 gameversion = 8;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_gameversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_gameversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_gameversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_gameversion() {
  gameversion_ = 0u;
  clear_has_gameversion();
}
inline ::google::protobuf::uint32 BehaviorClientVerifyLoginUserPmd_C::gameversion() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.gameversion)
  return gameversion_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_gameversion(::google::protobuf::uint32 value) {
  set_has_gameversion();
  gameversion_ = value;
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.gameversion)
}

// optional string compress = 9;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_compress() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_compress() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_compress() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_compress() {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_->clear();
  }
  clear_has_compress();
}
inline const ::std::string& BehaviorClientVerifyLoginUserPmd_C::compress() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.compress)
  return *compress_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_compress(const ::std::string& value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.compress)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_compress(const char* value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.BehaviorClientVerifyLoginUserPmd_C.compress)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_compress(const char* value, size_t size) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.BehaviorClientVerifyLoginUserPmd_C.compress)
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::mutable_compress() {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.BehaviorClientVerifyLoginUserPmd_C.compress)
  return compress_;
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::release_compress() {
  clear_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = compress_;
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_allocated_compress(::std::string* compress) {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (compress) {
    set_has_compress();
    compress_ = compress;
  } else {
    clear_has_compress();
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.BehaviorClientVerifyLoginUserPmd_C.compress)
}

// optional string encrypt = 10;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_encrypt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_encrypt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_encrypt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_encrypt() {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_->clear();
  }
  clear_has_encrypt();
}
inline const ::std::string& BehaviorClientVerifyLoginUserPmd_C::encrypt() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.encrypt)
  return *encrypt_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_encrypt(const ::std::string& value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.encrypt)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_encrypt(const char* value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.BehaviorClientVerifyLoginUserPmd_C.encrypt)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_encrypt(const char* value, size_t size) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.BehaviorClientVerifyLoginUserPmd_C.encrypt)
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::mutable_encrypt() {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.BehaviorClientVerifyLoginUserPmd_C.encrypt)
  return encrypt_;
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::release_encrypt() {
  clear_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypt_;
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_allocated_encrypt(::std::string* encrypt) {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encrypt) {
    set_has_encrypt();
    encrypt_ = encrypt;
  } else {
    clear_has_encrypt();
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.BehaviorClientVerifyLoginUserPmd_C.encrypt)
}

// optional string encryptkey = 11;
inline bool BehaviorClientVerifyLoginUserPmd_C::has_encryptkey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_has_encryptkey() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_has_encryptkey() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BehaviorClientVerifyLoginUserPmd_C::clear_encryptkey() {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_->clear();
  }
  clear_has_encryptkey();
}
inline const ::std::string& BehaviorClientVerifyLoginUserPmd_C::encryptkey() const {
  // @@protoc_insertion_point(field_get:Pmd.BehaviorClientVerifyLoginUserPmd_C.encryptkey)
  return *encryptkey_;
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_encryptkey(const ::std::string& value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.BehaviorClientVerifyLoginUserPmd_C.encryptkey)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_encryptkey(const char* value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.BehaviorClientVerifyLoginUserPmd_C.encryptkey)
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_encryptkey(const char* value, size_t size) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.BehaviorClientVerifyLoginUserPmd_C.encryptkey)
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::mutable_encryptkey() {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.BehaviorClientVerifyLoginUserPmd_C.encryptkey)
  return encryptkey_;
}
inline ::std::string* BehaviorClientVerifyLoginUserPmd_C::release_encryptkey() {
  clear_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encryptkey_;
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BehaviorClientVerifyLoginUserPmd_C::set_allocated_encryptkey(::std::string* encryptkey) {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (encryptkey) {
    set_has_encryptkey();
    encryptkey_ = encryptkey;
  } else {
    clear_has_encryptkey();
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.BehaviorClientVerifyLoginUserPmd_C.encryptkey)
}

// -------------------------------------------------------------------

// RequestSupoortGameListLoginUserPmd_C

// -------------------------------------------------------------------

// ReturnSupoortGameListLoginUserPmd_S_Game

// optional string gamename = 1;
inline bool ReturnSupoortGameListLoginUserPmd_S_Game::has_gamename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::set_has_gamename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::clear_gamename() {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_->clear();
  }
  clear_has_gamename();
}
inline const ::std::string& ReturnSupoortGameListLoginUserPmd_S_Game::gamename() const {
  // @@protoc_insertion_point(field_get:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game.gamename)
  return *gamename_;
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::set_gamename(const ::std::string& value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game.gamename)
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::set_gamename(const char* value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game.gamename)
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game.gamename)
}
inline ::std::string* ReturnSupoortGameListLoginUserPmd_S_Game::mutable_gamename() {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gamename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game.gamename)
  return gamename_;
}
inline ::std::string* ReturnSupoortGameListLoginUserPmd_S_Game::release_gamename() {
  clear_has_gamename();
  if (gamename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gamename_;
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::set_allocated_gamename(::std::string* gamename) {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (gamename) {
    set_has_gamename();
    gamename_ = gamename;
  } else {
    clear_has_gamename();
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game.gamename)
}

// required uint32 gameid = 2;
inline bool ReturnSupoortGameListLoginUserPmd_S_Game::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 ReturnSupoortGameListLoginUserPmd_S_Game::gameid() const {
  // @@protoc_insertion_point(field_get:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game.gameid)
  return gameid_;
}
inline void ReturnSupoortGameListLoginUserPmd_S_Game::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game.gameid)
}

// -------------------------------------------------------------------

// ReturnSupoortGameListLoginUserPmd_S

// repeated .Pmd.ReturnSupoortGameListLoginUserPmd_S_Game gamelist = 1;
inline int ReturnSupoortGameListLoginUserPmd_S::gamelist_size() const {
  return gamelist_.size();
}
inline void ReturnSupoortGameListLoginUserPmd_S::clear_gamelist() {
  gamelist_.Clear();
}
inline const ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game& ReturnSupoortGameListLoginUserPmd_S::gamelist(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.ReturnSupoortGameListLoginUserPmd_S.gamelist)
  return gamelist_.Get(index);
}
inline ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game* ReturnSupoortGameListLoginUserPmd_S::mutable_gamelist(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.ReturnSupoortGameListLoginUserPmd_S.gamelist)
  return gamelist_.Mutable(index);
}
inline ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game* ReturnSupoortGameListLoginUserPmd_S::add_gamelist() {
  // @@protoc_insertion_point(field_add:Pmd.ReturnSupoortGameListLoginUserPmd_S.gamelist)
  return gamelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game >&
ReturnSupoortGameListLoginUserPmd_S::gamelist() const {
  // @@protoc_insertion_point(field_list:Pmd.ReturnSupoortGameListLoginUserPmd_S.gamelist)
  return gamelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::ReturnSupoortGameListLoginUserPmd_S_Game >*
ReturnSupoortGameListLoginUserPmd_S::mutable_gamelist() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.ReturnSupoortGameListLoginUserPmd_S.gamelist)
  return &gamelist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Pmd::Login_Param> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::Login_Param>() {
  return ::Pmd::Login_Param_descriptor();
}
template <> struct is_proto_enum< ::Pmd::VerifyReturnReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::VerifyReturnReason>() {
  return ::Pmd::VerifyReturnReason_descriptor();
}
template <> struct is_proto_enum< ::Pmd::ZoneState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::ZoneState>() {
  return ::Pmd::ZoneState_descriptor();
}
template <> struct is_proto_enum< ::Pmd::LoginReturnFailReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::LoginReturnFailReason>() {
  return ::Pmd::LoginReturnFailReason_descriptor();
}
template <> struct is_proto_enum< ::Pmd::PlatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::PlatType>() {
  return ::Pmd::PlatType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logincommand_2eproto__INCLUDED
