// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loggercommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loggercommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* Logger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logger_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Logger_Param_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StartUpLoggerRequestLoggerPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartUpLoggerRequestLoggerPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartUpLoggerReturnLoggerPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartUpLoggerReturnLoggerPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameZoneNewLineRequestLoggerPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameZoneNewLineRequestLoggerPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameZoneNewLineWriteLoggerPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameZoneNewLineWriteLoggerPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameZoneHistoryLineRequestLoggerPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameZoneHistoryLineRequestLoggerPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameZoneHistoryLineWriteLoggerPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameZoneHistoryLineWriteLoggerPmd_S_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loggercommand_2eproto() {
  protobuf_AddDesc_loggercommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loggercommand.proto");
  GOOGLE_CHECK(file != NULL);
  Logger_descriptor_ = file->message_type(0);
  static const int Logger_offsets_[1] = {
  };
  Logger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logger_descriptor_,
      Logger::default_instance_,
      Logger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logger));
  Logger_Param_descriptor_ = Logger_descriptor_->enum_type(0);
  StartUpLoggerRequestLoggerPmd_C_descriptor_ = file->message_type(1);
  static const int StartUpLoggerRequestLoggerPmd_C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerRequestLoggerPmd_C, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerRequestLoggerPmd_C, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerRequestLoggerPmd_C, compress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerRequestLoggerPmd_C, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerRequestLoggerPmd_C, encryptkey_),
  };
  StartUpLoggerRequestLoggerPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartUpLoggerRequestLoggerPmd_C_descriptor_,
      StartUpLoggerRequestLoggerPmd_C::default_instance_,
      StartUpLoggerRequestLoggerPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerRequestLoggerPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerRequestLoggerPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartUpLoggerRequestLoggerPmd_C));
  StartUpLoggerReturnLoggerPmd_S_descriptor_ = file->message_type(2);
  static const int StartUpLoggerReturnLoggerPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerReturnLoggerPmd_S, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerReturnLoggerPmd_S, retdesc_),
  };
  StartUpLoggerReturnLoggerPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartUpLoggerReturnLoggerPmd_S_descriptor_,
      StartUpLoggerReturnLoggerPmd_S::default_instance_,
      StartUpLoggerReturnLoggerPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerReturnLoggerPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpLoggerReturnLoggerPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartUpLoggerReturnLoggerPmd_S));
  LineInfo_descriptor_ = file->message_type(3);
  static const int LineInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, classname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, log_),
  };
  LineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineInfo_descriptor_,
      LineInfo::default_instance_,
      LineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineInfo));
  GameZoneNewLineRequestLoggerPmd_C_descriptor_ = file->message_type(4);
  static const int GameZoneNewLineRequestLoggerPmd_C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneNewLineRequestLoggerPmd_C, gamezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneNewLineRequestLoggerPmd_C, filter_),
  };
  GameZoneNewLineRequestLoggerPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameZoneNewLineRequestLoggerPmd_C_descriptor_,
      GameZoneNewLineRequestLoggerPmd_C::default_instance_,
      GameZoneNewLineRequestLoggerPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneNewLineRequestLoggerPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneNewLineRequestLoggerPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameZoneNewLineRequestLoggerPmd_C));
  GameZoneNewLineWriteLoggerPmd_S_descriptor_ = file->message_type(5);
  static const int GameZoneNewLineWriteLoggerPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneNewLineWriteLoggerPmd_S, line_),
  };
  GameZoneNewLineWriteLoggerPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameZoneNewLineWriteLoggerPmd_S_descriptor_,
      GameZoneNewLineWriteLoggerPmd_S::default_instance_,
      GameZoneNewLineWriteLoggerPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneNewLineWriteLoggerPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneNewLineWriteLoggerPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameZoneNewLineWriteLoggerPmd_S));
  GameZoneHistoryLineRequestLoggerPmd_C_descriptor_ = file->message_type(6);
  static const int GameZoneHistoryLineRequestLoggerPmd_C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneHistoryLineRequestLoggerPmd_C, gamezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneHistoryLineRequestLoggerPmd_C, filter_),
  };
  GameZoneHistoryLineRequestLoggerPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameZoneHistoryLineRequestLoggerPmd_C_descriptor_,
      GameZoneHistoryLineRequestLoggerPmd_C::default_instance_,
      GameZoneHistoryLineRequestLoggerPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneHistoryLineRequestLoggerPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneHistoryLineRequestLoggerPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameZoneHistoryLineRequestLoggerPmd_C));
  GameZoneHistoryLineWriteLoggerPmd_S_descriptor_ = file->message_type(7);
  static const int GameZoneHistoryLineWriteLoggerPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneHistoryLineWriteLoggerPmd_S, linelist_),
  };
  GameZoneHistoryLineWriteLoggerPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameZoneHistoryLineWriteLoggerPmd_S_descriptor_,
      GameZoneHistoryLineWriteLoggerPmd_S::default_instance_,
      GameZoneHistoryLineWriteLoggerPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneHistoryLineWriteLoggerPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneHistoryLineWriteLoggerPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameZoneHistoryLineWriteLoggerPmd_S));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loggercommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logger_descriptor_, &Logger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartUpLoggerRequestLoggerPmd_C_descriptor_, &StartUpLoggerRequestLoggerPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartUpLoggerReturnLoggerPmd_S_descriptor_, &StartUpLoggerReturnLoggerPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineInfo_descriptor_, &LineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameZoneNewLineRequestLoggerPmd_C_descriptor_, &GameZoneNewLineRequestLoggerPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameZoneNewLineWriteLoggerPmd_S_descriptor_, &GameZoneNewLineWriteLoggerPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameZoneHistoryLineRequestLoggerPmd_C_descriptor_, &GameZoneHistoryLineRequestLoggerPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameZoneHistoryLineWriteLoggerPmd_S_descriptor_, &GameZoneHistoryLineWriteLoggerPmd_S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loggercommand_2eproto() {
  delete Logger::default_instance_;
  delete Logger_reflection_;
  delete StartUpLoggerRequestLoggerPmd_C::default_instance_;
  delete StartUpLoggerRequestLoggerPmd_C_reflection_;
  delete StartUpLoggerReturnLoggerPmd_S::default_instance_;
  delete StartUpLoggerReturnLoggerPmd_S_reflection_;
  delete LineInfo::default_instance_;
  delete LineInfo_reflection_;
  delete GameZoneNewLineRequestLoggerPmd_C::default_instance_;
  delete GameZoneNewLineRequestLoggerPmd_C_reflection_;
  delete GameZoneNewLineWriteLoggerPmd_S::default_instance_;
  delete GameZoneNewLineWriteLoggerPmd_S_reflection_;
  delete GameZoneHistoryLineRequestLoggerPmd_C::default_instance_;
  delete GameZoneHistoryLineRequestLoggerPmd_C_reflection_;
  delete GameZoneHistoryLineWriteLoggerPmd_S::default_instance_;
  delete GameZoneHistoryLineWriteLoggerPmd_S_reflection_;
}

void protobuf_AddDesc_loggercommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Pmd::protobuf_AddDesc_pmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023loggercommand.proto\022\003Pmd\032\tpmd.proto\"\373\001"
    "\n\006Logger\"\360\001\n\005Param\022#\n\037StartUpLoggerReque"
    "stLoggerPmd_C\020\001\022\"\n\036StartUpLoggerReturnLo"
    "ggerPmd_S\020\002\022%\n!GameZoneNewLineRequestLog"
    "gerPmd_C\020\003\022#\n\037GameZoneNewLineWriteLogger"
    "Pmd_S\020\004\022)\n%GameZoneHistoryLineRequestLog"
    "gerPmd_C\020\005\022\'\n#GameZoneHistoryLineWriteLo"
    "ggerPmd_S\020\006\"v\n\037StartUpLoggerRequestLogge"
    "rPmd_C\022\013\n\003key\030\001 \001(\t\022\017\n\007version\030\002 \001(\r\022\020\n\010"
    "compress\030\003 \001(\t\022\017\n\007encrypt\030\004 \001(\t\022\022\n\nencry"
    "ptkey\030\005 \001(\t\">\n\036StartUpLoggerReturnLogger"
    "Pmd_S\022\013\n\003ret\030\001 \001(\010\022\017\n\007retdesc\030\002 \001(\t\"z\n\010L"
    "ineInfo\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\021\n\tcla"
    "ssname\030\003 \001(\t\022\022\n\nservername\030\004 \001(\t\022\r\n\005leve"
    "l\030\005 \001(\r\022\021\n\ttimestamp\030\006 \001(\r\022\013\n\003log\030\007 \001(\t\""
    "g\n!GameZoneNewLineRequestLoggerPmd_C\022#\n\010"
    "gamezone\030\001 \001(\0132\021.Pmd.GameZoneInfo\022\035\n\006fil"
    "ter\030\002 \001(\0132\r.Pmd.LineInfo\">\n\037GameZoneNewL"
    "ineWriteLoggerPmd_S\022\033\n\004line\030\001 \001(\0132\r.Pmd."
    "LineInfo\"k\n%GameZoneHistoryLineRequestLo"
    "ggerPmd_C\022#\n\010gamezone\030\001 \001(\0132\021.Pmd.GameZo"
    "neInfo\022\035\n\006filter\030\002 \001(\0132\r.Pmd.LineInfo\"F\n"
    "#GameZoneHistoryLineWriteLoggerPmd_S\022\037\n\010"
    "linelist\030\001 \003(\0132\r.Pmd.LineInfo", 949);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loggercommand.proto", &protobuf_RegisterTypes);
  Logger::default_instance_ = new Logger();
  StartUpLoggerRequestLoggerPmd_C::default_instance_ = new StartUpLoggerRequestLoggerPmd_C();
  StartUpLoggerReturnLoggerPmd_S::default_instance_ = new StartUpLoggerReturnLoggerPmd_S();
  LineInfo::default_instance_ = new LineInfo();
  GameZoneNewLineRequestLoggerPmd_C::default_instance_ = new GameZoneNewLineRequestLoggerPmd_C();
  GameZoneNewLineWriteLoggerPmd_S::default_instance_ = new GameZoneNewLineWriteLoggerPmd_S();
  GameZoneHistoryLineRequestLoggerPmd_C::default_instance_ = new GameZoneHistoryLineRequestLoggerPmd_C();
  GameZoneHistoryLineWriteLoggerPmd_S::default_instance_ = new GameZoneHistoryLineWriteLoggerPmd_S();
  Logger::default_instance_->InitAsDefaultInstance();
  StartUpLoggerRequestLoggerPmd_C::default_instance_->InitAsDefaultInstance();
  StartUpLoggerReturnLoggerPmd_S::default_instance_->InitAsDefaultInstance();
  LineInfo::default_instance_->InitAsDefaultInstance();
  GameZoneNewLineRequestLoggerPmd_C::default_instance_->InitAsDefaultInstance();
  GameZoneNewLineWriteLoggerPmd_S::default_instance_->InitAsDefaultInstance();
  GameZoneHistoryLineRequestLoggerPmd_C::default_instance_->InitAsDefaultInstance();
  GameZoneHistoryLineWriteLoggerPmd_S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loggercommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loggercommand_2eproto {
  StaticDescriptorInitializer_loggercommand_2eproto() {
    protobuf_AddDesc_loggercommand_2eproto();
  }
} static_descriptor_initializer_loggercommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Logger_Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logger_Param_descriptor_;
}
bool Logger_Param_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Logger_Param Logger::StartUpLoggerRequestLoggerPmd_C;
const Logger_Param Logger::StartUpLoggerReturnLoggerPmd_S;
const Logger_Param Logger::GameZoneNewLineRequestLoggerPmd_C;
const Logger_Param Logger::GameZoneNewLineWriteLoggerPmd_S;
const Logger_Param Logger::GameZoneHistoryLineRequestLoggerPmd_C;
const Logger_Param Logger::GameZoneHistoryLineWriteLoggerPmd_S;
const Logger_Param Logger::Param_MIN;
const Logger_Param Logger::Param_MAX;
const int Logger::Param_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Logger::Logger()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.Logger)
}

void Logger::InitAsDefaultInstance() {
}

Logger::Logger(const Logger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.Logger)
}

void Logger::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logger::~Logger() {
  // @@protoc_insertion_point(destructor:Pmd.Logger)
  SharedDtor();
}

void Logger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Logger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logger_descriptor_;
}

const Logger& Logger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loggercommand_2eproto();
  return *default_instance_;
}

Logger* Logger::default_instance_ = NULL;

Logger* Logger::New() const {
  return new Logger;
}

void Logger::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.Logger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.Logger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.Logger)
  return false;
#undef DO_
}

void Logger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.Logger)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.Logger)
}

::google::protobuf::uint8* Logger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.Logger)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.Logger)
  return target;
}

int Logger::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logger::MergeFrom(const Logger& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logger::CopyFrom(const Logger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logger::IsInitialized() const {

  return true;
}

void Logger::Swap(Logger* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logger_descriptor_;
  metadata.reflection = Logger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartUpLoggerRequestLoggerPmd_C::kKeyFieldNumber;
const int StartUpLoggerRequestLoggerPmd_C::kVersionFieldNumber;
const int StartUpLoggerRequestLoggerPmd_C::kCompressFieldNumber;
const int StartUpLoggerRequestLoggerPmd_C::kEncryptFieldNumber;
const int StartUpLoggerRequestLoggerPmd_C::kEncryptkeyFieldNumber;
#endif  // !_MSC_VER

StartUpLoggerRequestLoggerPmd_C::StartUpLoggerRequestLoggerPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StartUpLoggerRequestLoggerPmd_C)
}

void StartUpLoggerRequestLoggerPmd_C::InitAsDefaultInstance() {
}

StartUpLoggerRequestLoggerPmd_C::StartUpLoggerRequestLoggerPmd_C(const StartUpLoggerRequestLoggerPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StartUpLoggerRequestLoggerPmd_C)
}

void StartUpLoggerRequestLoggerPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartUpLoggerRequestLoggerPmd_C::~StartUpLoggerRequestLoggerPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.StartUpLoggerRequestLoggerPmd_C)
  SharedDtor();
}

void StartUpLoggerRequestLoggerPmd_C::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void StartUpLoggerRequestLoggerPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartUpLoggerRequestLoggerPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartUpLoggerRequestLoggerPmd_C_descriptor_;
}

const StartUpLoggerRequestLoggerPmd_C& StartUpLoggerRequestLoggerPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loggercommand_2eproto();
  return *default_instance_;
}

StartUpLoggerRequestLoggerPmd_C* StartUpLoggerRequestLoggerPmd_C::default_instance_ = NULL;

StartUpLoggerRequestLoggerPmd_C* StartUpLoggerRequestLoggerPmd_C::New() const {
  return new StartUpLoggerRequestLoggerPmd_C;
}

void StartUpLoggerRequestLoggerPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    version_ = 0u;
    if (has_compress()) {
      if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compress_->clear();
      }
    }
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypt_->clear();
      }
    }
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encryptkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartUpLoggerRequestLoggerPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StartUpLoggerRequestLoggerPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compress;
        break;
      }

      // optional string compress = 3;
      case 3: {
        if (tag == 26) {
         parse_compress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compress().data(), this->compress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 4;
      case 4: {
        if (tag == 34) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encrypt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_encryptkey;
        break;
      }

      // optional string encryptkey = 5;
      case 5: {
        if (tag == 42) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encryptkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StartUpLoggerRequestLoggerPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StartUpLoggerRequestLoggerPmd_C)
  return false;
#undef DO_
}

void StartUpLoggerRequestLoggerPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StartUpLoggerRequestLoggerPmd_C)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string compress = 3;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->compress(), output);
  }

  // optional string encrypt = 4;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->encrypt(), output);
  }

  // optional string encryptkey = 5;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StartUpLoggerRequestLoggerPmd_C)
}

::google::protobuf::uint8* StartUpLoggerRequestLoggerPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StartUpLoggerRequestLoggerPmd_C)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional string compress = 3;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->compress(), target);
  }

  // optional string encrypt = 4;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->encrypt(), target);
  }

  // optional string encryptkey = 5;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StartUpLoggerRequestLoggerPmd_C)
  return target;
}

int StartUpLoggerRequestLoggerPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string compress = 3;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compress());
    }

    // optional string encrypt = 4;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

    // optional string encryptkey = 5;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartUpLoggerRequestLoggerPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartUpLoggerRequestLoggerPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartUpLoggerRequestLoggerPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartUpLoggerRequestLoggerPmd_C::MergeFrom(const StartUpLoggerRequestLoggerPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_compress()) {
      set_compress(from.compress());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartUpLoggerRequestLoggerPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartUpLoggerRequestLoggerPmd_C::CopyFrom(const StartUpLoggerRequestLoggerPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpLoggerRequestLoggerPmd_C::IsInitialized() const {

  return true;
}

void StartUpLoggerRequestLoggerPmd_C::Swap(StartUpLoggerRequestLoggerPmd_C* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(version_, other->version_);
    std::swap(compress_, other->compress_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartUpLoggerRequestLoggerPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartUpLoggerRequestLoggerPmd_C_descriptor_;
  metadata.reflection = StartUpLoggerRequestLoggerPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartUpLoggerReturnLoggerPmd_S::kRetFieldNumber;
const int StartUpLoggerReturnLoggerPmd_S::kRetdescFieldNumber;
#endif  // !_MSC_VER

StartUpLoggerReturnLoggerPmd_S::StartUpLoggerReturnLoggerPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StartUpLoggerReturnLoggerPmd_S)
}

void StartUpLoggerReturnLoggerPmd_S::InitAsDefaultInstance() {
}

StartUpLoggerReturnLoggerPmd_S::StartUpLoggerReturnLoggerPmd_S(const StartUpLoggerReturnLoggerPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StartUpLoggerReturnLoggerPmd_S)
}

void StartUpLoggerReturnLoggerPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = false;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartUpLoggerReturnLoggerPmd_S::~StartUpLoggerReturnLoggerPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StartUpLoggerReturnLoggerPmd_S)
  SharedDtor();
}

void StartUpLoggerReturnLoggerPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void StartUpLoggerReturnLoggerPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartUpLoggerReturnLoggerPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartUpLoggerReturnLoggerPmd_S_descriptor_;
}

const StartUpLoggerReturnLoggerPmd_S& StartUpLoggerReturnLoggerPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loggercommand_2eproto();
  return *default_instance_;
}

StartUpLoggerReturnLoggerPmd_S* StartUpLoggerReturnLoggerPmd_S::default_instance_ = NULL;

StartUpLoggerReturnLoggerPmd_S* StartUpLoggerReturnLoggerPmd_S::New() const {
  return new StartUpLoggerReturnLoggerPmd_S;
}

void StartUpLoggerReturnLoggerPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ret_ = false;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartUpLoggerReturnLoggerPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StartUpLoggerReturnLoggerPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StartUpLoggerReturnLoggerPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StartUpLoggerReturnLoggerPmd_S)
  return false;
#undef DO_
}

void StartUpLoggerReturnLoggerPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StartUpLoggerReturnLoggerPmd_S)
  // optional bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StartUpLoggerReturnLoggerPmd_S)
}

::google::protobuf::uint8* StartUpLoggerReturnLoggerPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StartUpLoggerReturnLoggerPmd_S)
  // optional bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StartUpLoggerReturnLoggerPmd_S)
  return target;
}

int StartUpLoggerReturnLoggerPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartUpLoggerReturnLoggerPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartUpLoggerReturnLoggerPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartUpLoggerReturnLoggerPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartUpLoggerReturnLoggerPmd_S::MergeFrom(const StartUpLoggerReturnLoggerPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartUpLoggerReturnLoggerPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartUpLoggerReturnLoggerPmd_S::CopyFrom(const StartUpLoggerReturnLoggerPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpLoggerReturnLoggerPmd_S::IsInitialized() const {

  return true;
}

void StartUpLoggerReturnLoggerPmd_S::Swap(StartUpLoggerReturnLoggerPmd_S* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartUpLoggerReturnLoggerPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartUpLoggerReturnLoggerPmd_S_descriptor_;
  metadata.reflection = StartUpLoggerReturnLoggerPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineInfo::kIdFieldNumber;
const int LineInfo::kNameFieldNumber;
const int LineInfo::kClassnameFieldNumber;
const int LineInfo::kServernameFieldNumber;
const int LineInfo::kLevelFieldNumber;
const int LineInfo::kTimestampFieldNumber;
const int LineInfo::kLogFieldNumber;
#endif  // !_MSC_VER

LineInfo::LineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.LineInfo)
}

void LineInfo::InitAsDefaultInstance() {
}

LineInfo::LineInfo(const LineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.LineInfo)
}

void LineInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  timestamp_ = 0u;
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineInfo::~LineInfo() {
  // @@protoc_insertion_point(destructor:Pmd.LineInfo)
  SharedDtor();
}

void LineInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete classname_;
  }
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void LineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineInfo_descriptor_;
}

const LineInfo& LineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loggercommand_2eproto();
  return *default_instance_;
}

LineInfo* LineInfo::default_instance_ = NULL;

LineInfo* LineInfo::New() const {
  return new LineInfo;
}

void LineInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LineInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(level_, timestamp_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        classname_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.LineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_classname;
        break;
      }

      // optional string classname = 3;
      case 3: {
        if (tag == 26) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classname().data(), this->classname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "classname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_servername;
        break;
      }

      // optional string servername = 4;
      case 4: {
        if (tag == 34) {
         parse_servername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 6;
      case 6: {
        if (tag == 48) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_log;
        break;
      }

      // optional string log = 7;
      case 7: {
        if (tag == 58) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.LineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.LineInfo)
  return false;
#undef DO_
}

void LineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.LineInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string classname = 3;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), this->classname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "classname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->classname(), output);
  }

  // optional string servername = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->servername(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }

  // optional string log = 7;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.LineInfo)
}

::google::protobuf::uint8* LineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.LineInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string classname = 3;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), this->classname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "classname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->classname(), target);
  }

  // optional string servername = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }

  // optional string log = 7;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.LineInfo)
  return target;
}

int LineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 3;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string servername = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional string log = 7;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineInfo::MergeFrom(const LineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineInfo::CopyFrom(const LineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineInfo::IsInitialized() const {

  return true;
}

void LineInfo::Swap(LineInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(servername_, other->servername_);
    std::swap(level_, other->level_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineInfo_descriptor_;
  metadata.reflection = LineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameZoneNewLineRequestLoggerPmd_C::kGamezoneFieldNumber;
const int GameZoneNewLineRequestLoggerPmd_C::kFilterFieldNumber;
#endif  // !_MSC_VER

GameZoneNewLineRequestLoggerPmd_C::GameZoneNewLineRequestLoggerPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GameZoneNewLineRequestLoggerPmd_C)
}

void GameZoneNewLineRequestLoggerPmd_C::InitAsDefaultInstance() {
  gamezone_ = const_cast< ::Pmd::GameZoneInfo*>(&::Pmd::GameZoneInfo::default_instance());
  filter_ = const_cast< ::Pmd::LineInfo*>(&::Pmd::LineInfo::default_instance());
}

GameZoneNewLineRequestLoggerPmd_C::GameZoneNewLineRequestLoggerPmd_C(const GameZoneNewLineRequestLoggerPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GameZoneNewLineRequestLoggerPmd_C)
}

void GameZoneNewLineRequestLoggerPmd_C::SharedCtor() {
  _cached_size_ = 0;
  gamezone_ = NULL;
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameZoneNewLineRequestLoggerPmd_C::~GameZoneNewLineRequestLoggerPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.GameZoneNewLineRequestLoggerPmd_C)
  SharedDtor();
}

void GameZoneNewLineRequestLoggerPmd_C::SharedDtor() {
  if (this != default_instance_) {
    delete gamezone_;
    delete filter_;
  }
}

void GameZoneNewLineRequestLoggerPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameZoneNewLineRequestLoggerPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameZoneNewLineRequestLoggerPmd_C_descriptor_;
}

const GameZoneNewLineRequestLoggerPmd_C& GameZoneNewLineRequestLoggerPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loggercommand_2eproto();
  return *default_instance_;
}

GameZoneNewLineRequestLoggerPmd_C* GameZoneNewLineRequestLoggerPmd_C::default_instance_ = NULL;

GameZoneNewLineRequestLoggerPmd_C* GameZoneNewLineRequestLoggerPmd_C::New() const {
  return new GameZoneNewLineRequestLoggerPmd_C;
}

void GameZoneNewLineRequestLoggerPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gamezone()) {
      if (gamezone_ != NULL) gamezone_->::Pmd::GameZoneInfo::Clear();
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::Pmd::LineInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameZoneNewLineRequestLoggerPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GameZoneNewLineRequestLoggerPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.GameZoneInfo gamezone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamezone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }

      // optional .Pmd.LineInfo filter = 2;
      case 2: {
        if (tag == 18) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GameZoneNewLineRequestLoggerPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GameZoneNewLineRequestLoggerPmd_C)
  return false;
#undef DO_
}

void GameZoneNewLineRequestLoggerPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GameZoneNewLineRequestLoggerPmd_C)
  // optional .Pmd.GameZoneInfo gamezone = 1;
  if (has_gamezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamezone(), output);
  }

  // optional .Pmd.LineInfo filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GameZoneNewLineRequestLoggerPmd_C)
}

::google::protobuf::uint8* GameZoneNewLineRequestLoggerPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GameZoneNewLineRequestLoggerPmd_C)
  // optional .Pmd.GameZoneInfo gamezone = 1;
  if (has_gamezone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamezone(), target);
  }

  // optional .Pmd.LineInfo filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GameZoneNewLineRequestLoggerPmd_C)
  return target;
}

int GameZoneNewLineRequestLoggerPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.GameZoneInfo gamezone = 1;
    if (has_gamezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamezone());
    }

    // optional .Pmd.LineInfo filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameZoneNewLineRequestLoggerPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameZoneNewLineRequestLoggerPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameZoneNewLineRequestLoggerPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameZoneNewLineRequestLoggerPmd_C::MergeFrom(const GameZoneNewLineRequestLoggerPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamezone()) {
      mutable_gamezone()->::Pmd::GameZoneInfo::MergeFrom(from.gamezone());
    }
    if (from.has_filter()) {
      mutable_filter()->::Pmd::LineInfo::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameZoneNewLineRequestLoggerPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameZoneNewLineRequestLoggerPmd_C::CopyFrom(const GameZoneNewLineRequestLoggerPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameZoneNewLineRequestLoggerPmd_C::IsInitialized() const {

  return true;
}

void GameZoneNewLineRequestLoggerPmd_C::Swap(GameZoneNewLineRequestLoggerPmd_C* other) {
  if (other != this) {
    std::swap(gamezone_, other->gamezone_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameZoneNewLineRequestLoggerPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameZoneNewLineRequestLoggerPmd_C_descriptor_;
  metadata.reflection = GameZoneNewLineRequestLoggerPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameZoneNewLineWriteLoggerPmd_S::kLineFieldNumber;
#endif  // !_MSC_VER

GameZoneNewLineWriteLoggerPmd_S::GameZoneNewLineWriteLoggerPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GameZoneNewLineWriteLoggerPmd_S)
}

void GameZoneNewLineWriteLoggerPmd_S::InitAsDefaultInstance() {
  line_ = const_cast< ::Pmd::LineInfo*>(&::Pmd::LineInfo::default_instance());
}

GameZoneNewLineWriteLoggerPmd_S::GameZoneNewLineWriteLoggerPmd_S(const GameZoneNewLineWriteLoggerPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GameZoneNewLineWriteLoggerPmd_S)
}

void GameZoneNewLineWriteLoggerPmd_S::SharedCtor() {
  _cached_size_ = 0;
  line_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameZoneNewLineWriteLoggerPmd_S::~GameZoneNewLineWriteLoggerPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.GameZoneNewLineWriteLoggerPmd_S)
  SharedDtor();
}

void GameZoneNewLineWriteLoggerPmd_S::SharedDtor() {
  if (this != default_instance_) {
    delete line_;
  }
}

void GameZoneNewLineWriteLoggerPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameZoneNewLineWriteLoggerPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameZoneNewLineWriteLoggerPmd_S_descriptor_;
}

const GameZoneNewLineWriteLoggerPmd_S& GameZoneNewLineWriteLoggerPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loggercommand_2eproto();
  return *default_instance_;
}

GameZoneNewLineWriteLoggerPmd_S* GameZoneNewLineWriteLoggerPmd_S::default_instance_ = NULL;

GameZoneNewLineWriteLoggerPmd_S* GameZoneNewLineWriteLoggerPmd_S::New() const {
  return new GameZoneNewLineWriteLoggerPmd_S;
}

void GameZoneNewLineWriteLoggerPmd_S::Clear() {
  if (has_line()) {
    if (line_ != NULL) line_->::Pmd::LineInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameZoneNewLineWriteLoggerPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GameZoneNewLineWriteLoggerPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.LineInfo line = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GameZoneNewLineWriteLoggerPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GameZoneNewLineWriteLoggerPmd_S)
  return false;
#undef DO_
}

void GameZoneNewLineWriteLoggerPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GameZoneNewLineWriteLoggerPmd_S)
  // optional .Pmd.LineInfo line = 1;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GameZoneNewLineWriteLoggerPmd_S)
}

::google::protobuf::uint8* GameZoneNewLineWriteLoggerPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GameZoneNewLineWriteLoggerPmd_S)
  // optional .Pmd.LineInfo line = 1;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GameZoneNewLineWriteLoggerPmd_S)
  return target;
}

int GameZoneNewLineWriteLoggerPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.LineInfo line = 1;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameZoneNewLineWriteLoggerPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameZoneNewLineWriteLoggerPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameZoneNewLineWriteLoggerPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameZoneNewLineWriteLoggerPmd_S::MergeFrom(const GameZoneNewLineWriteLoggerPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line()) {
      mutable_line()->::Pmd::LineInfo::MergeFrom(from.line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameZoneNewLineWriteLoggerPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameZoneNewLineWriteLoggerPmd_S::CopyFrom(const GameZoneNewLineWriteLoggerPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameZoneNewLineWriteLoggerPmd_S::IsInitialized() const {

  return true;
}

void GameZoneNewLineWriteLoggerPmd_S::Swap(GameZoneNewLineWriteLoggerPmd_S* other) {
  if (other != this) {
    std::swap(line_, other->line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameZoneNewLineWriteLoggerPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameZoneNewLineWriteLoggerPmd_S_descriptor_;
  metadata.reflection = GameZoneNewLineWriteLoggerPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameZoneHistoryLineRequestLoggerPmd_C::kGamezoneFieldNumber;
const int GameZoneHistoryLineRequestLoggerPmd_C::kFilterFieldNumber;
#endif  // !_MSC_VER

GameZoneHistoryLineRequestLoggerPmd_C::GameZoneHistoryLineRequestLoggerPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
}

void GameZoneHistoryLineRequestLoggerPmd_C::InitAsDefaultInstance() {
  gamezone_ = const_cast< ::Pmd::GameZoneInfo*>(&::Pmd::GameZoneInfo::default_instance());
  filter_ = const_cast< ::Pmd::LineInfo*>(&::Pmd::LineInfo::default_instance());
}

GameZoneHistoryLineRequestLoggerPmd_C::GameZoneHistoryLineRequestLoggerPmd_C(const GameZoneHistoryLineRequestLoggerPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
}

void GameZoneHistoryLineRequestLoggerPmd_C::SharedCtor() {
  _cached_size_ = 0;
  gamezone_ = NULL;
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameZoneHistoryLineRequestLoggerPmd_C::~GameZoneHistoryLineRequestLoggerPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
  SharedDtor();
}

void GameZoneHistoryLineRequestLoggerPmd_C::SharedDtor() {
  if (this != default_instance_) {
    delete gamezone_;
    delete filter_;
  }
}

void GameZoneHistoryLineRequestLoggerPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameZoneHistoryLineRequestLoggerPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameZoneHistoryLineRequestLoggerPmd_C_descriptor_;
}

const GameZoneHistoryLineRequestLoggerPmd_C& GameZoneHistoryLineRequestLoggerPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loggercommand_2eproto();
  return *default_instance_;
}

GameZoneHistoryLineRequestLoggerPmd_C* GameZoneHistoryLineRequestLoggerPmd_C::default_instance_ = NULL;

GameZoneHistoryLineRequestLoggerPmd_C* GameZoneHistoryLineRequestLoggerPmd_C::New() const {
  return new GameZoneHistoryLineRequestLoggerPmd_C;
}

void GameZoneHistoryLineRequestLoggerPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gamezone()) {
      if (gamezone_ != NULL) gamezone_->::Pmd::GameZoneInfo::Clear();
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::Pmd::LineInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameZoneHistoryLineRequestLoggerPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.GameZoneInfo gamezone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamezone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }

      // optional .Pmd.LineInfo filter = 2;
      case 2: {
        if (tag == 18) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
  return false;
#undef DO_
}

void GameZoneHistoryLineRequestLoggerPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
  // optional .Pmd.GameZoneInfo gamezone = 1;
  if (has_gamezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamezone(), output);
  }

  // optional .Pmd.LineInfo filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
}

::google::protobuf::uint8* GameZoneHistoryLineRequestLoggerPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
  // optional .Pmd.GameZoneInfo gamezone = 1;
  if (has_gamezone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamezone(), target);
  }

  // optional .Pmd.LineInfo filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GameZoneHistoryLineRequestLoggerPmd_C)
  return target;
}

int GameZoneHistoryLineRequestLoggerPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.GameZoneInfo gamezone = 1;
    if (has_gamezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamezone());
    }

    // optional .Pmd.LineInfo filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameZoneHistoryLineRequestLoggerPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameZoneHistoryLineRequestLoggerPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameZoneHistoryLineRequestLoggerPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameZoneHistoryLineRequestLoggerPmd_C::MergeFrom(const GameZoneHistoryLineRequestLoggerPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamezone()) {
      mutable_gamezone()->::Pmd::GameZoneInfo::MergeFrom(from.gamezone());
    }
    if (from.has_filter()) {
      mutable_filter()->::Pmd::LineInfo::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameZoneHistoryLineRequestLoggerPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameZoneHistoryLineRequestLoggerPmd_C::CopyFrom(const GameZoneHistoryLineRequestLoggerPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameZoneHistoryLineRequestLoggerPmd_C::IsInitialized() const {

  return true;
}

void GameZoneHistoryLineRequestLoggerPmd_C::Swap(GameZoneHistoryLineRequestLoggerPmd_C* other) {
  if (other != this) {
    std::swap(gamezone_, other->gamezone_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameZoneHistoryLineRequestLoggerPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameZoneHistoryLineRequestLoggerPmd_C_descriptor_;
  metadata.reflection = GameZoneHistoryLineRequestLoggerPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameZoneHistoryLineWriteLoggerPmd_S::kLinelistFieldNumber;
#endif  // !_MSC_VER

GameZoneHistoryLineWriteLoggerPmd_S::GameZoneHistoryLineWriteLoggerPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
}

void GameZoneHistoryLineWriteLoggerPmd_S::InitAsDefaultInstance() {
}

GameZoneHistoryLineWriteLoggerPmd_S::GameZoneHistoryLineWriteLoggerPmd_S(const GameZoneHistoryLineWriteLoggerPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
}

void GameZoneHistoryLineWriteLoggerPmd_S::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameZoneHistoryLineWriteLoggerPmd_S::~GameZoneHistoryLineWriteLoggerPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
  SharedDtor();
}

void GameZoneHistoryLineWriteLoggerPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameZoneHistoryLineWriteLoggerPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameZoneHistoryLineWriteLoggerPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameZoneHistoryLineWriteLoggerPmd_S_descriptor_;
}

const GameZoneHistoryLineWriteLoggerPmd_S& GameZoneHistoryLineWriteLoggerPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loggercommand_2eproto();
  return *default_instance_;
}

GameZoneHistoryLineWriteLoggerPmd_S* GameZoneHistoryLineWriteLoggerPmd_S::default_instance_ = NULL;

GameZoneHistoryLineWriteLoggerPmd_S* GameZoneHistoryLineWriteLoggerPmd_S::New() const {
  return new GameZoneHistoryLineWriteLoggerPmd_S;
}

void GameZoneHistoryLineWriteLoggerPmd_S::Clear() {
  linelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameZoneHistoryLineWriteLoggerPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.LineInfo linelist = 1;
      case 1: {
        if (tag == 10) {
         parse_linelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_linelist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
  return false;
#undef DO_
}

void GameZoneHistoryLineWriteLoggerPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
  // repeated .Pmd.LineInfo linelist = 1;
  for (int i = 0; i < this->linelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
}

::google::protobuf::uint8* GameZoneHistoryLineWriteLoggerPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
  // repeated .Pmd.LineInfo linelist = 1;
  for (int i = 0; i < this->linelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GameZoneHistoryLineWriteLoggerPmd_S)
  return target;
}

int GameZoneHistoryLineWriteLoggerPmd_S::ByteSize() const {
  int total_size = 0;

  // repeated .Pmd.LineInfo linelist = 1;
  total_size += 1 * this->linelist_size();
  for (int i = 0; i < this->linelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameZoneHistoryLineWriteLoggerPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameZoneHistoryLineWriteLoggerPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameZoneHistoryLineWriteLoggerPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameZoneHistoryLineWriteLoggerPmd_S::MergeFrom(const GameZoneHistoryLineWriteLoggerPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  linelist_.MergeFrom(from.linelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameZoneHistoryLineWriteLoggerPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameZoneHistoryLineWriteLoggerPmd_S::CopyFrom(const GameZoneHistoryLineWriteLoggerPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameZoneHistoryLineWriteLoggerPmd_S::IsInitialized() const {

  return true;
}

void GameZoneHistoryLineWriteLoggerPmd_S::Swap(GameZoneHistoryLineWriteLoggerPmd_S* other) {
  if (other != this) {
    linelist_.Swap(&other->linelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameZoneHistoryLineWriteLoggerPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameZoneHistoryLineWriteLoggerPmd_S_descriptor_;
  metadata.reflection = GameZoneHistoryLineWriteLoggerPmd_S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
