// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitorpmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monitorpmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* Monitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Monitor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Monitor_Param_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StartUpGameRequestMonitorPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartUpGameRequestMonitorPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartUpGameReturnMonitorPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartUpGameReturnMonitorPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* SupportGameZoneListSdkPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupportGameZoneListSdkPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameZoneServerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameZoneServerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshServerStateListMonitorPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshServerStateListMonitorPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshServerStateMonitorPmd_CSC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshServerStateMonitorPmd_CSC_reflection_ = NULL;
const ::google::protobuf::Descriptor* StRequestNewbeeCardMonitorUserCmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StRequestNewbeeCardMonitorUserCmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* StServerShutdownMonitorUserCmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StServerShutdownMonitorUserCmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* StServerStartupMonitorUserCmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StServerStartupMonitorUserCmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* StServerListMonitorUserCmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StServerListMonitorUserCmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* StMonitorServerMessageMonitorUserCmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StMonitorServerMessageMonitorUserCmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCmdExitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCmdExitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StGameClientCmdExitMonitorUserCmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StGameClientCmdExitMonitorUserCmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* StErrorLogMonitorUserCmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StErrorLogMonitorUserCmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPackageCodeMonitorPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPackageCodeMonitorPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUsePackageCodeMonitorPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUsePackageCodeMonitorPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestInsertPackageCodeMonitorPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestInsertPackageCodeMonitorPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestResetPackageCodeMonitorPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestResetPackageCodeMonitorPmd_CS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerInfoState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MonitorServerMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_monitorpmd_2eproto() {
  protobuf_AddDesc_monitorpmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "monitorpmd.proto");
  GOOGLE_CHECK(file != NULL);
  Monitor_descriptor_ = file->message_type(0);
  static const int Monitor_offsets_[1] = {
  };
  Monitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Monitor_descriptor_,
      Monitor::default_instance_,
      Monitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Monitor));
  Monitor_Param_descriptor_ = Monitor_descriptor_->enum_type(0);
  StartUpGameRequestMonitorPmd_C_descriptor_ = file->message_type(1);
  static const int StartUpGameRequestMonitorPmd_C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestMonitorPmd_C, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestMonitorPmd_C, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestMonitorPmd_C, compress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestMonitorPmd_C, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestMonitorPmd_C, encryptkey_),
  };
  StartUpGameRequestMonitorPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartUpGameRequestMonitorPmd_C_descriptor_,
      StartUpGameRequestMonitorPmd_C::default_instance_,
      StartUpGameRequestMonitorPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestMonitorPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameRequestMonitorPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartUpGameRequestMonitorPmd_C));
  StartUpGameReturnMonitorPmd_S_descriptor_ = file->message_type(2);
  static const int StartUpGameReturnMonitorPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameReturnMonitorPmd_S, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameReturnMonitorPmd_S, retdesc_),
  };
  StartUpGameReturnMonitorPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartUpGameReturnMonitorPmd_S_descriptor_,
      StartUpGameReturnMonitorPmd_S::default_instance_,
      StartUpGameReturnMonitorPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameReturnMonitorPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartUpGameReturnMonitorPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartUpGameReturnMonitorPmd_S));
  SupportGameZoneListSdkPmd_C_descriptor_ = file->message_type(3);
  static const int SupportGameZoneListSdkPmd_C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportGameZoneListSdkPmd_C, gamezonelist_),
  };
  SupportGameZoneListSdkPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SupportGameZoneListSdkPmd_C_descriptor_,
      SupportGameZoneListSdkPmd_C::default_instance_,
      SupportGameZoneListSdkPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportGameZoneListSdkPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportGameZoneListSdkPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SupportGameZoneListSdkPmd_C));
  ServerState_descriptor_ = file->message_type(4);
  static const int ServerState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, onlinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, name_),
  };
  ServerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerState_descriptor_,
      ServerState::default_instance_,
      ServerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerState));
  GameZoneServerState_descriptor_ = file->message_type(5);
  static const int GameZoneServerState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneServerState, gamezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneServerState, statelist_),
  };
  GameZoneServerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameZoneServerState_descriptor_,
      GameZoneServerState::default_instance_,
      GameZoneServerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneServerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneServerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameZoneServerState));
  RefreshServerStateListMonitorPmd_S_descriptor_ = file->message_type(6);
  static const int RefreshServerStateListMonitorPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshServerStateListMonitorPmd_S, statelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshServerStateListMonitorPmd_S, reset_),
  };
  RefreshServerStateListMonitorPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshServerStateListMonitorPmd_S_descriptor_,
      RefreshServerStateListMonitorPmd_S::default_instance_,
      RefreshServerStateListMonitorPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshServerStateListMonitorPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshServerStateListMonitorPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshServerStateListMonitorPmd_S));
  RefreshServerStateMonitorPmd_CSC_descriptor_ = file->message_type(7);
  static const int RefreshServerStateMonitorPmd_CSC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshServerStateMonitorPmd_CSC, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshServerStateMonitorPmd_CSC, reset_),
  };
  RefreshServerStateMonitorPmd_CSC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshServerStateMonitorPmd_CSC_descriptor_,
      RefreshServerStateMonitorPmd_CSC::default_instance_,
      RefreshServerStateMonitorPmd_CSC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshServerStateMonitorPmd_CSC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshServerStateMonitorPmd_CSC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshServerStateMonitorPmd_CSC));
  StRequestNewbeeCardMonitorUserCmd_C_descriptor_ = file->message_type(8);
  static const int StRequestNewbeeCardMonitorUserCmd_C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRequestNewbeeCardMonitorUserCmd_C, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRequestNewbeeCardMonitorUserCmd_C, keystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRequestNewbeeCardMonitorUserCmd_C, mutextype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRequestNewbeeCardMonitorUserCmd_C, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRequestNewbeeCardMonitorUserCmd_C, mobile_),
  };
  StRequestNewbeeCardMonitorUserCmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StRequestNewbeeCardMonitorUserCmd_C_descriptor_,
      StRequestNewbeeCardMonitorUserCmd_C::default_instance_,
      StRequestNewbeeCardMonitorUserCmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRequestNewbeeCardMonitorUserCmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StRequestNewbeeCardMonitorUserCmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StRequestNewbeeCardMonitorUserCmd_C));
  StServerShutdownMonitorUserCmd_S_descriptor_ = file->message_type(9);
  static const int StServerShutdownMonitorUserCmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerShutdownMonitorUserCmd_S, data_),
  };
  StServerShutdownMonitorUserCmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StServerShutdownMonitorUserCmd_S_descriptor_,
      StServerShutdownMonitorUserCmd_S::default_instance_,
      StServerShutdownMonitorUserCmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerShutdownMonitorUserCmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerShutdownMonitorUserCmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StServerShutdownMonitorUserCmd_S));
  StServerStartupMonitorUserCmd_S_descriptor_ = file->message_type(10);
  static const int StServerStartupMonitorUserCmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerStartupMonitorUserCmd_S, data_),
  };
  StServerStartupMonitorUserCmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StServerStartupMonitorUserCmd_S_descriptor_,
      StServerStartupMonitorUserCmd_S::default_instance_,
      StServerStartupMonitorUserCmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerStartupMonitorUserCmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerStartupMonitorUserCmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StServerStartupMonitorUserCmd_S));
  StServerListMonitorUserCmd_S_descriptor_ = file->message_type(11);
  static const int StServerListMonitorUserCmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerListMonitorUserCmd_S, data_),
  };
  StServerListMonitorUserCmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StServerListMonitorUserCmd_S_descriptor_,
      StServerListMonitorUserCmd_S::default_instance_,
      StServerListMonitorUserCmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerListMonitorUserCmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StServerListMonitorUserCmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StServerListMonitorUserCmd_S));
  StMonitorServerMessageMonitorUserCmd_S_descriptor_ = file->message_type(12);
  static const int StMonitorServerMessageMonitorUserCmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StMonitorServerMessageMonitorUserCmd_S, gmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StMonitorServerMessageMonitorUserCmd_S, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StMonitorServerMessageMonitorUserCmd_S, data_),
  };
  StMonitorServerMessageMonitorUserCmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StMonitorServerMessageMonitorUserCmd_S_descriptor_,
      StMonitorServerMessageMonitorUserCmd_S::default_instance_,
      StMonitorServerMessageMonitorUserCmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StMonitorServerMessageMonitorUserCmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StMonitorServerMessageMonitorUserCmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StMonitorServerMessageMonitorUserCmd_S));
  ClientCmdExitInfo_descriptor_ = file->message_type(13);
  static const int ClientCmdExitInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCmdExitInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCmdExitInfo, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCmdExitInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCmdExitInfo, bycmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCmdExitInfo, byparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCmdExitInfo, nettype_),
  };
  ClientCmdExitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCmdExitInfo_descriptor_,
      ClientCmdExitInfo::default_instance_,
      ClientCmdExitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCmdExitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCmdExitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCmdExitInfo));
  StGameClientCmdExitMonitorUserCmd_S_descriptor_ = file->message_type(14);
  static const int StGameClientCmdExitMonitorUserCmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGameClientCmdExitMonitorUserCmd_S, data_),
  };
  StGameClientCmdExitMonitorUserCmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StGameClientCmdExitMonitorUserCmd_S_descriptor_,
      StGameClientCmdExitMonitorUserCmd_S::default_instance_,
      StGameClientCmdExitMonitorUserCmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGameClientCmdExitMonitorUserCmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StGameClientCmdExitMonitorUserCmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StGameClientCmdExitMonitorUserCmd_S));
  StErrorLogMonitorUserCmd_S_descriptor_ = file->message_type(15);
  static const int StErrorLogMonitorUserCmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StErrorLogMonitorUserCmd_S, logger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StErrorLogMonitorUserCmd_S, gamezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StErrorLogMonitorUserCmd_S, remoteaddr_),
  };
  StErrorLogMonitorUserCmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StErrorLogMonitorUserCmd_S_descriptor_,
      StErrorLogMonitorUserCmd_S::default_instance_,
      StErrorLogMonitorUserCmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StErrorLogMonitorUserCmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StErrorLogMonitorUserCmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StErrorLogMonitorUserCmd_S));
  QueryPackageCodeMonitorPmd_CS_descriptor_ = file->message_type(16);
  static const int QueryPackageCodeMonitorPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, codeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, usedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, usedgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, usedzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, useduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, codetype_),
  };
  QueryPackageCodeMonitorPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPackageCodeMonitorPmd_CS_descriptor_,
      QueryPackageCodeMonitorPmd_CS::default_instance_,
      QueryPackageCodeMonitorPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPackageCodeMonitorPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPackageCodeMonitorPmd_CS));
  RequestUsePackageCodeMonitorPmd_CS_descriptor_ = file->message_type(17);
  static const int RequestUsePackageCodeMonitorPmd_CS_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, codeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, usedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, usedgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, usedzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, useduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, codetype_),
  };
  RequestUsePackageCodeMonitorPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUsePackageCodeMonitorPmd_CS_descriptor_,
      RequestUsePackageCodeMonitorPmd_CS::default_instance_,
      RequestUsePackageCodeMonitorPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUsePackageCodeMonitorPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUsePackageCodeMonitorPmd_CS));
  RequestInsertPackageCodeMonitorPmd_CS_descriptor_ = file->message_type(18);
  static const int RequestInsertPackageCodeMonitorPmd_CS_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, codeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, usedgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, usedzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, useduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, codetype_),
  };
  RequestInsertPackageCodeMonitorPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestInsertPackageCodeMonitorPmd_CS_descriptor_,
      RequestInsertPackageCodeMonitorPmd_CS::default_instance_,
      RequestInsertPackageCodeMonitorPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInsertPackageCodeMonitorPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestInsertPackageCodeMonitorPmd_CS));
  RequestResetPackageCodeMonitorPmd_CS_descriptor_ = file->message_type(19);
  static const int RequestResetPackageCodeMonitorPmd_CS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResetPackageCodeMonitorPmd_CS, codeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResetPackageCodeMonitorPmd_CS, ret_),
  };
  RequestResetPackageCodeMonitorPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestResetPackageCodeMonitorPmd_CS_descriptor_,
      RequestResetPackageCodeMonitorPmd_CS::default_instance_,
      RequestResetPackageCodeMonitorPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResetPackageCodeMonitorPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResetPackageCodeMonitorPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestResetPackageCodeMonitorPmd_CS));
  ServerInfoState_descriptor_ = file->enum_type(0);
  MonitorServerMessageType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_monitorpmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Monitor_descriptor_, &Monitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartUpGameRequestMonitorPmd_C_descriptor_, &StartUpGameRequestMonitorPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartUpGameReturnMonitorPmd_S_descriptor_, &StartUpGameReturnMonitorPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SupportGameZoneListSdkPmd_C_descriptor_, &SupportGameZoneListSdkPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerState_descriptor_, &ServerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameZoneServerState_descriptor_, &GameZoneServerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshServerStateListMonitorPmd_S_descriptor_, &RefreshServerStateListMonitorPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshServerStateMonitorPmd_CSC_descriptor_, &RefreshServerStateMonitorPmd_CSC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StRequestNewbeeCardMonitorUserCmd_C_descriptor_, &StRequestNewbeeCardMonitorUserCmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StServerShutdownMonitorUserCmd_S_descriptor_, &StServerShutdownMonitorUserCmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StServerStartupMonitorUserCmd_S_descriptor_, &StServerStartupMonitorUserCmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StServerListMonitorUserCmd_S_descriptor_, &StServerListMonitorUserCmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StMonitorServerMessageMonitorUserCmd_S_descriptor_, &StMonitorServerMessageMonitorUserCmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCmdExitInfo_descriptor_, &ClientCmdExitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StGameClientCmdExitMonitorUserCmd_S_descriptor_, &StGameClientCmdExitMonitorUserCmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StErrorLogMonitorUserCmd_S_descriptor_, &StErrorLogMonitorUserCmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPackageCodeMonitorPmd_CS_descriptor_, &QueryPackageCodeMonitorPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUsePackageCodeMonitorPmd_CS_descriptor_, &RequestUsePackageCodeMonitorPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestInsertPackageCodeMonitorPmd_CS_descriptor_, &RequestInsertPackageCodeMonitorPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestResetPackageCodeMonitorPmd_CS_descriptor_, &RequestResetPackageCodeMonitorPmd_CS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_monitorpmd_2eproto() {
  delete Monitor::default_instance_;
  delete Monitor_reflection_;
  delete StartUpGameRequestMonitorPmd_C::default_instance_;
  delete StartUpGameRequestMonitorPmd_C_reflection_;
  delete StartUpGameReturnMonitorPmd_S::default_instance_;
  delete StartUpGameReturnMonitorPmd_S_reflection_;
  delete SupportGameZoneListSdkPmd_C::default_instance_;
  delete SupportGameZoneListSdkPmd_C_reflection_;
  delete ServerState::default_instance_;
  delete ServerState_reflection_;
  delete GameZoneServerState::default_instance_;
  delete GameZoneServerState_reflection_;
  delete RefreshServerStateListMonitorPmd_S::default_instance_;
  delete RefreshServerStateListMonitorPmd_S_reflection_;
  delete RefreshServerStateMonitorPmd_CSC::default_instance_;
  delete RefreshServerStateMonitorPmd_CSC_reflection_;
  delete StRequestNewbeeCardMonitorUserCmd_C::default_instance_;
  delete StRequestNewbeeCardMonitorUserCmd_C_reflection_;
  delete StServerShutdownMonitorUserCmd_S::default_instance_;
  delete StServerShutdownMonitorUserCmd_S_reflection_;
  delete StServerStartupMonitorUserCmd_S::default_instance_;
  delete StServerStartupMonitorUserCmd_S_reflection_;
  delete StServerListMonitorUserCmd_S::default_instance_;
  delete StServerListMonitorUserCmd_S_reflection_;
  delete StMonitorServerMessageMonitorUserCmd_S::default_instance_;
  delete StMonitorServerMessageMonitorUserCmd_S_reflection_;
  delete ClientCmdExitInfo::default_instance_;
  delete ClientCmdExitInfo_reflection_;
  delete StGameClientCmdExitMonitorUserCmd_S::default_instance_;
  delete StGameClientCmdExitMonitorUserCmd_S_reflection_;
  delete StErrorLogMonitorUserCmd_S::default_instance_;
  delete StErrorLogMonitorUserCmd_S_reflection_;
  delete QueryPackageCodeMonitorPmd_CS::default_instance_;
  delete QueryPackageCodeMonitorPmd_CS_reflection_;
  delete RequestUsePackageCodeMonitorPmd_CS::default_instance_;
  delete RequestUsePackageCodeMonitorPmd_CS_reflection_;
  delete RequestInsertPackageCodeMonitorPmd_CS::default_instance_;
  delete RequestInsertPackageCodeMonitorPmd_CS_reflection_;
  delete RequestResetPackageCodeMonitorPmd_CS::default_instance_;
  delete RequestResetPackageCodeMonitorPmd_CS_reflection_;
}

void protobuf_AddDesc_monitorpmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Pmd::protobuf_AddDesc_pmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020monitorpmd.proto\022\003Pmd\032\tpmd.proto\"\364\004\n\007M"
    "onitor\"\350\004\n\005Param\022\"\n\036StartUpGameRequestMo"
    "nitorPmd_C\020\001\022!\n\035StartUpGameReturnMonitor"
    "Pmd_S\020\002\022\037\n\033SupportGameZoneListSdkPmd_C\020\003"
    "\022&\n\"RefreshServerStateListMonitorPmd_S\020\004"
    "\022$\n RefreshServerStateMonitorPmd_CSC\020\005\022\'"
    "\n#StRequestNewbeeCardMonitorUserCmd_C\020\006\022"
    "$\n StServerShutdownMonitorUserCmd_S\020\007\022#\n"
    "\037StServerStartupMonitorUserCmd_S\020\010\022 \n\034St"
    "ServerListMonitorUserCmd_S\020\t\022*\n&StMonito"
    "rServerMessageMonitorUserCmd_S\020\n\022\'\n#StGa"
    "meClientCmdExitMonitorUserCmd_S\020\014\022\036\n\032StE"
    "rrorLogMonitorUserCmd_S\020\r\022!\n\035QueryPackag"
    "eCodeMonitorPmd_CS\020\016\022&\n\"RequestUsePackag"
    "eCodeMonitorPmd_CS\020\017\022)\n%RequestInsertPac"
    "kageCodeMonitorPmd_CS\020\020\022(\n$RequestResetP"
    "ackageCodeMonitorPmd_CS\020\021\"u\n\036StartUpGame"
    "RequestMonitorPmd_C\022\013\n\003key\030\001 \002(\t\022\017\n\007vers"
    "ion\030\002 \002(\r\022\020\n\010compress\030\003 \001(\t\022\017\n\007encrypt\030\004"
    " \001(\t\022\022\n\nencryptkey\030\005 \001(\t\"=\n\035StartUpGameR"
    "eturnMonitorPmd_S\022\013\n\003ret\030\001 \002(\010\022\017\n\007retdes"
    "c\030\002 \001(\t\"F\n\033SupportGameZoneListSdkPmd_C\022\'"
    "\n\014gamezonelist\030\001 \003(\0132\021.Pmd.GameZoneInfo\""
    "e\n\013ServerState\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r"
    "\022\r\n\005state\030\003 \002(\r\022\014\n\004addr\030\004 \002(\t\022\021\n\tonlinen"
    "um\030\005 \001(\r\022\014\n\004name\030\006 \001(\t\"_\n\023GameZoneServer"
    "State\022#\n\010gamezone\030\001 \001(\0132\021.Pmd.GameZoneIn"
    "fo\022#\n\tstatelist\030\002 \003(\0132\020.Pmd.ServerState\""
    "`\n\"RefreshServerStateListMonitorPmd_S\022+\n"
    "\tstatelist\030\001 \003(\0132\030.Pmd.GameZoneServerSta"
    "te\022\r\n\005reset\030\002 \001(\010\"Z\n RefreshServerStateM"
    "onitorPmd_CSC\022\'\n\005state\030\001 \002(\0132\030.Pmd.GameZ"
    "oneServerState\022\r\n\005reset\030\002 \001(\010\"z\n#StReque"
    "stNewbeeCardMonitorUserCmd_C\022\016\n\006userid\030\001"
    " \001(\r\022\021\n\tkeystring\030\002 \001(\t\022\021\n\tmutextype\030\003 \001"
    "(\r\022\r\n\005accid\030\004 \001(\r\022\016\n\006mobile\030\005 \001(\004\"A\n StS"
    "erverShutdownMonitorUserCmd_S\022\035\n\004data\030\001 "
    "\001(\0132\017.Pmd.ServerInfo\"@\n\037StServerStartupM"
    "onitorUserCmd_S\022\035\n\004data\030\001 \001(\0132\017.Pmd.Serv"
    "erInfo\"=\n\034StServerListMonitorUserCmd_S\022\035"
    "\n\004data\030\001 \003(\0132\017.Pmd.ServerInfo\"R\n&StMonit"
    "orServerMessageMonitorUserCmd_S\022\014\n\004gmid\030"
    "\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\014\n\004data\030\003 \001(\t\"m\n\021Cli"
    "entCmdExitInfo\022\014\n\004time\030\001 \001(\r\022\014\n\004zone\030\002 \001"
    "(\r\022\013\n\003num\030\003 \001(\r\022\r\n\005byCmd\030\004 \001(\r\022\017\n\007byPara"
    "m\030\005 \001(\r\022\017\n\007nettype\030\006 \001(\r\"K\n#StGameClient"
    "CmdExitMonitorUserCmd_S\022$\n\004data\030\001 \001(\0132\026."
    "Pmd.ClientCmdExitInfo\"e\n\032StErrorLogMonit"
    "orUserCmd_S\022\016\n\006logger\030\001 \001(\t\022#\n\010gamezone\030"
    "\002 \001(\0132\021.Pmd.GameZoneInfo\022\022\n\nremoteaddr\030\003"
    " \001(\t\"\333\001\n\035QueryPackageCodeMonitorPmd_CS\022\016"
    "\n\006codeid\030\001 \002(\t\022\r\n\005accid\030\002 \002(\004\022\013\n\003ret\030\003 \001"
    "(\r\022\014\n\004flag\030\004 \001(\r\022\022\n\ncreatetime\030\005 \001(\004\022\020\n\010"
    "usedtime\030\006 \001(\004\022\022\n\nusedgameid\030\007 \001(\r\022\022\n\nus"
    "edzoneid\030\010 \001(\r\022\017\n\007useduid\030\t \001(\004\022\017\n\007extda"
    "ta\030\n \001(\t\022\020\n\010codetype\030\013 \001(\r\"\322\001\n\"RequestUs"
    "ePackageCodeMonitorPmd_CS\022\016\n\006codeid\030\001 \002("
    "\t\022\r\n\005accid\030\002 \002(\004\022\013\n\003ret\030\003 \001(\r\022\022\n\ncreatet"
    "ime\030\004 \001(\004\022\020\n\010usedtime\030\005 \001(\004\022\022\n\nusedgamei"
    "d\030\006 \001(\r\022\022\n\nusedzoneid\030\007 \001(\r\022\017\n\007useduid\030\010"
    " \001(\004\022\017\n\007extdata\030\t \001(\t\022\020\n\010codetype\030\n \001(\r\""
    "\323\001\n%RequestInsertPackageCodeMonitorPmd_C"
    "S\022\016\n\006codeid\030\001 \002(\t\022\013\n\003ret\030\002 \001(\r\022\017\n\007extdat"
    "a\030\003 \001(\t\022\014\n\004flag\030\004 \001(\r\022\022\n\ncreatetime\030\005 \001("
    "\004\022\017\n\007endtime\030\006 \001(\004\022\022\n\nusedgameid\030\007 \001(\r\022\022"
    "\n\nusedzoneid\030\010 \001(\r\022\017\n\007useduid\030\t \001(\004\022\020\n\010c"
    "odetype\030\n \001(\r\"C\n$RequestResetPackageCode"
    "MonitorPmd_CS\022\016\n\006codeid\030\001 \002(\t\022\013\n\003ret\030\002 \001"
    "(\r*T\n\017ServerInfoState\022\035\n\031ServerInfoState"
    "_DoubleExp\020\001\022\"\n\036ServerInfoState_DoubleEx"
    "p_Task\020\002*\254\001\n\030MonitorServerMessageType\022!\n"
    "\035MonitorServerMessageType_Info\020\000\022$\n Moni"
    "torServerMessageType_Warning\020\001\022\"\n\036Monito"
    "rServerMessageType_Error\020\002\022#\n\037MonitorSer"
    "verMessageType_Notify\020\003", 2983);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monitorpmd.proto", &protobuf_RegisterTypes);
  Monitor::default_instance_ = new Monitor();
  StartUpGameRequestMonitorPmd_C::default_instance_ = new StartUpGameRequestMonitorPmd_C();
  StartUpGameReturnMonitorPmd_S::default_instance_ = new StartUpGameReturnMonitorPmd_S();
  SupportGameZoneListSdkPmd_C::default_instance_ = new SupportGameZoneListSdkPmd_C();
  ServerState::default_instance_ = new ServerState();
  GameZoneServerState::default_instance_ = new GameZoneServerState();
  RefreshServerStateListMonitorPmd_S::default_instance_ = new RefreshServerStateListMonitorPmd_S();
  RefreshServerStateMonitorPmd_CSC::default_instance_ = new RefreshServerStateMonitorPmd_CSC();
  StRequestNewbeeCardMonitorUserCmd_C::default_instance_ = new StRequestNewbeeCardMonitorUserCmd_C();
  StServerShutdownMonitorUserCmd_S::default_instance_ = new StServerShutdownMonitorUserCmd_S();
  StServerStartupMonitorUserCmd_S::default_instance_ = new StServerStartupMonitorUserCmd_S();
  StServerListMonitorUserCmd_S::default_instance_ = new StServerListMonitorUserCmd_S();
  StMonitorServerMessageMonitorUserCmd_S::default_instance_ = new StMonitorServerMessageMonitorUserCmd_S();
  ClientCmdExitInfo::default_instance_ = new ClientCmdExitInfo();
  StGameClientCmdExitMonitorUserCmd_S::default_instance_ = new StGameClientCmdExitMonitorUserCmd_S();
  StErrorLogMonitorUserCmd_S::default_instance_ = new StErrorLogMonitorUserCmd_S();
  QueryPackageCodeMonitorPmd_CS::default_instance_ = new QueryPackageCodeMonitorPmd_CS();
  RequestUsePackageCodeMonitorPmd_CS::default_instance_ = new RequestUsePackageCodeMonitorPmd_CS();
  RequestInsertPackageCodeMonitorPmd_CS::default_instance_ = new RequestInsertPackageCodeMonitorPmd_CS();
  RequestResetPackageCodeMonitorPmd_CS::default_instance_ = new RequestResetPackageCodeMonitorPmd_CS();
  Monitor::default_instance_->InitAsDefaultInstance();
  StartUpGameRequestMonitorPmd_C::default_instance_->InitAsDefaultInstance();
  StartUpGameReturnMonitorPmd_S::default_instance_->InitAsDefaultInstance();
  SupportGameZoneListSdkPmd_C::default_instance_->InitAsDefaultInstance();
  ServerState::default_instance_->InitAsDefaultInstance();
  GameZoneServerState::default_instance_->InitAsDefaultInstance();
  RefreshServerStateListMonitorPmd_S::default_instance_->InitAsDefaultInstance();
  RefreshServerStateMonitorPmd_CSC::default_instance_->InitAsDefaultInstance();
  StRequestNewbeeCardMonitorUserCmd_C::default_instance_->InitAsDefaultInstance();
  StServerShutdownMonitorUserCmd_S::default_instance_->InitAsDefaultInstance();
  StServerStartupMonitorUserCmd_S::default_instance_->InitAsDefaultInstance();
  StServerListMonitorUserCmd_S::default_instance_->InitAsDefaultInstance();
  StMonitorServerMessageMonitorUserCmd_S::default_instance_->InitAsDefaultInstance();
  ClientCmdExitInfo::default_instance_->InitAsDefaultInstance();
  StGameClientCmdExitMonitorUserCmd_S::default_instance_->InitAsDefaultInstance();
  StErrorLogMonitorUserCmd_S::default_instance_->InitAsDefaultInstance();
  QueryPackageCodeMonitorPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestUsePackageCodeMonitorPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestInsertPackageCodeMonitorPmd_CS::default_instance_->InitAsDefaultInstance();
  RequestResetPackageCodeMonitorPmd_CS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_monitorpmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_monitorpmd_2eproto {
  StaticDescriptorInitializer_monitorpmd_2eproto() {
    protobuf_AddDesc_monitorpmd_2eproto();
  }
} static_descriptor_initializer_monitorpmd_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerInfoState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoState_descriptor_;
}
bool ServerInfoState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MonitorServerMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorServerMessageType_descriptor_;
}
bool MonitorServerMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Monitor_Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monitor_Param_descriptor_;
}
bool Monitor_Param_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Monitor_Param Monitor::StartUpGameRequestMonitorPmd_C;
const Monitor_Param Monitor::StartUpGameReturnMonitorPmd_S;
const Monitor_Param Monitor::SupportGameZoneListSdkPmd_C;
const Monitor_Param Monitor::RefreshServerStateListMonitorPmd_S;
const Monitor_Param Monitor::RefreshServerStateMonitorPmd_CSC;
const Monitor_Param Monitor::StRequestNewbeeCardMonitorUserCmd_C;
const Monitor_Param Monitor::StServerShutdownMonitorUserCmd_S;
const Monitor_Param Monitor::StServerStartupMonitorUserCmd_S;
const Monitor_Param Monitor::StServerListMonitorUserCmd_S;
const Monitor_Param Monitor::StMonitorServerMessageMonitorUserCmd_S;
const Monitor_Param Monitor::StGameClientCmdExitMonitorUserCmd_S;
const Monitor_Param Monitor::StErrorLogMonitorUserCmd_S;
const Monitor_Param Monitor::QueryPackageCodeMonitorPmd_CS;
const Monitor_Param Monitor::RequestUsePackageCodeMonitorPmd_CS;
const Monitor_Param Monitor::RequestInsertPackageCodeMonitorPmd_CS;
const Monitor_Param Monitor::RequestResetPackageCodeMonitorPmd_CS;
const Monitor_Param Monitor::Param_MIN;
const Monitor_Param Monitor::Param_MAX;
const int Monitor::Param_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Monitor::Monitor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.Monitor)
}

void Monitor::InitAsDefaultInstance() {
}

Monitor::Monitor(const Monitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.Monitor)
}

void Monitor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Monitor::~Monitor() {
  // @@protoc_insertion_point(destructor:Pmd.Monitor)
  SharedDtor();
}

void Monitor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Monitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Monitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monitor_descriptor_;
}

const Monitor& Monitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

Monitor* Monitor::default_instance_ = NULL;

Monitor* Monitor::New() const {
  return new Monitor;
}

void Monitor::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Monitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.Monitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.Monitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.Monitor)
  return false;
#undef DO_
}

void Monitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.Monitor)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.Monitor)
}

::google::protobuf::uint8* Monitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.Monitor)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.Monitor)
  return target;
}

int Monitor::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Monitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Monitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Monitor::MergeFrom(const Monitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Monitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Monitor::CopyFrom(const Monitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monitor::IsInitialized() const {

  return true;
}

void Monitor::Swap(Monitor* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Monitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Monitor_descriptor_;
  metadata.reflection = Monitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartUpGameRequestMonitorPmd_C::kKeyFieldNumber;
const int StartUpGameRequestMonitorPmd_C::kVersionFieldNumber;
const int StartUpGameRequestMonitorPmd_C::kCompressFieldNumber;
const int StartUpGameRequestMonitorPmd_C::kEncryptFieldNumber;
const int StartUpGameRequestMonitorPmd_C::kEncryptkeyFieldNumber;
#endif  // !_MSC_VER

StartUpGameRequestMonitorPmd_C::StartUpGameRequestMonitorPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StartUpGameRequestMonitorPmd_C)
}

void StartUpGameRequestMonitorPmd_C::InitAsDefaultInstance() {
}

StartUpGameRequestMonitorPmd_C::StartUpGameRequestMonitorPmd_C(const StartUpGameRequestMonitorPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StartUpGameRequestMonitorPmd_C)
}

void StartUpGameRequestMonitorPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartUpGameRequestMonitorPmd_C::~StartUpGameRequestMonitorPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.StartUpGameRequestMonitorPmd_C)
  SharedDtor();
}

void StartUpGameRequestMonitorPmd_C::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void StartUpGameRequestMonitorPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartUpGameRequestMonitorPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartUpGameRequestMonitorPmd_C_descriptor_;
}

const StartUpGameRequestMonitorPmd_C& StartUpGameRequestMonitorPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StartUpGameRequestMonitorPmd_C* StartUpGameRequestMonitorPmd_C::default_instance_ = NULL;

StartUpGameRequestMonitorPmd_C* StartUpGameRequestMonitorPmd_C::New() const {
  return new StartUpGameRequestMonitorPmd_C;
}

void StartUpGameRequestMonitorPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    version_ = 0u;
    if (has_compress()) {
      if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compress_->clear();
      }
    }
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypt_->clear();
      }
    }
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encryptkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartUpGameRequestMonitorPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StartUpGameRequestMonitorPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_compress;
        break;
      }

      // optional string compress = 3;
      case 3: {
        if (tag == 26) {
         parse_compress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compress().data(), this->compress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 4;
      case 4: {
        if (tag == 34) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encrypt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_encryptkey;
        break;
      }

      // optional string encryptkey = 5;
      case 5: {
        if (tag == 42) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encryptkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StartUpGameRequestMonitorPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StartUpGameRequestMonitorPmd_C)
  return false;
#undef DO_
}

void StartUpGameRequestMonitorPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StartUpGameRequestMonitorPmd_C)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // optional string compress = 3;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->compress(), output);
  }

  // optional string encrypt = 4;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->encrypt(), output);
  }

  // optional string encryptkey = 5;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StartUpGameRequestMonitorPmd_C)
}

::google::protobuf::uint8* StartUpGameRequestMonitorPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StartUpGameRequestMonitorPmd_C)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // optional string compress = 3;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->compress(), target);
  }

  // optional string encrypt = 4;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->encrypt(), target);
  }

  // optional string encryptkey = 5;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StartUpGameRequestMonitorPmd_C)
  return target;
}

int StartUpGameRequestMonitorPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string compress = 3;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compress());
    }

    // optional string encrypt = 4;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

    // optional string encryptkey = 5;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartUpGameRequestMonitorPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartUpGameRequestMonitorPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartUpGameRequestMonitorPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartUpGameRequestMonitorPmd_C::MergeFrom(const StartUpGameRequestMonitorPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_compress()) {
      set_compress(from.compress());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartUpGameRequestMonitorPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartUpGameRequestMonitorPmd_C::CopyFrom(const StartUpGameRequestMonitorPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpGameRequestMonitorPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartUpGameRequestMonitorPmd_C::Swap(StartUpGameRequestMonitorPmd_C* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(version_, other->version_);
    std::swap(compress_, other->compress_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartUpGameRequestMonitorPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartUpGameRequestMonitorPmd_C_descriptor_;
  metadata.reflection = StartUpGameRequestMonitorPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartUpGameReturnMonitorPmd_S::kRetFieldNumber;
const int StartUpGameReturnMonitorPmd_S::kRetdescFieldNumber;
#endif  // !_MSC_VER

StartUpGameReturnMonitorPmd_S::StartUpGameReturnMonitorPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StartUpGameReturnMonitorPmd_S)
}

void StartUpGameReturnMonitorPmd_S::InitAsDefaultInstance() {
}

StartUpGameReturnMonitorPmd_S::StartUpGameReturnMonitorPmd_S(const StartUpGameReturnMonitorPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StartUpGameReturnMonitorPmd_S)
}

void StartUpGameReturnMonitorPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = false;
  retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartUpGameReturnMonitorPmd_S::~StartUpGameReturnMonitorPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StartUpGameReturnMonitorPmd_S)
  SharedDtor();
}

void StartUpGameReturnMonitorPmd_S::SharedDtor() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (this != default_instance_) {
  }
}

void StartUpGameReturnMonitorPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartUpGameReturnMonitorPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartUpGameReturnMonitorPmd_S_descriptor_;
}

const StartUpGameReturnMonitorPmd_S& StartUpGameReturnMonitorPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StartUpGameReturnMonitorPmd_S* StartUpGameReturnMonitorPmd_S::default_instance_ = NULL;

StartUpGameReturnMonitorPmd_S* StartUpGameReturnMonitorPmd_S::New() const {
  return new StartUpGameReturnMonitorPmd_S;
}

void StartUpGameReturnMonitorPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ret_ = false;
    if (has_retdesc()) {
      if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retdesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartUpGameReturnMonitorPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StartUpGameReturnMonitorPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retdesc;
        break;
      }

      // optional string retdesc = 2;
      case 2: {
        if (tag == 18) {
         parse_retdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retdesc().data(), this->retdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "retdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StartUpGameReturnMonitorPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StartUpGameReturnMonitorPmd_S)
  return false;
#undef DO_
}

void StartUpGameReturnMonitorPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StartUpGameReturnMonitorPmd_S)
  // required bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StartUpGameReturnMonitorPmd_S)
}

::google::protobuf::uint8* StartUpGameReturnMonitorPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StartUpGameReturnMonitorPmd_S)
  // required bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  // optional string retdesc = 2;
  if (has_retdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retdesc().data(), this->retdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "retdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StartUpGameReturnMonitorPmd_S)
  return target;
}

int StartUpGameReturnMonitorPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional string retdesc = 2;
    if (has_retdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartUpGameReturnMonitorPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartUpGameReturnMonitorPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartUpGameReturnMonitorPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartUpGameReturnMonitorPmd_S::MergeFrom(const StartUpGameReturnMonitorPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_retdesc()) {
      set_retdesc(from.retdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartUpGameReturnMonitorPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartUpGameReturnMonitorPmd_S::CopyFrom(const StartUpGameReturnMonitorPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpGameReturnMonitorPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartUpGameReturnMonitorPmd_S::Swap(StartUpGameReturnMonitorPmd_S* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(retdesc_, other->retdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartUpGameReturnMonitorPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartUpGameReturnMonitorPmd_S_descriptor_;
  metadata.reflection = StartUpGameReturnMonitorPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SupportGameZoneListSdkPmd_C::kGamezonelistFieldNumber;
#endif  // !_MSC_VER

SupportGameZoneListSdkPmd_C::SupportGameZoneListSdkPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.SupportGameZoneListSdkPmd_C)
}

void SupportGameZoneListSdkPmd_C::InitAsDefaultInstance() {
}

SupportGameZoneListSdkPmd_C::SupportGameZoneListSdkPmd_C(const SupportGameZoneListSdkPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.SupportGameZoneListSdkPmd_C)
}

void SupportGameZoneListSdkPmd_C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SupportGameZoneListSdkPmd_C::~SupportGameZoneListSdkPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.SupportGameZoneListSdkPmd_C)
  SharedDtor();
}

void SupportGameZoneListSdkPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SupportGameZoneListSdkPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupportGameZoneListSdkPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupportGameZoneListSdkPmd_C_descriptor_;
}

const SupportGameZoneListSdkPmd_C& SupportGameZoneListSdkPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

SupportGameZoneListSdkPmd_C* SupportGameZoneListSdkPmd_C::default_instance_ = NULL;

SupportGameZoneListSdkPmd_C* SupportGameZoneListSdkPmd_C::New() const {
  return new SupportGameZoneListSdkPmd_C;
}

void SupportGameZoneListSdkPmd_C::Clear() {
  gamezonelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SupportGameZoneListSdkPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.SupportGameZoneListSdkPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.GameZoneInfo gamezonelist = 1;
      case 1: {
        if (tag == 10) {
         parse_gamezonelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamezonelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gamezonelist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.SupportGameZoneListSdkPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.SupportGameZoneListSdkPmd_C)
  return false;
#undef DO_
}

void SupportGameZoneListSdkPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.SupportGameZoneListSdkPmd_C)
  // repeated .Pmd.GameZoneInfo gamezonelist = 1;
  for (int i = 0; i < this->gamezonelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamezonelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.SupportGameZoneListSdkPmd_C)
}

::google::protobuf::uint8* SupportGameZoneListSdkPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.SupportGameZoneListSdkPmd_C)
  // repeated .Pmd.GameZoneInfo gamezonelist = 1;
  for (int i = 0; i < this->gamezonelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamezonelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.SupportGameZoneListSdkPmd_C)
  return target;
}

int SupportGameZoneListSdkPmd_C::ByteSize() const {
  int total_size = 0;

  // repeated .Pmd.GameZoneInfo gamezonelist = 1;
  total_size += 1 * this->gamezonelist_size();
  for (int i = 0; i < this->gamezonelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamezonelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupportGameZoneListSdkPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SupportGameZoneListSdkPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SupportGameZoneListSdkPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupportGameZoneListSdkPmd_C::MergeFrom(const SupportGameZoneListSdkPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamezonelist_.MergeFrom(from.gamezonelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SupportGameZoneListSdkPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportGameZoneListSdkPmd_C::CopyFrom(const SupportGameZoneListSdkPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportGameZoneListSdkPmd_C::IsInitialized() const {

  return true;
}

void SupportGameZoneListSdkPmd_C::Swap(SupportGameZoneListSdkPmd_C* other) {
  if (other != this) {
    gamezonelist_.Swap(&other->gamezonelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SupportGameZoneListSdkPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupportGameZoneListSdkPmd_C_descriptor_;
  metadata.reflection = SupportGameZoneListSdkPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerState::kIdFieldNumber;
const int ServerState::kTypeFieldNumber;
const int ServerState::kStateFieldNumber;
const int ServerState::kAddrFieldNumber;
const int ServerState::kOnlinenumFieldNumber;
const int ServerState::kNameFieldNumber;
#endif  // !_MSC_VER

ServerState::ServerState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ServerState)
}

void ServerState::InitAsDefaultInstance() {
}

ServerState::ServerState(const ServerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ServerState)
}

void ServerState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  state_ = 0u;
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlinenum_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerState::~ServerState() {
  // @@protoc_insertion_point(destructor:Pmd.ServerState)
  SharedDtor();
}

void ServerState::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerState_descriptor_;
}

const ServerState& ServerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

ServerState* ServerState::default_instance_ = NULL;

ServerState* ServerState::New() const {
  return new ServerState;
}

void ServerState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, type_);
    ZR_(state_, onlinenum_);
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addr_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ServerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_addr;
        break;
      }

      // required string addr = 4;
      case 4: {
        if (tag == 34) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_onlinenum;
        break;
      }

      // optional uint32 onlinenum = 5;
      case 5: {
        if (tag == 40) {
         parse_onlinenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ServerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ServerState)
  return false;
#undef DO_
}

void ServerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ServerState)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // required string addr = 4;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addr(), output);
  }

  // optional uint32 onlinenum = 5;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->onlinenum(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ServerState)
}

::google::protobuf::uint8* ServerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ServerState)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // required string addr = 4;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addr(), target);
  }

  // optional uint32 onlinenum = 5;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->onlinenum(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ServerState)
  return target;
}

int ServerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required string addr = 4;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional uint32 onlinenum = 5;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinenum());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerState::MergeFrom(const ServerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerState::CopyFrom(const ServerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerState::Swap(ServerState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(addr_, other->addr_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerState_descriptor_;
  metadata.reflection = ServerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameZoneServerState::kGamezoneFieldNumber;
const int GameZoneServerState::kStatelistFieldNumber;
#endif  // !_MSC_VER

GameZoneServerState::GameZoneServerState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GameZoneServerState)
}

void GameZoneServerState::InitAsDefaultInstance() {
  gamezone_ = const_cast< ::Pmd::GameZoneInfo*>(&::Pmd::GameZoneInfo::default_instance());
}

GameZoneServerState::GameZoneServerState(const GameZoneServerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GameZoneServerState)
}

void GameZoneServerState::SharedCtor() {
  _cached_size_ = 0;
  gamezone_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameZoneServerState::~GameZoneServerState() {
  // @@protoc_insertion_point(destructor:Pmd.GameZoneServerState)
  SharedDtor();
}

void GameZoneServerState::SharedDtor() {
  if (this != default_instance_) {
    delete gamezone_;
  }
}

void GameZoneServerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameZoneServerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameZoneServerState_descriptor_;
}

const GameZoneServerState& GameZoneServerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

GameZoneServerState* GameZoneServerState::default_instance_ = NULL;

GameZoneServerState* GameZoneServerState::New() const {
  return new GameZoneServerState;
}

void GameZoneServerState::Clear() {
  if (has_gamezone()) {
    if (gamezone_ != NULL) gamezone_->::Pmd::GameZoneInfo::Clear();
  }
  statelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameZoneServerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GameZoneServerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.GameZoneInfo gamezone = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamezone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statelist;
        break;
      }

      // repeated .Pmd.ServerState statelist = 2;
      case 2: {
        if (tag == 18) {
         parse_statelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statelist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GameZoneServerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GameZoneServerState)
  return false;
#undef DO_
}

void GameZoneServerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GameZoneServerState)
  // optional .Pmd.GameZoneInfo gamezone = 1;
  if (has_gamezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamezone(), output);
  }

  // repeated .Pmd.ServerState statelist = 2;
  for (int i = 0; i < this->statelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GameZoneServerState)
}

::google::protobuf::uint8* GameZoneServerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GameZoneServerState)
  // optional .Pmd.GameZoneInfo gamezone = 1;
  if (has_gamezone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamezone(), target);
  }

  // repeated .Pmd.ServerState statelist = 2;
  for (int i = 0; i < this->statelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GameZoneServerState)
  return target;
}

int GameZoneServerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.GameZoneInfo gamezone = 1;
    if (has_gamezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamezone());
    }

  }
  // repeated .Pmd.ServerState statelist = 2;
  total_size += 1 * this->statelist_size();
  for (int i = 0; i < this->statelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameZoneServerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameZoneServerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameZoneServerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameZoneServerState::MergeFrom(const GameZoneServerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  statelist_.MergeFrom(from.statelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamezone()) {
      mutable_gamezone()->::Pmd::GameZoneInfo::MergeFrom(from.gamezone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameZoneServerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameZoneServerState::CopyFrom(const GameZoneServerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameZoneServerState::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->statelist())) return false;
  return true;
}

void GameZoneServerState::Swap(GameZoneServerState* other) {
  if (other != this) {
    std::swap(gamezone_, other->gamezone_);
    statelist_.Swap(&other->statelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameZoneServerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameZoneServerState_descriptor_;
  metadata.reflection = GameZoneServerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshServerStateListMonitorPmd_S::kStatelistFieldNumber;
const int RefreshServerStateListMonitorPmd_S::kResetFieldNumber;
#endif  // !_MSC_VER

RefreshServerStateListMonitorPmd_S::RefreshServerStateListMonitorPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RefreshServerStateListMonitorPmd_S)
}

void RefreshServerStateListMonitorPmd_S::InitAsDefaultInstance() {
}

RefreshServerStateListMonitorPmd_S::RefreshServerStateListMonitorPmd_S(const RefreshServerStateListMonitorPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RefreshServerStateListMonitorPmd_S)
}

void RefreshServerStateListMonitorPmd_S::SharedCtor() {
  _cached_size_ = 0;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshServerStateListMonitorPmd_S::~RefreshServerStateListMonitorPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.RefreshServerStateListMonitorPmd_S)
  SharedDtor();
}

void RefreshServerStateListMonitorPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshServerStateListMonitorPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshServerStateListMonitorPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshServerStateListMonitorPmd_S_descriptor_;
}

const RefreshServerStateListMonitorPmd_S& RefreshServerStateListMonitorPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

RefreshServerStateListMonitorPmd_S* RefreshServerStateListMonitorPmd_S::default_instance_ = NULL;

RefreshServerStateListMonitorPmd_S* RefreshServerStateListMonitorPmd_S::New() const {
  return new RefreshServerStateListMonitorPmd_S;
}

void RefreshServerStateListMonitorPmd_S::Clear() {
  reset_ = false;
  statelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshServerStateListMonitorPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RefreshServerStateListMonitorPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.GameZoneServerState statelist = 1;
      case 1: {
        if (tag == 10) {
         parse_statelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_statelist;
        if (input->ExpectTag(16)) goto parse_reset;
        break;
      }

      // optional bool reset = 2;
      case 2: {
        if (tag == 16) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RefreshServerStateListMonitorPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RefreshServerStateListMonitorPmd_S)
  return false;
#undef DO_
}

void RefreshServerStateListMonitorPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RefreshServerStateListMonitorPmd_S)
  // repeated .Pmd.GameZoneServerState statelist = 1;
  for (int i = 0; i < this->statelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statelist(i), output);
  }

  // optional bool reset = 2;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RefreshServerStateListMonitorPmd_S)
}

::google::protobuf::uint8* RefreshServerStateListMonitorPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RefreshServerStateListMonitorPmd_S)
  // repeated .Pmd.GameZoneServerState statelist = 1;
  for (int i = 0; i < this->statelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statelist(i), target);
  }

  // optional bool reset = 2;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RefreshServerStateListMonitorPmd_S)
  return target;
}

int RefreshServerStateListMonitorPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool reset = 2;
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Pmd.GameZoneServerState statelist = 1;
  total_size += 1 * this->statelist_size();
  for (int i = 0; i < this->statelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshServerStateListMonitorPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshServerStateListMonitorPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshServerStateListMonitorPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshServerStateListMonitorPmd_S::MergeFrom(const RefreshServerStateListMonitorPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  statelist_.MergeFrom(from.statelist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshServerStateListMonitorPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshServerStateListMonitorPmd_S::CopyFrom(const RefreshServerStateListMonitorPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshServerStateListMonitorPmd_S::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->statelist())) return false;
  return true;
}

void RefreshServerStateListMonitorPmd_S::Swap(RefreshServerStateListMonitorPmd_S* other) {
  if (other != this) {
    statelist_.Swap(&other->statelist_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshServerStateListMonitorPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshServerStateListMonitorPmd_S_descriptor_;
  metadata.reflection = RefreshServerStateListMonitorPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshServerStateMonitorPmd_CSC::kStateFieldNumber;
const int RefreshServerStateMonitorPmd_CSC::kResetFieldNumber;
#endif  // !_MSC_VER

RefreshServerStateMonitorPmd_CSC::RefreshServerStateMonitorPmd_CSC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RefreshServerStateMonitorPmd_CSC)
}

void RefreshServerStateMonitorPmd_CSC::InitAsDefaultInstance() {
  state_ = const_cast< ::Pmd::GameZoneServerState*>(&::Pmd::GameZoneServerState::default_instance());
}

RefreshServerStateMonitorPmd_CSC::RefreshServerStateMonitorPmd_CSC(const RefreshServerStateMonitorPmd_CSC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RefreshServerStateMonitorPmd_CSC)
}

void RefreshServerStateMonitorPmd_CSC::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshServerStateMonitorPmd_CSC::~RefreshServerStateMonitorPmd_CSC() {
  // @@protoc_insertion_point(destructor:Pmd.RefreshServerStateMonitorPmd_CSC)
  SharedDtor();
}

void RefreshServerStateMonitorPmd_CSC::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void RefreshServerStateMonitorPmd_CSC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshServerStateMonitorPmd_CSC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshServerStateMonitorPmd_CSC_descriptor_;
}

const RefreshServerStateMonitorPmd_CSC& RefreshServerStateMonitorPmd_CSC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

RefreshServerStateMonitorPmd_CSC* RefreshServerStateMonitorPmd_CSC::default_instance_ = NULL;

RefreshServerStateMonitorPmd_CSC* RefreshServerStateMonitorPmd_CSC::New() const {
  return new RefreshServerStateMonitorPmd_CSC;
}

void RefreshServerStateMonitorPmd_CSC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_state()) {
      if (state_ != NULL) state_->::Pmd::GameZoneServerState::Clear();
    }
    reset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshServerStateMonitorPmd_CSC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RefreshServerStateMonitorPmd_CSC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.GameZoneServerState state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reset;
        break;
      }

      // optional bool reset = 2;
      case 2: {
        if (tag == 16) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RefreshServerStateMonitorPmd_CSC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RefreshServerStateMonitorPmd_CSC)
  return false;
#undef DO_
}

void RefreshServerStateMonitorPmd_CSC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RefreshServerStateMonitorPmd_CSC)
  // required .Pmd.GameZoneServerState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  // optional bool reset = 2;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RefreshServerStateMonitorPmd_CSC)
}

::google::protobuf::uint8* RefreshServerStateMonitorPmd_CSC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RefreshServerStateMonitorPmd_CSC)
  // required .Pmd.GameZoneServerState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  // optional bool reset = 2;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RefreshServerStateMonitorPmd_CSC)
  return target;
}

int RefreshServerStateMonitorPmd_CSC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.GameZoneServerState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional bool reset = 2;
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshServerStateMonitorPmd_CSC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshServerStateMonitorPmd_CSC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshServerStateMonitorPmd_CSC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshServerStateMonitorPmd_CSC::MergeFrom(const RefreshServerStateMonitorPmd_CSC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::Pmd::GameZoneServerState::MergeFrom(from.state());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshServerStateMonitorPmd_CSC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshServerStateMonitorPmd_CSC::CopyFrom(const RefreshServerStateMonitorPmd_CSC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshServerStateMonitorPmd_CSC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void RefreshServerStateMonitorPmd_CSC::Swap(RefreshServerStateMonitorPmd_CSC* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshServerStateMonitorPmd_CSC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshServerStateMonitorPmd_CSC_descriptor_;
  metadata.reflection = RefreshServerStateMonitorPmd_CSC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StRequestNewbeeCardMonitorUserCmd_C::kUseridFieldNumber;
const int StRequestNewbeeCardMonitorUserCmd_C::kKeystringFieldNumber;
const int StRequestNewbeeCardMonitorUserCmd_C::kMutextypeFieldNumber;
const int StRequestNewbeeCardMonitorUserCmd_C::kAccidFieldNumber;
const int StRequestNewbeeCardMonitorUserCmd_C::kMobileFieldNumber;
#endif  // !_MSC_VER

StRequestNewbeeCardMonitorUserCmd_C::StRequestNewbeeCardMonitorUserCmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
}

void StRequestNewbeeCardMonitorUserCmd_C::InitAsDefaultInstance() {
}

StRequestNewbeeCardMonitorUserCmd_C::StRequestNewbeeCardMonitorUserCmd_C(const StRequestNewbeeCardMonitorUserCmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
}

void StRequestNewbeeCardMonitorUserCmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0u;
  keystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mutextype_ = 0u;
  accid_ = 0u;
  mobile_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StRequestNewbeeCardMonitorUserCmd_C::~StRequestNewbeeCardMonitorUserCmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
  SharedDtor();
}

void StRequestNewbeeCardMonitorUserCmd_C::SharedDtor() {
  if (keystring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keystring_;
  }
  if (this != default_instance_) {
  }
}

void StRequestNewbeeCardMonitorUserCmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StRequestNewbeeCardMonitorUserCmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StRequestNewbeeCardMonitorUserCmd_C_descriptor_;
}

const StRequestNewbeeCardMonitorUserCmd_C& StRequestNewbeeCardMonitorUserCmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StRequestNewbeeCardMonitorUserCmd_C* StRequestNewbeeCardMonitorUserCmd_C::default_instance_ = NULL;

StRequestNewbeeCardMonitorUserCmd_C* StRequestNewbeeCardMonitorUserCmd_C::New() const {
  return new StRequestNewbeeCardMonitorUserCmd_C;
}

void StRequestNewbeeCardMonitorUserCmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StRequestNewbeeCardMonitorUserCmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(userid_, accid_);
    if (has_keystring()) {
      if (keystring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keystring_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StRequestNewbeeCardMonitorUserCmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keystring;
        break;
      }

      // optional string keystring = 2;
      case 2: {
        if (tag == 18) {
         parse_keystring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keystring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keystring().data(), this->keystring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "keystring");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mutextype;
        break;
      }

      // optional uint32 mutextype = 3;
      case 3: {
        if (tag == 24) {
         parse_mutextype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mutextype_)));
          set_has_mutextype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint32 accid = 4;
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mobile;
        break;
      }

      // optional uint64 mobile = 5;
      case 5: {
        if (tag == 40) {
         parse_mobile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mobile_)));
          set_has_mobile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
  return false;
#undef DO_
}

void StRequestNewbeeCardMonitorUserCmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
  // optional uint32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // optional string keystring = 2;
  if (has_keystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keystring().data(), this->keystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keystring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keystring(), output);
  }

  // optional uint32 mutextype = 3;
  if (has_mutextype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mutextype(), output);
  }

  // optional uint32 accid = 4;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accid(), output);
  }

  // optional uint64 mobile = 5;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->mobile(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
}

::google::protobuf::uint8* StRequestNewbeeCardMonitorUserCmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
  // optional uint32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // optional string keystring = 2;
  if (has_keystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keystring().data(), this->keystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "keystring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keystring(), target);
  }

  // optional uint32 mutextype = 3;
  if (has_mutextype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mutextype(), target);
  }

  // optional uint32 accid = 4;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accid(), target);
  }

  // optional uint64 mobile = 5;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->mobile(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
  return target;
}

int StRequestNewbeeCardMonitorUserCmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }

    // optional string keystring = 2;
    if (has_keystring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keystring());
    }

    // optional uint32 mutextype = 3;
    if (has_mutextype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mutextype());
    }

    // optional uint32 accid = 4;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accid());
    }

    // optional uint64 mobile = 5;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mobile());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StRequestNewbeeCardMonitorUserCmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StRequestNewbeeCardMonitorUserCmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StRequestNewbeeCardMonitorUserCmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StRequestNewbeeCardMonitorUserCmd_C::MergeFrom(const StRequestNewbeeCardMonitorUserCmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_keystring()) {
      set_keystring(from.keystring());
    }
    if (from.has_mutextype()) {
      set_mutextype(from.mutextype());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StRequestNewbeeCardMonitorUserCmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StRequestNewbeeCardMonitorUserCmd_C::CopyFrom(const StRequestNewbeeCardMonitorUserCmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StRequestNewbeeCardMonitorUserCmd_C::IsInitialized() const {

  return true;
}

void StRequestNewbeeCardMonitorUserCmd_C::Swap(StRequestNewbeeCardMonitorUserCmd_C* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(keystring_, other->keystring_);
    std::swap(mutextype_, other->mutextype_);
    std::swap(accid_, other->accid_);
    std::swap(mobile_, other->mobile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StRequestNewbeeCardMonitorUserCmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StRequestNewbeeCardMonitorUserCmd_C_descriptor_;
  metadata.reflection = StRequestNewbeeCardMonitorUserCmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StServerShutdownMonitorUserCmd_S::kDataFieldNumber;
#endif  // !_MSC_VER

StServerShutdownMonitorUserCmd_S::StServerShutdownMonitorUserCmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StServerShutdownMonitorUserCmd_S)
}

void StServerShutdownMonitorUserCmd_S::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::ServerInfo*>(&::Pmd::ServerInfo::default_instance());
}

StServerShutdownMonitorUserCmd_S::StServerShutdownMonitorUserCmd_S(const StServerShutdownMonitorUserCmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StServerShutdownMonitorUserCmd_S)
}

void StServerShutdownMonitorUserCmd_S::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StServerShutdownMonitorUserCmd_S::~StServerShutdownMonitorUserCmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StServerShutdownMonitorUserCmd_S)
  SharedDtor();
}

void StServerShutdownMonitorUserCmd_S::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void StServerShutdownMonitorUserCmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StServerShutdownMonitorUserCmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StServerShutdownMonitorUserCmd_S_descriptor_;
}

const StServerShutdownMonitorUserCmd_S& StServerShutdownMonitorUserCmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StServerShutdownMonitorUserCmd_S* StServerShutdownMonitorUserCmd_S::default_instance_ = NULL;

StServerShutdownMonitorUserCmd_S* StServerShutdownMonitorUserCmd_S::New() const {
  return new StServerShutdownMonitorUserCmd_S;
}

void StServerShutdownMonitorUserCmd_S::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::Pmd::ServerInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StServerShutdownMonitorUserCmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StServerShutdownMonitorUserCmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.ServerInfo data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StServerShutdownMonitorUserCmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StServerShutdownMonitorUserCmd_S)
  return false;
#undef DO_
}

void StServerShutdownMonitorUserCmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StServerShutdownMonitorUserCmd_S)
  // optional .Pmd.ServerInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StServerShutdownMonitorUserCmd_S)
}

::google::protobuf::uint8* StServerShutdownMonitorUserCmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StServerShutdownMonitorUserCmd_S)
  // optional .Pmd.ServerInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StServerShutdownMonitorUserCmd_S)
  return target;
}

int StServerShutdownMonitorUserCmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.ServerInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StServerShutdownMonitorUserCmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StServerShutdownMonitorUserCmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StServerShutdownMonitorUserCmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StServerShutdownMonitorUserCmd_S::MergeFrom(const StServerShutdownMonitorUserCmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::ServerInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StServerShutdownMonitorUserCmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StServerShutdownMonitorUserCmd_S::CopyFrom(const StServerShutdownMonitorUserCmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StServerShutdownMonitorUserCmd_S::IsInitialized() const {

  return true;
}

void StServerShutdownMonitorUserCmd_S::Swap(StServerShutdownMonitorUserCmd_S* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StServerShutdownMonitorUserCmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StServerShutdownMonitorUserCmd_S_descriptor_;
  metadata.reflection = StServerShutdownMonitorUserCmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StServerStartupMonitorUserCmd_S::kDataFieldNumber;
#endif  // !_MSC_VER

StServerStartupMonitorUserCmd_S::StServerStartupMonitorUserCmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StServerStartupMonitorUserCmd_S)
}

void StServerStartupMonitorUserCmd_S::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::ServerInfo*>(&::Pmd::ServerInfo::default_instance());
}

StServerStartupMonitorUserCmd_S::StServerStartupMonitorUserCmd_S(const StServerStartupMonitorUserCmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StServerStartupMonitorUserCmd_S)
}

void StServerStartupMonitorUserCmd_S::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StServerStartupMonitorUserCmd_S::~StServerStartupMonitorUserCmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StServerStartupMonitorUserCmd_S)
  SharedDtor();
}

void StServerStartupMonitorUserCmd_S::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void StServerStartupMonitorUserCmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StServerStartupMonitorUserCmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StServerStartupMonitorUserCmd_S_descriptor_;
}

const StServerStartupMonitorUserCmd_S& StServerStartupMonitorUserCmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StServerStartupMonitorUserCmd_S* StServerStartupMonitorUserCmd_S::default_instance_ = NULL;

StServerStartupMonitorUserCmd_S* StServerStartupMonitorUserCmd_S::New() const {
  return new StServerStartupMonitorUserCmd_S;
}

void StServerStartupMonitorUserCmd_S::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::Pmd::ServerInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StServerStartupMonitorUserCmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StServerStartupMonitorUserCmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.ServerInfo data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StServerStartupMonitorUserCmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StServerStartupMonitorUserCmd_S)
  return false;
#undef DO_
}

void StServerStartupMonitorUserCmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StServerStartupMonitorUserCmd_S)
  // optional .Pmd.ServerInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StServerStartupMonitorUserCmd_S)
}

::google::protobuf::uint8* StServerStartupMonitorUserCmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StServerStartupMonitorUserCmd_S)
  // optional .Pmd.ServerInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StServerStartupMonitorUserCmd_S)
  return target;
}

int StServerStartupMonitorUserCmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.ServerInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StServerStartupMonitorUserCmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StServerStartupMonitorUserCmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StServerStartupMonitorUserCmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StServerStartupMonitorUserCmd_S::MergeFrom(const StServerStartupMonitorUserCmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::ServerInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StServerStartupMonitorUserCmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StServerStartupMonitorUserCmd_S::CopyFrom(const StServerStartupMonitorUserCmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StServerStartupMonitorUserCmd_S::IsInitialized() const {

  return true;
}

void StServerStartupMonitorUserCmd_S::Swap(StServerStartupMonitorUserCmd_S* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StServerStartupMonitorUserCmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StServerStartupMonitorUserCmd_S_descriptor_;
  metadata.reflection = StServerStartupMonitorUserCmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StServerListMonitorUserCmd_S::kDataFieldNumber;
#endif  // !_MSC_VER

StServerListMonitorUserCmd_S::StServerListMonitorUserCmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StServerListMonitorUserCmd_S)
}

void StServerListMonitorUserCmd_S::InitAsDefaultInstance() {
}

StServerListMonitorUserCmd_S::StServerListMonitorUserCmd_S(const StServerListMonitorUserCmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StServerListMonitorUserCmd_S)
}

void StServerListMonitorUserCmd_S::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StServerListMonitorUserCmd_S::~StServerListMonitorUserCmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StServerListMonitorUserCmd_S)
  SharedDtor();
}

void StServerListMonitorUserCmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StServerListMonitorUserCmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StServerListMonitorUserCmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StServerListMonitorUserCmd_S_descriptor_;
}

const StServerListMonitorUserCmd_S& StServerListMonitorUserCmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StServerListMonitorUserCmd_S* StServerListMonitorUserCmd_S::default_instance_ = NULL;

StServerListMonitorUserCmd_S* StServerListMonitorUserCmd_S::New() const {
  return new StServerListMonitorUserCmd_S;
}

void StServerListMonitorUserCmd_S::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StServerListMonitorUserCmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StServerListMonitorUserCmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.ServerInfo data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StServerListMonitorUserCmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StServerListMonitorUserCmd_S)
  return false;
#undef DO_
}

void StServerListMonitorUserCmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StServerListMonitorUserCmd_S)
  // repeated .Pmd.ServerInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StServerListMonitorUserCmd_S)
}

::google::protobuf::uint8* StServerListMonitorUserCmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StServerListMonitorUserCmd_S)
  // repeated .Pmd.ServerInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StServerListMonitorUserCmd_S)
  return target;
}

int StServerListMonitorUserCmd_S::ByteSize() const {
  int total_size = 0;

  // repeated .Pmd.ServerInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StServerListMonitorUserCmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StServerListMonitorUserCmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StServerListMonitorUserCmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StServerListMonitorUserCmd_S::MergeFrom(const StServerListMonitorUserCmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StServerListMonitorUserCmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StServerListMonitorUserCmd_S::CopyFrom(const StServerListMonitorUserCmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StServerListMonitorUserCmd_S::IsInitialized() const {

  return true;
}

void StServerListMonitorUserCmd_S::Swap(StServerListMonitorUserCmd_S* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StServerListMonitorUserCmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StServerListMonitorUserCmd_S_descriptor_;
  metadata.reflection = StServerListMonitorUserCmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StMonitorServerMessageMonitorUserCmd_S::kGmidFieldNumber;
const int StMonitorServerMessageMonitorUserCmd_S::kTypeFieldNumber;
const int StMonitorServerMessageMonitorUserCmd_S::kDataFieldNumber;
#endif  // !_MSC_VER

StMonitorServerMessageMonitorUserCmd_S::StMonitorServerMessageMonitorUserCmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StMonitorServerMessageMonitorUserCmd_S)
}

void StMonitorServerMessageMonitorUserCmd_S::InitAsDefaultInstance() {
}

StMonitorServerMessageMonitorUserCmd_S::StMonitorServerMessageMonitorUserCmd_S(const StMonitorServerMessageMonitorUserCmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StMonitorServerMessageMonitorUserCmd_S)
}

void StMonitorServerMessageMonitorUserCmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gmid_ = 0u;
  type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StMonitorServerMessageMonitorUserCmd_S::~StMonitorServerMessageMonitorUserCmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StMonitorServerMessageMonitorUserCmd_S)
  SharedDtor();
}

void StMonitorServerMessageMonitorUserCmd_S::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void StMonitorServerMessageMonitorUserCmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StMonitorServerMessageMonitorUserCmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StMonitorServerMessageMonitorUserCmd_S_descriptor_;
}

const StMonitorServerMessageMonitorUserCmd_S& StMonitorServerMessageMonitorUserCmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StMonitorServerMessageMonitorUserCmd_S* StMonitorServerMessageMonitorUserCmd_S::default_instance_ = NULL;

StMonitorServerMessageMonitorUserCmd_S* StMonitorServerMessageMonitorUserCmd_S::New() const {
  return new StMonitorServerMessageMonitorUserCmd_S;
}

void StMonitorServerMessageMonitorUserCmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StMonitorServerMessageMonitorUserCmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gmid_, type_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StMonitorServerMessageMonitorUserCmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StMonitorServerMessageMonitorUserCmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmid_)));
          set_has_gmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StMonitorServerMessageMonitorUserCmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StMonitorServerMessageMonitorUserCmd_S)
  return false;
#undef DO_
}

void StMonitorServerMessageMonitorUserCmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StMonitorServerMessageMonitorUserCmd_S)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StMonitorServerMessageMonitorUserCmd_S)
}

::google::protobuf::uint8* StMonitorServerMessageMonitorUserCmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StMonitorServerMessageMonitorUserCmd_S)
  // optional uint32 gmid = 1;
  if (has_gmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StMonitorServerMessageMonitorUserCmd_S)
  return target;
}

int StMonitorServerMessageMonitorUserCmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmid = 1;
    if (has_gmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StMonitorServerMessageMonitorUserCmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StMonitorServerMessageMonitorUserCmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StMonitorServerMessageMonitorUserCmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StMonitorServerMessageMonitorUserCmd_S::MergeFrom(const StMonitorServerMessageMonitorUserCmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmid()) {
      set_gmid(from.gmid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StMonitorServerMessageMonitorUserCmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StMonitorServerMessageMonitorUserCmd_S::CopyFrom(const StMonitorServerMessageMonitorUserCmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StMonitorServerMessageMonitorUserCmd_S::IsInitialized() const {

  return true;
}

void StMonitorServerMessageMonitorUserCmd_S::Swap(StMonitorServerMessageMonitorUserCmd_S* other) {
  if (other != this) {
    std::swap(gmid_, other->gmid_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StMonitorServerMessageMonitorUserCmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StMonitorServerMessageMonitorUserCmd_S_descriptor_;
  metadata.reflection = StMonitorServerMessageMonitorUserCmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCmdExitInfo::kTimeFieldNumber;
const int ClientCmdExitInfo::kZoneFieldNumber;
const int ClientCmdExitInfo::kNumFieldNumber;
const int ClientCmdExitInfo::kByCmdFieldNumber;
const int ClientCmdExitInfo::kByParamFieldNumber;
const int ClientCmdExitInfo::kNettypeFieldNumber;
#endif  // !_MSC_VER

ClientCmdExitInfo::ClientCmdExitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ClientCmdExitInfo)
}

void ClientCmdExitInfo::InitAsDefaultInstance() {
}

ClientCmdExitInfo::ClientCmdExitInfo(const ClientCmdExitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ClientCmdExitInfo)
}

void ClientCmdExitInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  zone_ = 0u;
  num_ = 0u;
  bycmd_ = 0u;
  byparam_ = 0u;
  nettype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCmdExitInfo::~ClientCmdExitInfo() {
  // @@protoc_insertion_point(destructor:Pmd.ClientCmdExitInfo)
  SharedDtor();
}

void ClientCmdExitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientCmdExitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCmdExitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCmdExitInfo_descriptor_;
}

const ClientCmdExitInfo& ClientCmdExitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

ClientCmdExitInfo* ClientCmdExitInfo::default_instance_ = NULL;

ClientCmdExitInfo* ClientCmdExitInfo::New() const {
  return new ClientCmdExitInfo;
}

void ClientCmdExitInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClientCmdExitInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(time_, nettype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCmdExitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ClientCmdExitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zone;
        break;
      }

      // optional uint32 zone = 2;
      case 2: {
        if (tag == 16) {
         parse_zone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_)));
          set_has_zone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_byCmd;
        break;
      }

      // optional uint32 byCmd = 4;
      case 4: {
        if (tag == 32) {
         parse_byCmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bycmd_)));
          set_has_bycmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_byParam;
        break;
      }

      // optional uint32 byParam = 5;
      case 5: {
        if (tag == 40) {
         parse_byParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &byparam_)));
          set_has_byparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nettype;
        break;
      }

      // optional uint32 nettype = 6;
      case 6: {
        if (tag == 48) {
         parse_nettype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nettype_)));
          set_has_nettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ClientCmdExitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ClientCmdExitInfo)
  return false;
#undef DO_
}

void ClientCmdExitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ClientCmdExitInfo)
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint32 zone = 2;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional uint32 byCmd = 4;
  if (has_bycmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bycmd(), output);
  }

  // optional uint32 byParam = 5;
  if (has_byparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->byparam(), output);
  }

  // optional uint32 nettype = 6;
  if (has_nettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nettype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ClientCmdExitInfo)
}

::google::protobuf::uint8* ClientCmdExitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ClientCmdExitInfo)
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint32 zone = 2;
  if (has_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional uint32 byCmd = 4;
  if (has_bycmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bycmd(), target);
  }

  // optional uint32 byParam = 5;
  if (has_byparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->byparam(), target);
  }

  // optional uint32 nettype = 6;
  if (has_nettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nettype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ClientCmdExitInfo)
  return target;
}

int ClientCmdExitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 zone = 2;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 byCmd = 4;
    if (has_bycmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bycmd());
    }

    // optional uint32 byParam = 5;
    if (has_byparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->byparam());
    }

    // optional uint32 nettype = 6;
    if (has_nettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nettype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCmdExitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCmdExitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCmdExitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCmdExitInfo::MergeFrom(const ClientCmdExitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_zone()) {
      set_zone(from.zone());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bycmd()) {
      set_bycmd(from.bycmd());
    }
    if (from.has_byparam()) {
      set_byparam(from.byparam());
    }
    if (from.has_nettype()) {
      set_nettype(from.nettype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCmdExitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCmdExitInfo::CopyFrom(const ClientCmdExitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCmdExitInfo::IsInitialized() const {

  return true;
}

void ClientCmdExitInfo::Swap(ClientCmdExitInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(zone_, other->zone_);
    std::swap(num_, other->num_);
    std::swap(bycmd_, other->bycmd_);
    std::swap(byparam_, other->byparam_);
    std::swap(nettype_, other->nettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCmdExitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCmdExitInfo_descriptor_;
  metadata.reflection = ClientCmdExitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StGameClientCmdExitMonitorUserCmd_S::kDataFieldNumber;
#endif  // !_MSC_VER

StGameClientCmdExitMonitorUserCmd_S::StGameClientCmdExitMonitorUserCmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StGameClientCmdExitMonitorUserCmd_S)
}

void StGameClientCmdExitMonitorUserCmd_S::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::ClientCmdExitInfo*>(&::Pmd::ClientCmdExitInfo::default_instance());
}

StGameClientCmdExitMonitorUserCmd_S::StGameClientCmdExitMonitorUserCmd_S(const StGameClientCmdExitMonitorUserCmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StGameClientCmdExitMonitorUserCmd_S)
}

void StGameClientCmdExitMonitorUserCmd_S::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StGameClientCmdExitMonitorUserCmd_S::~StGameClientCmdExitMonitorUserCmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StGameClientCmdExitMonitorUserCmd_S)
  SharedDtor();
}

void StGameClientCmdExitMonitorUserCmd_S::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void StGameClientCmdExitMonitorUserCmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StGameClientCmdExitMonitorUserCmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StGameClientCmdExitMonitorUserCmd_S_descriptor_;
}

const StGameClientCmdExitMonitorUserCmd_S& StGameClientCmdExitMonitorUserCmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StGameClientCmdExitMonitorUserCmd_S* StGameClientCmdExitMonitorUserCmd_S::default_instance_ = NULL;

StGameClientCmdExitMonitorUserCmd_S* StGameClientCmdExitMonitorUserCmd_S::New() const {
  return new StGameClientCmdExitMonitorUserCmd_S;
}

void StGameClientCmdExitMonitorUserCmd_S::Clear() {
  if (has_data()) {
    if (data_ != NULL) data_->::Pmd::ClientCmdExitInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StGameClientCmdExitMonitorUserCmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StGameClientCmdExitMonitorUserCmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.ClientCmdExitInfo data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StGameClientCmdExitMonitorUserCmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StGameClientCmdExitMonitorUserCmd_S)
  return false;
#undef DO_
}

void StGameClientCmdExitMonitorUserCmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StGameClientCmdExitMonitorUserCmd_S)
  // optional .Pmd.ClientCmdExitInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StGameClientCmdExitMonitorUserCmd_S)
}

::google::protobuf::uint8* StGameClientCmdExitMonitorUserCmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StGameClientCmdExitMonitorUserCmd_S)
  // optional .Pmd.ClientCmdExitInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StGameClientCmdExitMonitorUserCmd_S)
  return target;
}

int StGameClientCmdExitMonitorUserCmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.ClientCmdExitInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StGameClientCmdExitMonitorUserCmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StGameClientCmdExitMonitorUserCmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StGameClientCmdExitMonitorUserCmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StGameClientCmdExitMonitorUserCmd_S::MergeFrom(const StGameClientCmdExitMonitorUserCmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Pmd::ClientCmdExitInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StGameClientCmdExitMonitorUserCmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StGameClientCmdExitMonitorUserCmd_S::CopyFrom(const StGameClientCmdExitMonitorUserCmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StGameClientCmdExitMonitorUserCmd_S::IsInitialized() const {

  return true;
}

void StGameClientCmdExitMonitorUserCmd_S::Swap(StGameClientCmdExitMonitorUserCmd_S* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StGameClientCmdExitMonitorUserCmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StGameClientCmdExitMonitorUserCmd_S_descriptor_;
  metadata.reflection = StGameClientCmdExitMonitorUserCmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StErrorLogMonitorUserCmd_S::kLoggerFieldNumber;
const int StErrorLogMonitorUserCmd_S::kGamezoneFieldNumber;
const int StErrorLogMonitorUserCmd_S::kRemoteaddrFieldNumber;
#endif  // !_MSC_VER

StErrorLogMonitorUserCmd_S::StErrorLogMonitorUserCmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.StErrorLogMonitorUserCmd_S)
}

void StErrorLogMonitorUserCmd_S::InitAsDefaultInstance() {
  gamezone_ = const_cast< ::Pmd::GameZoneInfo*>(&::Pmd::GameZoneInfo::default_instance());
}

StErrorLogMonitorUserCmd_S::StErrorLogMonitorUserCmd_S(const StErrorLogMonitorUserCmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.StErrorLogMonitorUserCmd_S)
}

void StErrorLogMonitorUserCmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  logger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamezone_ = NULL;
  remoteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StErrorLogMonitorUserCmd_S::~StErrorLogMonitorUserCmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.StErrorLogMonitorUserCmd_S)
  SharedDtor();
}

void StErrorLogMonitorUserCmd_S::SharedDtor() {
  if (logger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logger_;
  }
  if (remoteaddr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remoteaddr_;
  }
  if (this != default_instance_) {
    delete gamezone_;
  }
}

void StErrorLogMonitorUserCmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StErrorLogMonitorUserCmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StErrorLogMonitorUserCmd_S_descriptor_;
}

const StErrorLogMonitorUserCmd_S& StErrorLogMonitorUserCmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

StErrorLogMonitorUserCmd_S* StErrorLogMonitorUserCmd_S::default_instance_ = NULL;

StErrorLogMonitorUserCmd_S* StErrorLogMonitorUserCmd_S::New() const {
  return new StErrorLogMonitorUserCmd_S;
}

void StErrorLogMonitorUserCmd_S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_logger()) {
      if (logger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logger_->clear();
      }
    }
    if (has_gamezone()) {
      if (gamezone_ != NULL) gamezone_->::Pmd::GameZoneInfo::Clear();
    }
    if (has_remoteaddr()) {
      if (remoteaddr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remoteaddr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StErrorLogMonitorUserCmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.StErrorLogMonitorUserCmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string logger = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logger().data(), this->logger().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logger");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gamezone;
        break;
      }

      // optional .Pmd.GameZoneInfo gamezone = 2;
      case 2: {
        if (tag == 18) {
         parse_gamezone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamezone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remoteaddr;
        break;
      }

      // optional string remoteaddr = 3;
      case 3: {
        if (tag == 26) {
         parse_remoteaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remoteaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remoteaddr().data(), this->remoteaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remoteaddr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.StErrorLogMonitorUserCmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.StErrorLogMonitorUserCmd_S)
  return false;
#undef DO_
}

void StErrorLogMonitorUserCmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.StErrorLogMonitorUserCmd_S)
  // optional string logger = 1;
  if (has_logger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logger().data(), this->logger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->logger(), output);
  }

  // optional .Pmd.GameZoneInfo gamezone = 2;
  if (has_gamezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gamezone(), output);
  }

  // optional string remoteaddr = 3;
  if (has_remoteaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remoteaddr().data(), this->remoteaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remoteaddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remoteaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.StErrorLogMonitorUserCmd_S)
}

::google::protobuf::uint8* StErrorLogMonitorUserCmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.StErrorLogMonitorUserCmd_S)
  // optional string logger = 1;
  if (has_logger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logger().data(), this->logger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->logger(), target);
  }

  // optional .Pmd.GameZoneInfo gamezone = 2;
  if (has_gamezone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gamezone(), target);
  }

  // optional string remoteaddr = 3;
  if (has_remoteaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remoteaddr().data(), this->remoteaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remoteaddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remoteaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.StErrorLogMonitorUserCmd_S)
  return target;
}

int StErrorLogMonitorUserCmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string logger = 1;
    if (has_logger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logger());
    }

    // optional .Pmd.GameZoneInfo gamezone = 2;
    if (has_gamezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamezone());
    }

    // optional string remoteaddr = 3;
    if (has_remoteaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remoteaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StErrorLogMonitorUserCmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StErrorLogMonitorUserCmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StErrorLogMonitorUserCmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StErrorLogMonitorUserCmd_S::MergeFrom(const StErrorLogMonitorUserCmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logger()) {
      set_logger(from.logger());
    }
    if (from.has_gamezone()) {
      mutable_gamezone()->::Pmd::GameZoneInfo::MergeFrom(from.gamezone());
    }
    if (from.has_remoteaddr()) {
      set_remoteaddr(from.remoteaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StErrorLogMonitorUserCmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StErrorLogMonitorUserCmd_S::CopyFrom(const StErrorLogMonitorUserCmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StErrorLogMonitorUserCmd_S::IsInitialized() const {

  return true;
}

void StErrorLogMonitorUserCmd_S::Swap(StErrorLogMonitorUserCmd_S* other) {
  if (other != this) {
    std::swap(logger_, other->logger_);
    std::swap(gamezone_, other->gamezone_);
    std::swap(remoteaddr_, other->remoteaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StErrorLogMonitorUserCmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StErrorLogMonitorUserCmd_S_descriptor_;
  metadata.reflection = StErrorLogMonitorUserCmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPackageCodeMonitorPmd_CS::kCodeidFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kAccidFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kRetFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kFlagFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kCreatetimeFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kUsedtimeFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kUsedgameidFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kUsedzoneidFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kUseduidFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kExtdataFieldNumber;
const int QueryPackageCodeMonitorPmd_CS::kCodetypeFieldNumber;
#endif  // !_MSC_VER

QueryPackageCodeMonitorPmd_CS::QueryPackageCodeMonitorPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.QueryPackageCodeMonitorPmd_CS)
}

void QueryPackageCodeMonitorPmd_CS::InitAsDefaultInstance() {
}

QueryPackageCodeMonitorPmd_CS::QueryPackageCodeMonitorPmd_CS(const QueryPackageCodeMonitorPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.QueryPackageCodeMonitorPmd_CS)
}

void QueryPackageCodeMonitorPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  flag_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  usedtime_ = GOOGLE_ULONGLONG(0);
  usedgameid_ = 0u;
  usedzoneid_ = 0u;
  useduid_ = GOOGLE_ULONGLONG(0);
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPackageCodeMonitorPmd_CS::~QueryPackageCodeMonitorPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.QueryPackageCodeMonitorPmd_CS)
  SharedDtor();
}

void QueryPackageCodeMonitorPmd_CS::SharedDtor() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (this != default_instance_) {
  }
}

void QueryPackageCodeMonitorPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPackageCodeMonitorPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPackageCodeMonitorPmd_CS_descriptor_;
}

const QueryPackageCodeMonitorPmd_CS& QueryPackageCodeMonitorPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

QueryPackageCodeMonitorPmd_CS* QueryPackageCodeMonitorPmd_CS::default_instance_ = NULL;

QueryPackageCodeMonitorPmd_CS* QueryPackageCodeMonitorPmd_CS::New() const {
  return new QueryPackageCodeMonitorPmd_CS;
}

void QueryPackageCodeMonitorPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryPackageCodeMonitorPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accid_, usedzoneid_);
    if (has_codeid()) {
      if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codeid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    useduid_ = GOOGLE_ULONGLONG(0);
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
    codetype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPackageCodeMonitorPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.QueryPackageCodeMonitorPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string codeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codeid().data(), this->codeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // required uint64 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 5;
      case 5: {
        if (tag == 40) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_usedtime;
        break;
      }

      // optional uint64 usedtime = 6;
      case 6: {
        if (tag == 48) {
         parse_usedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedtime_)));
          set_has_usedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usedgameid;
        break;
      }

      // optional uint32 usedgameid = 7;
      case 7: {
        if (tag == 56) {
         parse_usedgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedgameid_)));
          set_has_usedgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_usedzoneid;
        break;
      }

      // optional uint32 usedzoneid = 8;
      case 8: {
        if (tag == 64) {
         parse_usedzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedzoneid_)));
          set_has_usedzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_useduid;
        break;
      }

      // optional uint64 useduid = 9;
      case 9: {
        if (tag == 72) {
         parse_useduid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &useduid_)));
          set_has_useduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_extdata;
        break;
      }

      // optional string extdata = 10;
      case 10: {
        if (tag == 82) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_codetype;
        break;
      }

      // optional uint32 codetype = 11;
      case 11: {
        if (tag == 88) {
         parse_codetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codetype_)));
          set_has_codetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.QueryPackageCodeMonitorPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.QueryPackageCodeMonitorPmd_CS)
  return false;
#undef DO_
}

void QueryPackageCodeMonitorPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.QueryPackageCodeMonitorPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codeid(), output);
  }

  // required uint64 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->createtime(), output);
  }

  // optional uint64 usedtime = 6;
  if (has_usedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->usedtime(), output);
  }

  // optional uint32 usedgameid = 7;
  if (has_usedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->usedgameid(), output);
  }

  // optional uint32 usedzoneid = 8;
  if (has_usedzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->usedzoneid(), output);
  }

  // optional uint64 useduid = 9;
  if (has_useduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->useduid(), output);
  }

  // optional string extdata = 10;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->extdata(), output);
  }

  // optional uint32 codetype = 11;
  if (has_codetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->codetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.QueryPackageCodeMonitorPmd_CS)
}

::google::protobuf::uint8* QueryPackageCodeMonitorPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.QueryPackageCodeMonitorPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codeid(), target);
  }

  // required uint64 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->createtime(), target);
  }

  // optional uint64 usedtime = 6;
  if (has_usedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->usedtime(), target);
  }

  // optional uint32 usedgameid = 7;
  if (has_usedgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->usedgameid(), target);
  }

  // optional uint32 usedzoneid = 8;
  if (has_usedzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->usedzoneid(), target);
  }

  // optional uint64 useduid = 9;
  if (has_useduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->useduid(), target);
  }

  // optional string extdata = 10;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->extdata(), target);
  }

  // optional uint32 codetype = 11;
  if (has_codetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->codetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.QueryPackageCodeMonitorPmd_CS)
  return target;
}

int QueryPackageCodeMonitorPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string codeid = 1;
    if (has_codeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codeid());
    }

    // required uint64 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint64 createtime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 usedtime = 6;
    if (has_usedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usedtime());
    }

    // optional uint32 usedgameid = 7;
    if (has_usedgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedgameid());
    }

    // optional uint32 usedzoneid = 8;
    if (has_usedzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedzoneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 useduid = 9;
    if (has_useduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->useduid());
    }

    // optional string extdata = 10;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional uint32 codetype = 11;
    if (has_codetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPackageCodeMonitorPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPackageCodeMonitorPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPackageCodeMonitorPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPackageCodeMonitorPmd_CS::MergeFrom(const QueryPackageCodeMonitorPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_codeid()) {
      set_codeid(from.codeid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_usedtime()) {
      set_usedtime(from.usedtime());
    }
    if (from.has_usedgameid()) {
      set_usedgameid(from.usedgameid());
    }
    if (from.has_usedzoneid()) {
      set_usedzoneid(from.usedzoneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_useduid()) {
      set_useduid(from.useduid());
    }
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
    if (from.has_codetype()) {
      set_codetype(from.codetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPackageCodeMonitorPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPackageCodeMonitorPmd_CS::CopyFrom(const QueryPackageCodeMonitorPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPackageCodeMonitorPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryPackageCodeMonitorPmd_CS::Swap(QueryPackageCodeMonitorPmd_CS* other) {
  if (other != this) {
    std::swap(codeid_, other->codeid_);
    std::swap(accid_, other->accid_);
    std::swap(ret_, other->ret_);
    std::swap(flag_, other->flag_);
    std::swap(createtime_, other->createtime_);
    std::swap(usedtime_, other->usedtime_);
    std::swap(usedgameid_, other->usedgameid_);
    std::swap(usedzoneid_, other->usedzoneid_);
    std::swap(useduid_, other->useduid_);
    std::swap(extdata_, other->extdata_);
    std::swap(codetype_, other->codetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPackageCodeMonitorPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPackageCodeMonitorPmd_CS_descriptor_;
  metadata.reflection = QueryPackageCodeMonitorPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUsePackageCodeMonitorPmd_CS::kCodeidFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kAccidFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kRetFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kCreatetimeFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kUsedtimeFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kUsedgameidFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kUsedzoneidFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kUseduidFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kExtdataFieldNumber;
const int RequestUsePackageCodeMonitorPmd_CS::kCodetypeFieldNumber;
#endif  // !_MSC_VER

RequestUsePackageCodeMonitorPmd_CS::RequestUsePackageCodeMonitorPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestUsePackageCodeMonitorPmd_CS)
}

void RequestUsePackageCodeMonitorPmd_CS::InitAsDefaultInstance() {
}

RequestUsePackageCodeMonitorPmd_CS::RequestUsePackageCodeMonitorPmd_CS(const RequestUsePackageCodeMonitorPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestUsePackageCodeMonitorPmd_CS)
}

void RequestUsePackageCodeMonitorPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  usedtime_ = GOOGLE_ULONGLONG(0);
  usedgameid_ = 0u;
  usedzoneid_ = 0u;
  useduid_ = GOOGLE_ULONGLONG(0);
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUsePackageCodeMonitorPmd_CS::~RequestUsePackageCodeMonitorPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestUsePackageCodeMonitorPmd_CS)
  SharedDtor();
}

void RequestUsePackageCodeMonitorPmd_CS::SharedDtor() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (this != default_instance_) {
  }
}

void RequestUsePackageCodeMonitorPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUsePackageCodeMonitorPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUsePackageCodeMonitorPmd_CS_descriptor_;
}

const RequestUsePackageCodeMonitorPmd_CS& RequestUsePackageCodeMonitorPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

RequestUsePackageCodeMonitorPmd_CS* RequestUsePackageCodeMonitorPmd_CS::default_instance_ = NULL;

RequestUsePackageCodeMonitorPmd_CS* RequestUsePackageCodeMonitorPmd_CS::New() const {
  return new RequestUsePackageCodeMonitorPmd_CS;
}

void RequestUsePackageCodeMonitorPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUsePackageCodeMonitorPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accid_, usedzoneid_);
    if (has_codeid()) {
      if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codeid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
    codetype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUsePackageCodeMonitorPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestUsePackageCodeMonitorPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string codeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codeid().data(), this->codeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accid;
        break;
      }

      // required uint64 accid = 2;
      case 2: {
        if (tag == 16) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 4;
      case 4: {
        if (tag == 32) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_usedtime;
        break;
      }

      // optional uint64 usedtime = 5;
      case 5: {
        if (tag == 40) {
         parse_usedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usedtime_)));
          set_has_usedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_usedgameid;
        break;
      }

      // optional uint32 usedgameid = 6;
      case 6: {
        if (tag == 48) {
         parse_usedgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedgameid_)));
          set_has_usedgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usedzoneid;
        break;
      }

      // optional uint32 usedzoneid = 7;
      case 7: {
        if (tag == 56) {
         parse_usedzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedzoneid_)));
          set_has_usedzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_useduid;
        break;
      }

      // optional uint64 useduid = 8;
      case 8: {
        if (tag == 64) {
         parse_useduid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &useduid_)));
          set_has_useduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_extdata;
        break;
      }

      // optional string extdata = 9;
      case 9: {
        if (tag == 74) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_codetype;
        break;
      }

      // optional uint32 codetype = 10;
      case 10: {
        if (tag == 80) {
         parse_codetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codetype_)));
          set_has_codetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestUsePackageCodeMonitorPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestUsePackageCodeMonitorPmd_CS)
  return false;
#undef DO_
}

void RequestUsePackageCodeMonitorPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestUsePackageCodeMonitorPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codeid(), output);
  }

  // required uint64 accid = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional uint64 createtime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->createtime(), output);
  }

  // optional uint64 usedtime = 5;
  if (has_usedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->usedtime(), output);
  }

  // optional uint32 usedgameid = 6;
  if (has_usedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->usedgameid(), output);
  }

  // optional uint32 usedzoneid = 7;
  if (has_usedzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->usedzoneid(), output);
  }

  // optional uint64 useduid = 8;
  if (has_useduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->useduid(), output);
  }

  // optional string extdata = 9;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->extdata(), output);
  }

  // optional uint32 codetype = 10;
  if (has_codetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->codetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestUsePackageCodeMonitorPmd_CS)
}

::google::protobuf::uint8* RequestUsePackageCodeMonitorPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestUsePackageCodeMonitorPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codeid(), target);
  }

  // required uint64 accid = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional uint64 createtime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->createtime(), target);
  }

  // optional uint64 usedtime = 5;
  if (has_usedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->usedtime(), target);
  }

  // optional uint32 usedgameid = 6;
  if (has_usedgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->usedgameid(), target);
  }

  // optional uint32 usedzoneid = 7;
  if (has_usedzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->usedzoneid(), target);
  }

  // optional uint64 useduid = 8;
  if (has_useduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->useduid(), target);
  }

  // optional string extdata = 9;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->extdata(), target);
  }

  // optional uint32 codetype = 10;
  if (has_codetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->codetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestUsePackageCodeMonitorPmd_CS)
  return target;
}

int RequestUsePackageCodeMonitorPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string codeid = 1;
    if (has_codeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codeid());
    }

    // required uint64 accid = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 createtime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 usedtime = 5;
    if (has_usedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usedtime());
    }

    // optional uint32 usedgameid = 6;
    if (has_usedgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedgameid());
    }

    // optional uint32 usedzoneid = 7;
    if (has_usedzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedzoneid());
    }

    // optional uint64 useduid = 8;
    if (has_useduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->useduid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string extdata = 9;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional uint32 codetype = 10;
    if (has_codetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUsePackageCodeMonitorPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUsePackageCodeMonitorPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUsePackageCodeMonitorPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUsePackageCodeMonitorPmd_CS::MergeFrom(const RequestUsePackageCodeMonitorPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_codeid()) {
      set_codeid(from.codeid());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_usedtime()) {
      set_usedtime(from.usedtime());
    }
    if (from.has_usedgameid()) {
      set_usedgameid(from.usedgameid());
    }
    if (from.has_usedzoneid()) {
      set_usedzoneid(from.usedzoneid());
    }
    if (from.has_useduid()) {
      set_useduid(from.useduid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
    if (from.has_codetype()) {
      set_codetype(from.codetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUsePackageCodeMonitorPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUsePackageCodeMonitorPmd_CS::CopyFrom(const RequestUsePackageCodeMonitorPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUsePackageCodeMonitorPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestUsePackageCodeMonitorPmd_CS::Swap(RequestUsePackageCodeMonitorPmd_CS* other) {
  if (other != this) {
    std::swap(codeid_, other->codeid_);
    std::swap(accid_, other->accid_);
    std::swap(ret_, other->ret_);
    std::swap(createtime_, other->createtime_);
    std::swap(usedtime_, other->usedtime_);
    std::swap(usedgameid_, other->usedgameid_);
    std::swap(usedzoneid_, other->usedzoneid_);
    std::swap(useduid_, other->useduid_);
    std::swap(extdata_, other->extdata_);
    std::swap(codetype_, other->codetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUsePackageCodeMonitorPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUsePackageCodeMonitorPmd_CS_descriptor_;
  metadata.reflection = RequestUsePackageCodeMonitorPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestInsertPackageCodeMonitorPmd_CS::kCodeidFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kRetFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kExtdataFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kFlagFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kCreatetimeFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kEndtimeFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kUsedgameidFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kUsedzoneidFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kUseduidFieldNumber;
const int RequestInsertPackageCodeMonitorPmd_CS::kCodetypeFieldNumber;
#endif  // !_MSC_VER

RequestInsertPackageCodeMonitorPmd_CS::RequestInsertPackageCodeMonitorPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
}

void RequestInsertPackageCodeMonitorPmd_CS::InitAsDefaultInstance() {
}

RequestInsertPackageCodeMonitorPmd_CS::RequestInsertPackageCodeMonitorPmd_CS(const RequestInsertPackageCodeMonitorPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
}

void RequestInsertPackageCodeMonitorPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0u;
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  usedgameid_ = 0u;
  usedzoneid_ = 0u;
  useduid_ = GOOGLE_ULONGLONG(0);
  codetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestInsertPackageCodeMonitorPmd_CS::~RequestInsertPackageCodeMonitorPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
  SharedDtor();
}

void RequestInsertPackageCodeMonitorPmd_CS::SharedDtor() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (this != default_instance_) {
  }
}

void RequestInsertPackageCodeMonitorPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInsertPackageCodeMonitorPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestInsertPackageCodeMonitorPmd_CS_descriptor_;
}

const RequestInsertPackageCodeMonitorPmd_CS& RequestInsertPackageCodeMonitorPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

RequestInsertPackageCodeMonitorPmd_CS* RequestInsertPackageCodeMonitorPmd_CS::default_instance_ = NULL;

RequestInsertPackageCodeMonitorPmd_CS* RequestInsertPackageCodeMonitorPmd_CS::New() const {
  return new RequestInsertPackageCodeMonitorPmd_CS;
}

void RequestInsertPackageCodeMonitorPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestInsertPackageCodeMonitorPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ret_, usedzoneid_);
    if (has_codeid()) {
      if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codeid_->clear();
      }
    }
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
  }
  ZR_(useduid_, codetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestInsertPackageCodeMonitorPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string codeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codeid().data(), this->codeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extdata;
        break;
      }

      // optional string extdata = 3;
      case 3: {
        if (tag == 26) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 5;
      case 5: {
        if (tag == 40) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional uint64 endtime = 6;
      case 6: {
        if (tag == 48) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_usedgameid;
        break;
      }

      // optional uint32 usedgameid = 7;
      case 7: {
        if (tag == 56) {
         parse_usedgameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedgameid_)));
          set_has_usedgameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_usedzoneid;
        break;
      }

      // optional uint32 usedzoneid = 8;
      case 8: {
        if (tag == 64) {
         parse_usedzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedzoneid_)));
          set_has_usedzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_useduid;
        break;
      }

      // optional uint64 useduid = 9;
      case 9: {
        if (tag == 72) {
         parse_useduid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &useduid_)));
          set_has_useduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_codetype;
        break;
      }

      // optional uint32 codetype = 10;
      case 10: {
        if (tag == 80) {
         parse_codetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codetype_)));
          set_has_codetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
  return false;
#undef DO_
}

void RequestInsertPackageCodeMonitorPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codeid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional string extdata = 3;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extdata(), output);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->createtime(), output);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->endtime(), output);
  }

  // optional uint32 usedgameid = 7;
  if (has_usedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->usedgameid(), output);
  }

  // optional uint32 usedzoneid = 8;
  if (has_usedzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->usedzoneid(), output);
  }

  // optional uint64 useduid = 9;
  if (has_useduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->useduid(), output);
  }

  // optional uint32 codetype = 10;
  if (has_codetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->codetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
}

::google::protobuf::uint8* RequestInsertPackageCodeMonitorPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codeid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional string extdata = 3;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extdata(), target);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // optional uint64 createtime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->createtime(), target);
  }

  // optional uint64 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->endtime(), target);
  }

  // optional uint32 usedgameid = 7;
  if (has_usedgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->usedgameid(), target);
  }

  // optional uint32 usedzoneid = 8;
  if (has_usedzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->usedzoneid(), target);
  }

  // optional uint64 useduid = 9;
  if (has_useduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->useduid(), target);
  }

  // optional uint32 codetype = 10;
  if (has_codetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->codetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
  return target;
}

int RequestInsertPackageCodeMonitorPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string codeid = 1;
    if (has_codeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codeid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional string extdata = 3;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint64 createtime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint64 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 usedgameid = 7;
    if (has_usedgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedgameid());
    }

    // optional uint32 usedzoneid = 8;
    if (has_usedzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedzoneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 useduid = 9;
    if (has_useduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->useduid());
    }

    // optional uint32 codetype = 10;
    if (has_codetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInsertPackageCodeMonitorPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestInsertPackageCodeMonitorPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestInsertPackageCodeMonitorPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestInsertPackageCodeMonitorPmd_CS::MergeFrom(const RequestInsertPackageCodeMonitorPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_codeid()) {
      set_codeid(from.codeid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_usedgameid()) {
      set_usedgameid(from.usedgameid());
    }
    if (from.has_usedzoneid()) {
      set_usedzoneid(from.usedzoneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_useduid()) {
      set_useduid(from.useduid());
    }
    if (from.has_codetype()) {
      set_codetype(from.codetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestInsertPackageCodeMonitorPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInsertPackageCodeMonitorPmd_CS::CopyFrom(const RequestInsertPackageCodeMonitorPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInsertPackageCodeMonitorPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestInsertPackageCodeMonitorPmd_CS::Swap(RequestInsertPackageCodeMonitorPmd_CS* other) {
  if (other != this) {
    std::swap(codeid_, other->codeid_);
    std::swap(ret_, other->ret_);
    std::swap(extdata_, other->extdata_);
    std::swap(flag_, other->flag_);
    std::swap(createtime_, other->createtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(usedgameid_, other->usedgameid_);
    std::swap(usedzoneid_, other->usedzoneid_);
    std::swap(useduid_, other->useduid_);
    std::swap(codetype_, other->codetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestInsertPackageCodeMonitorPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestInsertPackageCodeMonitorPmd_CS_descriptor_;
  metadata.reflection = RequestInsertPackageCodeMonitorPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestResetPackageCodeMonitorPmd_CS::kCodeidFieldNumber;
const int RequestResetPackageCodeMonitorPmd_CS::kRetFieldNumber;
#endif  // !_MSC_VER

RequestResetPackageCodeMonitorPmd_CS::RequestResetPackageCodeMonitorPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestResetPackageCodeMonitorPmd_CS)
}

void RequestResetPackageCodeMonitorPmd_CS::InitAsDefaultInstance() {
}

RequestResetPackageCodeMonitorPmd_CS::RequestResetPackageCodeMonitorPmd_CS(const RequestResetPackageCodeMonitorPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestResetPackageCodeMonitorPmd_CS)
}

void RequestResetPackageCodeMonitorPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestResetPackageCodeMonitorPmd_CS::~RequestResetPackageCodeMonitorPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.RequestResetPackageCodeMonitorPmd_CS)
  SharedDtor();
}

void RequestResetPackageCodeMonitorPmd_CS::SharedDtor() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (this != default_instance_) {
  }
}

void RequestResetPackageCodeMonitorPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestResetPackageCodeMonitorPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestResetPackageCodeMonitorPmd_CS_descriptor_;
}

const RequestResetPackageCodeMonitorPmd_CS& RequestResetPackageCodeMonitorPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitorpmd_2eproto();
  return *default_instance_;
}

RequestResetPackageCodeMonitorPmd_CS* RequestResetPackageCodeMonitorPmd_CS::default_instance_ = NULL;

RequestResetPackageCodeMonitorPmd_CS* RequestResetPackageCodeMonitorPmd_CS::New() const {
  return new RequestResetPackageCodeMonitorPmd_CS;
}

void RequestResetPackageCodeMonitorPmd_CS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_codeid()) {
      if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        codeid_->clear();
      }
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestResetPackageCodeMonitorPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestResetPackageCodeMonitorPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string codeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codeid().data(), this->codeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "codeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestResetPackageCodeMonitorPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestResetPackageCodeMonitorPmd_CS)
  return false;
#undef DO_
}

void RequestResetPackageCodeMonitorPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestResetPackageCodeMonitorPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codeid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestResetPackageCodeMonitorPmd_CS)
}

::google::protobuf::uint8* RequestResetPackageCodeMonitorPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestResetPackageCodeMonitorPmd_CS)
  // required string codeid = 1;
  if (has_codeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codeid().data(), this->codeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "codeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->codeid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestResetPackageCodeMonitorPmd_CS)
  return target;
}

int RequestResetPackageCodeMonitorPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string codeid = 1;
    if (has_codeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codeid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestResetPackageCodeMonitorPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestResetPackageCodeMonitorPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestResetPackageCodeMonitorPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestResetPackageCodeMonitorPmd_CS::MergeFrom(const RequestResetPackageCodeMonitorPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_codeid()) {
      set_codeid(from.codeid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestResetPackageCodeMonitorPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResetPackageCodeMonitorPmd_CS::CopyFrom(const RequestResetPackageCodeMonitorPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResetPackageCodeMonitorPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestResetPackageCodeMonitorPmd_CS::Swap(RequestResetPackageCodeMonitorPmd_CS* other) {
  if (other != this) {
    std::swap(codeid_, other->codeid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestResetPackageCodeMonitorPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestResetPackageCodeMonitorPmd_CS_descriptor_;
  metadata.reflection = RequestResetPackageCodeMonitorPmd_CS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
