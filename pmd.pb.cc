// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* GameZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlatCommand_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HttpReturnCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RobotUid_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pmd_2eproto() {
  protobuf_AddDesc_pmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pmd.proto");
  GOOGLE_CHECK(file != NULL);
  GameZoneInfo_descriptor_ = file->message_type(0);
  static const int GameZoneInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, zonename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, mysql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, redis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, rethink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, mongo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, zonestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, separatezoneuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, lobby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, zonetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, opentime_),
  };
  GameZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameZoneInfo_descriptor_,
      GameZoneInfo::default_instance_,
      GameZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameZoneInfo));
  ServerName_descriptor_ = file->message_type(1);
  static const int ServerName_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, gateway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, https_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, bill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, monitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, gmserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, webgate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, sdk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, logger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, uni_),
  };
  ServerName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerName_descriptor_,
      ServerName::default_instance_,
      ServerName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerName));
  ServerInfo_descriptor_ = file->message_type(2);
  static const int ServerInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, buildtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, svnversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, data1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, funcion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, reserve0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, reserve1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, reserve2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, reserve3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, time_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  PlatCommand_descriptor_ = file->enum_type(0);
  HttpReturnCode_descriptor_ = file->enum_type(1);
  TaskType_descriptor_ = file->enum_type(2);
  ServerType_descriptor_ = file->enum_type(3);
  NetType_descriptor_ = file->enum_type(4);
  RobotUid_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameZoneInfo_descriptor_, &GameZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerName_descriptor_, &ServerName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pmd_2eproto() {
  delete GameZoneInfo::default_instance_;
  delete GameZoneInfo_reflection_;
  delete ServerName::default_instance_;
  delete ServerName_reflection_;
  delete ServerName::_default_super_;
  delete ServerName::_default_login_;
  delete ServerName::_default_record_;
  delete ServerName::_default_session_;
  delete ServerName::_default_scene_;
  delete ServerName::_default_gateway_;
  delete ServerName::_default_info_;
  delete ServerName::_default_https_;
  delete ServerName::_default_change_;
  delete ServerName::_default_user_;
  delete ServerName::_default_bill_;
  delete ServerName::_default_name_;
  delete ServerName::_default_monitor_;
  delete ServerName::_default_gmserver_;
  delete ServerName::_default_state_;
  delete ServerName::_default_sound_;
  delete ServerName::_default_webgate_;
  delete ServerName::_default_sdk_;
  delete ServerName::_default_logger_;
  delete ServerName::_default_uni_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
}

void protobuf_AddDesc_pmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpmd.proto\022\003Pmd\"\357\001\n\014GameZoneInfo\022\016\n\006gam"
    "eid\030\001 \001(\r\022\016\n\006zoneid\030\002 \001(\r\022\020\n\010gamename\030\003 "
    "\001(\t\022\020\n\010zonename\030\004 \001(\t\022\r\n\005mysql\030\005 \001(\t\022\r\n\005"
    "redis\030\006 \001(\t\022\017\n\007rethink\030\007 \001(\t\022\r\n\005mongo\030\010 "
    "\001(\t\022\021\n\tzonestate\030\t \001(\r\022\027\n\017separatezoneui"
    "d\030\n \001(\010\022\r\n\005lobby\030\013 \001(\t\022\020\n\010zonetype\030\014 \001(\r"
    "\022\020\n\010opentime\030\r \001(\t\"\303\004\n\nServerName\022\032\n\005Sup"
    "er\030\001 \001(\t:\013SuperServer\022\032\n\005Login\030\n \001(\t:\013Lo"
    "ginServer\022\034\n\006Record\030\013 \001(\t:\014RecordServer\022"
    "\036\n\007Session\030\024 \001(\t:\rSessionServer\022\033\n\005Scene"
    "\030\025 \001(\t:\014ScenesServer\022\036\n\007Gateway\030\026 \001(\t:\rG"
    "atewayServer\022\030\n\004Info\030\027 \001(\t:\nInfoServer\022\032"
    "\n\005Https\030\030 \001(\t:\013HttpsServer\022\034\n\006Change\030\031 \001"
    "(\t:\014ChangeServer\022\030\n\004User\030\032 \001(\t:\nUserServ"
    "er\022\030\n\004Bill\030\033 \001(\t:\nBillServer\022\030\n\004Name\030\034 \001"
    "(\t:\nNameServer\022\036\n\007Monitor\030\035 \001(\t:\rMonitor"
    "Server\022\032\n\010GmServer\030\036 \001(\t:\010GmServer\022\032\n\005St"
    "ate\030\037 \001(\t:\013StateServer\022\032\n\005Sound\030  \001(\t:\013S"
    "oundServer\022\036\n\007WebGate\030( \001(\t:\rWebGateServ"
    "er\022\026\n\003Sdk\030+ \001(\t:\tSdkServer\022\034\n\006Logger\030, \001"
    "(\t:\014LoggerServer\022\026\n\003Uni\030- \001(\t:\tUniServer"
    "\"\224\002\n\nServerInfo\022\016\n\006zoneid\030\001 \001(\r\022\020\n\010serve"
    "rid\030\002 \001(\r\022\022\n\nservertype\030\003 \001(\r\022\020\n\010protoco"
    "l\030\004 \001(\r\022\021\n\tbuildtime\030\005 \001(\r\022\022\n\nsvnversion"
    "\030\006 \001(\r\022\r\n\005data1\030\007 \001(\r\022\017\n\007funcion\030\010 \001(\r\022\020"
    "\n\010reserve0\030\t \001(\r\022\020\n\010reserve1\030\n \001(\r\022\020\n\010re"
    "serve2\030\013 \001(\r\022\020\n\010reserve3\030\014 \001(\r\022\020\n\010server"
    "ip\030\r \001(\r\022\017\n\007usernum\030\016 \001(\r\022\014\n\004time\030\017 \001(\r*"
    "\371\001\n\013PlatCommand\022\024\n\020PlatCommand_Null\020\000\022\027\n"
    "\022PlatCommand_Logger\020\365\001\022\026\n\021PlatCommand_Lo"
    "bby\020\366\001\022\025\n\020PlatCommand_Push\020\367\001\022\023\n\016PlatCom"
    "mand_Gm\020\370\001\022\030\n\023PlatCommand_Monitor\020\371\001\022\026\n\021"
    "PlatCommand_Login\020\372\001\022\030\n\023PlatCommand_Forw"
    "ard\020\373\001\022\024\n\017PlatCommand_Sdk\020\374\001\022\025\n\020PlatComm"
    "and_Chat\020\375\001*\211\004\n\016HttpReturnCode\022\027\n\023HttpRe"
    "turnCode_Null\020\000\022\032\n\026HttpReturnCode_DbErro"
    "r\020\002\022$\n HttpReturnCode_GameZoneListError\020"
    "\005\022\034\n\030HttpReturnCode_SignError\020\013\022!\n\035HttpR"
    "eturnCode_ServerShutDown\020\014\022\"\n\036HttpReturn"
    "Code_JsonSyntaxError\020\r\022#\n\037HttpReturnCode"
    "_JsonMessageError\020\016\022\"\n\036HttpReturnCode_To"
    "kenValueError\020\017\022!\n\035HttpReturnCode_WaiGua"
    "UidError\020\020\022!\n\035HttpReturnCode_NoGatewaytD"
    "own\020\021\022\036\n\032HttpReturnCode_NoSdkServer\020\022\022\"\n"
    "\036HttpReturnCode_SdkCheckSignErr\020\023\022%\n!Htt"
    "pReturnCode_Sdk3PartyServerErr\020\024\022\036\n\032Http"
    "ReturnCode_ProtobufErr\020\025\022\035\n\031HttpReturnCo"
    "de_GatewayErr\020\026*\253\001\n\010TaskType\022\021\n\rTaskType"
    "_Null\020\000\022\024\n\020TaskType_Monitor\020\001\022\022\n\016TaskTyp"
    "e_Login\020\002\022\022\n\016TaskType_NameS\020\003\022\020\n\014TaskTyp"
    "e_Sdk\020\004\022\017\n\013TaskType_Gm\020\005\022\024\n\020TaskType_Gat"
    "eway\020\006\022\025\n\021TaskType_GameZone\020\007*\373\006\n\nServer"
    "Type\022\021\n\rUNKNOWNSERVER\020\000\022\017\n\013SUPERSERVER\020\001"
    "\022\017\n\013LOGINSERVER\020\n\022\020\n\014RECORDSERVER\020\013\022\021\n\rS"
    "ESSIONSERVER\020\024\022\020\n\014SCENESSERVER\020\025\022\021\n\rGATE"
    "WAYSERVER\020\026\022\016\n\nINFOSERVER\020\027\022\016\n\nHTTPSERVE"
    "R\020\030\022\020\n\014CHANGESERVER\020\031\022\016\n\nUSERSERVER\020\032\022\016\n"
    "\nBILLSERVER\020\033\022\016\n\nNAMESERVER\020\034\022\021\n\rMONITOR"
    "SERVER\020\035\022\014\n\010GMSERVER\020\036\022\020\n\014STATERSERVER\020\037"
    "\022\017\n\013SOUNDSERVER\020 \022\025\n\021BILLSERVER_ALIPAY\020!"
    "\022\024\n\020BILLSERVER_JUNKA\020\"\022\032\n\026BILLSERVER_TIA"
    "NXIATONG\020#\022\026\n\022BILLSERVER_ZONGYOU\020$\022\026\n\022BI"
    "LLSERVER_OFFLINE\020%\022\026\n\022BILLSERVER_MESSAGE"
    "\020&\022\022\n\016BILLSERVER_ZQB\020\'\022\021\n\rWEBGATESERVER\020"
    "(\022\024\n\020BILLSERVER_BAIDU\020)\022\023\n\017BILLSERVER_SH"
    "UN\020*\022\r\n\tSDKSERVER\020+\022\020\n\014LOGGERSERVER\020,\022\014\n"
    "\010UNILIGHT\020-\022\022\n\016MAX_SERVERTYPE\020.\022\021\n\rUnkno"
    "wnServer\020\000\022\017\n\013LoginServer\020\n\022\021\n\rGatewaySe"
    "rver\020\026\022\016\n\nInfoServer\020\027\022\017\n\013HttpsServer\020\030\022"
    "\020\n\014ChangeServer\020\031\022\016\n\nUserServer\020\032\022\016\n\nBil"
    "lServer\020\033\022\016\n\nNameServer\020\034\022\021\n\rMonitorServ"
    "er\020\035\022\014\n\010GmServer\020\036\022\017\n\013StateServer\020\037\022\017\n\013S"
    "oundServer\020 \022\021\n\rWebGateServer\020(\022\r\n\tSdkSe"
    "rver\020+\022\020\n\014LoggerServer\020,\022\r\n\tUniServer\020-\032"
    "\002\020\001*N\n\007NetType\022\020\n\014NetType_near\020\000\022\017\n\013NetT"
    "ype_far\020\001\022\017\n\013NetType_CTC\020\002\022\017\n\013NetType_CN"
    "C\020\003*3\n\010RobotUid\022\023\n\016RobotUid_begin\020\220N\022\022\n\014"
    "RobotUid_end\020\240\234\001", 3096);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pmd.proto", &protobuf_RegisterTypes);
  GameZoneInfo::default_instance_ = new GameZoneInfo();
  ServerName::_default_super_ =
      new ::std::string("SuperServer", 11);
  ServerName::_default_login_ =
      new ::std::string("LoginServer", 11);
  ServerName::_default_record_ =
      new ::std::string("RecordServer", 12);
  ServerName::_default_session_ =
      new ::std::string("SessionServer", 13);
  ServerName::_default_scene_ =
      new ::std::string("ScenesServer", 12);
  ServerName::_default_gateway_ =
      new ::std::string("GatewayServer", 13);
  ServerName::_default_info_ =
      new ::std::string("InfoServer", 10);
  ServerName::_default_https_ =
      new ::std::string("HttpsServer", 11);
  ServerName::_default_change_ =
      new ::std::string("ChangeServer", 12);
  ServerName::_default_user_ =
      new ::std::string("UserServer", 10);
  ServerName::_default_bill_ =
      new ::std::string("BillServer", 10);
  ServerName::_default_name_ =
      new ::std::string("NameServer", 10);
  ServerName::_default_monitor_ =
      new ::std::string("MonitorServer", 13);
  ServerName::_default_gmserver_ =
      new ::std::string("GmServer", 8);
  ServerName::_default_state_ =
      new ::std::string("StateServer", 11);
  ServerName::_default_sound_ =
      new ::std::string("SoundServer", 11);
  ServerName::_default_webgate_ =
      new ::std::string("WebGateServer", 13);
  ServerName::_default_sdk_ =
      new ::std::string("SdkServer", 9);
  ServerName::_default_logger_ =
      new ::std::string("LoggerServer", 12);
  ServerName::_default_uni_ =
      new ::std::string("UniServer", 9);
  ServerName::default_instance_ = new ServerName();
  ServerInfo::default_instance_ = new ServerInfo();
  GameZoneInfo::default_instance_->InitAsDefaultInstance();
  ServerName::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pmd_2eproto {
  StaticDescriptorInitializer_pmd_2eproto() {
    protobuf_AddDesc_pmd_2eproto();
  }
} static_descriptor_initializer_pmd_2eproto_;
const ::google::protobuf::EnumDescriptor* PlatCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatCommand_descriptor_;
}
bool PlatCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HttpReturnCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpReturnCode_descriptor_;
}
bool HttpReturnCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 5:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskType_descriptor_;
}
bool TaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerType_descriptor_;
}
bool ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetType_descriptor_;
}
bool NetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RobotUid_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotUid_descriptor_;
}
bool RobotUid_IsValid(int value) {
  switch(value) {
    case 10000:
    case 20000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameZoneInfo::kGameidFieldNumber;
const int GameZoneInfo::kZoneidFieldNumber;
const int GameZoneInfo::kGamenameFieldNumber;
const int GameZoneInfo::kZonenameFieldNumber;
const int GameZoneInfo::kMysqlFieldNumber;
const int GameZoneInfo::kRedisFieldNumber;
const int GameZoneInfo::kRethinkFieldNumber;
const int GameZoneInfo::kMongoFieldNumber;
const int GameZoneInfo::kZonestateFieldNumber;
const int GameZoneInfo::kSeparatezoneuidFieldNumber;
const int GameZoneInfo::kLobbyFieldNumber;
const int GameZoneInfo::kZonetypeFieldNumber;
const int GameZoneInfo::kOpentimeFieldNumber;
#endif  // !_MSC_VER

GameZoneInfo::GameZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GameZoneInfo)
}

void GameZoneInfo::InitAsDefaultInstance() {
}

GameZoneInfo::GameZoneInfo(const GameZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GameZoneInfo)
}

void GameZoneInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mysql_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rethink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mongo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zonestate_ = 0u;
  separatezoneuid_ = false;
  lobby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zonetype_ = 0u;
  opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameZoneInfo::~GameZoneInfo() {
  // @@protoc_insertion_point(destructor:Pmd.GameZoneInfo)
  SharedDtor();
}

void GameZoneInfo::SharedDtor() {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (zonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zonename_;
  }
  if (mysql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mysql_;
  }
  if (redis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete redis_;
  }
  if (rethink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rethink_;
  }
  if (mongo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mongo_;
  }
  if (lobby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lobby_;
  }
  if (opentime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opentime_;
  }
  if (this != default_instance_) {
  }
}

void GameZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameZoneInfo_descriptor_;
}

const GameZoneInfo& GameZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pmd_2eproto();
  return *default_instance_;
}

GameZoneInfo* GameZoneInfo::default_instance_ = NULL;

GameZoneInfo* GameZoneInfo::New() const {
  return new GameZoneInfo;
}

void GameZoneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameZoneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, zoneid_);
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gamename_->clear();
      }
    }
    if (has_zonename()) {
      if (zonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        zonename_->clear();
      }
    }
    if (has_mysql()) {
      if (mysql_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mysql_->clear();
      }
    }
    if (has_redis()) {
      if (redis_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        redis_->clear();
      }
    }
    if (has_rethink()) {
      if (rethink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rethink_->clear();
      }
    }
    if (has_mongo()) {
      if (mongo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mongo_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(zonestate_, separatezoneuid_);
    if (has_lobby()) {
      if (lobby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lobby_->clear();
      }
    }
    zonetype_ = 0u;
    if (has_opentime()) {
      if (opentime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        opentime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GameZoneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gamename;
        break;
      }

      // optional string gamename = 3;
      case 3: {
        if (tag == 26) {
         parse_gamename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gamename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_zonename;
        break;
      }

      // optional string zonename = 4;
      case 4: {
        if (tag == 34) {
         parse_zonename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zonename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zonename().data(), this->zonename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mysql;
        break;
      }

      // optional string mysql = 5;
      case 5: {
        if (tag == 42) {
         parse_mysql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mysql().data(), this->mysql().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mysql");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_redis;
        break;
      }

      // optional string redis = 6;
      case 6: {
        if (tag == 50) {
         parse_redis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redis()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redis().data(), this->redis().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "redis");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rethink;
        break;
      }

      // optional string rethink = 7;
      case 7: {
        if (tag == 58) {
         parse_rethink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rethink()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rethink().data(), this->rethink().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rethink");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mongo;
        break;
      }

      // optional string mongo = 8;
      case 8: {
        if (tag == 66) {
         parse_mongo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mongo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mongo().data(), this->mongo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mongo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_zonestate;
        break;
      }

      // optional uint32 zonestate = 9;
      case 9: {
        if (tag == 72) {
         parse_zonestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zonestate_)));
          set_has_zonestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_separatezoneuid;
        break;
      }

      // optional bool separatezoneuid = 10;
      case 10: {
        if (tag == 80) {
         parse_separatezoneuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &separatezoneuid_)));
          set_has_separatezoneuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_lobby;
        break;
      }

      // optional string lobby = 11;
      case 11: {
        if (tag == 90) {
         parse_lobby:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lobby().data(), this->lobby().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lobby");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_zonetype;
        break;
      }

      // optional uint32 zonetype = 12;
      case 12: {
        if (tag == 96) {
         parse_zonetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zonetype_)));
          set_has_zonetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_opentime;
        break;
      }

      // optional string opentime = 13;
      case 13: {
        if (tag == 106) {
         parse_opentime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opentime().data(), this->opentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "opentime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GameZoneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GameZoneInfo)
  return false;
#undef DO_
}

void GameZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GameZoneInfo)
  // optional uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional string gamename = 3;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gamename(), output);
  }

  // optional string zonename = 4;
  if (has_zonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zonename().data(), this->zonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->zonename(), output);
  }

  // optional string mysql = 5;
  if (has_mysql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mysql().data(), this->mysql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mysql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mysql(), output);
  }

  // optional string redis = 6;
  if (has_redis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redis().data(), this->redis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redis");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->redis(), output);
  }

  // optional string rethink = 7;
  if (has_rethink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rethink().data(), this->rethink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rethink");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rethink(), output);
  }

  // optional string mongo = 8;
  if (has_mongo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mongo().data(), this->mongo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mongo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->mongo(), output);
  }

  // optional uint32 zonestate = 9;
  if (has_zonestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->zonestate(), output);
  }

  // optional bool separatezoneuid = 10;
  if (has_separatezoneuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->separatezoneuid(), output);
  }

  // optional string lobby = 11;
  if (has_lobby()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby().data(), this->lobby().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lobby");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->lobby(), output);
  }

  // optional uint32 zonetype = 12;
  if (has_zonetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->zonetype(), output);
  }

  // optional string opentime = 13;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opentime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->opentime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GameZoneInfo)
}

::google::protobuf::uint8* GameZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GameZoneInfo)
  // optional uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // optional uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional string gamename = 3;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gamename(), target);
  }

  // optional string zonename = 4;
  if (has_zonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zonename().data(), this->zonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->zonename(), target);
  }

  // optional string mysql = 5;
  if (has_mysql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mysql().data(), this->mysql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mysql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mysql(), target);
  }

  // optional string redis = 6;
  if (has_redis()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redis().data(), this->redis().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "redis");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->redis(), target);
  }

  // optional string rethink = 7;
  if (has_rethink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rethink().data(), this->rethink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rethink");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rethink(), target);
  }

  // optional string mongo = 8;
  if (has_mongo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mongo().data(), this->mongo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mongo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mongo(), target);
  }

  // optional uint32 zonestate = 9;
  if (has_zonestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->zonestate(), target);
  }

  // optional bool separatezoneuid = 10;
  if (has_separatezoneuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->separatezoneuid(), target);
  }

  // optional string lobby = 11;
  if (has_lobby()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby().data(), this->lobby().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lobby");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lobby(), target);
  }

  // optional uint32 zonetype = 12;
  if (has_zonetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->zonetype(), target);
  }

  // optional string opentime = 13;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opentime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->opentime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GameZoneInfo)
  return target;
}

int GameZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string gamename = 3;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }

    // optional string zonename = 4;
    if (has_zonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zonename());
    }

    // optional string mysql = 5;
    if (has_mysql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysql());
    }

    // optional string redis = 6;
    if (has_redis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redis());
    }

    // optional string rethink = 7;
    if (has_rethink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rethink());
    }

    // optional string mongo = 8;
    if (has_mongo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mongo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 zonestate = 9;
    if (has_zonestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zonestate());
    }

    // optional bool separatezoneuid = 10;
    if (has_separatezoneuid()) {
      total_size += 1 + 1;
    }

    // optional string lobby = 11;
    if (has_lobby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby());
    }

    // optional uint32 zonetype = 12;
    if (has_zonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zonetype());
    }

    // optional string opentime = 13;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opentime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameZoneInfo::MergeFrom(const GameZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_zonename()) {
      set_zonename(from.zonename());
    }
    if (from.has_mysql()) {
      set_mysql(from.mysql());
    }
    if (from.has_redis()) {
      set_redis(from.redis());
    }
    if (from.has_rethink()) {
      set_rethink(from.rethink());
    }
    if (from.has_mongo()) {
      set_mongo(from.mongo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zonestate()) {
      set_zonestate(from.zonestate());
    }
    if (from.has_separatezoneuid()) {
      set_separatezoneuid(from.separatezoneuid());
    }
    if (from.has_lobby()) {
      set_lobby(from.lobby());
    }
    if (from.has_zonetype()) {
      set_zonetype(from.zonetype());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameZoneInfo::CopyFrom(const GameZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameZoneInfo::IsInitialized() const {

  return true;
}

void GameZoneInfo::Swap(GameZoneInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gamename_, other->gamename_);
    std::swap(zonename_, other->zonename_);
    std::swap(mysql_, other->mysql_);
    std::swap(redis_, other->redis_);
    std::swap(rethink_, other->rethink_);
    std::swap(mongo_, other->mongo_);
    std::swap(zonestate_, other->zonestate_);
    std::swap(separatezoneuid_, other->separatezoneuid_);
    std::swap(lobby_, other->lobby_);
    std::swap(zonetype_, other->zonetype_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameZoneInfo_descriptor_;
  metadata.reflection = GameZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ServerName::_default_super_ = NULL;
::std::string* ServerName::_default_login_ = NULL;
::std::string* ServerName::_default_record_ = NULL;
::std::string* ServerName::_default_session_ = NULL;
::std::string* ServerName::_default_scene_ = NULL;
::std::string* ServerName::_default_gateway_ = NULL;
::std::string* ServerName::_default_info_ = NULL;
::std::string* ServerName::_default_https_ = NULL;
::std::string* ServerName::_default_change_ = NULL;
::std::string* ServerName::_default_user_ = NULL;
::std::string* ServerName::_default_bill_ = NULL;
::std::string* ServerName::_default_name_ = NULL;
::std::string* ServerName::_default_monitor_ = NULL;
::std::string* ServerName::_default_gmserver_ = NULL;
::std::string* ServerName::_default_state_ = NULL;
::std::string* ServerName::_default_sound_ = NULL;
::std::string* ServerName::_default_webgate_ = NULL;
::std::string* ServerName::_default_sdk_ = NULL;
::std::string* ServerName::_default_logger_ = NULL;
::std::string* ServerName::_default_uni_ = NULL;
#ifndef _MSC_VER
const int ServerName::kSuperFieldNumber;
const int ServerName::kLoginFieldNumber;
const int ServerName::kRecordFieldNumber;
const int ServerName::kSessionFieldNumber;
const int ServerName::kSceneFieldNumber;
const int ServerName::kGatewayFieldNumber;
const int ServerName::kInfoFieldNumber;
const int ServerName::kHttpsFieldNumber;
const int ServerName::kChangeFieldNumber;
const int ServerName::kUserFieldNumber;
const int ServerName::kBillFieldNumber;
const int ServerName::kNameFieldNumber;
const int ServerName::kMonitorFieldNumber;
const int ServerName::kGmServerFieldNumber;
const int ServerName::kStateFieldNumber;
const int ServerName::kSoundFieldNumber;
const int ServerName::kWebGateFieldNumber;
const int ServerName::kSdkFieldNumber;
const int ServerName::kLoggerFieldNumber;
const int ServerName::kUniFieldNumber;
#endif  // !_MSC_VER

ServerName::ServerName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ServerName)
}

void ServerName::InitAsDefaultInstance() {
}

ServerName::ServerName(const ServerName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ServerName)
}

void ServerName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  super_ = const_cast< ::std::string*>(_default_super_);
  login_ = const_cast< ::std::string*>(_default_login_);
  record_ = const_cast< ::std::string*>(_default_record_);
  session_ = const_cast< ::std::string*>(_default_session_);
  scene_ = const_cast< ::std::string*>(_default_scene_);
  gateway_ = const_cast< ::std::string*>(_default_gateway_);
  info_ = const_cast< ::std::string*>(_default_info_);
  https_ = const_cast< ::std::string*>(_default_https_);
  change_ = const_cast< ::std::string*>(_default_change_);
  user_ = const_cast< ::std::string*>(_default_user_);
  bill_ = const_cast< ::std::string*>(_default_bill_);
  name_ = const_cast< ::std::string*>(_default_name_);
  monitor_ = const_cast< ::std::string*>(_default_monitor_);
  gmserver_ = const_cast< ::std::string*>(_default_gmserver_);
  state_ = const_cast< ::std::string*>(_default_state_);
  sound_ = const_cast< ::std::string*>(_default_sound_);
  webgate_ = const_cast< ::std::string*>(_default_webgate_);
  sdk_ = const_cast< ::std::string*>(_default_sdk_);
  logger_ = const_cast< ::std::string*>(_default_logger_);
  uni_ = const_cast< ::std::string*>(_default_uni_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerName::~ServerName() {
  // @@protoc_insertion_point(destructor:Pmd.ServerName)
  SharedDtor();
}

void ServerName::SharedDtor() {
  if (super_ != _default_super_) {
    delete super_;
  }
  if (login_ != _default_login_) {
    delete login_;
  }
  if (record_ != _default_record_) {
    delete record_;
  }
  if (session_ != _default_session_) {
    delete session_;
  }
  if (scene_ != _default_scene_) {
    delete scene_;
  }
  if (gateway_ != _default_gateway_) {
    delete gateway_;
  }
  if (info_ != _default_info_) {
    delete info_;
  }
  if (https_ != _default_https_) {
    delete https_;
  }
  if (change_ != _default_change_) {
    delete change_;
  }
  if (user_ != _default_user_) {
    delete user_;
  }
  if (bill_ != _default_bill_) {
    delete bill_;
  }
  if (name_ != _default_name_) {
    delete name_;
  }
  if (monitor_ != _default_monitor_) {
    delete monitor_;
  }
  if (gmserver_ != _default_gmserver_) {
    delete gmserver_;
  }
  if (state_ != _default_state_) {
    delete state_;
  }
  if (sound_ != _default_sound_) {
    delete sound_;
  }
  if (webgate_ != _default_webgate_) {
    delete webgate_;
  }
  if (sdk_ != _default_sdk_) {
    delete sdk_;
  }
  if (logger_ != _default_logger_) {
    delete logger_;
  }
  if (uni_ != _default_uni_) {
    delete uni_;
  }
  if (this != default_instance_) {
  }
}

void ServerName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerName_descriptor_;
}

const ServerName& ServerName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pmd_2eproto();
  return *default_instance_;
}

ServerName* ServerName::default_instance_ = NULL;

ServerName* ServerName::New() const {
  return new ServerName;
}

void ServerName::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_super()) {
      if (super_ != _default_super_) {
        super_->assign(*_default_super_);
      }
    }
    if (has_login()) {
      if (login_ != _default_login_) {
        login_->assign(*_default_login_);
      }
    }
    if (has_record()) {
      if (record_ != _default_record_) {
        record_->assign(*_default_record_);
      }
    }
    if (has_session()) {
      if (session_ != _default_session_) {
        session_->assign(*_default_session_);
      }
    }
    if (has_scene()) {
      if (scene_ != _default_scene_) {
        scene_->assign(*_default_scene_);
      }
    }
    if (has_gateway()) {
      if (gateway_ != _default_gateway_) {
        gateway_->assign(*_default_gateway_);
      }
    }
    if (has_info()) {
      if (info_ != _default_info_) {
        info_->assign(*_default_info_);
      }
    }
    if (has_https()) {
      if (https_ != _default_https_) {
        https_->assign(*_default_https_);
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_change()) {
      if (change_ != _default_change_) {
        change_->assign(*_default_change_);
      }
    }
    if (has_user()) {
      if (user_ != _default_user_) {
        user_->assign(*_default_user_);
      }
    }
    if (has_bill()) {
      if (bill_ != _default_bill_) {
        bill_->assign(*_default_bill_);
      }
    }
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_monitor()) {
      if (monitor_ != _default_monitor_) {
        monitor_->assign(*_default_monitor_);
      }
    }
    if (has_gmserver()) {
      if (gmserver_ != _default_gmserver_) {
        gmserver_->assign(*_default_gmserver_);
      }
    }
    if (has_state()) {
      if (state_ != _default_state_) {
        state_->assign(*_default_state_);
      }
    }
    if (has_sound()) {
      if (sound_ != _default_sound_) {
        sound_->assign(*_default_sound_);
      }
    }
  }
  if (_has_bits_[16 / 32] & 983040) {
    if (has_webgate()) {
      if (webgate_ != _default_webgate_) {
        webgate_->assign(*_default_webgate_);
      }
    }
    if (has_sdk()) {
      if (sdk_ != _default_sdk_) {
        sdk_->assign(*_default_sdk_);
      }
    }
    if (has_logger()) {
      if (logger_ != _default_logger_) {
        logger_->assign(*_default_logger_);
      }
    }
    if (has_uni()) {
      if (uni_ != _default_uni_) {
        uni_->assign(*_default_uni_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ServerName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Super = 1 [default = "SuperServer"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_super()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->super().data(), this->super().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "super");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Login;
        break;
      }

      // optional string Login = 10 [default = "LoginServer"];
      case 10: {
        if (tag == 82) {
         parse_Login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Record;
        break;
      }

      // optional string Record = 11 [default = "RecordServer"];
      case 11: {
        if (tag == 90) {
         parse_Record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "record");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_Session;
        break;
      }

      // optional string Session = 20 [default = "SessionServer"];
      case 20: {
        if (tag == 162) {
         parse_Session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_Scene;
        break;
      }

      // optional string Scene = 21 [default = "ScenesServer"];
      case 21: {
        if (tag == 170) {
         parse_Scene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scene().data(), this->scene().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scene");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_Gateway;
        break;
      }

      // optional string Gateway = 22 [default = "GatewayServer"];
      case 22: {
        if (tag == 178) {
         parse_Gateway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gateway().data(), this->gateway().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gateway");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_Info;
        break;
      }

      // optional string Info = 23 [default = "InfoServer"];
      case 23: {
        if (tag == 186) {
         parse_Info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_Https;
        break;
      }

      // optional string Https = 24 [default = "HttpsServer"];
      case 24: {
        if (tag == 194) {
         parse_Https:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_https()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->https().data(), this->https().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "https");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_Change;
        break;
      }

      // optional string Change = 25 [default = "ChangeServer"];
      case 25: {
        if (tag == 202) {
         parse_Change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->change().data(), this->change().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "change");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_User;
        break;
      }

      // optional string User = 26 [default = "UserServer"];
      case 26: {
        if (tag == 210) {
         parse_User:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_Bill;
        break;
      }

      // optional string Bill = 27 [default = "BillServer"];
      case 27: {
        if (tag == 218) {
         parse_Bill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bill().data(), this->bill().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bill");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_Name;
        break;
      }

      // optional string Name = 28 [default = "NameServer"];
      case 28: {
        if (tag == 226) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_Monitor;
        break;
      }

      // optional string Monitor = 29 [default = "MonitorServer"];
      case 29: {
        if (tag == 234) {
         parse_Monitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monitor().data(), this->monitor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "monitor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_GmServer;
        break;
      }

      // optional string GmServer = 30 [default = "GmServer"];
      case 30: {
        if (tag == 242) {
         parse_GmServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gmserver().data(), this->gmserver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gmserver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_State;
        break;
      }

      // optional string State = 31 [default = "StateServer"];
      case 31: {
        if (tag == 250) {
         parse_State:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_Sound;
        break;
      }

      // optional string Sound = 32 [default = "SoundServer"];
      case 32: {
        if (tag == 258) {
         parse_Sound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sound().data(), this->sound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_WebGate;
        break;
      }

      // optional string WebGate = 40 [default = "WebGateServer"];
      case 40: {
        if (tag == 322) {
         parse_WebGate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webgate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webgate().data(), this->webgate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "webgate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_Sdk;
        break;
      }

      // optional string Sdk = 43 [default = "SdkServer"];
      case 43: {
        if (tag == 346) {
         parse_Sdk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdk().data(), this->sdk().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sdk");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_Logger;
        break;
      }

      // optional string Logger = 44 [default = "LoggerServer"];
      case 44: {
        if (tag == 354) {
         parse_Logger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logger().data(), this->logger().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logger");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_Uni;
        break;
      }

      // optional string Uni = 45 [default = "UniServer"];
      case 45: {
        if (tag == 362) {
         parse_Uni:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uni()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uni().data(), this->uni().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uni");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ServerName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ServerName)
  return false;
#undef DO_
}

void ServerName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ServerName)
  // optional string Super = 1 [default = "SuperServer"];
  if (has_super()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->super().data(), this->super().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "super");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->super(), output);
  }

  // optional string Login = 10 [default = "LoginServer"];
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->login(), output);
  }

  // optional string Record = 11 [default = "RecordServer"];
  if (has_record()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->record(), output);
  }

  // optional string Session = 20 [default = "SessionServer"];
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->session(), output);
  }

  // optional string Scene = 21 [default = "ScenesServer"];
  if (has_scene()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene().data(), this->scene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scene");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->scene(), output);
  }

  // optional string Gateway = 22 [default = "GatewayServer"];
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->gateway(), output);
  }

  // optional string Info = 23 [default = "InfoServer"];
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->info(), output);
  }

  // optional string Https = 24 [default = "HttpsServer"];
  if (has_https()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->https().data(), this->https().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "https");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->https(), output);
  }

  // optional string Change = 25 [default = "ChangeServer"];
  if (has_change()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->change().data(), this->change().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "change");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->change(), output);
  }

  // optional string User = 26 [default = "UserServer"];
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->user(), output);
  }

  // optional string Bill = 27 [default = "BillServer"];
  if (has_bill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bill().data(), this->bill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bill");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->bill(), output);
  }

  // optional string Name = 28 [default = "NameServer"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->name(), output);
  }

  // optional string Monitor = 29 [default = "MonitorServer"];
  if (has_monitor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor().data(), this->monitor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monitor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->monitor(), output);
  }

  // optional string GmServer = 30 [default = "GmServer"];
  if (has_gmserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmserver().data(), this->gmserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmserver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->gmserver(), output);
  }

  // optional string State = 31 [default = "StateServer"];
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->state(), output);
  }

  // optional string Sound = 32 [default = "SoundServer"];
  if (has_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sound().data(), this->sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->sound(), output);
  }

  // optional string WebGate = 40 [default = "WebGateServer"];
  if (has_webgate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webgate().data(), this->webgate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "webgate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->webgate(), output);
  }

  // optional string Sdk = 43 [default = "SdkServer"];
  if (has_sdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdk().data(), this->sdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->sdk(), output);
  }

  // optional string Logger = 44 [default = "LoggerServer"];
  if (has_logger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logger().data(), this->logger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->logger(), output);
  }

  // optional string Uni = 45 [default = "UniServer"];
  if (has_uni()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uni().data(), this->uni().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uni");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->uni(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ServerName)
}

::google::protobuf::uint8* ServerName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ServerName)
  // optional string Super = 1 [default = "SuperServer"];
  if (has_super()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->super().data(), this->super().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "super");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->super(), target);
  }

  // optional string Login = 10 [default = "LoginServer"];
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->login(), target);
  }

  // optional string Record = 11 [default = "RecordServer"];
  if (has_record()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->record(), target);
  }

  // optional string Session = 20 [default = "SessionServer"];
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->session(), target);
  }

  // optional string Scene = 21 [default = "ScenesServer"];
  if (has_scene()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene().data(), this->scene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scene");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->scene(), target);
  }

  // optional string Gateway = 22 [default = "GatewayServer"];
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gateway");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->gateway(), target);
  }

  // optional string Info = 23 [default = "InfoServer"];
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->info(), target);
  }

  // optional string Https = 24 [default = "HttpsServer"];
  if (has_https()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->https().data(), this->https().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "https");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->https(), target);
  }

  // optional string Change = 25 [default = "ChangeServer"];
  if (has_change()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->change().data(), this->change().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "change");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->change(), target);
  }

  // optional string User = 26 [default = "UserServer"];
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->user(), target);
  }

  // optional string Bill = 27 [default = "BillServer"];
  if (has_bill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bill().data(), this->bill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bill");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->bill(), target);
  }

  // optional string Name = 28 [default = "NameServer"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->name(), target);
  }

  // optional string Monitor = 29 [default = "MonitorServer"];
  if (has_monitor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor().data(), this->monitor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "monitor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->monitor(), target);
  }

  // optional string GmServer = 30 [default = "GmServer"];
  if (has_gmserver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gmserver().data(), this->gmserver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gmserver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->gmserver(), target);
  }

  // optional string State = 31 [default = "StateServer"];
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->state(), target);
  }

  // optional string Sound = 32 [default = "SoundServer"];
  if (has_sound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sound().data(), this->sound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->sound(), target);
  }

  // optional string WebGate = 40 [default = "WebGateServer"];
  if (has_webgate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webgate().data(), this->webgate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "webgate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->webgate(), target);
  }

  // optional string Sdk = 43 [default = "SdkServer"];
  if (has_sdk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdk().data(), this->sdk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sdk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->sdk(), target);
  }

  // optional string Logger = 44 [default = "LoggerServer"];
  if (has_logger()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logger().data(), this->logger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->logger(), target);
  }

  // optional string Uni = 45 [default = "UniServer"];
  if (has_uni()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uni().data(), this->uni().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uni");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->uni(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ServerName)
  return target;
}

int ServerName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Super = 1 [default = "SuperServer"];
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->super());
    }

    // optional string Login = 10 [default = "LoginServer"];
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // optional string Record = 11 [default = "RecordServer"];
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record());
    }

    // optional string Session = 20 [default = "SessionServer"];
    if (has_session()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }

    // optional string Scene = 21 [default = "ScenesServer"];
    if (has_scene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene());
    }

    // optional string Gateway = 22 [default = "GatewayServer"];
    if (has_gateway()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway());
    }

    // optional string Info = 23 [default = "InfoServer"];
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional string Https = 24 [default = "HttpsServer"];
    if (has_https()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->https());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Change = 25 [default = "ChangeServer"];
    if (has_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->change());
    }

    // optional string User = 26 [default = "UserServer"];
    if (has_user()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string Bill = 27 [default = "BillServer"];
    if (has_bill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bill());
    }

    // optional string Name = 28 [default = "NameServer"];
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Monitor = 29 [default = "MonitorServer"];
    if (has_monitor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monitor());
    }

    // optional string GmServer = 30 [default = "GmServer"];
    if (has_gmserver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmserver());
    }

    // optional string State = 31 [default = "StateServer"];
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string Sound = 32 [default = "SoundServer"];
    if (has_sound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sound());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string WebGate = 40 [default = "WebGateServer"];
    if (has_webgate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webgate());
    }

    // optional string Sdk = 43 [default = "SdkServer"];
    if (has_sdk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk());
    }

    // optional string Logger = 44 [default = "LoggerServer"];
    if (has_logger()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logger());
    }

    // optional string Uni = 45 [default = "UniServer"];
    if (has_uni()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uni());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerName::MergeFrom(const ServerName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      set_super(from.super());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_record()) {
      set_record(from.record());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_scene()) {
      set_scene(from.scene());
    }
    if (from.has_gateway()) {
      set_gateway(from.gateway());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_https()) {
      set_https(from.https());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_bill()) {
      set_bill(from.bill());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_monitor()) {
      set_monitor(from.monitor());
    }
    if (from.has_gmserver()) {
      set_gmserver(from.gmserver());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_sound()) {
      set_sound(from.sound());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_webgate()) {
      set_webgate(from.webgate());
    }
    if (from.has_sdk()) {
      set_sdk(from.sdk());
    }
    if (from.has_logger()) {
      set_logger(from.logger());
    }
    if (from.has_uni()) {
      set_uni(from.uni());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerName::CopyFrom(const ServerName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerName::IsInitialized() const {

  return true;
}

void ServerName::Swap(ServerName* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(login_, other->login_);
    std::swap(record_, other->record_);
    std::swap(session_, other->session_);
    std::swap(scene_, other->scene_);
    std::swap(gateway_, other->gateway_);
    std::swap(info_, other->info_);
    std::swap(https_, other->https_);
    std::swap(change_, other->change_);
    std::swap(user_, other->user_);
    std::swap(bill_, other->bill_);
    std::swap(name_, other->name_);
    std::swap(monitor_, other->monitor_);
    std::swap(gmserver_, other->gmserver_);
    std::swap(state_, other->state_);
    std::swap(sound_, other->sound_);
    std::swap(webgate_, other->webgate_);
    std::swap(sdk_, other->sdk_);
    std::swap(logger_, other->logger_);
    std::swap(uni_, other->uni_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerName_descriptor_;
  metadata.reflection = ServerName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kZoneidFieldNumber;
const int ServerInfo::kServeridFieldNumber;
const int ServerInfo::kServertypeFieldNumber;
const int ServerInfo::kProtocolFieldNumber;
const int ServerInfo::kBuildtimeFieldNumber;
const int ServerInfo::kSvnversionFieldNumber;
const int ServerInfo::kData1FieldNumber;
const int ServerInfo::kFuncionFieldNumber;
const int ServerInfo::kReserve0FieldNumber;
const int ServerInfo::kReserve1FieldNumber;
const int ServerInfo::kReserve2FieldNumber;
const int ServerInfo::kReserve3FieldNumber;
const int ServerInfo::kServeripFieldNumber;
const int ServerInfo::kUsernumFieldNumber;
const int ServerInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ServerInfo)
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  serverid_ = 0u;
  servertype_ = 0u;
  protocol_ = 0u;
  buildtime_ = 0u;
  svnversion_ = 0u;
  data1_ = 0u;
  funcion_ = 0u;
  reserve0_ = 0u;
  reserve1_ = 0u;
  reserve2_ = 0u;
  reserve3_ = 0u;
  serverip_ = 0u;
  usernum_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:Pmd.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pmd_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(zoneid_, funcion_);
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(reserve0_, time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_servertype;
        break;
      }

      // optional uint32 servertype = 3;
      case 3: {
        if (tag == 24) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_protocol;
        break;
      }

      // optional uint32 protocol = 4;
      case 4: {
        if (tag == 32) {
         parse_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
          set_has_protocol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buildtime;
        break;
      }

      // optional uint32 buildtime = 5;
      case 5: {
        if (tag == 40) {
         parse_buildtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildtime_)));
          set_has_buildtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_svnversion;
        break;
      }

      // optional uint32 svnversion = 6;
      case 6: {
        if (tag == 48) {
         parse_svnversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svnversion_)));
          set_has_svnversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_data1;
        break;
      }

      // optional uint32 data1 = 7;
      case 7: {
        if (tag == 56) {
         parse_data1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data1_)));
          set_has_data1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_funcion;
        break;
      }

      // optional uint32 funcion = 8;
      case 8: {
        if (tag == 64) {
         parse_funcion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funcion_)));
          set_has_funcion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reserve0;
        break;
      }

      // optional uint32 reserve0 = 9;
      case 9: {
        if (tag == 72) {
         parse_reserve0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserve0_)));
          set_has_reserve0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reserve1;
        break;
      }

      // optional uint32 reserve1 = 10;
      case 10: {
        if (tag == 80) {
         parse_reserve1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserve1_)));
          set_has_reserve1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reserve2;
        break;
      }

      // optional uint32 reserve2 = 11;
      case 11: {
        if (tag == 88) {
         parse_reserve2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserve2_)));
          set_has_reserve2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_reserve3;
        break;
      }

      // optional uint32 reserve3 = 12;
      case 12: {
        if (tag == 96) {
         parse_reserve3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserve3_)));
          set_has_reserve3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_serverip;
        break;
      }

      // optional uint32 serverip = 13;
      case 13: {
        if (tag == 104) {
         parse_serverip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverip_)));
          set_has_serverip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_usernum;
        break;
      }

      // optional uint32 usernum = 14;
      case 14: {
        if (tag == 112) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_time;
        break;
      }

      // optional uint32 time = 15;
      case 15: {
        if (tag == 120) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ServerInfo)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // optional uint32 servertype = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servertype(), output);
  }

  // optional uint32 protocol = 4;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol(), output);
  }

  // optional uint32 buildtime = 5;
  if (has_buildtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buildtime(), output);
  }

  // optional uint32 svnversion = 6;
  if (has_svnversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->svnversion(), output);
  }

  // optional uint32 data1 = 7;
  if (has_data1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->data1(), output);
  }

  // optional uint32 funcion = 8;
  if (has_funcion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->funcion(), output);
  }

  // optional uint32 reserve0 = 9;
  if (has_reserve0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reserve0(), output);
  }

  // optional uint32 reserve1 = 10;
  if (has_reserve1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->reserve1(), output);
  }

  // optional uint32 reserve2 = 11;
  if (has_reserve2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reserve2(), output);
  }

  // optional uint32 reserve3 = 12;
  if (has_reserve3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->reserve3(), output);
  }

  // optional uint32 serverip = 13;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->serverip(), output);
  }

  // optional uint32 usernum = 14;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->usernum(), output);
  }

  // optional uint32 time = 15;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ServerInfo)
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // optional uint32 servertype = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servertype(), target);
  }

  // optional uint32 protocol = 4;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol(), target);
  }

  // optional uint32 buildtime = 5;
  if (has_buildtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buildtime(), target);
  }

  // optional uint32 svnversion = 6;
  if (has_svnversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->svnversion(), target);
  }

  // optional uint32 data1 = 7;
  if (has_data1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->data1(), target);
  }

  // optional uint32 funcion = 8;
  if (has_funcion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->funcion(), target);
  }

  // optional uint32 reserve0 = 9;
  if (has_reserve0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reserve0(), target);
  }

  // optional uint32 reserve1 = 10;
  if (has_reserve1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->reserve1(), target);
  }

  // optional uint32 reserve2 = 11;
  if (has_reserve2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reserve2(), target);
  }

  // optional uint32 reserve3 = 12;
  if (has_reserve3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->reserve3(), target);
  }

  // optional uint32 serverip = 13;
  if (has_serverip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->serverip(), target);
  }

  // optional uint32 usernum = 14;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->usernum(), target);
  }

  // optional uint32 time = 15;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ServerInfo)
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint32 servertype = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // optional uint32 protocol = 4;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol());
    }

    // optional uint32 buildtime = 5;
    if (has_buildtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildtime());
    }

    // optional uint32 svnversion = 6;
    if (has_svnversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svnversion());
    }

    // optional uint32 data1 = 7;
    if (has_data1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data1());
    }

    // optional uint32 funcion = 8;
    if (has_funcion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funcion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 reserve0 = 9;
    if (has_reserve0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserve0());
    }

    // optional uint32 reserve1 = 10;
    if (has_reserve1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserve1());
    }

    // optional uint32 reserve2 = 11;
    if (has_reserve2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserve2());
    }

    // optional uint32 reserve3 = 12;
    if (has_reserve3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserve3());
    }

    // optional uint32 serverip = 13;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverip());
    }

    // optional uint32 usernum = 14;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

    // optional uint32 time = 15;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_buildtime()) {
      set_buildtime(from.buildtime());
    }
    if (from.has_svnversion()) {
      set_svnversion(from.svnversion());
    }
    if (from.has_data1()) {
      set_data1(from.data1());
    }
    if (from.has_funcion()) {
      set_funcion(from.funcion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reserve0()) {
      set_reserve0(from.reserve0());
    }
    if (from.has_reserve1()) {
      set_reserve1(from.reserve1());
    }
    if (from.has_reserve2()) {
      set_reserve2(from.reserve2());
    }
    if (from.has_reserve3()) {
      set_reserve3(from.reserve3());
    }
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(serverid_, other->serverid_);
    std::swap(servertype_, other->servertype_);
    std::swap(protocol_, other->protocol_);
    std::swap(buildtime_, other->buildtime_);
    std::swap(svnversion_, other->svnversion_);
    std::swap(data1_, other->data1_);
    std::swap(funcion_, other->funcion_);
    std::swap(reserve0_, other->reserve0_);
    std::swap(reserve1_, other->reserve1_);
    std::swap(reserve2_, other->reserve2_);
    std::swap(reserve3_, other->reserve3_);
    std::swap(serverip_, other->serverip_);
    std::swap(usernum_, other->usernum_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
