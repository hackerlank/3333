// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobbypmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lobbypmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* Lobby_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lobby_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Lobby_Param_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DELETE_ME_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DELETE_ME_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lobbypmd_2eproto() {
  protobuf_AddDesc_lobbypmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lobbypmd.proto");
  GOOGLE_CHECK(file != NULL);
  Lobby_descriptor_ = file->message_type(0);
  static const int Lobby_offsets_[1] = {
  };
  Lobby_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lobby_descriptor_,
      Lobby::default_instance_,
      Lobby_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lobby, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lobby));
  Lobby_Param_descriptor_ = Lobby_descriptor_->enum_type(0);
  DELETE_ME_descriptor_ = file->message_type(1);
  static const int DELETE_ME_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DELETE_ME, mid_),
  };
  DELETE_ME_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DELETE_ME_descriptor_,
      DELETE_ME::default_instance_,
      DELETE_ME_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DELETE_ME, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DELETE_ME, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DELETE_ME));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lobbypmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lobby_descriptor_, &Lobby::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DELETE_ME_descriptor_, &DELETE_ME::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lobbypmd_2eproto() {
  delete Lobby::default_instance_;
  delete Lobby_reflection_;
  delete DELETE_ME::default_instance_;
  delete DELETE_ME_reflection_;
}

void protobuf_AddDesc_lobbypmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Pmd::protobuf_AddDesc_pmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016lobbypmd.proto\022\003Pmd\032\tpmd.proto\"\037\n\005Lobb"
    "y\"\026\n\005Param\022\r\n\tDELETE_ME\020\001\"\030\n\tDELETE_ME\022\013"
    "\n\003mid\030\001 \001(\t", 91);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lobbypmd.proto", &protobuf_RegisterTypes);
  Lobby::default_instance_ = new Lobby();
  DELETE_ME::default_instance_ = new DELETE_ME();
  Lobby::default_instance_->InitAsDefaultInstance();
  DELETE_ME::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lobbypmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lobbypmd_2eproto {
  StaticDescriptorInitializer_lobbypmd_2eproto() {
    protobuf_AddDesc_lobbypmd_2eproto();
  }
} static_descriptor_initializer_lobbypmd_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Lobby_Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby_Param_descriptor_;
}
bool Lobby_Param_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Lobby_Param Lobby::DELETE_ME;
const Lobby_Param Lobby::Param_MIN;
const Lobby_Param Lobby::Param_MAX;
const int Lobby::Param_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Lobby::Lobby()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.Lobby)
}

void Lobby::InitAsDefaultInstance() {
}

Lobby::Lobby(const Lobby& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.Lobby)
}

void Lobby::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lobby::~Lobby() {
  // @@protoc_insertion_point(destructor:Pmd.Lobby)
  SharedDtor();
}

void Lobby::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lobby::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lobby_descriptor_;
}

const Lobby& Lobby::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lobbypmd_2eproto();
  return *default_instance_;
}

Lobby* Lobby::default_instance_ = NULL;

Lobby* Lobby::New() const {
  return new Lobby;
}

void Lobby::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.Lobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.Lobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.Lobby)
  return false;
#undef DO_
}

void Lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.Lobby)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.Lobby)
}

::google::protobuf::uint8* Lobby::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.Lobby)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.Lobby)
  return target;
}

int Lobby::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lobby* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lobby*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lobby::MergeFrom(const Lobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lobby::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lobby::CopyFrom(const Lobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby::IsInitialized() const {

  return true;
}

void Lobby::Swap(Lobby* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lobby::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lobby_descriptor_;
  metadata.reflection = Lobby_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DELETE_ME::kMidFieldNumber;
#endif  // !_MSC_VER

DELETE_ME::DELETE_ME()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.DELETE_ME)
}

void DELETE_ME::InitAsDefaultInstance() {
}

DELETE_ME::DELETE_ME(const DELETE_ME& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.DELETE_ME)
}

void DELETE_ME::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DELETE_ME::~DELETE_ME() {
  // @@protoc_insertion_point(destructor:Pmd.DELETE_ME)
  SharedDtor();
}

void DELETE_ME::SharedDtor() {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (this != default_instance_) {
  }
}

void DELETE_ME::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DELETE_ME::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DELETE_ME_descriptor_;
}

const DELETE_ME& DELETE_ME::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lobbypmd_2eproto();
  return *default_instance_;
}

DELETE_ME* DELETE_ME::default_instance_ = NULL;

DELETE_ME* DELETE_ME::New() const {
  return new DELETE_ME;
}

void DELETE_ME::Clear() {
  if (has_mid()) {
    if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DELETE_ME::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.DELETE_ME)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mid().data(), this->mid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.DELETE_ME)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.DELETE_ME)
  return false;
#undef DO_
}

void DELETE_ME::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.DELETE_ME)
  // optional string mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.DELETE_ME)
}

::google::protobuf::uint8* DELETE_ME::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.DELETE_ME)
  // optional string mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.DELETE_ME)
  return target;
}

int DELETE_ME::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DELETE_ME::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DELETE_ME* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DELETE_ME*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DELETE_ME::MergeFrom(const DELETE_ME& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DELETE_ME::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DELETE_ME::CopyFrom(const DELETE_ME& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DELETE_ME::IsInitialized() const {

  return true;
}

void DELETE_ME::Swap(DELETE_ME* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DELETE_ME::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DELETE_ME_descriptor_;
  metadata.reflection = DELETE_ME_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
