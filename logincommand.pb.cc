// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logincommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logincommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Login_Param_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccountTokenVerifyLoginUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountTokenVerifyLoginUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushAccountVerifyLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushAccountVerifyLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountTokenVerifyReturnLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountTokenVerifyReturnLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneInfoListLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneInfoListLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestZoneInfoListLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestZoneInfoListLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUserZoneInfoLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUserZoneInfoLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUserZoneInfoLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUserZoneInfoLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileRegistRequestRandCodeLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileRegistRequestRandCodeLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileRegistReturnRandCodeLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileRegistReturnRandCodeLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileRegistRequestCreateAccountLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileRegistRequestCreateAccountLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileRegistReturnCreateAccountFailLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileRegistReturnCreateAccountFailLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailRegistRequestCreateAccountLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailRegistRequestCreateAccountLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailRegistReturnCreateAccountLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailRegistReturnCreateAccountLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRequestPlatTokenByPasswordLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRequestPlatTokenByPasswordLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRequestPlatTokenByThirdLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRequestPlatTokenByThirdLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRequestPlatTokenLoginOkLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRequestPlatTokenLoginOkLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRequestPlatTokenLoginFailLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRequestPlatTokenLoginFailLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginRequestLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginRequestLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginReturnFailLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginReturnFailLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginReturnOkLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginReturnOkLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginTokenLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginTokenLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLogUrlLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLogUrlLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageBoxLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageBoxLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAccountRegisterLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAccountRegisterLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnAccountRegisterLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnAccountRegisterLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogoutTokenLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogoutTokenLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginReconnectLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginReconnectLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectKickoutLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectKickoutLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectErrorLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectErrorLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerKickoutLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerKickoutLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThirdPlatLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThirdPlatLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetServerLangLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetServerLangLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestClientIPLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestClientIPLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnClientIPLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnClientIPLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckVersionLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckVersionLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* BehaviorClientVerifyLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorClientVerifyLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSupoortGameListLoginUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSupoortGameListLoginUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnSupoortGameListLoginUserPmd_S_Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnSupoortGameListLoginUserPmd_S_Game_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnSupoortGameListLoginUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnSupoortGameListLoginUserPmd_S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VerifyReturnReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ZoneState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginReturnFailReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlatType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_logincommand_2eproto() {
  protobuf_AddDesc_logincommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logincommand.proto");
  GOOGLE_CHECK(file != NULL);
  Login_descriptor_ = file->message_type(0);
  static const int Login_offsets_[1] = {
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  Login_Param_descriptor_ = Login_descriptor_->enum_type(0);
  AccountTokenVerifyLoginUserPmd_CS_descriptor_ = file->message_type(1);
  static const int AccountTokenVerifyLoginUserPmd_CS_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, compress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, encryptkey_),
  };
  AccountTokenVerifyLoginUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountTokenVerifyLoginUserPmd_CS_descriptor_,
      AccountTokenVerifyLoginUserPmd_CS::default_instance_,
      AccountTokenVerifyLoginUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyLoginUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountTokenVerifyLoginUserPmd_CS));
  PushAccountVerifyLoginUserPmd_C_descriptor_ = file->message_type(2);
  static const int PushAccountVerifyLoginUserPmd_C_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, compress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, encryptkey_),
  };
  PushAccountVerifyLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushAccountVerifyLoginUserPmd_C_descriptor_,
      PushAccountVerifyLoginUserPmd_C::default_instance_,
      PushAccountVerifyLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccountVerifyLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushAccountVerifyLoginUserPmd_C));
  AccountTokenVerifyReturnLoginUserPmd_S_descriptor_ = file->message_type(3);
  static const int AccountTokenVerifyReturnLoginUserPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyReturnLoginUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyReturnLoginUserPmd_S, desc_),
  };
  AccountTokenVerifyReturnLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountTokenVerifyReturnLoginUserPmd_S_descriptor_,
      AccountTokenVerifyReturnLoginUserPmd_S::default_instance_,
      AccountTokenVerifyReturnLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyReturnLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountTokenVerifyReturnLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountTokenVerifyReturnLoginUserPmd_S));
  ZoneInfo_descriptor_ = file->message_type(4);
  static const int ZoneInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, zonename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, opentime_),
  };
  ZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneInfo_descriptor_,
      ZoneInfo::default_instance_,
      ZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneInfo));
  ZoneInfoListLoginUserPmd_S_descriptor_ = file->message_type(5);
  static const int ZoneInfoListLoginUserPmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoListLoginUserPmd_S, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoListLoginUserPmd_S, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoListLoginUserPmd_S, zonelist_),
  };
  ZoneInfoListLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneInfoListLoginUserPmd_S_descriptor_,
      ZoneInfoListLoginUserPmd_S::default_instance_,
      ZoneInfoListLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoListLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfoListLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneInfoListLoginUserPmd_S));
  RequestZoneInfoListLoginUserPmd_C_descriptor_ = file->message_type(6);
  static const int RequestZoneInfoListLoginUserPmd_C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestZoneInfoListLoginUserPmd_C, gameid_),
  };
  RequestZoneInfoListLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestZoneInfoListLoginUserPmd_C_descriptor_,
      RequestZoneInfoListLoginUserPmd_C::default_instance_,
      RequestZoneInfoListLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestZoneInfoListLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestZoneInfoListLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestZoneInfoListLoginUserPmd_C));
  RequestUserZoneInfoLoginUserPmd_C_descriptor_ = file->message_type(7);
  static const int RequestUserZoneInfoLoginUserPmd_C_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserZoneInfoLoginUserPmd_C, gameid_),
  };
  RequestUserZoneInfoLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUserZoneInfoLoginUserPmd_C_descriptor_,
      RequestUserZoneInfoLoginUserPmd_C::default_instance_,
      RequestUserZoneInfoLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserZoneInfoLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserZoneInfoLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUserZoneInfoLoginUserPmd_C));
  UserZoneInfo_descriptor_ = file->message_type(8);
  static const int UserZoneInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZoneInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZoneInfo, zoneinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZoneInfo, onlinenum_),
  };
  UserZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserZoneInfo_descriptor_,
      UserZoneInfo::default_instance_,
      UserZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserZoneInfo));
  RequestUserZoneInfoLoginUserPmd_S_descriptor_ = file->message_type(9);
  static const int RequestUserZoneInfoLoginUserPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserZoneInfoLoginUserPmd_S, userzoneinfo_),
  };
  RequestUserZoneInfoLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUserZoneInfoLoginUserPmd_S_descriptor_,
      RequestUserZoneInfoLoginUserPmd_S::default_instance_,
      RequestUserZoneInfoLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserZoneInfoLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserZoneInfoLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUserZoneInfoLoginUserPmd_S));
  MobileRegistRequestRandCodeLoginUserPmd_C_descriptor_ = file->message_type(10);
  static const int MobileRegistRequestRandCodeLoginUserPmd_C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestRandCodeLoginUserPmd_C, mobilenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestRandCodeLoginUserPmd_C, gameid_),
  };
  MobileRegistRequestRandCodeLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileRegistRequestRandCodeLoginUserPmd_C_descriptor_,
      MobileRegistRequestRandCodeLoginUserPmd_C::default_instance_,
      MobileRegistRequestRandCodeLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestRandCodeLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestRandCodeLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileRegistRequestRandCodeLoginUserPmd_C));
  MobileRegistReturnRandCodeLoginUserPmd_S_descriptor_ = file->message_type(11);
  static const int MobileRegistReturnRandCodeLoginUserPmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnRandCodeLoginUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnRandCodeLoginUserPmd_S, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnRandCodeLoginUserPmd_S, timeout_),
  };
  MobileRegistReturnRandCodeLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileRegistReturnRandCodeLoginUserPmd_S_descriptor_,
      MobileRegistReturnRandCodeLoginUserPmd_S::default_instance_,
      MobileRegistReturnRandCodeLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnRandCodeLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnRandCodeLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileRegistReturnRandCodeLoginUserPmd_S));
  MobileRegistRequestCreateAccountLoginUserPmd_C_descriptor_ = file->message_type(12);
  static const int MobileRegistRequestCreateAccountLoginUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestCreateAccountLoginUserPmd_C, mobilenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestCreateAccountLoginUserPmd_C, randcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestCreateAccountLoginUserPmd_C, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestCreateAccountLoginUserPmd_C, gameid_),
  };
  MobileRegistRequestCreateAccountLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileRegistRequestCreateAccountLoginUserPmd_C_descriptor_,
      MobileRegistRequestCreateAccountLoginUserPmd_C::default_instance_,
      MobileRegistRequestCreateAccountLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestCreateAccountLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistRequestCreateAccountLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileRegistRequestCreateAccountLoginUserPmd_C));
  MobileRegistReturnCreateAccountFailLoginUserPmd_S_descriptor_ = file->message_type(13);
  static const int MobileRegistReturnCreateAccountFailLoginUserPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnCreateAccountFailLoginUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnCreateAccountFailLoginUserPmd_S, desc_),
  };
  MobileRegistReturnCreateAccountFailLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileRegistReturnCreateAccountFailLoginUserPmd_S_descriptor_,
      MobileRegistReturnCreateAccountFailLoginUserPmd_S::default_instance_,
      MobileRegistReturnCreateAccountFailLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnCreateAccountFailLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileRegistReturnCreateAccountFailLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileRegistReturnCreateAccountFailLoginUserPmd_S));
  EmailRegistRequestCreateAccountLoginUserPmd_C_descriptor_ = file->message_type(14);
  static const int EmailRegistRequestCreateAccountLoginUserPmd_C_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistRequestCreateAccountLoginUserPmd_C, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistRequestCreateAccountLoginUserPmd_C, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistRequestCreateAccountLoginUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistRequestCreateAccountLoginUserPmd_C, isbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistRequestCreateAccountLoginUserPmd_C, uid_),
  };
  EmailRegistRequestCreateAccountLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailRegistRequestCreateAccountLoginUserPmd_C_descriptor_,
      EmailRegistRequestCreateAccountLoginUserPmd_C::default_instance_,
      EmailRegistRequestCreateAccountLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistRequestCreateAccountLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistRequestCreateAccountLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailRegistRequestCreateAccountLoginUserPmd_C));
  EmailRegistReturnCreateAccountLoginUserPmd_S_descriptor_ = file->message_type(15);
  static const int EmailRegistReturnCreateAccountLoginUserPmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistReturnCreateAccountLoginUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistReturnCreateAccountLoginUserPmd_S, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistReturnCreateAccountLoginUserPmd_S, uid_),
  };
  EmailRegistReturnCreateAccountLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailRegistReturnCreateAccountLoginUserPmd_S_descriptor_,
      EmailRegistReturnCreateAccountLoginUserPmd_S::default_instance_,
      EmailRegistReturnCreateAccountLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistReturnCreateAccountLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailRegistReturnCreateAccountLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailRegistReturnCreateAccountLoginUserPmd_S));
  UserRequestPlatTokenByPasswordLoginUserPmd_C_descriptor_ = file->message_type(16);
  static const int UserRequestPlatTokenByPasswordLoginUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByPasswordLoginUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByPasswordLoginUserPmd_C, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByPasswordLoginUserPmd_C, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByPasswordLoginUserPmd_C, password_),
  };
  UserRequestPlatTokenByPasswordLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRequestPlatTokenByPasswordLoginUserPmd_C_descriptor_,
      UserRequestPlatTokenByPasswordLoginUserPmd_C::default_instance_,
      UserRequestPlatTokenByPasswordLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByPasswordLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByPasswordLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRequestPlatTokenByPasswordLoginUserPmd_C));
  UserRequestPlatTokenByThirdLoginUserPmd_C_descriptor_ = file->message_type(17);
  static const int UserRequestPlatTokenByThirdLoginUserPmd_C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByThirdLoginUserPmd_C, platinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByThirdLoginUserPmd_C, gameid_),
  };
  UserRequestPlatTokenByThirdLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRequestPlatTokenByThirdLoginUserPmd_C_descriptor_,
      UserRequestPlatTokenByThirdLoginUserPmd_C::default_instance_,
      UserRequestPlatTokenByThirdLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByThirdLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenByThirdLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRequestPlatTokenByThirdLoginUserPmd_C));
  UserRequestPlatTokenLoginOkLoginUserPmd_S_descriptor_ = file->message_type(18);
  static const int UserRequestPlatTokenLoginOkLoginUserPmd_S_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, platkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, platlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, platloginlife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, timezonename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, timezoneoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, platinfo_),
  };
  UserRequestPlatTokenLoginOkLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRequestPlatTokenLoginOkLoginUserPmd_S_descriptor_,
      UserRequestPlatTokenLoginOkLoginUserPmd_S::default_instance_,
      UserRequestPlatTokenLoginOkLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginOkLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRequestPlatTokenLoginOkLoginUserPmd_S));
  UserRequestPlatTokenLoginFailLoginUserPmd_S_descriptor_ = file->message_type(19);
  static const int UserRequestPlatTokenLoginFailLoginUserPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginFailLoginUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginFailLoginUserPmd_S, desc_),
  };
  UserRequestPlatTokenLoginFailLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRequestPlatTokenLoginFailLoginUserPmd_S_descriptor_,
      UserRequestPlatTokenLoginFailLoginUserPmd_S::default_instance_,
      UserRequestPlatTokenLoginFailLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginFailLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRequestPlatTokenLoginFailLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRequestPlatTokenLoginFailLoginUserPmd_S));
  UserLoginRequestLoginUserPmd_C_descriptor_ = file->message_type(20);
  static const int UserLoginRequestLoginUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequestLoginUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequestLoginUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequestLoginUserPmd_C, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequestLoginUserPmd_C, mid_),
  };
  UserLoginRequestLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginRequestLoginUserPmd_C_descriptor_,
      UserLoginRequestLoginUserPmd_C::default_instance_,
      UserLoginRequestLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequestLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginRequestLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginRequestLoginUserPmd_C));
  UserLoginReturnFailLoginUserPmd_S_descriptor_ = file->message_type(21);
  static const int UserLoginReturnFailLoginUserPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnFailLoginUserPmd_S, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnFailLoginUserPmd_S, desc_),
  };
  UserLoginReturnFailLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginReturnFailLoginUserPmd_S_descriptor_,
      UserLoginReturnFailLoginUserPmd_S::default_instance_,
      UserLoginReturnFailLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnFailLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnFailLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginReturnFailLoginUserPmd_S));
  UserLoginReturnOkLoginUserPmd_S_descriptor_ = file->message_type(22);
  static const int UserLoginReturnOkLoginUserPmd_S_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, logintempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, gatewayurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, separatezoneuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, zoneuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, gatewayurltcp_),
  };
  UserLoginReturnOkLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginReturnOkLoginUserPmd_S_descriptor_,
      UserLoginReturnOkLoginUserPmd_S::default_instance_,
      UserLoginReturnOkLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReturnOkLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginReturnOkLoginUserPmd_S));
  UserLoginTokenLoginUserPmd_C_descriptor_ = file->message_type(23);
  static const int UserLoginTokenLoginUserPmd_C_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, logintempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, tokenmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, compress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, encryptkey_),
  };
  UserLoginTokenLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginTokenLoginUserPmd_C_descriptor_,
      UserLoginTokenLoginUserPmd_C::default_instance_,
      UserLoginTokenLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginTokenLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginTokenLoginUserPmd_C));
  ClientLogUrlLoginUserPmd_S_descriptor_ = file->message_type(24);
  static const int ClientLogUrlLoginUserPmd_S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogUrlLoginUserPmd_S, loglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogUrlLoginUserPmd_S, logurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogUrlLoginUserPmd_S, distinct_),
  };
  ClientLogUrlLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLogUrlLoginUserPmd_S_descriptor_,
      ClientLogUrlLoginUserPmd_S::default_instance_,
      ClientLogUrlLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogUrlLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLogUrlLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLogUrlLoginUserPmd_S));
  MessageBoxLoginUserPmd_S_descriptor_ = file->message_type(25);
  static const int MessageBoxLoginUserPmd_S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoxLoginUserPmd_S, btnleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoxLoginUserPmd_S, btnmiddle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoxLoginUserPmd_S, btnright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoxLoginUserPmd_S, info_),
  };
  MessageBoxLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageBoxLoginUserPmd_S_descriptor_,
      MessageBoxLoginUserPmd_S::default_instance_,
      MessageBoxLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoxLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoxLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageBoxLoginUserPmd_S));
  RequestAccountRegisterLoginUserPmd_C_descriptor_ = file->message_type(26);
  static const int RequestAccountRegisterLoginUserPmd_C_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAccountRegisterLoginUserPmd_C, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAccountRegisterLoginUserPmd_C, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAccountRegisterLoginUserPmd_C, code_),
  };
  RequestAccountRegisterLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAccountRegisterLoginUserPmd_C_descriptor_,
      RequestAccountRegisterLoginUserPmd_C::default_instance_,
      RequestAccountRegisterLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAccountRegisterLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAccountRegisterLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAccountRegisterLoginUserPmd_C));
  ReturnAccountRegisterLoginUserPmd_S_descriptor_ = file->message_type(27);
  static const int ReturnAccountRegisterLoginUserPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAccountRegisterLoginUserPmd_S, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAccountRegisterLoginUserPmd_S, accountid_),
  };
  ReturnAccountRegisterLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnAccountRegisterLoginUserPmd_S_descriptor_,
      ReturnAccountRegisterLoginUserPmd_S::default_instance_,
      ReturnAccountRegisterLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAccountRegisterLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAccountRegisterLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnAccountRegisterLoginUserPmd_S));
  UserLogoutTokenLoginUserPmd_C_descriptor_ = file->message_type(28);
  static const int UserLogoutTokenLoginUserPmd_C_offsets_[1] = {
  };
  UserLogoutTokenLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogoutTokenLoginUserPmd_C_descriptor_,
      UserLogoutTokenLoginUserPmd_C::default_instance_,
      UserLogoutTokenLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogoutTokenLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogoutTokenLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogoutTokenLoginUserPmd_C));
  UserLoginReconnectLoginUserPmd_C_descriptor_ = file->message_type(29);
  static const int UserLoginReconnectLoginUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReconnectLoginUserPmd_C, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReconnectLoginUserPmd_C, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReconnectLoginUserPmd_C, tokenmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReconnectLoginUserPmd_C, logintempid_),
  };
  UserLoginReconnectLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginReconnectLoginUserPmd_C_descriptor_,
      UserLoginReconnectLoginUserPmd_C::default_instance_,
      UserLoginReconnectLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReconnectLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginReconnectLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginReconnectLoginUserPmd_C));
  ReconnectKickoutLoginUserPmd_S_descriptor_ = file->message_type(30);
  static const int ReconnectKickoutLoginUserPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectKickoutLoginUserPmd_S, desc_),
  };
  ReconnectKickoutLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectKickoutLoginUserPmd_S_descriptor_,
      ReconnectKickoutLoginUserPmd_S::default_instance_,
      ReconnectKickoutLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectKickoutLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectKickoutLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectKickoutLoginUserPmd_S));
  ReconnectErrorLoginUserPmd_S_descriptor_ = file->message_type(31);
  static const int ReconnectErrorLoginUserPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectErrorLoginUserPmd_S, desc_),
  };
  ReconnectErrorLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectErrorLoginUserPmd_S_descriptor_,
      ReconnectErrorLoginUserPmd_S::default_instance_,
      ReconnectErrorLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectErrorLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectErrorLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectErrorLoginUserPmd_S));
  ServerKickoutLoginUserPmd_S_descriptor_ = file->message_type(32);
  static const int ServerKickoutLoginUserPmd_S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickoutLoginUserPmd_S, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickoutLoginUserPmd_S, desc_),
  };
  ServerKickoutLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerKickoutLoginUserPmd_S_descriptor_,
      ServerKickoutLoginUserPmd_S::default_instance_,
      ServerKickoutLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickoutLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerKickoutLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerKickoutLoginUserPmd_S));
  PlatInfo_descriptor_ = file->message_type(33);
  static const int PlatInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, faceurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, uid_),
  };
  PlatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlatInfo_descriptor_,
      PlatInfo::default_instance_,
      PlatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlatInfo));
  ThirdPlatLoginUserPmd_C_descriptor_ = file->message_type(34);
  static const int ThirdPlatLoginUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPlatLoginUserPmd_C, platinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPlatLoginUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPlatLoginUserPmd_C, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPlatLoginUserPmd_C, uid_),
  };
  ThirdPlatLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThirdPlatLoginUserPmd_C_descriptor_,
      ThirdPlatLoginUserPmd_C::default_instance_,
      ThirdPlatLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPlatLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPlatLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThirdPlatLoginUserPmd_C));
  SetServerLangLoginUserPmd_C_descriptor_ = file->message_type(35);
  static const int SetServerLangLoginUserPmd_C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerLangLoginUserPmd_C, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerLangLoginUserPmd_C, gameregion_),
  };
  SetServerLangLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetServerLangLoginUserPmd_C_descriptor_,
      SetServerLangLoginUserPmd_C::default_instance_,
      SetServerLangLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerLangLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetServerLangLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetServerLangLoginUserPmd_C));
  RequestClientIPLoginUserPmd_C_descriptor_ = file->message_type(36);
  static const int RequestClientIPLoginUserPmd_C_offsets_[1] = {
  };
  RequestClientIPLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestClientIPLoginUserPmd_C_descriptor_,
      RequestClientIPLoginUserPmd_C::default_instance_,
      RequestClientIPLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestClientIPLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestClientIPLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestClientIPLoginUserPmd_C));
  ReturnClientIPLoginUserPmd_S_descriptor_ = file->message_type(37);
  static const int ReturnClientIPLoginUserPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnClientIPLoginUserPmd_S, pstrip_),
  };
  ReturnClientIPLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnClientIPLoginUserPmd_S_descriptor_,
      ReturnClientIPLoginUserPmd_S::default_instance_,
      ReturnClientIPLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnClientIPLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnClientIPLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnClientIPLoginUserPmd_S));
  CheckVersionLoginUserPmd_C_descriptor_ = file->message_type(38);
  static const int CheckVersionLoginUserPmd_C_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionLoginUserPmd_C, default_charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionLoginUserPmd_C, version_),
  };
  CheckVersionLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckVersionLoginUserPmd_C_descriptor_,
      CheckVersionLoginUserPmd_C::default_instance_,
      CheckVersionLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVersionLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckVersionLoginUserPmd_C));
  BehaviorClientVerifyLoginUserPmd_C_descriptor_ = file->message_type(39);
  static const int BehaviorClientVerifyLoginUserPmd_C_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, platid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, gameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, compress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, encryptkey_),
  };
  BehaviorClientVerifyLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorClientVerifyLoginUserPmd_C_descriptor_,
      BehaviorClientVerifyLoginUserPmd_C::default_instance_,
      BehaviorClientVerifyLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorClientVerifyLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorClientVerifyLoginUserPmd_C));
  RequestSupoortGameListLoginUserPmd_C_descriptor_ = file->message_type(40);
  static const int RequestSupoortGameListLoginUserPmd_C_offsets_[1] = {
  };
  RequestSupoortGameListLoginUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSupoortGameListLoginUserPmd_C_descriptor_,
      RequestSupoortGameListLoginUserPmd_C::default_instance_,
      RequestSupoortGameListLoginUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSupoortGameListLoginUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSupoortGameListLoginUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSupoortGameListLoginUserPmd_C));
  ReturnSupoortGameListLoginUserPmd_S_Game_descriptor_ = file->message_type(41);
  static const int ReturnSupoortGameListLoginUserPmd_S_Game_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSupoortGameListLoginUserPmd_S_Game, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSupoortGameListLoginUserPmd_S_Game, gameid_),
  };
  ReturnSupoortGameListLoginUserPmd_S_Game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnSupoortGameListLoginUserPmd_S_Game_descriptor_,
      ReturnSupoortGameListLoginUserPmd_S_Game::default_instance_,
      ReturnSupoortGameListLoginUserPmd_S_Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSupoortGameListLoginUserPmd_S_Game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSupoortGameListLoginUserPmd_S_Game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnSupoortGameListLoginUserPmd_S_Game));
  ReturnSupoortGameListLoginUserPmd_S_descriptor_ = file->message_type(42);
  static const int ReturnSupoortGameListLoginUserPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSupoortGameListLoginUserPmd_S, gamelist_),
  };
  ReturnSupoortGameListLoginUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnSupoortGameListLoginUserPmd_S_descriptor_,
      ReturnSupoortGameListLoginUserPmd_S::default_instance_,
      ReturnSupoortGameListLoginUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSupoortGameListLoginUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnSupoortGameListLoginUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnSupoortGameListLoginUserPmd_S));
  VerifyReturnReason_descriptor_ = file->enum_type(0);
  ZoneState_descriptor_ = file->enum_type(1);
  LoginReturnFailReason_descriptor_ = file->enum_type(2);
  PlatType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logincommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountTokenVerifyLoginUserPmd_CS_descriptor_, &AccountTokenVerifyLoginUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushAccountVerifyLoginUserPmd_C_descriptor_, &PushAccountVerifyLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountTokenVerifyReturnLoginUserPmd_S_descriptor_, &AccountTokenVerifyReturnLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneInfo_descriptor_, &ZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneInfoListLoginUserPmd_S_descriptor_, &ZoneInfoListLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestZoneInfoListLoginUserPmd_C_descriptor_, &RequestZoneInfoListLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUserZoneInfoLoginUserPmd_C_descriptor_, &RequestUserZoneInfoLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserZoneInfo_descriptor_, &UserZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUserZoneInfoLoginUserPmd_S_descriptor_, &RequestUserZoneInfoLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileRegistRequestRandCodeLoginUserPmd_C_descriptor_, &MobileRegistRequestRandCodeLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileRegistReturnRandCodeLoginUserPmd_S_descriptor_, &MobileRegistReturnRandCodeLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileRegistRequestCreateAccountLoginUserPmd_C_descriptor_, &MobileRegistRequestCreateAccountLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileRegistReturnCreateAccountFailLoginUserPmd_S_descriptor_, &MobileRegistReturnCreateAccountFailLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailRegistRequestCreateAccountLoginUserPmd_C_descriptor_, &EmailRegistRequestCreateAccountLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailRegistReturnCreateAccountLoginUserPmd_S_descriptor_, &EmailRegistReturnCreateAccountLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRequestPlatTokenByPasswordLoginUserPmd_C_descriptor_, &UserRequestPlatTokenByPasswordLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRequestPlatTokenByThirdLoginUserPmd_C_descriptor_, &UserRequestPlatTokenByThirdLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRequestPlatTokenLoginOkLoginUserPmd_S_descriptor_, &UserRequestPlatTokenLoginOkLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRequestPlatTokenLoginFailLoginUserPmd_S_descriptor_, &UserRequestPlatTokenLoginFailLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginRequestLoginUserPmd_C_descriptor_, &UserLoginRequestLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginReturnFailLoginUserPmd_S_descriptor_, &UserLoginReturnFailLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginReturnOkLoginUserPmd_S_descriptor_, &UserLoginReturnOkLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginTokenLoginUserPmd_C_descriptor_, &UserLoginTokenLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLogUrlLoginUserPmd_S_descriptor_, &ClientLogUrlLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageBoxLoginUserPmd_S_descriptor_, &MessageBoxLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAccountRegisterLoginUserPmd_C_descriptor_, &RequestAccountRegisterLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnAccountRegisterLoginUserPmd_S_descriptor_, &ReturnAccountRegisterLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogoutTokenLoginUserPmd_C_descriptor_, &UserLogoutTokenLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginReconnectLoginUserPmd_C_descriptor_, &UserLoginReconnectLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectKickoutLoginUserPmd_S_descriptor_, &ReconnectKickoutLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectErrorLoginUserPmd_S_descriptor_, &ReconnectErrorLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerKickoutLoginUserPmd_S_descriptor_, &ServerKickoutLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlatInfo_descriptor_, &PlatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThirdPlatLoginUserPmd_C_descriptor_, &ThirdPlatLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetServerLangLoginUserPmd_C_descriptor_, &SetServerLangLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestClientIPLoginUserPmd_C_descriptor_, &RequestClientIPLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnClientIPLoginUserPmd_S_descriptor_, &ReturnClientIPLoginUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckVersionLoginUserPmd_C_descriptor_, &CheckVersionLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorClientVerifyLoginUserPmd_C_descriptor_, &BehaviorClientVerifyLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSupoortGameListLoginUserPmd_C_descriptor_, &RequestSupoortGameListLoginUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnSupoortGameListLoginUserPmd_S_Game_descriptor_, &ReturnSupoortGameListLoginUserPmd_S_Game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnSupoortGameListLoginUserPmd_S_descriptor_, &ReturnSupoortGameListLoginUserPmd_S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logincommand_2eproto() {
  delete Login::default_instance_;
  delete Login_reflection_;
  delete AccountTokenVerifyLoginUserPmd_CS::default_instance_;
  delete AccountTokenVerifyLoginUserPmd_CS_reflection_;
  delete PushAccountVerifyLoginUserPmd_C::default_instance_;
  delete PushAccountVerifyLoginUserPmd_C_reflection_;
  delete AccountTokenVerifyReturnLoginUserPmd_S::default_instance_;
  delete AccountTokenVerifyReturnLoginUserPmd_S_reflection_;
  delete ZoneInfo::default_instance_;
  delete ZoneInfo_reflection_;
  delete ZoneInfoListLoginUserPmd_S::default_instance_;
  delete ZoneInfoListLoginUserPmd_S_reflection_;
  delete RequestZoneInfoListLoginUserPmd_C::default_instance_;
  delete RequestZoneInfoListLoginUserPmd_C_reflection_;
  delete RequestUserZoneInfoLoginUserPmd_C::default_instance_;
  delete RequestUserZoneInfoLoginUserPmd_C_reflection_;
  delete UserZoneInfo::default_instance_;
  delete UserZoneInfo_reflection_;
  delete RequestUserZoneInfoLoginUserPmd_S::default_instance_;
  delete RequestUserZoneInfoLoginUserPmd_S_reflection_;
  delete MobileRegistRequestRandCodeLoginUserPmd_C::default_instance_;
  delete MobileRegistRequestRandCodeLoginUserPmd_C_reflection_;
  delete MobileRegistReturnRandCodeLoginUserPmd_S::default_instance_;
  delete MobileRegistReturnRandCodeLoginUserPmd_S_reflection_;
  delete MobileRegistRequestCreateAccountLoginUserPmd_C::default_instance_;
  delete MobileRegistRequestCreateAccountLoginUserPmd_C_reflection_;
  delete MobileRegistReturnCreateAccountFailLoginUserPmd_S::default_instance_;
  delete MobileRegistReturnCreateAccountFailLoginUserPmd_S_reflection_;
  delete EmailRegistRequestCreateAccountLoginUserPmd_C::default_instance_;
  delete EmailRegistRequestCreateAccountLoginUserPmd_C_reflection_;
  delete EmailRegistReturnCreateAccountLoginUserPmd_S::default_instance_;
  delete EmailRegistReturnCreateAccountLoginUserPmd_S_reflection_;
  delete UserRequestPlatTokenByPasswordLoginUserPmd_C::default_instance_;
  delete UserRequestPlatTokenByPasswordLoginUserPmd_C_reflection_;
  delete UserRequestPlatTokenByThirdLoginUserPmd_C::default_instance_;
  delete UserRequestPlatTokenByThirdLoginUserPmd_C_reflection_;
  delete UserRequestPlatTokenLoginOkLoginUserPmd_S::default_instance_;
  delete UserRequestPlatTokenLoginOkLoginUserPmd_S_reflection_;
  delete UserRequestPlatTokenLoginFailLoginUserPmd_S::default_instance_;
  delete UserRequestPlatTokenLoginFailLoginUserPmd_S_reflection_;
  delete UserLoginRequestLoginUserPmd_C::default_instance_;
  delete UserLoginRequestLoginUserPmd_C_reflection_;
  delete UserLoginReturnFailLoginUserPmd_S::default_instance_;
  delete UserLoginReturnFailLoginUserPmd_S_reflection_;
  delete UserLoginReturnOkLoginUserPmd_S::default_instance_;
  delete UserLoginReturnOkLoginUserPmd_S_reflection_;
  delete UserLoginTokenLoginUserPmd_C::default_instance_;
  delete UserLoginTokenLoginUserPmd_C_reflection_;
  delete ClientLogUrlLoginUserPmd_S::default_instance_;
  delete ClientLogUrlLoginUserPmd_S_reflection_;
  delete MessageBoxLoginUserPmd_S::default_instance_;
  delete MessageBoxLoginUserPmd_S_reflection_;
  delete RequestAccountRegisterLoginUserPmd_C::default_instance_;
  delete RequestAccountRegisterLoginUserPmd_C_reflection_;
  delete ReturnAccountRegisterLoginUserPmd_S::default_instance_;
  delete ReturnAccountRegisterLoginUserPmd_S_reflection_;
  delete UserLogoutTokenLoginUserPmd_C::default_instance_;
  delete UserLogoutTokenLoginUserPmd_C_reflection_;
  delete UserLoginReconnectLoginUserPmd_C::default_instance_;
  delete UserLoginReconnectLoginUserPmd_C_reflection_;
  delete ReconnectKickoutLoginUserPmd_S::default_instance_;
  delete ReconnectKickoutLoginUserPmd_S_reflection_;
  delete ReconnectErrorLoginUserPmd_S::default_instance_;
  delete ReconnectErrorLoginUserPmd_S_reflection_;
  delete ServerKickoutLoginUserPmd_S::default_instance_;
  delete ServerKickoutLoginUserPmd_S_reflection_;
  delete PlatInfo::default_instance_;
  delete PlatInfo_reflection_;
  delete ThirdPlatLoginUserPmd_C::default_instance_;
  delete ThirdPlatLoginUserPmd_C_reflection_;
  delete SetServerLangLoginUserPmd_C::default_instance_;
  delete SetServerLangLoginUserPmd_C_reflection_;
  delete RequestClientIPLoginUserPmd_C::default_instance_;
  delete RequestClientIPLoginUserPmd_C_reflection_;
  delete ReturnClientIPLoginUserPmd_S::default_instance_;
  delete ReturnClientIPLoginUserPmd_S_reflection_;
  delete CheckVersionLoginUserPmd_C::default_instance_;
  delete CheckVersionLoginUserPmd_C_reflection_;
  delete BehaviorClientVerifyLoginUserPmd_C::default_instance_;
  delete BehaviorClientVerifyLoginUserPmd_C_reflection_;
  delete RequestSupoortGameListLoginUserPmd_C::default_instance_;
  delete RequestSupoortGameListLoginUserPmd_C_reflection_;
  delete ReturnSupoortGameListLoginUserPmd_S_Game::default_instance_;
  delete ReturnSupoortGameListLoginUserPmd_S_Game_reflection_;
  delete ReturnSupoortGameListLoginUserPmd_S::default_instance_;
  delete ReturnSupoortGameListLoginUserPmd_S_reflection_;
}

void protobuf_AddDesc_logincommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022logincommand.proto\022\003Pmd\"\340\013\n\005Login\"\326\013\n\005"
    "Param\022%\n!AccountTokenVerifyLoginUserPmd_"
    "CS\020\001\022*\n&AccountTokenVerifyReturnLoginUse"
    "rPmd_S\020\002\022\036\n\032ZoneInfoListLoginUserPmd_S\020\003"
    "\022\"\n\036UserLoginRequestLoginUserPmd_C\020\004\022%\n!"
    "UserLoginReturnFailLoginUserPmd_S\020\005\022#\n\037U"
    "serLoginReturnOkLoginUserPmd_S\020\006\022 \n\034User"
    "LoginTokenLoginUserPmd_C\020\007\022\036\n\032ClientLogU"
    "rlLoginUserPmd_S\020\010\022\034\n\030MessageBoxLoginUse"
    "rPmd_S\020\t\022(\n$RequestAccountRegisterLoginU"
    "serPmd_C\020\n\022\'\n#ReturnAccountRegisterLogin"
    "UserPmd_S\020\013\022!\n\035UserLogoutTokenLoginUserP"
    "md_C\020\014\022$\n UserLoginReconnectLoginUserPmd"
    "_C\020\r\022\"\n\036ReconnectKickoutLoginUserPmd_S\020\016"
    "\022\037\n\033ServerKickoutLoginUserPmd_S\020\017\022%\n!Req"
    "uestZoneInfoListLoginUserPmd_C\020\020\022\037\n\033SetS"
    "erverLangLoginUserPmd_C\020\021\022!\n\035RequestClie"
    "ntIPLoginUserPmd_C\020\022\022 \n\034ReturnClientIPLo"
    "ginUserPmd_S\020\023\022 \n\034ReconnectErrorLoginUse"
    "rPmd_S\020\024\022\036\n\032CheckVersionLoginUserPmd_C\020\025"
    "\022#\n\037PushAccountVerifyLoginUserPmd_C\020\026\022&\n"
    "\"BehaviorClientVerifyLoginUserPmd_C\020\027\022%\n"
    "!RequestUserZoneInfoLoginUserPmd_C\020\030\022%\n!"
    "RequestUserZoneInfoLoginUserPmd_S\020\031\022-\n)M"
    "obileRegistRequestRandCodeLoginUserPmd_C"
    "\020\032\022,\n(MobileRegistReturnRandCodeLoginUse"
    "rPmd_S\020\033\0222\n.MobileRegistRequestCreateAcc"
    "ountLoginUserPmd_C\020\034\0225\n1MobileRegistRetu"
    "rnCreateAccountFailLoginUserPmd_S\020\035\022(\n$R"
    "equestSupoortGameListLoginUserPmd_C\020\036\022\'\n"
    "#ReturnSupoortGameListLoginUserPmd_S\020\037\0220"
    "\n,UserRequestPlatTokenByPasswordLoginUse"
    "rPmd_C\020 \022-\n)UserRequestPlatTokenByThirdL"
    "oginUserPmd_C\020!\022-\n)UserRequestPlatTokenL"
    "oginOkLoginUserPmd_S\020\"\022/\n+UserRequestPla"
    "tTokenLoginFailLoginUserPmd_S\020#\0221\n-Email"
    "RegistRequestCreateAccountLoginUserPmd_C"
    "\020$\0220\n,EmailRegistReturnCreateAccountLogi"
    "nUserPmd_S\020%\"\335\001\n!AccountTokenVerifyLogin"
    "UserPmd_CS\022\017\n\007account\030\001 \002(\t\022\r\n\005token\030\002 \002"
    "(\t\022\017\n\007version\030\003 \002(\r\022\016\n\006gameid\030\004 \001(\r\022\013\n\003m"
    "id\030\005 \001(\t\022\016\n\006platid\030\006 \001(\r\022\016\n\006zoneid\030\007 \001(\r"
    "\022\023\n\013gameversion\030\010 \001(\r\022\020\n\010compress\030\t \001(\t\022"
    "\017\n\007encrypt\030\n \001(\t\022\022\n\nencryptkey\030\013 \001(\t\"\312\001\n"
    "\037PushAccountVerifyLoginUserPmd_C\022\r\n\005acci"
    "d\030\001 \001(\004\022\017\n\007account\030\002 \001(\t\022\016\n\006zoneid\030\003 \001(\r"
    "\022\r\n\005token\030\004 \001(\t\022\017\n\007version\030\005 \001(\r\022\013\n\003mid\030"
    "\006 \001(\t\022\023\n\013gameversion\030\007 \001(\r\022\020\n\010compress\030\010"
    " \001(\t\022\017\n\007encrypt\030\t \001(\t\022\022\n\nencryptkey\030\n \001("
    "\t\"`\n&AccountTokenVerifyReturnLoginUserPm"
    "d_S\022(\n\007retcode\030\001 \002(\0162\027.Pmd.VerifyReturnR"
    "eason\022\014\n\004desc\030\002 \001(\t\"]\n\010ZoneInfo\022\016\n\006zonei"
    "d\030\001 \002(\r\022\020\n\010zonename\030\002 \002(\t\022\035\n\005state\030\003 \001(\016"
    "2\016.Pmd.ZoneState\022\020\n\010opentime\030\004 \001(\t\"_\n\032Zo"
    "neInfoListLoginUserPmd_S\022\020\n\010gamename\030\001 \001"
    "(\t\022\016\n\006gameid\030\002 \002(\r\022\037\n\010zonelist\030\003 \003(\0132\r.P"
    "md.ZoneInfo\"3\n!RequestZoneInfoListLoginU"
    "serPmd_C\022\016\n\006gameid\030\001 \002(\r\"3\n!RequestUserZ"
    "oneInfoLoginUserPmd_C\022\016\n\006gameid\030\001 \002(\r\"T\n"
    "\014UserZoneInfo\022\020\n\010charname\030\001 \002(\t\022\037\n\010zonei"
    "nfo\030\002 \002(\0132\r.Pmd.ZoneInfo\022\021\n\tonlinenum\030\003 "
    "\002(\r\"L\n!RequestUserZoneInfoLoginUserPmd_S"
    "\022\'\n\014userzoneinfo\030\001 \003(\0132\021.Pmd.UserZoneInf"
    "o\"N\n)MobileRegistRequestRandCodeLoginUse"
    "rPmd_C\022\021\n\tmobilenum\030\001 \002(\t\022\016\n\006gameid\030\002 \002("
    "\r\"Z\n(MobileRegistReturnRandCodeLoginUser"
    "Pmd_S\022\017\n\007retcode\030\001 \002(\r\022\014\n\004desc\030\002 \001(\t\022\017\n\007"
    "timeout\030\003 \001(\004\"w\n.MobileRegistRequestCrea"
    "teAccountLoginUserPmd_C\022\021\n\tmobilenum\030\001 \002"
    "(\t\022\020\n\010randcode\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\022\016"
    "\n\006gameid\030\004 \002(\r\"R\n1MobileRegistReturnCrea"
    "teAccountFailLoginUserPmd_S\022\017\n\007retcode\030\001"
    " \002(\r\022\014\n\004desc\030\002 \001(\t\"}\n-EmailRegistRequest"
    "CreateAccountLoginUserPmd_C\022\r\n\005email\030\001 \002"
    "(\t\022\020\n\010password\030\002 \002(\t\022\016\n\006gameid\030\003 \002(\r\022\016\n\006"
    "isbind\030\004 \001(\010\022\013\n\003uid\030\005 \001(\004\"Z\n,EmailRegist"
    "ReturnCreateAccountLoginUserPmd_S\022\017\n\007ret"
    "code\030\001 \002(\r\022\014\n\004desc\030\002 \001(\t\022\013\n\003uid\030\003 \001(\004\"q\n"
    ",UserRequestPlatTokenByPasswordLoginUser"
    "Pmd_C\022\016\n\006gameid\030\001 \002(\r\022\016\n\006platid\030\002 \002(\r\022\017\n"
    "\007account\030\003 \002(\t\022\020\n\010password\030\004 \002(\t\"\\\n)User"
    "RequestPlatTokenByThirdLoginUserPmd_C\022\037\n"
    "\010platinfo\030\001 \002(\0132\r.Pmd.PlatInfo\022\016\n\006gameid"
    "\030\002 \002(\r\"\302\001\n)UserRequestPlatTokenLoginOkLo"
    "ginUserPmd_S\022\013\n\003uid\030\001 \002(\004\022\017\n\007platkey\030\002 \002"
    "(\t\022\021\n\tplatlogin\030\003 \002(\t\022\025\n\rplatloginlife\030\004"
    " \002(\r\022\024\n\014timezonename\030\005 \002(\t\022\026\n\016timezoneof"
    "fset\030\006 \001(\005\022\037\n\010platinfo\030\007 \001(\0132\r.Pmd.PlatI"
    "nfo\"L\n+UserRequestPlatTokenLoginFailLogi"
    "nUserPmd_S\022\017\n\007retcode\030\001 \002(\r\022\014\n\004desc\030\002 \002("
    "\t\"b\n\036UserLoginRequestLoginUserPmd_C\022\016\n\006g"
    "ameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\023\n\013gameversi"
    "on\030\003 \002(\r\022\013\n\003mid\030\004 \001(\t\"^\n!UserLoginReturn"
    "FailLoginUserPmd_S\022+\n\007retcode\030\001 \002(\0162\032.Pm"
    "d.LoginReturnFailReason\022\014\n\004desc\030\002 \002(\t\"\317\001"
    "\n\037UserLoginReturnOkLoginUserPmd_S\022\021\n\tacc"
    "ountid\030\001 \002(\004\022\023\n\013logintempid\030\002 \001(\004\022\017\n\007tok"
    "enid\030\003 \001(\004\022\022\n\ngatewayurl\030\004 \001(\t\022\016\n\006gameid"
    "\030\005 \001(\r\022\016\n\006zoneid\030\006 \001(\r\022\027\n\017separatezoneui"
    "d\030\007 \001(\010\022\017\n\007zoneuid\030\010 \001(\t\022\025\n\rgatewayurltc"
    "p\030\t \001(\t\"\302\001\n\034UserLoginTokenLoginUserPmd_C"
    "\022\016\n\006gameid\030\001 \002(\r\022\016\n\006zoneid\030\002 \002(\r\022\021\n\tacco"
    "untid\030\003 \002(\004\022\023\n\013logintempid\030\004 \002(\004\022\021\n\ttime"
    "stamp\030\005 \002(\r\022\020\n\010tokenmd5\030\006 \002(\t\022\020\n\010compres"
    "s\030\010 \001(\t\022\017\n\007encrypt\030\t \001(\t\022\022\n\nencryptkey\030\n"
    " \001(\t\"P\n\032ClientLogUrlLoginUserPmd_S\022\020\n\010lo"
    "glevel\030\001 \002(\t\022\016\n\006logurl\030\002 \002(\t\022\020\n\010distinct"
    "\030\003 \002(\010\"^\n\030MessageBoxLoginUserPmd_S\022\017\n\007bt"
    "nleft\030\001 \001(\t\022\021\n\tbtnmiddle\030\002 \001(\t\022\020\n\010btnrig"
    "ht\030\003 \001(\t\022\014\n\004info\030\004 \001(\t\"W\n$RequestAccount"
    "RegisterLoginUserPmd_C\022\017\n\007account\030\001 \002(\t\022"
    "\020\n\010password\030\002 \002(\t\022\014\n\004code\030\003 \001(\t\"I\n#Retur"
    "nAccountRegisterLoginUserPmd_S\022\017\n\007accoun"
    "t\030\001 \002(\t\022\021\n\taccountid\030\002 \002(\004\"\037\n\035UserLogout"
    "TokenLoginUserPmd_C\"o\n UserLoginReconnec"
    "tLoginUserPmd_C\022\021\n\taccountid\030\001 \001(\004\022\021\n\tti"
    "mestamp\030\002 \001(\r\022\020\n\010tokenmd5\030\003 \001(\t\022\023\n\013login"
    "tempid\030\004 \001(\004\".\n\036ReconnectKickoutLoginUse"
    "rPmd_S\022\014\n\004desc\030\001 \001(\t\",\n\034ReconnectErrorLo"
    "ginUserPmd_S\022\014\n\004desc\030\001 \001(\t\">\n\033ServerKick"
    "outLoginUserPmd_S\022\021\n\taccountid\030\001 \002(\004\022\014\n\004"
    "desc\030\002 \001(\t\"\273\001\n\010PlatInfo\022\017\n\007account\030\001 \002(\t"
    "\022\035\n\006platid\030\002 \002(\0162\r.Pmd.PlatType\022\r\n\005email"
    "\030\003 \001(\t\022\016\n\006gender\030\004 \001(\t\022\020\n\010nickname\030\005 \001(\t"
    "\022\021\n\ttimestamp\030\006 \001(\t\022\014\n\004sign\030\010 \001(\t\022\017\n\007fac"
    "eurl\030\n \001(\t\022\017\n\007extdata\030\013 \001(\t\022\013\n\003uid\030\014 \001(\t"
    "\"d\n\027ThirdPlatLoginUserPmd_C\022\037\n\010platinfo\030"
    "\001 \002(\0132\r.Pmd.PlatInfo\022\016\n\006gameid\030\002 \002(\r\022\013\n\003"
    "sid\030\003 \002(\t\022\013\n\003uid\030\004 \002(\t\"\?\n\033SetServerLangL"
    "oginUserPmd_C\022\014\n\004lang\030\001 \002(\t\022\022\n\ngameregio"
    "n\030\002 \002(\005\"\037\n\035RequestClientIPLoginUserPmd_C"
    "\".\n\034ReturnClientIPLoginUserPmd_S\022\016\n\006pstr"
    "ip\030\001 \002(\t\"E\n\032CheckVersionLoginUserPmd_C\022\026"
    "\n\016default_charid\030\001 \001(\r\022\017\n\007version\030\002 \001(\r\""
    "\336\001\n\"BehaviorClientVerifyLoginUserPmd_C\022\017"
    "\n\007account\030\001 \002(\t\022\r\n\005token\030\002 \002(\t\022\017\n\007versio"
    "n\030\003 \002(\r\022\016\n\006gameid\030\004 \001(\r\022\013\n\003mid\030\005 \001(\t\022\016\n\006"
    "platid\030\006 \001(\r\022\016\n\006zoneid\030\007 \001(\r\022\023\n\013gamevers"
    "ion\030\010 \001(\r\022\020\n\010compress\030\t \001(\t\022\017\n\007encrypt\030\n"
    " \001(\t\022\022\n\nencryptkey\030\013 \001(\t\"&\n$RequestSupoo"
    "rtGameListLoginUserPmd_C\"L\n(ReturnSupoor"
    "tGameListLoginUserPmd_S_Game\022\020\n\010gamename"
    "\030\001 \001(\t\022\016\n\006gameid\030\002 \002(\r\"f\n#ReturnSupoortG"
    "ameListLoginUserPmd_S\022\?\n\010gamelist\030\001 \003(\0132"
    "-.Pmd.ReturnSupoortGameListLoginUserPmd_"
    "S_Game*[\n\022VerifyReturnReason\022\013\n\007LoginOk\020"
    "\000\022\022\n\016TokenFindError\020\001\022\022\n\016TokenDiffError\020"
    "\002\022\020\n\014VersionError\020\003*\?\n\tZoneState\022\014\n\010Shut"
    "down\020\000\022\n\n\006Normal\020\001\022\n\n\006Fullly\020\002\022\014\n\010Starti"
    "ng\020\003*\303\001\n\025LoginReturnFailReason\022\014\n\010Passwo"
    "rd\020\001\022\022\n\016ServerShutdown\020\002\022\021\n\rVersionTooLo"
    "w\020\003\022\021\n\rUserTokenFind\020\004\022\023\n\017UserTokenTempI"
    "d\020\005\022\024\n\020UserTokenTimeOut\020\006\022\021\n\rLoginDulica"
    "te\020\007\022\022\n\016NoGatewaytDown\020\010\022\020\n\014AccountUsing"
    "\020\t*\235\004\n\010PlatType\022\023\n\017PlatType_Normal\020\000\022\017\n\013"
    "PlatType_UC\020\004\022\024\n\020PlatType_LeZhuan\020C\022\023\n\017P"
    "latType_WeChat\020D\022\023\n\017PlatType_Play68\020E\022\022\n"
    "\016PlatType_AiBei\020F\022\025\n\021PlatType_Facebook\020G"
    "\022\027\n\023PlatType_GooglePlay\020H\022\027\n\023PlatType_Xi"
    "ngZhiZhu\020I\022\022\n\016PlatType_HuoWu\020J\022\023\n\017PlatTy"
    "pe_CaiGuo\020M\022\021\n\rPlatType_1758\020O\022\022\n\016PlatTy"
    "pe_DAPAI\020P\022\021\n\rPlatType_HILE\020R\022\020\n\014PlatTyp"
    "e_AAY\020V\022\023\n\017PlatType_WEIYOU\020Z\022\017\n\013PlatType"
    "_9g\020c\022\024\n\017PlatType_MOBILE\020\201\001\022\024\n\017PlatType_"
    "XueChi\020\205\001\022\023\n\016PlatType_Egret\020\206\001\022\023\n\016PlatTy"
    "pe_AoXin\020\214\001\022\023\n\016PlatType_HUOSU\020\221\001\022\027\n\022Plat"
    "Type_RONGQIANG\020\227\001\022\023\n\016PlatType_WXApp\020\230\001\022\032"
    "\n\025PlatType_RongQiangApp\020\231\001", 6706);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logincommand.proto", &protobuf_RegisterTypes);
  Login::default_instance_ = new Login();
  AccountTokenVerifyLoginUserPmd_CS::default_instance_ = new AccountTokenVerifyLoginUserPmd_CS();
  PushAccountVerifyLoginUserPmd_C::default_instance_ = new PushAccountVerifyLoginUserPmd_C();
  AccountTokenVerifyReturnLoginUserPmd_S::default_instance_ = new AccountTokenVerifyReturnLoginUserPmd_S();
  ZoneInfo::default_instance_ = new ZoneInfo();
  ZoneInfoListLoginUserPmd_S::default_instance_ = new ZoneInfoListLoginUserPmd_S();
  RequestZoneInfoListLoginUserPmd_C::default_instance_ = new RequestZoneInfoListLoginUserPmd_C();
  RequestUserZoneInfoLoginUserPmd_C::default_instance_ = new RequestUserZoneInfoLoginUserPmd_C();
  UserZoneInfo::default_instance_ = new UserZoneInfo();
  RequestUserZoneInfoLoginUserPmd_S::default_instance_ = new RequestUserZoneInfoLoginUserPmd_S();
  MobileRegistRequestRandCodeLoginUserPmd_C::default_instance_ = new MobileRegistRequestRandCodeLoginUserPmd_C();
  MobileRegistReturnRandCodeLoginUserPmd_S::default_instance_ = new MobileRegistReturnRandCodeLoginUserPmd_S();
  MobileRegistRequestCreateAccountLoginUserPmd_C::default_instance_ = new MobileRegistRequestCreateAccountLoginUserPmd_C();
  MobileRegistReturnCreateAccountFailLoginUserPmd_S::default_instance_ = new MobileRegistReturnCreateAccountFailLoginUserPmd_S();
  EmailRegistRequestCreateAccountLoginUserPmd_C::default_instance_ = new EmailRegistRequestCreateAccountLoginUserPmd_C();
  EmailRegistReturnCreateAccountLoginUserPmd_S::default_instance_ = new EmailRegistReturnCreateAccountLoginUserPmd_S();
  UserRequestPlatTokenByPasswordLoginUserPmd_C::default_instance_ = new UserRequestPlatTokenByPasswordLoginUserPmd_C();
  UserRequestPlatTokenByThirdLoginUserPmd_C::default_instance_ = new UserRequestPlatTokenByThirdLoginUserPmd_C();
  UserRequestPlatTokenLoginOkLoginUserPmd_S::default_instance_ = new UserRequestPlatTokenLoginOkLoginUserPmd_S();
  UserRequestPlatTokenLoginFailLoginUserPmd_S::default_instance_ = new UserRequestPlatTokenLoginFailLoginUserPmd_S();
  UserLoginRequestLoginUserPmd_C::default_instance_ = new UserLoginRequestLoginUserPmd_C();
  UserLoginReturnFailLoginUserPmd_S::default_instance_ = new UserLoginReturnFailLoginUserPmd_S();
  UserLoginReturnOkLoginUserPmd_S::default_instance_ = new UserLoginReturnOkLoginUserPmd_S();
  UserLoginTokenLoginUserPmd_C::default_instance_ = new UserLoginTokenLoginUserPmd_C();
  ClientLogUrlLoginUserPmd_S::default_instance_ = new ClientLogUrlLoginUserPmd_S();
  MessageBoxLoginUserPmd_S::default_instance_ = new MessageBoxLoginUserPmd_S();
  RequestAccountRegisterLoginUserPmd_C::default_instance_ = new RequestAccountRegisterLoginUserPmd_C();
  ReturnAccountRegisterLoginUserPmd_S::default_instance_ = new ReturnAccountRegisterLoginUserPmd_S();
  UserLogoutTokenLoginUserPmd_C::default_instance_ = new UserLogoutTokenLoginUserPmd_C();
  UserLoginReconnectLoginUserPmd_C::default_instance_ = new UserLoginReconnectLoginUserPmd_C();
  ReconnectKickoutLoginUserPmd_S::default_instance_ = new ReconnectKickoutLoginUserPmd_S();
  ReconnectErrorLoginUserPmd_S::default_instance_ = new ReconnectErrorLoginUserPmd_S();
  ServerKickoutLoginUserPmd_S::default_instance_ = new ServerKickoutLoginUserPmd_S();
  PlatInfo::default_instance_ = new PlatInfo();
  ThirdPlatLoginUserPmd_C::default_instance_ = new ThirdPlatLoginUserPmd_C();
  SetServerLangLoginUserPmd_C::default_instance_ = new SetServerLangLoginUserPmd_C();
  RequestClientIPLoginUserPmd_C::default_instance_ = new RequestClientIPLoginUserPmd_C();
  ReturnClientIPLoginUserPmd_S::default_instance_ = new ReturnClientIPLoginUserPmd_S();
  CheckVersionLoginUserPmd_C::default_instance_ = new CheckVersionLoginUserPmd_C();
  BehaviorClientVerifyLoginUserPmd_C::default_instance_ = new BehaviorClientVerifyLoginUserPmd_C();
  RequestSupoortGameListLoginUserPmd_C::default_instance_ = new RequestSupoortGameListLoginUserPmd_C();
  ReturnSupoortGameListLoginUserPmd_S_Game::default_instance_ = new ReturnSupoortGameListLoginUserPmd_S_Game();
  ReturnSupoortGameListLoginUserPmd_S::default_instance_ = new ReturnSupoortGameListLoginUserPmd_S();
  Login::default_instance_->InitAsDefaultInstance();
  AccountTokenVerifyLoginUserPmd_CS::default_instance_->InitAsDefaultInstance();
  PushAccountVerifyLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  AccountTokenVerifyReturnLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  ZoneInfo::default_instance_->InitAsDefaultInstance();
  ZoneInfoListLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  RequestZoneInfoListLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  RequestUserZoneInfoLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  UserZoneInfo::default_instance_->InitAsDefaultInstance();
  RequestUserZoneInfoLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  MobileRegistRequestRandCodeLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  MobileRegistReturnRandCodeLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  MobileRegistRequestCreateAccountLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  MobileRegistReturnCreateAccountFailLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  EmailRegistRequestCreateAccountLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  EmailRegistReturnCreateAccountLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  UserRequestPlatTokenByPasswordLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  UserRequestPlatTokenByThirdLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  UserRequestPlatTokenLoginOkLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  UserRequestPlatTokenLoginFailLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  UserLoginRequestLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  UserLoginReturnFailLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  UserLoginReturnOkLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  UserLoginTokenLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  ClientLogUrlLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  MessageBoxLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  RequestAccountRegisterLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnAccountRegisterLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  UserLogoutTokenLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  UserLoginReconnectLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReconnectKickoutLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  ReconnectErrorLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  ServerKickoutLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  PlatInfo::default_instance_->InitAsDefaultInstance();
  ThirdPlatLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  SetServerLangLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  RequestClientIPLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnClientIPLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  CheckVersionLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  BehaviorClientVerifyLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  RequestSupoortGameListLoginUserPmd_C::default_instance_->InitAsDefaultInstance();
  ReturnSupoortGameListLoginUserPmd_S_Game::default_instance_->InitAsDefaultInstance();
  ReturnSupoortGameListLoginUserPmd_S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logincommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logincommand_2eproto {
  StaticDescriptorInitializer_logincommand_2eproto() {
    protobuf_AddDesc_logincommand_2eproto();
  }
} static_descriptor_initializer_logincommand_2eproto_;
const ::google::protobuf::EnumDescriptor* VerifyReturnReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyReturnReason_descriptor_;
}
bool VerifyReturnReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ZoneState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneState_descriptor_;
}
bool ZoneState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginReturnFailReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReturnFailReason_descriptor_;
}
bool LoginReturnFailReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatType_descriptor_;
}
bool PlatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 4:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 77:
    case 79:
    case 80:
    case 82:
    case 86:
    case 90:
    case 99:
    case 129:
    case 133:
    case 134:
    case 140:
    case 145:
    case 151:
    case 152:
    case 153:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Login_Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_Param_descriptor_;
}
bool Login_Param_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Login_Param Login::AccountTokenVerifyLoginUserPmd_CS;
const Login_Param Login::AccountTokenVerifyReturnLoginUserPmd_S;
const Login_Param Login::ZoneInfoListLoginUserPmd_S;
const Login_Param Login::UserLoginRequestLoginUserPmd_C;
const Login_Param Login::UserLoginReturnFailLoginUserPmd_S;
const Login_Param Login::UserLoginReturnOkLoginUserPmd_S;
const Login_Param Login::UserLoginTokenLoginUserPmd_C;
const Login_Param Login::ClientLogUrlLoginUserPmd_S;
const Login_Param Login::MessageBoxLoginUserPmd_S;
const Login_Param Login::RequestAccountRegisterLoginUserPmd_C;
const Login_Param Login::ReturnAccountRegisterLoginUserPmd_S;
const Login_Param Login::UserLogoutTokenLoginUserPmd_C;
const Login_Param Login::UserLoginReconnectLoginUserPmd_C;
const Login_Param Login::ReconnectKickoutLoginUserPmd_S;
const Login_Param Login::ServerKickoutLoginUserPmd_S;
const Login_Param Login::RequestZoneInfoListLoginUserPmd_C;
const Login_Param Login::SetServerLangLoginUserPmd_C;
const Login_Param Login::RequestClientIPLoginUserPmd_C;
const Login_Param Login::ReturnClientIPLoginUserPmd_S;
const Login_Param Login::ReconnectErrorLoginUserPmd_S;
const Login_Param Login::CheckVersionLoginUserPmd_C;
const Login_Param Login::PushAccountVerifyLoginUserPmd_C;
const Login_Param Login::BehaviorClientVerifyLoginUserPmd_C;
const Login_Param Login::RequestUserZoneInfoLoginUserPmd_C;
const Login_Param Login::RequestUserZoneInfoLoginUserPmd_S;
const Login_Param Login::MobileRegistRequestRandCodeLoginUserPmd_C;
const Login_Param Login::MobileRegistReturnRandCodeLoginUserPmd_S;
const Login_Param Login::MobileRegistRequestCreateAccountLoginUserPmd_C;
const Login_Param Login::MobileRegistReturnCreateAccountFailLoginUserPmd_S;
const Login_Param Login::RequestSupoortGameListLoginUserPmd_C;
const Login_Param Login::ReturnSupoortGameListLoginUserPmd_S;
const Login_Param Login::UserRequestPlatTokenByPasswordLoginUserPmd_C;
const Login_Param Login::UserRequestPlatTokenByThirdLoginUserPmd_C;
const Login_Param Login::UserRequestPlatTokenLoginOkLoginUserPmd_S;
const Login_Param Login::UserRequestPlatTokenLoginFailLoginUserPmd_S;
const Login_Param Login::EmailRegistRequestCreateAccountLoginUserPmd_C;
const Login_Param Login::EmailRegistReturnCreateAccountLoginUserPmd_S;
const Login_Param Login::Param_MIN;
const Login_Param Login::Param_MAX;
const int Login::Param_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.Login)
}

void Login::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:Pmd.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.Login)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.Login)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountTokenVerifyLoginUserPmd_CS::kAccountFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kTokenFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kVersionFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kGameidFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kMidFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kPlatidFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kZoneidFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kGameversionFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kCompressFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kEncryptFieldNumber;
const int AccountTokenVerifyLoginUserPmd_CS::kEncryptkeyFieldNumber;
#endif  // !_MSC_VER

AccountTokenVerifyLoginUserPmd_CS::AccountTokenVerifyLoginUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.AccountTokenVerifyLoginUserPmd_CS)
}

void AccountTokenVerifyLoginUserPmd_CS::InitAsDefaultInstance() {
}

AccountTokenVerifyLoginUserPmd_CS::AccountTokenVerifyLoginUserPmd_CS(const AccountTokenVerifyLoginUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.AccountTokenVerifyLoginUserPmd_CS)
}

void AccountTokenVerifyLoginUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  gameid_ = 0u;
  mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platid_ = 0u;
  zoneid_ = 0u;
  gameversion_ = 0u;
  compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountTokenVerifyLoginUserPmd_CS::~AccountTokenVerifyLoginUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.AccountTokenVerifyLoginUserPmd_CS)
  SharedDtor();
}

void AccountTokenVerifyLoginUserPmd_CS::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void AccountTokenVerifyLoginUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountTokenVerifyLoginUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountTokenVerifyLoginUserPmd_CS_descriptor_;
}

const AccountTokenVerifyLoginUserPmd_CS& AccountTokenVerifyLoginUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

AccountTokenVerifyLoginUserPmd_CS* AccountTokenVerifyLoginUserPmd_CS::default_instance_ = NULL;

AccountTokenVerifyLoginUserPmd_CS* AccountTokenVerifyLoginUserPmd_CS::New() const {
  return new AccountTokenVerifyLoginUserPmd_CS;
}

void AccountTokenVerifyLoginUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountTokenVerifyLoginUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(version_, gameid_);
    ZR_(platid_, zoneid_);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_mid()) {
      if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mid_->clear();
      }
    }
    gameversion_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_compress()) {
      if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compress_->clear();
      }
    }
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypt_->clear();
      }
    }
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encryptkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountTokenVerifyLoginUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.AccountTokenVerifyLoginUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 4;
      case 4: {
        if (tag == 32) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mid;
        break;
      }

      // optional string mid = 5;
      case 5: {
        if (tag == 42) {
         parse_mid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mid().data(), this->mid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_platid;
        break;
      }

      // optional uint32 platid = 6;
      case 6: {
        if (tag == 48) {
         parse_platid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 7;
      case 7: {
        if (tag == 56) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gameversion;
        break;
      }

      // optional uint32 gameversion = 8;
      case 8: {
        if (tag == 64) {
         parse_gameversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_compress;
        break;
      }

      // optional string compress = 9;
      case 9: {
        if (tag == 74) {
         parse_compress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compress().data(), this->compress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 10;
      case 10: {
        if (tag == 82) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encrypt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_encryptkey;
        break;
      }

      // optional string encryptkey = 11;
      case 11: {
        if (tag == 90) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encryptkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.AccountTokenVerifyLoginUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.AccountTokenVerifyLoginUserPmd_CS)
  return false;
#undef DO_
}

void AccountTokenVerifyLoginUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.AccountTokenVerifyLoginUserPmd_CS)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // required uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint32 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gameid(), output);
  }

  // optional string mid = 5;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mid(), output);
  }

  // optional uint32 platid = 6;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->platid(), output);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zoneid(), output);
  }

  // optional uint32 gameversion = 8;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gameversion(), output);
  }

  // optional string compress = 9;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->compress(), output);
  }

  // optional string encrypt = 10;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->encrypt(), output);
  }

  // optional string encryptkey = 11;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.AccountTokenVerifyLoginUserPmd_CS)
}

::google::protobuf::uint8* AccountTokenVerifyLoginUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.AccountTokenVerifyLoginUserPmd_CS)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // optional uint32 gameid = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gameid(), target);
  }

  // optional string mid = 5;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mid(), target);
  }

  // optional uint32 platid = 6;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->platid(), target);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zoneid(), target);
  }

  // optional uint32 gameversion = 8;
  if (has_gameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gameversion(), target);
  }

  // optional string compress = 9;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->compress(), target);
  }

  // optional string encrypt = 10;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->encrypt(), target);
  }

  // optional string encryptkey = 11;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.AccountTokenVerifyLoginUserPmd_CS)
  return target;
}

int AccountTokenVerifyLoginUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional string mid = 5;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mid());
    }

    // optional uint32 platid = 6;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platid());
    }

    // optional uint32 zoneid = 7;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gameversion = 8;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameversion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string compress = 9;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compress());
    }

    // optional string encrypt = 10;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

    // optional string encryptkey = 11;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountTokenVerifyLoginUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountTokenVerifyLoginUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountTokenVerifyLoginUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountTokenVerifyLoginUserPmd_CS::MergeFrom(const AccountTokenVerifyLoginUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_compress()) {
      set_compress(from.compress());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountTokenVerifyLoginUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountTokenVerifyLoginUserPmd_CS::CopyFrom(const AccountTokenVerifyLoginUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountTokenVerifyLoginUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AccountTokenVerifyLoginUserPmd_CS::Swap(AccountTokenVerifyLoginUserPmd_CS* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(version_, other->version_);
    std::swap(gameid_, other->gameid_);
    std::swap(mid_, other->mid_);
    std::swap(platid_, other->platid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(compress_, other->compress_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountTokenVerifyLoginUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountTokenVerifyLoginUserPmd_CS_descriptor_;
  metadata.reflection = AccountTokenVerifyLoginUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushAccountVerifyLoginUserPmd_C::kAccidFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kAccountFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kZoneidFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kTokenFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kVersionFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kMidFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kGameversionFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kCompressFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kEncryptFieldNumber;
const int PushAccountVerifyLoginUserPmd_C::kEncryptkeyFieldNumber;
#endif  // !_MSC_VER

PushAccountVerifyLoginUserPmd_C::PushAccountVerifyLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PushAccountVerifyLoginUserPmd_C)
}

void PushAccountVerifyLoginUserPmd_C::InitAsDefaultInstance() {
}

PushAccountVerifyLoginUserPmd_C::PushAccountVerifyLoginUserPmd_C(const PushAccountVerifyLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PushAccountVerifyLoginUserPmd_C)
}

void PushAccountVerifyLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accid_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameversion_ = 0u;
  compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushAccountVerifyLoginUserPmd_C::~PushAccountVerifyLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.PushAccountVerifyLoginUserPmd_C)
  SharedDtor();
}

void PushAccountVerifyLoginUserPmd_C::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void PushAccountVerifyLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushAccountVerifyLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushAccountVerifyLoginUserPmd_C_descriptor_;
}

const PushAccountVerifyLoginUserPmd_C& PushAccountVerifyLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

PushAccountVerifyLoginUserPmd_C* PushAccountVerifyLoginUserPmd_C::default_instance_ = NULL;

PushAccountVerifyLoginUserPmd_C* PushAccountVerifyLoginUserPmd_C::New() const {
  return new PushAccountVerifyLoginUserPmd_C;
}

void PushAccountVerifyLoginUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushAccountVerifyLoginUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(zoneid_, version_);
    accid_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_mid()) {
      if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mid_->clear();
      }
    }
    gameversion_ = 0u;
    if (has_compress()) {
      if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compress_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypt_->clear();
      }
    }
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encryptkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushAccountVerifyLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PushAccountVerifyLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 accid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (tag == 34) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // optional uint32 version = 5;
      case 5: {
        if (tag == 40) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mid;
        break;
      }

      // optional string mid = 6;
      case 6: {
        if (tag == 50) {
         parse_mid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mid().data(), this->mid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gameversion;
        break;
      }

      // optional uint32 gameversion = 7;
      case 7: {
        if (tag == 56) {
         parse_gameversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_compress;
        break;
      }

      // optional string compress = 8;
      case 8: {
        if (tag == 66) {
         parse_compress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compress().data(), this->compress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 9;
      case 9: {
        if (tag == 74) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encrypt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_encryptkey;
        break;
      }

      // optional string encryptkey = 10;
      case 10: {
        if (tag == 82) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encryptkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PushAccountVerifyLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PushAccountVerifyLoginUserPmd_C)
  return false;
#undef DO_
}

void PushAccountVerifyLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PushAccountVerifyLoginUserPmd_C)
  // optional uint64 accid = 1;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // optional uint32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->version(), output);
  }

  // optional string mid = 6;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mid(), output);
  }

  // optional uint32 gameversion = 7;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gameversion(), output);
  }

  // optional string compress = 8;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->compress(), output);
  }

  // optional string encrypt = 9;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->encrypt(), output);
  }

  // optional string encryptkey = 10;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PushAccountVerifyLoginUserPmd_C)
}

::google::protobuf::uint8* PushAccountVerifyLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PushAccountVerifyLoginUserPmd_C)
  // optional uint64 accid = 1;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // optional uint32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->version(), target);
  }

  // optional string mid = 6;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mid(), target);
  }

  // optional uint32 gameversion = 7;
  if (has_gameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gameversion(), target);
  }

  // optional string compress = 8;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->compress(), target);
  }

  // optional string encrypt = 9;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->encrypt(), target);
  }

  // optional string encryptkey = 10;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PushAccountVerifyLoginUserPmd_C)
  return target;
}

int PushAccountVerifyLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 accid = 1;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional string mid = 6;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mid());
    }

    // optional uint32 gameversion = 7;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameversion());
    }

    // optional string compress = 8;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compress());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string encrypt = 9;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

    // optional string encryptkey = 10;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushAccountVerifyLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushAccountVerifyLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushAccountVerifyLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushAccountVerifyLoginUserPmd_C::MergeFrom(const PushAccountVerifyLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_compress()) {
      set_compress(from.compress());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushAccountVerifyLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushAccountVerifyLoginUserPmd_C::CopyFrom(const PushAccountVerifyLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAccountVerifyLoginUserPmd_C::IsInitialized() const {

  return true;
}

void PushAccountVerifyLoginUserPmd_C::Swap(PushAccountVerifyLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(accid_, other->accid_);
    std::swap(account_, other->account_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(token_, other->token_);
    std::swap(version_, other->version_);
    std::swap(mid_, other->mid_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(compress_, other->compress_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushAccountVerifyLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushAccountVerifyLoginUserPmd_C_descriptor_;
  metadata.reflection = PushAccountVerifyLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountTokenVerifyReturnLoginUserPmd_S::kRetcodeFieldNumber;
const int AccountTokenVerifyReturnLoginUserPmd_S::kDescFieldNumber;
#endif  // !_MSC_VER

AccountTokenVerifyReturnLoginUserPmd_S::AccountTokenVerifyReturnLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
}

void AccountTokenVerifyReturnLoginUserPmd_S::InitAsDefaultInstance() {
}

AccountTokenVerifyReturnLoginUserPmd_S::AccountTokenVerifyReturnLoginUserPmd_S(const AccountTokenVerifyReturnLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
}

void AccountTokenVerifyReturnLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountTokenVerifyReturnLoginUserPmd_S::~AccountTokenVerifyReturnLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
  SharedDtor();
}

void AccountTokenVerifyReturnLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void AccountTokenVerifyReturnLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountTokenVerifyReturnLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountTokenVerifyReturnLoginUserPmd_S_descriptor_;
}

const AccountTokenVerifyReturnLoginUserPmd_S& AccountTokenVerifyReturnLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

AccountTokenVerifyReturnLoginUserPmd_S* AccountTokenVerifyReturnLoginUserPmd_S::default_instance_ = NULL;

AccountTokenVerifyReturnLoginUserPmd_S* AccountTokenVerifyReturnLoginUserPmd_S::New() const {
  return new AccountTokenVerifyReturnLoginUserPmd_S;
}

void AccountTokenVerifyReturnLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountTokenVerifyReturnLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.VerifyReturnReason retcode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pmd::VerifyReturnReason_IsValid(value)) {
            set_retcode(static_cast< ::Pmd::VerifyReturnReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
  return false;
#undef DO_
}

void AccountTokenVerifyReturnLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
  // required .Pmd.VerifyReturnReason retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
}

::google::protobuf::uint8* AccountTokenVerifyReturnLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
  // required .Pmd.VerifyReturnReason retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.AccountTokenVerifyReturnLoginUserPmd_S)
  return target;
}

int AccountTokenVerifyReturnLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.VerifyReturnReason retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountTokenVerifyReturnLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountTokenVerifyReturnLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountTokenVerifyReturnLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountTokenVerifyReturnLoginUserPmd_S::MergeFrom(const AccountTokenVerifyReturnLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountTokenVerifyReturnLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountTokenVerifyReturnLoginUserPmd_S::CopyFrom(const AccountTokenVerifyReturnLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountTokenVerifyReturnLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountTokenVerifyReturnLoginUserPmd_S::Swap(AccountTokenVerifyReturnLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountTokenVerifyReturnLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountTokenVerifyReturnLoginUserPmd_S_descriptor_;
  metadata.reflection = AccountTokenVerifyReturnLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneInfo::kZoneidFieldNumber;
const int ZoneInfo::kZonenameFieldNumber;
const int ZoneInfo::kStateFieldNumber;
const int ZoneInfo::kOpentimeFieldNumber;
#endif  // !_MSC_VER

ZoneInfo::ZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ZoneInfo)
}

void ZoneInfo::InitAsDefaultInstance() {
}

ZoneInfo::ZoneInfo(const ZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ZoneInfo)
}

void ZoneInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zoneid_ = 0u;
  zonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneInfo::~ZoneInfo() {
  // @@protoc_insertion_point(destructor:Pmd.ZoneInfo)
  SharedDtor();
}

void ZoneInfo::SharedDtor() {
  if (zonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zonename_;
  }
  if (opentime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opentime_;
  }
  if (this != default_instance_) {
  }
}

void ZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneInfo_descriptor_;
}

const ZoneInfo& ZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ZoneInfo* ZoneInfo::default_instance_ = NULL;

ZoneInfo* ZoneInfo::New() const {
  return new ZoneInfo;
}

void ZoneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZoneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(zoneid_, state_);
    if (has_zonename()) {
      if (zonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        zonename_->clear();
      }
    }
    if (has_opentime()) {
      if (opentime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        opentime_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ZoneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoneid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_zonename;
        break;
      }

      // required string zonename = 2;
      case 2: {
        if (tag == 18) {
         parse_zonename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zonename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zonename().data(), this->zonename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .Pmd.ZoneState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pmd::ZoneState_IsValid(value)) {
            set_state(static_cast< ::Pmd::ZoneState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_opentime;
        break;
      }

      // optional string opentime = 4;
      case 4: {
        if (tag == 34) {
         parse_opentime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opentime().data(), this->opentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "opentime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ZoneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ZoneInfo)
  return false;
#undef DO_
}

void ZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ZoneInfo)
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // required string zonename = 2;
  if (has_zonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zonename().data(), this->zonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zonename(), output);
  }

  // optional .Pmd.ZoneState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional string opentime = 4;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opentime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->opentime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ZoneInfo)
}

::google::protobuf::uint8* ZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ZoneInfo)
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // required string zonename = 2;
  if (has_zonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zonename().data(), this->zonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zonename(), target);
  }

  // optional .Pmd.ZoneState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional string opentime = 4;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opentime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->opentime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ZoneInfo)
  return target;
}

int ZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required string zonename = 2;
    if (has_zonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zonename());
    }

    // optional .Pmd.ZoneState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string opentime = 4;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opentime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneInfo::MergeFrom(const ZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_zonename()) {
      set_zonename(from.zonename());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneInfo::CopyFrom(const ZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ZoneInfo::Swap(ZoneInfo* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(zonename_, other->zonename_);
    std::swap(state_, other->state_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneInfo_descriptor_;
  metadata.reflection = ZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneInfoListLoginUserPmd_S::kGamenameFieldNumber;
const int ZoneInfoListLoginUserPmd_S::kGameidFieldNumber;
const int ZoneInfoListLoginUserPmd_S::kZonelistFieldNumber;
#endif  // !_MSC_VER

ZoneInfoListLoginUserPmd_S::ZoneInfoListLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ZoneInfoListLoginUserPmd_S)
}

void ZoneInfoListLoginUserPmd_S::InitAsDefaultInstance() {
}

ZoneInfoListLoginUserPmd_S::ZoneInfoListLoginUserPmd_S(const ZoneInfoListLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ZoneInfoListLoginUserPmd_S)
}

void ZoneInfoListLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneInfoListLoginUserPmd_S::~ZoneInfoListLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ZoneInfoListLoginUserPmd_S)
  SharedDtor();
}

void ZoneInfoListLoginUserPmd_S::SharedDtor() {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (this != default_instance_) {
  }
}

void ZoneInfoListLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneInfoListLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneInfoListLoginUserPmd_S_descriptor_;
}

const ZoneInfoListLoginUserPmd_S& ZoneInfoListLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ZoneInfoListLoginUserPmd_S* ZoneInfoListLoginUserPmd_S::default_instance_ = NULL;

ZoneInfoListLoginUserPmd_S* ZoneInfoListLoginUserPmd_S::New() const {
  return new ZoneInfoListLoginUserPmd_S;
}

void ZoneInfoListLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gamename_->clear();
      }
    }
    gameid_ = 0u;
  }
  zonelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneInfoListLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ZoneInfoListLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gamename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gamename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zonelist;
        break;
      }

      // repeated .Pmd.ZoneInfo zonelist = 3;
      case 3: {
        if (tag == 26) {
         parse_zonelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zonelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zonelist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ZoneInfoListLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ZoneInfoListLoginUserPmd_S)
  return false;
#undef DO_
}

void ZoneInfoListLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ZoneInfoListLoginUserPmd_S)
  // optional string gamename = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // repeated .Pmd.ZoneInfo zonelist = 3;
  for (int i = 0; i < this->zonelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zonelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ZoneInfoListLoginUserPmd_S)
}

::google::protobuf::uint8* ZoneInfoListLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ZoneInfoListLoginUserPmd_S)
  // optional string gamename = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamename(), target);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // repeated .Pmd.ZoneInfo zonelist = 3;
  for (int i = 0; i < this->zonelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zonelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ZoneInfoListLoginUserPmd_S)
  return target;
}

int ZoneInfoListLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gamename = 1;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }

    // required uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

  }
  // repeated .Pmd.ZoneInfo zonelist = 3;
  total_size += 1 * this->zonelist_size();
  for (int i = 0; i < this->zonelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zonelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneInfoListLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneInfoListLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneInfoListLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneInfoListLoginUserPmd_S::MergeFrom(const ZoneInfoListLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  zonelist_.MergeFrom(from.zonelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneInfoListLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneInfoListLoginUserPmd_S::CopyFrom(const ZoneInfoListLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneInfoListLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->zonelist())) return false;
  return true;
}

void ZoneInfoListLoginUserPmd_S::Swap(ZoneInfoListLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(gamename_, other->gamename_);
    std::swap(gameid_, other->gameid_);
    zonelist_.Swap(&other->zonelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneInfoListLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneInfoListLoginUserPmd_S_descriptor_;
  metadata.reflection = ZoneInfoListLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestZoneInfoListLoginUserPmd_C::kGameidFieldNumber;
#endif  // !_MSC_VER

RequestZoneInfoListLoginUserPmd_C::RequestZoneInfoListLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestZoneInfoListLoginUserPmd_C)
}

void RequestZoneInfoListLoginUserPmd_C::InitAsDefaultInstance() {
}

RequestZoneInfoListLoginUserPmd_C::RequestZoneInfoListLoginUserPmd_C(const RequestZoneInfoListLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestZoneInfoListLoginUserPmd_C)
}

void RequestZoneInfoListLoginUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestZoneInfoListLoginUserPmd_C::~RequestZoneInfoListLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestZoneInfoListLoginUserPmd_C)
  SharedDtor();
}

void RequestZoneInfoListLoginUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestZoneInfoListLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestZoneInfoListLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestZoneInfoListLoginUserPmd_C_descriptor_;
}

const RequestZoneInfoListLoginUserPmd_C& RequestZoneInfoListLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

RequestZoneInfoListLoginUserPmd_C* RequestZoneInfoListLoginUserPmd_C::default_instance_ = NULL;

RequestZoneInfoListLoginUserPmd_C* RequestZoneInfoListLoginUserPmd_C::New() const {
  return new RequestZoneInfoListLoginUserPmd_C;
}

void RequestZoneInfoListLoginUserPmd_C::Clear() {
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestZoneInfoListLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestZoneInfoListLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestZoneInfoListLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestZoneInfoListLoginUserPmd_C)
  return false;
#undef DO_
}

void RequestZoneInfoListLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestZoneInfoListLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestZoneInfoListLoginUserPmd_C)
}

::google::protobuf::uint8* RequestZoneInfoListLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestZoneInfoListLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestZoneInfoListLoginUserPmd_C)
  return target;
}

int RequestZoneInfoListLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestZoneInfoListLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestZoneInfoListLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestZoneInfoListLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestZoneInfoListLoginUserPmd_C::MergeFrom(const RequestZoneInfoListLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestZoneInfoListLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestZoneInfoListLoginUserPmd_C::CopyFrom(const RequestZoneInfoListLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestZoneInfoListLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestZoneInfoListLoginUserPmd_C::Swap(RequestZoneInfoListLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestZoneInfoListLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestZoneInfoListLoginUserPmd_C_descriptor_;
  metadata.reflection = RequestZoneInfoListLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUserZoneInfoLoginUserPmd_C::kGameidFieldNumber;
#endif  // !_MSC_VER

RequestUserZoneInfoLoginUserPmd_C::RequestUserZoneInfoLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestUserZoneInfoLoginUserPmd_C)
}

void RequestUserZoneInfoLoginUserPmd_C::InitAsDefaultInstance() {
}

RequestUserZoneInfoLoginUserPmd_C::RequestUserZoneInfoLoginUserPmd_C(const RequestUserZoneInfoLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestUserZoneInfoLoginUserPmd_C)
}

void RequestUserZoneInfoLoginUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUserZoneInfoLoginUserPmd_C::~RequestUserZoneInfoLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestUserZoneInfoLoginUserPmd_C)
  SharedDtor();
}

void RequestUserZoneInfoLoginUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestUserZoneInfoLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUserZoneInfoLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUserZoneInfoLoginUserPmd_C_descriptor_;
}

const RequestUserZoneInfoLoginUserPmd_C& RequestUserZoneInfoLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

RequestUserZoneInfoLoginUserPmd_C* RequestUserZoneInfoLoginUserPmd_C::default_instance_ = NULL;

RequestUserZoneInfoLoginUserPmd_C* RequestUserZoneInfoLoginUserPmd_C::New() const {
  return new RequestUserZoneInfoLoginUserPmd_C;
}

void RequestUserZoneInfoLoginUserPmd_C::Clear() {
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUserZoneInfoLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestUserZoneInfoLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestUserZoneInfoLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestUserZoneInfoLoginUserPmd_C)
  return false;
#undef DO_
}

void RequestUserZoneInfoLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestUserZoneInfoLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestUserZoneInfoLoginUserPmd_C)
}

::google::protobuf::uint8* RequestUserZoneInfoLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestUserZoneInfoLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestUserZoneInfoLoginUserPmd_C)
  return target;
}

int RequestUserZoneInfoLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUserZoneInfoLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUserZoneInfoLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUserZoneInfoLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUserZoneInfoLoginUserPmd_C::MergeFrom(const RequestUserZoneInfoLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUserZoneInfoLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUserZoneInfoLoginUserPmd_C::CopyFrom(const RequestUserZoneInfoLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUserZoneInfoLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestUserZoneInfoLoginUserPmd_C::Swap(RequestUserZoneInfoLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUserZoneInfoLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUserZoneInfoLoginUserPmd_C_descriptor_;
  metadata.reflection = RequestUserZoneInfoLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserZoneInfo::kCharnameFieldNumber;
const int UserZoneInfo::kZoneinfoFieldNumber;
const int UserZoneInfo::kOnlinenumFieldNumber;
#endif  // !_MSC_VER

UserZoneInfo::UserZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserZoneInfo)
}

void UserZoneInfo::InitAsDefaultInstance() {
  zoneinfo_ = const_cast< ::Pmd::ZoneInfo*>(&::Pmd::ZoneInfo::default_instance());
}

UserZoneInfo::UserZoneInfo(const UserZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserZoneInfo)
}

void UserZoneInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zoneinfo_ = NULL;
  onlinenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserZoneInfo::~UserZoneInfo() {
  // @@protoc_insertion_point(destructor:Pmd.UserZoneInfo)
  SharedDtor();
}

void UserZoneInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
    delete zoneinfo_;
  }
}

void UserZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserZoneInfo_descriptor_;
}

const UserZoneInfo& UserZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserZoneInfo* UserZoneInfo::default_instance_ = NULL;

UserZoneInfo* UserZoneInfo::New() const {
  return new UserZoneInfo;
}

void UserZoneInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_zoneinfo()) {
      if (zoneinfo_ != NULL) zoneinfo_->::Pmd::ZoneInfo::Clear();
    }
    onlinenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserZoneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string charname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_zoneinfo;
        break;
      }

      // required .Pmd.ZoneInfo zoneinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_zoneinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zoneinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_onlinenum;
        break;
      }

      // required uint32 onlinenum = 3;
      case 3: {
        if (tag == 24) {
         parse_onlinenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserZoneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserZoneInfo)
  return false;
#undef DO_
}

void UserZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserZoneInfo)
  // required string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->charname(), output);
  }

  // required .Pmd.ZoneInfo zoneinfo = 2;
  if (has_zoneinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->zoneinfo(), output);
  }

  // required uint32 onlinenum = 3;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onlinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserZoneInfo)
}

::google::protobuf::uint8* UserZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserZoneInfo)
  // required string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->charname(), target);
  }

  // required .Pmd.ZoneInfo zoneinfo = 2;
  if (has_zoneinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->zoneinfo(), target);
  }

  // required uint32 onlinenum = 3;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onlinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserZoneInfo)
  return target;
}

int UserZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required .Pmd.ZoneInfo zoneinfo = 2;
    if (has_zoneinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zoneinfo());
    }

    // required uint32 onlinenum = 3;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserZoneInfo::MergeFrom(const UserZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_zoneinfo()) {
      mutable_zoneinfo()->::Pmd::ZoneInfo::MergeFrom(from.zoneinfo());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserZoneInfo::CopyFrom(const UserZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserZoneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_zoneinfo()) {
    if (!this->zoneinfo().IsInitialized()) return false;
  }
  return true;
}

void UserZoneInfo::Swap(UserZoneInfo* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(zoneinfo_, other->zoneinfo_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserZoneInfo_descriptor_;
  metadata.reflection = UserZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUserZoneInfoLoginUserPmd_S::kUserzoneinfoFieldNumber;
#endif  // !_MSC_VER

RequestUserZoneInfoLoginUserPmd_S::RequestUserZoneInfoLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestUserZoneInfoLoginUserPmd_S)
}

void RequestUserZoneInfoLoginUserPmd_S::InitAsDefaultInstance() {
}

RequestUserZoneInfoLoginUserPmd_S::RequestUserZoneInfoLoginUserPmd_S(const RequestUserZoneInfoLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestUserZoneInfoLoginUserPmd_S)
}

void RequestUserZoneInfoLoginUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUserZoneInfoLoginUserPmd_S::~RequestUserZoneInfoLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.RequestUserZoneInfoLoginUserPmd_S)
  SharedDtor();
}

void RequestUserZoneInfoLoginUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestUserZoneInfoLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUserZoneInfoLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUserZoneInfoLoginUserPmd_S_descriptor_;
}

const RequestUserZoneInfoLoginUserPmd_S& RequestUserZoneInfoLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

RequestUserZoneInfoLoginUserPmd_S* RequestUserZoneInfoLoginUserPmd_S::default_instance_ = NULL;

RequestUserZoneInfoLoginUserPmd_S* RequestUserZoneInfoLoginUserPmd_S::New() const {
  return new RequestUserZoneInfoLoginUserPmd_S;
}

void RequestUserZoneInfoLoginUserPmd_S::Clear() {
  userzoneinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUserZoneInfoLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestUserZoneInfoLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.UserZoneInfo userzoneinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_userzoneinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userzoneinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_userzoneinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestUserZoneInfoLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestUserZoneInfoLoginUserPmd_S)
  return false;
#undef DO_
}

void RequestUserZoneInfoLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestUserZoneInfoLoginUserPmd_S)
  // repeated .Pmd.UserZoneInfo userzoneinfo = 1;
  for (int i = 0; i < this->userzoneinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userzoneinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestUserZoneInfoLoginUserPmd_S)
}

::google::protobuf::uint8* RequestUserZoneInfoLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestUserZoneInfoLoginUserPmd_S)
  // repeated .Pmd.UserZoneInfo userzoneinfo = 1;
  for (int i = 0; i < this->userzoneinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userzoneinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestUserZoneInfoLoginUserPmd_S)
  return target;
}

int RequestUserZoneInfoLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  // repeated .Pmd.UserZoneInfo userzoneinfo = 1;
  total_size += 1 * this->userzoneinfo_size();
  for (int i = 0; i < this->userzoneinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userzoneinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUserZoneInfoLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUserZoneInfoLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUserZoneInfoLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUserZoneInfoLoginUserPmd_S::MergeFrom(const RequestUserZoneInfoLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  userzoneinfo_.MergeFrom(from.userzoneinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUserZoneInfoLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUserZoneInfoLoginUserPmd_S::CopyFrom(const RequestUserZoneInfoLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUserZoneInfoLoginUserPmd_S::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->userzoneinfo())) return false;
  return true;
}

void RequestUserZoneInfoLoginUserPmd_S::Swap(RequestUserZoneInfoLoginUserPmd_S* other) {
  if (other != this) {
    userzoneinfo_.Swap(&other->userzoneinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUserZoneInfoLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUserZoneInfoLoginUserPmd_S_descriptor_;
  metadata.reflection = RequestUserZoneInfoLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobileRegistRequestRandCodeLoginUserPmd_C::kMobilenumFieldNumber;
const int MobileRegistRequestRandCodeLoginUserPmd_C::kGameidFieldNumber;
#endif  // !_MSC_VER

MobileRegistRequestRandCodeLoginUserPmd_C::MobileRegistRequestRandCodeLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
}

void MobileRegistRequestRandCodeLoginUserPmd_C::InitAsDefaultInstance() {
}

MobileRegistRequestRandCodeLoginUserPmd_C::MobileRegistRequestRandCodeLoginUserPmd_C(const MobileRegistRequestRandCodeLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
}

void MobileRegistRequestRandCodeLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mobilenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileRegistRequestRandCodeLoginUserPmd_C::~MobileRegistRequestRandCodeLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
  SharedDtor();
}

void MobileRegistRequestRandCodeLoginUserPmd_C::SharedDtor() {
  if (mobilenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilenum_;
  }
  if (this != default_instance_) {
  }
}

void MobileRegistRequestRandCodeLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileRegistRequestRandCodeLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileRegistRequestRandCodeLoginUserPmd_C_descriptor_;
}

const MobileRegistRequestRandCodeLoginUserPmd_C& MobileRegistRequestRandCodeLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

MobileRegistRequestRandCodeLoginUserPmd_C* MobileRegistRequestRandCodeLoginUserPmd_C::default_instance_ = NULL;

MobileRegistRequestRandCodeLoginUserPmd_C* MobileRegistRequestRandCodeLoginUserPmd_C::New() const {
  return new MobileRegistRequestRandCodeLoginUserPmd_C;
}

void MobileRegistRequestRandCodeLoginUserPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_mobilenum()) {
      if (mobilenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilenum_->clear();
      }
    }
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileRegistRequestRandCodeLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mobilenum = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobilenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobilenum().data(), this->mobilenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobilenum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
  return false;
#undef DO_
}

void MobileRegistRequestRandCodeLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
  // required string mobilenum = 1;
  if (has_mobilenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobilenum().data(), this->mobilenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobilenum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mobilenum(), output);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
}

::google::protobuf::uint8* MobileRegistRequestRandCodeLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
  // required string mobilenum = 1;
  if (has_mobilenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobilenum().data(), this->mobilenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobilenum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mobilenum(), target);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.MobileRegistRequestRandCodeLoginUserPmd_C)
  return target;
}

int MobileRegistRequestRandCodeLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mobilenum = 1;
    if (has_mobilenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobilenum());
    }

    // required uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileRegistRequestRandCodeLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileRegistRequestRandCodeLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileRegistRequestRandCodeLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileRegistRequestRandCodeLoginUserPmd_C::MergeFrom(const MobileRegistRequestRandCodeLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobilenum()) {
      set_mobilenum(from.mobilenum());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileRegistRequestRandCodeLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileRegistRequestRandCodeLoginUserPmd_C::CopyFrom(const MobileRegistRequestRandCodeLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileRegistRequestRandCodeLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MobileRegistRequestRandCodeLoginUserPmd_C::Swap(MobileRegistRequestRandCodeLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(mobilenum_, other->mobilenum_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileRegistRequestRandCodeLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileRegistRequestRandCodeLoginUserPmd_C_descriptor_;
  metadata.reflection = MobileRegistRequestRandCodeLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobileRegistReturnRandCodeLoginUserPmd_S::kRetcodeFieldNumber;
const int MobileRegistReturnRandCodeLoginUserPmd_S::kDescFieldNumber;
const int MobileRegistReturnRandCodeLoginUserPmd_S::kTimeoutFieldNumber;
#endif  // !_MSC_VER

MobileRegistReturnRandCodeLoginUserPmd_S::MobileRegistReturnRandCodeLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
}

void MobileRegistReturnRandCodeLoginUserPmd_S::InitAsDefaultInstance() {
}

MobileRegistReturnRandCodeLoginUserPmd_S::MobileRegistReturnRandCodeLoginUserPmd_S(const MobileRegistReturnRandCodeLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
}

void MobileRegistReturnRandCodeLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileRegistReturnRandCodeLoginUserPmd_S::~MobileRegistReturnRandCodeLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
  SharedDtor();
}

void MobileRegistReturnRandCodeLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void MobileRegistReturnRandCodeLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileRegistReturnRandCodeLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileRegistReturnRandCodeLoginUserPmd_S_descriptor_;
}

const MobileRegistReturnRandCodeLoginUserPmd_S& MobileRegistReturnRandCodeLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

MobileRegistReturnRandCodeLoginUserPmd_S* MobileRegistReturnRandCodeLoginUserPmd_S::default_instance_ = NULL;

MobileRegistReturnRandCodeLoginUserPmd_S* MobileRegistReturnRandCodeLoginUserPmd_S::New() const {
  return new MobileRegistReturnRandCodeLoginUserPmd_S;
}

void MobileRegistReturnRandCodeLoginUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MobileRegistReturnRandCodeLoginUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(timeout_, retcode_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileRegistReturnRandCodeLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }

      // optional uint64 timeout = 3;
      case 3: {
        if (tag == 24) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
  return false;
#undef DO_
}

void MobileRegistReturnRandCodeLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional uint64 timeout = 3;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
}

::google::protobuf::uint8* MobileRegistReturnRandCodeLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional uint64 timeout = 3;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.MobileRegistReturnRandCodeLoginUserPmd_S)
  return target;
}

int MobileRegistReturnRandCodeLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint64 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileRegistReturnRandCodeLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileRegistReturnRandCodeLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileRegistReturnRandCodeLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileRegistReturnRandCodeLoginUserPmd_S::MergeFrom(const MobileRegistReturnRandCodeLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileRegistReturnRandCodeLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileRegistReturnRandCodeLoginUserPmd_S::CopyFrom(const MobileRegistReturnRandCodeLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileRegistReturnRandCodeLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MobileRegistReturnRandCodeLoginUserPmd_S::Swap(MobileRegistReturnRandCodeLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(desc_, other->desc_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileRegistReturnRandCodeLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileRegistReturnRandCodeLoginUserPmd_S_descriptor_;
  metadata.reflection = MobileRegistReturnRandCodeLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobileRegistRequestCreateAccountLoginUserPmd_C::kMobilenumFieldNumber;
const int MobileRegistRequestCreateAccountLoginUserPmd_C::kRandcodeFieldNumber;
const int MobileRegistRequestCreateAccountLoginUserPmd_C::kPasswordFieldNumber;
const int MobileRegistRequestCreateAccountLoginUserPmd_C::kGameidFieldNumber;
#endif  // !_MSC_VER

MobileRegistRequestCreateAccountLoginUserPmd_C::MobileRegistRequestCreateAccountLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::InitAsDefaultInstance() {
}

MobileRegistRequestCreateAccountLoginUserPmd_C::MobileRegistRequestCreateAccountLoginUserPmd_C(const MobileRegistRequestCreateAccountLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mobilenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  randcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileRegistRequestCreateAccountLoginUserPmd_C::~MobileRegistRequestCreateAccountLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
  SharedDtor();
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::SharedDtor() {
  if (mobilenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mobilenum_;
  }
  if (randcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete randcode_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileRegistRequestCreateAccountLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileRegistRequestCreateAccountLoginUserPmd_C_descriptor_;
}

const MobileRegistRequestCreateAccountLoginUserPmd_C& MobileRegistRequestCreateAccountLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

MobileRegistRequestCreateAccountLoginUserPmd_C* MobileRegistRequestCreateAccountLoginUserPmd_C::default_instance_ = NULL;

MobileRegistRequestCreateAccountLoginUserPmd_C* MobileRegistRequestCreateAccountLoginUserPmd_C::New() const {
  return new MobileRegistRequestCreateAccountLoginUserPmd_C;
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_mobilenum()) {
      if (mobilenum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mobilenum_->clear();
      }
    }
    if (has_randcode()) {
      if (randcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        randcode_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileRegistRequestCreateAccountLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mobilenum = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobilenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mobilenum().data(), this->mobilenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mobilenum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_randcode;
        break;
      }

      // required string randcode = 2;
      case 2: {
        if (tag == 18) {
         parse_randcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->randcode().data(), this->randcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "randcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 4;
      case 4: {
        if (tag == 32) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
  return false;
#undef DO_
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
  // required string mobilenum = 1;
  if (has_mobilenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobilenum().data(), this->mobilenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobilenum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mobilenum(), output);
  }

  // required string randcode = 2;
  if (has_randcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->randcode().data(), this->randcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "randcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->randcode(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // required uint32 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
}

::google::protobuf::uint8* MobileRegistRequestCreateAccountLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
  // required string mobilenum = 1;
  if (has_mobilenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mobilenum().data(), this->mobilenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mobilenum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mobilenum(), target);
  }

  // required string randcode = 2;
  if (has_randcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->randcode().data(), this->randcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "randcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->randcode(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // required uint32 gameid = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.MobileRegistRequestCreateAccountLoginUserPmd_C)
  return target;
}

int MobileRegistRequestCreateAccountLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mobilenum = 1;
    if (has_mobilenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobilenum());
    }

    // required string randcode = 2;
    if (has_randcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randcode());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint32 gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileRegistRequestCreateAccountLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileRegistRequestCreateAccountLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::MergeFrom(const MobileRegistRequestCreateAccountLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mobilenum()) {
      set_mobilenum(from.mobilenum());
    }
    if (from.has_randcode()) {
      set_randcode(from.randcode());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::CopyFrom(const MobileRegistRequestCreateAccountLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileRegistRequestCreateAccountLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MobileRegistRequestCreateAccountLoginUserPmd_C::Swap(MobileRegistRequestCreateAccountLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(mobilenum_, other->mobilenum_);
    std::swap(randcode_, other->randcode_);
    std::swap(password_, other->password_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileRegistRequestCreateAccountLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileRegistRequestCreateAccountLoginUserPmd_C_descriptor_;
  metadata.reflection = MobileRegistRequestCreateAccountLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobileRegistReturnCreateAccountFailLoginUserPmd_S::kRetcodeFieldNumber;
const int MobileRegistReturnCreateAccountFailLoginUserPmd_S::kDescFieldNumber;
#endif  // !_MSC_VER

MobileRegistReturnCreateAccountFailLoginUserPmd_S::MobileRegistReturnCreateAccountFailLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::InitAsDefaultInstance() {
}

MobileRegistReturnCreateAccountFailLoginUserPmd_S::MobileRegistReturnCreateAccountFailLoginUserPmd_S(const MobileRegistReturnCreateAccountFailLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileRegistReturnCreateAccountFailLoginUserPmd_S::~MobileRegistReturnCreateAccountFailLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
  SharedDtor();
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileRegistReturnCreateAccountFailLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileRegistReturnCreateAccountFailLoginUserPmd_S_descriptor_;
}

const MobileRegistReturnCreateAccountFailLoginUserPmd_S& MobileRegistReturnCreateAccountFailLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

MobileRegistReturnCreateAccountFailLoginUserPmd_S* MobileRegistReturnCreateAccountFailLoginUserPmd_S::default_instance_ = NULL;

MobileRegistReturnCreateAccountFailLoginUserPmd_S* MobileRegistReturnCreateAccountFailLoginUserPmd_S::New() const {
  return new MobileRegistReturnCreateAccountFailLoginUserPmd_S;
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileRegistReturnCreateAccountFailLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
  return false;
#undef DO_
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
}

::google::protobuf::uint8* MobileRegistReturnCreateAccountFailLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.MobileRegistReturnCreateAccountFailLoginUserPmd_S)
  return target;
}

int MobileRegistReturnCreateAccountFailLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileRegistReturnCreateAccountFailLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileRegistReturnCreateAccountFailLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::MergeFrom(const MobileRegistReturnCreateAccountFailLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::CopyFrom(const MobileRegistReturnCreateAccountFailLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileRegistReturnCreateAccountFailLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MobileRegistReturnCreateAccountFailLoginUserPmd_S::Swap(MobileRegistReturnCreateAccountFailLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileRegistReturnCreateAccountFailLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileRegistReturnCreateAccountFailLoginUserPmd_S_descriptor_;
  metadata.reflection = MobileRegistReturnCreateAccountFailLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailRegistRequestCreateAccountLoginUserPmd_C::kEmailFieldNumber;
const int EmailRegistRequestCreateAccountLoginUserPmd_C::kPasswordFieldNumber;
const int EmailRegistRequestCreateAccountLoginUserPmd_C::kGameidFieldNumber;
const int EmailRegistRequestCreateAccountLoginUserPmd_C::kIsbindFieldNumber;
const int EmailRegistRequestCreateAccountLoginUserPmd_C::kUidFieldNumber;
#endif  // !_MSC_VER

EmailRegistRequestCreateAccountLoginUserPmd_C::EmailRegistRequestCreateAccountLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::InitAsDefaultInstance() {
}

EmailRegistRequestCreateAccountLoginUserPmd_C::EmailRegistRequestCreateAccountLoginUserPmd_C(const EmailRegistRequestCreateAccountLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  isbind_ = false;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailRegistRequestCreateAccountLoginUserPmd_C::~EmailRegistRequestCreateAccountLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
  SharedDtor();
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::SharedDtor() {
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailRegistRequestCreateAccountLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailRegistRequestCreateAccountLoginUserPmd_C_descriptor_;
}

const EmailRegistRequestCreateAccountLoginUserPmd_C& EmailRegistRequestCreateAccountLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

EmailRegistRequestCreateAccountLoginUserPmd_C* EmailRegistRequestCreateAccountLoginUserPmd_C::default_instance_ = NULL;

EmailRegistRequestCreateAccountLoginUserPmd_C* EmailRegistRequestCreateAccountLoginUserPmd_C::New() const {
  return new EmailRegistRequestCreateAccountLoginUserPmd_C;
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EmailRegistRequestCreateAccountLoginUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gameid_, uid_);
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailRegistRequestCreateAccountLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string email = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 3;
      case 3: {
        if (tag == 24) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isbind;
        break;
      }

      // optional bool isbind = 4;
      case 4: {
        if (tag == 32) {
         parse_isbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbind_)));
          set_has_isbind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 5;
      case 5: {
        if (tag == 40) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
  return false;
#undef DO_
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
  // required string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->email(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // required uint32 gameid = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // optional bool isbind = 4;
  if (has_isbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbind(), output);
  }

  // optional uint64 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
}

::google::protobuf::uint8* EmailRegistRequestCreateAccountLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
  // required string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required uint32 gameid = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gameid(), target);
  }

  // optional bool isbind = 4;
  if (has_isbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbind(), target);
  }

  // optional uint64 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.EmailRegistRequestCreateAccountLoginUserPmd_C)
  return target;
}

int EmailRegistRequestCreateAccountLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint32 gameid = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional bool isbind = 4;
    if (has_isbind()) {
      total_size += 1 + 1;
    }

    // optional uint64 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailRegistRequestCreateAccountLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailRegistRequestCreateAccountLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::MergeFrom(const EmailRegistRequestCreateAccountLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_isbind()) {
      set_isbind(from.isbind());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::CopyFrom(const EmailRegistRequestCreateAccountLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailRegistRequestCreateAccountLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EmailRegistRequestCreateAccountLoginUserPmd_C::Swap(EmailRegistRequestCreateAccountLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(password_, other->password_);
    std::swap(gameid_, other->gameid_);
    std::swap(isbind_, other->isbind_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailRegistRequestCreateAccountLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailRegistRequestCreateAccountLoginUserPmd_C_descriptor_;
  metadata.reflection = EmailRegistRequestCreateAccountLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailRegistReturnCreateAccountLoginUserPmd_S::kRetcodeFieldNumber;
const int EmailRegistReturnCreateAccountLoginUserPmd_S::kDescFieldNumber;
const int EmailRegistReturnCreateAccountLoginUserPmd_S::kUidFieldNumber;
#endif  // !_MSC_VER

EmailRegistReturnCreateAccountLoginUserPmd_S::EmailRegistReturnCreateAccountLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::InitAsDefaultInstance() {
}

EmailRegistReturnCreateAccountLoginUserPmd_S::EmailRegistReturnCreateAccountLoginUserPmd_S(const EmailRegistReturnCreateAccountLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailRegistReturnCreateAccountLoginUserPmd_S::~EmailRegistReturnCreateAccountLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
  SharedDtor();
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailRegistReturnCreateAccountLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailRegistReturnCreateAccountLoginUserPmd_S_descriptor_;
}

const EmailRegistReturnCreateAccountLoginUserPmd_S& EmailRegistReturnCreateAccountLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

EmailRegistReturnCreateAccountLoginUserPmd_S* EmailRegistReturnCreateAccountLoginUserPmd_S::default_instance_ = NULL;

EmailRegistReturnCreateAccountLoginUserPmd_S* EmailRegistReturnCreateAccountLoginUserPmd_S::New() const {
  return new EmailRegistReturnCreateAccountLoginUserPmd_S;
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EmailRegistReturnCreateAccountLoginUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, retcode_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailRegistReturnCreateAccountLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
  return false;
#undef DO_
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional uint64 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
}

::google::protobuf::uint8* EmailRegistReturnCreateAccountLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional uint64 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.EmailRegistReturnCreateAccountLoginUserPmd_S)
  return target;
}

int EmailRegistReturnCreateAccountLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint64 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailRegistReturnCreateAccountLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailRegistReturnCreateAccountLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::MergeFrom(const EmailRegistReturnCreateAccountLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::CopyFrom(const EmailRegistReturnCreateAccountLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailRegistReturnCreateAccountLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EmailRegistReturnCreateAccountLoginUserPmd_S::Swap(EmailRegistReturnCreateAccountLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(desc_, other->desc_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailRegistReturnCreateAccountLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailRegistReturnCreateAccountLoginUserPmd_S_descriptor_;
  metadata.reflection = EmailRegistReturnCreateAccountLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRequestPlatTokenByPasswordLoginUserPmd_C::kGameidFieldNumber;
const int UserRequestPlatTokenByPasswordLoginUserPmd_C::kPlatidFieldNumber;
const int UserRequestPlatTokenByPasswordLoginUserPmd_C::kAccountFieldNumber;
const int UserRequestPlatTokenByPasswordLoginUserPmd_C::kPasswordFieldNumber;
#endif  // !_MSC_VER

UserRequestPlatTokenByPasswordLoginUserPmd_C::UserRequestPlatTokenByPasswordLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::InitAsDefaultInstance() {
}

UserRequestPlatTokenByPasswordLoginUserPmd_C::UserRequestPlatTokenByPasswordLoginUserPmd_C(const UserRequestPlatTokenByPasswordLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  platid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRequestPlatTokenByPasswordLoginUserPmd_C::~UserRequestPlatTokenByPasswordLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
  SharedDtor();
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequestPlatTokenByPasswordLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRequestPlatTokenByPasswordLoginUserPmd_C_descriptor_;
}

const UserRequestPlatTokenByPasswordLoginUserPmd_C& UserRequestPlatTokenByPasswordLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserRequestPlatTokenByPasswordLoginUserPmd_C* UserRequestPlatTokenByPasswordLoginUserPmd_C::default_instance_ = NULL;

UserRequestPlatTokenByPasswordLoginUserPmd_C* UserRequestPlatTokenByPasswordLoginUserPmd_C::New() const {
  return new UserRequestPlatTokenByPasswordLoginUserPmd_C;
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserRequestPlatTokenByPasswordLoginUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gameid_, platid_);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRequestPlatTokenByPasswordLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platid;
        break;
      }

      // required uint32 platid = 2;
      case 2: {
        if (tag == 16) {
         parse_platid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required string account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
  return false;
#undef DO_
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 platid = 2;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->platid(), output);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
}

::google::protobuf::uint8* UserRequestPlatTokenByPasswordLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 platid = 2;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->platid(), target);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserRequestPlatTokenByPasswordLoginUserPmd_C)
  return target;
}

int UserRequestPlatTokenByPasswordLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 platid = 2;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platid());
    }

    // required string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRequestPlatTokenByPasswordLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRequestPlatTokenByPasswordLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::MergeFrom(const UserRequestPlatTokenByPasswordLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::CopyFrom(const UserRequestPlatTokenByPasswordLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequestPlatTokenByPasswordLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserRequestPlatTokenByPasswordLoginUserPmd_C::Swap(UserRequestPlatTokenByPasswordLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(platid_, other->platid_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRequestPlatTokenByPasswordLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRequestPlatTokenByPasswordLoginUserPmd_C_descriptor_;
  metadata.reflection = UserRequestPlatTokenByPasswordLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRequestPlatTokenByThirdLoginUserPmd_C::kPlatinfoFieldNumber;
const int UserRequestPlatTokenByThirdLoginUserPmd_C::kGameidFieldNumber;
#endif  // !_MSC_VER

UserRequestPlatTokenByThirdLoginUserPmd_C::UserRequestPlatTokenByThirdLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::InitAsDefaultInstance() {
  platinfo_ = const_cast< ::Pmd::PlatInfo*>(&::Pmd::PlatInfo::default_instance());
}

UserRequestPlatTokenByThirdLoginUserPmd_C::UserRequestPlatTokenByThirdLoginUserPmd_C(const UserRequestPlatTokenByThirdLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  platinfo_ = NULL;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRequestPlatTokenByThirdLoginUserPmd_C::~UserRequestPlatTokenByThirdLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
  SharedDtor();
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
    delete platinfo_;
  }
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequestPlatTokenByThirdLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRequestPlatTokenByThirdLoginUserPmd_C_descriptor_;
}

const UserRequestPlatTokenByThirdLoginUserPmd_C& UserRequestPlatTokenByThirdLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserRequestPlatTokenByThirdLoginUserPmd_C* UserRequestPlatTokenByThirdLoginUserPmd_C::default_instance_ = NULL;

UserRequestPlatTokenByThirdLoginUserPmd_C* UserRequestPlatTokenByThirdLoginUserPmd_C::New() const {
  return new UserRequestPlatTokenByThirdLoginUserPmd_C;
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_platinfo()) {
      if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
    }
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRequestPlatTokenByThirdLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.PlatInfo platinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
  return false;
#undef DO_
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
  // required .Pmd.PlatInfo platinfo = 1;
  if (has_platinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->platinfo(), output);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
}

::google::protobuf::uint8* UserRequestPlatTokenByThirdLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
  // required .Pmd.PlatInfo platinfo = 1;
  if (has_platinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->platinfo(), target);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserRequestPlatTokenByThirdLoginUserPmd_C)
  return target;
}

int UserRequestPlatTokenByThirdLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.PlatInfo platinfo = 1;
    if (has_platinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platinfo());
    }

    // required uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRequestPlatTokenByThirdLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRequestPlatTokenByThirdLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::MergeFrom(const UserRequestPlatTokenByThirdLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platinfo()) {
      mutable_platinfo()->::Pmd::PlatInfo::MergeFrom(from.platinfo());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::CopyFrom(const UserRequestPlatTokenByThirdLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequestPlatTokenByThirdLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_platinfo()) {
    if (!this->platinfo().IsInitialized()) return false;
  }
  return true;
}

void UserRequestPlatTokenByThirdLoginUserPmd_C::Swap(UserRequestPlatTokenByThirdLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(platinfo_, other->platinfo_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRequestPlatTokenByThirdLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRequestPlatTokenByThirdLoginUserPmd_C_descriptor_;
  metadata.reflection = UserRequestPlatTokenByThirdLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRequestPlatTokenLoginOkLoginUserPmd_S::kUidFieldNumber;
const int UserRequestPlatTokenLoginOkLoginUserPmd_S::kPlatkeyFieldNumber;
const int UserRequestPlatTokenLoginOkLoginUserPmd_S::kPlatloginFieldNumber;
const int UserRequestPlatTokenLoginOkLoginUserPmd_S::kPlatloginlifeFieldNumber;
const int UserRequestPlatTokenLoginOkLoginUserPmd_S::kTimezonenameFieldNumber;
const int UserRequestPlatTokenLoginOkLoginUserPmd_S::kTimezoneoffsetFieldNumber;
const int UserRequestPlatTokenLoginOkLoginUserPmd_S::kPlatinfoFieldNumber;
#endif  // !_MSC_VER

UserRequestPlatTokenLoginOkLoginUserPmd_S::UserRequestPlatTokenLoginOkLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::InitAsDefaultInstance() {
  platinfo_ = const_cast< ::Pmd::PlatInfo*>(&::Pmd::PlatInfo::default_instance());
}

UserRequestPlatTokenLoginOkLoginUserPmd_S::UserRequestPlatTokenLoginOkLoginUserPmd_S(const UserRequestPlatTokenLoginOkLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  platkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platlogin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platloginlife_ = 0u;
  timezonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezoneoffset_ = 0;
  platinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRequestPlatTokenLoginOkLoginUserPmd_S::~UserRequestPlatTokenLoginOkLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
  SharedDtor();
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::SharedDtor() {
  if (platkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platkey_;
  }
  if (platlogin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platlogin_;
  }
  if (timezonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timezonename_;
  }
  if (this != default_instance_) {
    delete platinfo_;
  }
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequestPlatTokenLoginOkLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRequestPlatTokenLoginOkLoginUserPmd_S_descriptor_;
}

const UserRequestPlatTokenLoginOkLoginUserPmd_S& UserRequestPlatTokenLoginOkLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserRequestPlatTokenLoginOkLoginUserPmd_S* UserRequestPlatTokenLoginOkLoginUserPmd_S::default_instance_ = NULL;

UserRequestPlatTokenLoginOkLoginUserPmd_S* UserRequestPlatTokenLoginOkLoginUserPmd_S::New() const {
  return new UserRequestPlatTokenLoginOkLoginUserPmd_S;
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserRequestPlatTokenLoginOkLoginUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(platloginlife_, timezoneoffset_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_platkey()) {
      if (platkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platkey_->clear();
      }
    }
    if (has_platlogin()) {
      if (platlogin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platlogin_->clear();
      }
    }
    if (has_timezonename()) {
      if (timezonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timezonename_->clear();
      }
    }
    if (has_platinfo()) {
      if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRequestPlatTokenLoginOkLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platkey;
        break;
      }

      // required string platkey = 2;
      case 2: {
        if (tag == 18) {
         parse_platkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platkey().data(), this->platkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platlogin;
        break;
      }

      // required string platlogin = 3;
      case 3: {
        if (tag == 26) {
         parse_platlogin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platlogin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platlogin().data(), this->platlogin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platlogin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_platloginlife;
        break;
      }

      // required uint32 platloginlife = 4;
      case 4: {
        if (tag == 32) {
         parse_platloginlife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platloginlife_)));
          set_has_platloginlife();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_timezonename;
        break;
      }

      // required string timezonename = 5;
      case 5: {
        if (tag == 42) {
         parse_timezonename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezonename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezonename().data(), this->timezonename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timezonename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timezoneoffset;
        break;
      }

      // optional int32 timezoneoffset = 6;
      case 6: {
        if (tag == 48) {
         parse_timezoneoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezoneoffset_)));
          set_has_timezoneoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_platinfo;
        break;
      }

      // optional .Pmd.PlatInfo platinfo = 7;
      case 7: {
        if (tag == 58) {
         parse_platinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
  return false;
#undef DO_
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string platkey = 2;
  if (has_platkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platkey().data(), this->platkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->platkey(), output);
  }

  // required string platlogin = 3;
  if (has_platlogin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platlogin().data(), this->platlogin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platlogin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platlogin(), output);
  }

  // required uint32 platloginlife = 4;
  if (has_platloginlife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->platloginlife(), output);
  }

  // required string timezonename = 5;
  if (has_timezonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezonename().data(), this->timezonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timezonename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->timezonename(), output);
  }

  // optional int32 timezoneoffset = 6;
  if (has_timezoneoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timezoneoffset(), output);
  }

  // optional .Pmd.PlatInfo platinfo = 7;
  if (has_platinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->platinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
}

::google::protobuf::uint8* UserRequestPlatTokenLoginOkLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required string platkey = 2;
  if (has_platkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platkey().data(), this->platkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platkey(), target);
  }

  // required string platlogin = 3;
  if (has_platlogin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platlogin().data(), this->platlogin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platlogin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platlogin(), target);
  }

  // required uint32 platloginlife = 4;
  if (has_platloginlife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->platloginlife(), target);
  }

  // required string timezonename = 5;
  if (has_timezonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezonename().data(), this->timezonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timezonename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timezonename(), target);
  }

  // optional int32 timezoneoffset = 6;
  if (has_timezoneoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timezoneoffset(), target);
  }

  // optional .Pmd.PlatInfo platinfo = 7;
  if (has_platinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->platinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserRequestPlatTokenLoginOkLoginUserPmd_S)
  return target;
}

int UserRequestPlatTokenLoginOkLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required string platkey = 2;
    if (has_platkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platkey());
    }

    // required string platlogin = 3;
    if (has_platlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platlogin());
    }

    // required uint32 platloginlife = 4;
    if (has_platloginlife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platloginlife());
    }

    // required string timezonename = 5;
    if (has_timezonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezonename());
    }

    // optional int32 timezoneoffset = 6;
    if (has_timezoneoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezoneoffset());
    }

    // optional .Pmd.PlatInfo platinfo = 7;
    if (has_platinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRequestPlatTokenLoginOkLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRequestPlatTokenLoginOkLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::MergeFrom(const UserRequestPlatTokenLoginOkLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_platkey()) {
      set_platkey(from.platkey());
    }
    if (from.has_platlogin()) {
      set_platlogin(from.platlogin());
    }
    if (from.has_platloginlife()) {
      set_platloginlife(from.platloginlife());
    }
    if (from.has_timezonename()) {
      set_timezonename(from.timezonename());
    }
    if (from.has_timezoneoffset()) {
      set_timezoneoffset(from.timezoneoffset());
    }
    if (from.has_platinfo()) {
      mutable_platinfo()->::Pmd::PlatInfo::MergeFrom(from.platinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::CopyFrom(const UserRequestPlatTokenLoginOkLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequestPlatTokenLoginOkLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_platinfo()) {
    if (!this->platinfo().IsInitialized()) return false;
  }
  return true;
}

void UserRequestPlatTokenLoginOkLoginUserPmd_S::Swap(UserRequestPlatTokenLoginOkLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(platkey_, other->platkey_);
    std::swap(platlogin_, other->platlogin_);
    std::swap(platloginlife_, other->platloginlife_);
    std::swap(timezonename_, other->timezonename_);
    std::swap(timezoneoffset_, other->timezoneoffset_);
    std::swap(platinfo_, other->platinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRequestPlatTokenLoginOkLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRequestPlatTokenLoginOkLoginUserPmd_S_descriptor_;
  metadata.reflection = UserRequestPlatTokenLoginOkLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRequestPlatTokenLoginFailLoginUserPmd_S::kRetcodeFieldNumber;
const int UserRequestPlatTokenLoginFailLoginUserPmd_S::kDescFieldNumber;
#endif  // !_MSC_VER

UserRequestPlatTokenLoginFailLoginUserPmd_S::UserRequestPlatTokenLoginFailLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::InitAsDefaultInstance() {
}

UserRequestPlatTokenLoginFailLoginUserPmd_S::UserRequestPlatTokenLoginFailLoginUserPmd_S(const UserRequestPlatTokenLoginFailLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRequestPlatTokenLoginFailLoginUserPmd_S::~UserRequestPlatTokenLoginFailLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
  SharedDtor();
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRequestPlatTokenLoginFailLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRequestPlatTokenLoginFailLoginUserPmd_S_descriptor_;
}

const UserRequestPlatTokenLoginFailLoginUserPmd_S& UserRequestPlatTokenLoginFailLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserRequestPlatTokenLoginFailLoginUserPmd_S* UserRequestPlatTokenLoginFailLoginUserPmd_S::default_instance_ = NULL;

UserRequestPlatTokenLoginFailLoginUserPmd_S* UserRequestPlatTokenLoginFailLoginUserPmd_S::New() const {
  return new UserRequestPlatTokenLoginFailLoginUserPmd_S;
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRequestPlatTokenLoginFailLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
  return false;
#undef DO_
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
}

::google::protobuf::uint8* UserRequestPlatTokenLoginFailLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
  // required uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserRequestPlatTokenLoginFailLoginUserPmd_S)
  return target;
}

int UserRequestPlatTokenLoginFailLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // required string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRequestPlatTokenLoginFailLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRequestPlatTokenLoginFailLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::MergeFrom(const UserRequestPlatTokenLoginFailLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::CopyFrom(const UserRequestPlatTokenLoginFailLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequestPlatTokenLoginFailLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserRequestPlatTokenLoginFailLoginUserPmd_S::Swap(UserRequestPlatTokenLoginFailLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRequestPlatTokenLoginFailLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRequestPlatTokenLoginFailLoginUserPmd_S_descriptor_;
  metadata.reflection = UserRequestPlatTokenLoginFailLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginRequestLoginUserPmd_C::kGameidFieldNumber;
const int UserLoginRequestLoginUserPmd_C::kZoneidFieldNumber;
const int UserLoginRequestLoginUserPmd_C::kGameversionFieldNumber;
const int UserLoginRequestLoginUserPmd_C::kMidFieldNumber;
#endif  // !_MSC_VER

UserLoginRequestLoginUserPmd_C::UserLoginRequestLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserLoginRequestLoginUserPmd_C)
}

void UserLoginRequestLoginUserPmd_C::InitAsDefaultInstance() {
}

UserLoginRequestLoginUserPmd_C::UserLoginRequestLoginUserPmd_C(const UserLoginRequestLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserLoginRequestLoginUserPmd_C)
}

void UserLoginRequestLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  gameversion_ = 0u;
  mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginRequestLoginUserPmd_C::~UserLoginRequestLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.UserLoginRequestLoginUserPmd_C)
  SharedDtor();
}

void UserLoginRequestLoginUserPmd_C::SharedDtor() {
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginRequestLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginRequestLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginRequestLoginUserPmd_C_descriptor_;
}

const UserLoginRequestLoginUserPmd_C& UserLoginRequestLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserLoginRequestLoginUserPmd_C* UserLoginRequestLoginUserPmd_C::default_instance_ = NULL;

UserLoginRequestLoginUserPmd_C* UserLoginRequestLoginUserPmd_C::New() const {
  return new UserLoginRequestLoginUserPmd_C;
}

void UserLoginRequestLoginUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserLoginRequestLoginUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gameid_, zoneid_);
    gameversion_ = 0u;
    if (has_mid()) {
      if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginRequestLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserLoginRequestLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameversion;
        break;
      }

      // required uint32 gameversion = 3;
      case 3: {
        if (tag == 24) {
         parse_gameversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mid;
        break;
      }

      // optional string mid = 4;
      case 4: {
        if (tag == 34) {
         parse_mid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mid().data(), this->mid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserLoginRequestLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserLoginRequestLoginUserPmd_C)
  return false;
#undef DO_
}

void UserLoginRequestLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserLoginRequestLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint32 gameversion = 3;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameversion(), output);
  }

  // optional string mid = 4;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserLoginRequestLoginUserPmd_C)
}

::google::protobuf::uint8* UserLoginRequestLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserLoginRequestLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint32 gameversion = 3;
  if (has_gameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gameversion(), target);
  }

  // optional string mid = 4;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserLoginRequestLoginUserPmd_C)
  return target;
}

int UserLoginRequestLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 gameversion = 3;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameversion());
    }

    // optional string mid = 4;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginRequestLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginRequestLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginRequestLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginRequestLoginUserPmd_C::MergeFrom(const UserLoginRequestLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginRequestLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginRequestLoginUserPmd_C::CopyFrom(const UserLoginRequestLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginRequestLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserLoginRequestLoginUserPmd_C::Swap(UserLoginRequestLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(mid_, other->mid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginRequestLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginRequestLoginUserPmd_C_descriptor_;
  metadata.reflection = UserLoginRequestLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginReturnFailLoginUserPmd_S::kRetcodeFieldNumber;
const int UserLoginReturnFailLoginUserPmd_S::kDescFieldNumber;
#endif  // !_MSC_VER

UserLoginReturnFailLoginUserPmd_S::UserLoginReturnFailLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserLoginReturnFailLoginUserPmd_S)
}

void UserLoginReturnFailLoginUserPmd_S::InitAsDefaultInstance() {
}

UserLoginReturnFailLoginUserPmd_S::UserLoginReturnFailLoginUserPmd_S(const UserLoginReturnFailLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserLoginReturnFailLoginUserPmd_S)
}

void UserLoginReturnFailLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 1;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginReturnFailLoginUserPmd_S::~UserLoginReturnFailLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.UserLoginReturnFailLoginUserPmd_S)
  SharedDtor();
}

void UserLoginReturnFailLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginReturnFailLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginReturnFailLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginReturnFailLoginUserPmd_S_descriptor_;
}

const UserLoginReturnFailLoginUserPmd_S& UserLoginReturnFailLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserLoginReturnFailLoginUserPmd_S* UserLoginReturnFailLoginUserPmd_S::default_instance_ = NULL;

UserLoginReturnFailLoginUserPmd_S* UserLoginReturnFailLoginUserPmd_S::New() const {
  return new UserLoginReturnFailLoginUserPmd_S;
}

void UserLoginReturnFailLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 1;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginReturnFailLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserLoginReturnFailLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.LoginReturnFailReason retcode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pmd::LoginReturnFailReason_IsValid(value)) {
            set_retcode(static_cast< ::Pmd::LoginReturnFailReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserLoginReturnFailLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserLoginReturnFailLoginUserPmd_S)
  return false;
#undef DO_
}

void UserLoginReturnFailLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserLoginReturnFailLoginUserPmd_S)
  // required .Pmd.LoginReturnFailReason retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserLoginReturnFailLoginUserPmd_S)
}

::google::protobuf::uint8* UserLoginReturnFailLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserLoginReturnFailLoginUserPmd_S)
  // required .Pmd.LoginReturnFailReason retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserLoginReturnFailLoginUserPmd_S)
  return target;
}

int UserLoginReturnFailLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.LoginReturnFailReason retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

    // required string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginReturnFailLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginReturnFailLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginReturnFailLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginReturnFailLoginUserPmd_S::MergeFrom(const UserLoginReturnFailLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginReturnFailLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginReturnFailLoginUserPmd_S::CopyFrom(const UserLoginReturnFailLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginReturnFailLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserLoginReturnFailLoginUserPmd_S::Swap(UserLoginReturnFailLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginReturnFailLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginReturnFailLoginUserPmd_S_descriptor_;
  metadata.reflection = UserLoginReturnFailLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginReturnOkLoginUserPmd_S::kAccountidFieldNumber;
const int UserLoginReturnOkLoginUserPmd_S::kLogintempidFieldNumber;
const int UserLoginReturnOkLoginUserPmd_S::kTokenidFieldNumber;
const int UserLoginReturnOkLoginUserPmd_S::kGatewayurlFieldNumber;
const int UserLoginReturnOkLoginUserPmd_S::kGameidFieldNumber;
const int UserLoginReturnOkLoginUserPmd_S::kZoneidFieldNumber;
const int UserLoginReturnOkLoginUserPmd_S::kSeparatezoneuidFieldNumber;
const int UserLoginReturnOkLoginUserPmd_S::kZoneuidFieldNumber;
const int UserLoginReturnOkLoginUserPmd_S::kGatewayurltcpFieldNumber;
#endif  // !_MSC_VER

UserLoginReturnOkLoginUserPmd_S::UserLoginReturnOkLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserLoginReturnOkLoginUserPmd_S)
}

void UserLoginReturnOkLoginUserPmd_S::InitAsDefaultInstance() {
}

UserLoginReturnOkLoginUserPmd_S::UserLoginReturnOkLoginUserPmd_S(const UserLoginReturnOkLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserLoginReturnOkLoginUserPmd_S)
}

void UserLoginReturnOkLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  logintempid_ = GOOGLE_ULONGLONG(0);
  tokenid_ = GOOGLE_ULONGLONG(0);
  gatewayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  zoneid_ = 0u;
  separatezoneuid_ = false;
  zoneuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayurltcp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginReturnOkLoginUserPmd_S::~UserLoginReturnOkLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.UserLoginReturnOkLoginUserPmd_S)
  SharedDtor();
}

void UserLoginReturnOkLoginUserPmd_S::SharedDtor() {
  if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatewayurl_;
  }
  if (zoneuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete zoneuid_;
  }
  if (gatewayurltcp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatewayurltcp_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginReturnOkLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginReturnOkLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginReturnOkLoginUserPmd_S_descriptor_;
}

const UserLoginReturnOkLoginUserPmd_S& UserLoginReturnOkLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserLoginReturnOkLoginUserPmd_S* UserLoginReturnOkLoginUserPmd_S::default_instance_ = NULL;

UserLoginReturnOkLoginUserPmd_S* UserLoginReturnOkLoginUserPmd_S::New() const {
  return new UserLoginReturnOkLoginUserPmd_S;
}

void UserLoginReturnOkLoginUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserLoginReturnOkLoginUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(accountid_, tokenid_);
    ZR_(gameid_, zoneid_);
    if (has_gatewayurl()) {
      if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gatewayurl_->clear();
      }
    }
    separatezoneuid_ = false;
    if (has_zoneuid()) {
      if (zoneuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        zoneuid_->clear();
      }
    }
  }
  if (has_gatewayurltcp()) {
    if (gatewayurltcp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      gatewayurltcp_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginReturnOkLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserLoginReturnOkLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logintempid;
        break;
      }

      // optional uint64 logintempid = 2;
      case 2: {
        if (tag == 16) {
         parse_logintempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintempid_)));
          set_has_logintempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tokenid;
        break;
      }

      // optional uint64 tokenid = 3;
      case 3: {
        if (tag == 24) {
         parse_tokenid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenid_)));
          set_has_tokenid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gatewayurl;
        break;
      }

      // optional string gatewayurl = 4;
      case 4: {
        if (tag == 34) {
         parse_gatewayurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gatewayurl().data(), this->gatewayurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gatewayurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 5;
      case 5: {
        if (tag == 40) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 6;
      case 6: {
        if (tag == 48) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_separatezoneuid;
        break;
      }

      // optional bool separatezoneuid = 7;
      case 7: {
        if (tag == 56) {
         parse_separatezoneuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &separatezoneuid_)));
          set_has_separatezoneuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_zoneuid;
        break;
      }

      // optional string zoneuid = 8;
      case 8: {
        if (tag == 66) {
         parse_zoneuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoneuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zoneuid().data(), this->zoneuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zoneuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_gatewayurltcp;
        break;
      }

      // optional string gatewayurltcp = 9;
      case 9: {
        if (tag == 74) {
         parse_gatewayurltcp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayurltcp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gatewayurltcp().data(), this->gatewayurltcp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gatewayurltcp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserLoginReturnOkLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserLoginReturnOkLoginUserPmd_S)
  return false;
#undef DO_
}

void UserLoginReturnOkLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserLoginReturnOkLoginUserPmd_S)
  // required uint64 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional uint64 logintempid = 2;
  if (has_logintempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->logintempid(), output);
  }

  // optional uint64 tokenid = 3;
  if (has_tokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tokenid(), output);
  }

  // optional string gatewayurl = 4;
  if (has_gatewayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurl().data(), this->gatewayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gatewayurl(), output);
  }

  // optional uint32 gameid = 5;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gameid(), output);
  }

  // optional uint32 zoneid = 6;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zoneid(), output);
  }

  // optional bool separatezoneuid = 7;
  if (has_separatezoneuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->separatezoneuid(), output);
  }

  // optional string zoneuid = 8;
  if (has_zoneuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zoneuid().data(), this->zoneuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zoneuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->zoneuid(), output);
  }

  // optional string gatewayurltcp = 9;
  if (has_gatewayurltcp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurltcp().data(), this->gatewayurltcp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurltcp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->gatewayurltcp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserLoginReturnOkLoginUserPmd_S)
}

::google::protobuf::uint8* UserLoginReturnOkLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserLoginReturnOkLoginUserPmd_S)
  // required uint64 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // optional uint64 logintempid = 2;
  if (has_logintempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->logintempid(), target);
  }

  // optional uint64 tokenid = 3;
  if (has_tokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tokenid(), target);
  }

  // optional string gatewayurl = 4;
  if (has_gatewayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurl().data(), this->gatewayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gatewayurl(), target);
  }

  // optional uint32 gameid = 5;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gameid(), target);
  }

  // optional uint32 zoneid = 6;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zoneid(), target);
  }

  // optional bool separatezoneuid = 7;
  if (has_separatezoneuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->separatezoneuid(), target);
  }

  // optional string zoneuid = 8;
  if (has_zoneuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zoneuid().data(), this->zoneuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zoneuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->zoneuid(), target);
  }

  // optional string gatewayurltcp = 9;
  if (has_gatewayurltcp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurltcp().data(), this->gatewayurltcp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurltcp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gatewayurltcp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserLoginReturnOkLoginUserPmd_S)
  return target;
}

int UserLoginReturnOkLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional uint64 logintempid = 2;
    if (has_logintempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintempid());
    }

    // optional uint64 tokenid = 3;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tokenid());
    }

    // optional string gatewayurl = 4;
    if (has_gatewayurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayurl());
    }

    // optional uint32 gameid = 5;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 6;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional bool separatezoneuid = 7;
    if (has_separatezoneuid()) {
      total_size += 1 + 1;
    }

    // optional string zoneuid = 8;
    if (has_zoneuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoneuid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string gatewayurltcp = 9;
    if (has_gatewayurltcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayurltcp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginReturnOkLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginReturnOkLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginReturnOkLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginReturnOkLoginUserPmd_S::MergeFrom(const UserLoginReturnOkLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_logintempid()) {
      set_logintempid(from.logintempid());
    }
    if (from.has_tokenid()) {
      set_tokenid(from.tokenid());
    }
    if (from.has_gatewayurl()) {
      set_gatewayurl(from.gatewayurl());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_separatezoneuid()) {
      set_separatezoneuid(from.separatezoneuid());
    }
    if (from.has_zoneuid()) {
      set_zoneuid(from.zoneuid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gatewayurltcp()) {
      set_gatewayurltcp(from.gatewayurltcp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginReturnOkLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginReturnOkLoginUserPmd_S::CopyFrom(const UserLoginReturnOkLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginReturnOkLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserLoginReturnOkLoginUserPmd_S::Swap(UserLoginReturnOkLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(logintempid_, other->logintempid_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(gatewayurl_, other->gatewayurl_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(separatezoneuid_, other->separatezoneuid_);
    std::swap(zoneuid_, other->zoneuid_);
    std::swap(gatewayurltcp_, other->gatewayurltcp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginReturnOkLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginReturnOkLoginUserPmd_S_descriptor_;
  metadata.reflection = UserLoginReturnOkLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginTokenLoginUserPmd_C::kGameidFieldNumber;
const int UserLoginTokenLoginUserPmd_C::kZoneidFieldNumber;
const int UserLoginTokenLoginUserPmd_C::kAccountidFieldNumber;
const int UserLoginTokenLoginUserPmd_C::kLogintempidFieldNumber;
const int UserLoginTokenLoginUserPmd_C::kTimestampFieldNumber;
const int UserLoginTokenLoginUserPmd_C::kTokenmd5FieldNumber;
const int UserLoginTokenLoginUserPmd_C::kCompressFieldNumber;
const int UserLoginTokenLoginUserPmd_C::kEncryptFieldNumber;
const int UserLoginTokenLoginUserPmd_C::kEncryptkeyFieldNumber;
#endif  // !_MSC_VER

UserLoginTokenLoginUserPmd_C::UserLoginTokenLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserLoginTokenLoginUserPmd_C)
}

void UserLoginTokenLoginUserPmd_C::InitAsDefaultInstance() {
}

UserLoginTokenLoginUserPmd_C::UserLoginTokenLoginUserPmd_C(const UserLoginTokenLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserLoginTokenLoginUserPmd_C)
}

void UserLoginTokenLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = 0u;
  zoneid_ = 0u;
  accountid_ = GOOGLE_ULONGLONG(0);
  logintempid_ = GOOGLE_ULONGLONG(0);
  timestamp_ = 0u;
  tokenmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginTokenLoginUserPmd_C::~UserLoginTokenLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.UserLoginTokenLoginUserPmd_C)
  SharedDtor();
}

void UserLoginTokenLoginUserPmd_C::SharedDtor() {
  if (tokenmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tokenmd5_;
  }
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginTokenLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginTokenLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginTokenLoginUserPmd_C_descriptor_;
}

const UserLoginTokenLoginUserPmd_C& UserLoginTokenLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserLoginTokenLoginUserPmd_C* UserLoginTokenLoginUserPmd_C::default_instance_ = NULL;

UserLoginTokenLoginUserPmd_C* UserLoginTokenLoginUserPmd_C::New() const {
  return new UserLoginTokenLoginUserPmd_C;
}

void UserLoginTokenLoginUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserLoginTokenLoginUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, logintempid_);
    timestamp_ = 0u;
    if (has_tokenmd5()) {
      if (tokenmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tokenmd5_->clear();
      }
    }
    if (has_compress()) {
      if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compress_->clear();
      }
    }
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypt_->clear();
      }
    }
  }
  if (has_encryptkey()) {
    if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      encryptkey_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginTokenLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserLoginTokenLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }

      // required uint64 accountid = 3;
      case 3: {
        if (tag == 24) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_logintempid;
        break;
      }

      // required uint64 logintempid = 4;
      case 4: {
        if (tag == 32) {
         parse_logintempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintempid_)));
          set_has_logintempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint32 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tokenmd5;
        break;
      }

      // required string tokenmd5 = 6;
      case 6: {
        if (tag == 50) {
         parse_tokenmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tokenmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tokenmd5().data(), this->tokenmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tokenmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_compress;
        break;
      }

      // optional string compress = 8;
      case 8: {
        if (tag == 66) {
         parse_compress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compress().data(), this->compress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 9;
      case 9: {
        if (tag == 74) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encrypt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_encryptkey;
        break;
      }

      // optional string encryptkey = 10;
      case 10: {
        if (tag == 82) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encryptkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserLoginTokenLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserLoginTokenLoginUserPmd_C)
  return false;
#undef DO_
}

void UserLoginTokenLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserLoginTokenLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // required uint64 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accountid(), output);
  }

  // required uint64 logintempid = 4;
  if (has_logintempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logintempid(), output);
  }

  // required uint32 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // required string tokenmd5 = 6;
  if (has_tokenmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokenmd5().data(), this->tokenmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tokenmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tokenmd5(), output);
  }

  // optional string compress = 8;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->compress(), output);
  }

  // optional string encrypt = 9;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->encrypt(), output);
  }

  // optional string encryptkey = 10;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserLoginTokenLoginUserPmd_C)
}

::google::protobuf::uint8* UserLoginTokenLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserLoginTokenLoginUserPmd_C)
  // required uint32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // required uint64 accountid = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accountid(), target);
  }

  // required uint64 logintempid = 4;
  if (has_logintempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logintempid(), target);
  }

  // required uint32 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // required string tokenmd5 = 6;
  if (has_tokenmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokenmd5().data(), this->tokenmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tokenmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tokenmd5(), target);
  }

  // optional string compress = 8;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->compress(), target);
  }

  // optional string encrypt = 9;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->encrypt(), target);
  }

  // optional string encryptkey = 10;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserLoginTokenLoginUserPmd_C)
  return target;
}

int UserLoginTokenLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint64 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // required uint64 logintempid = 4;
    if (has_logintempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintempid());
    }

    // required uint32 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // required string tokenmd5 = 6;
    if (has_tokenmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tokenmd5());
    }

    // optional string compress = 8;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compress());
    }

    // optional string encrypt = 9;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string encryptkey = 10;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginTokenLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginTokenLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginTokenLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginTokenLoginUserPmd_C::MergeFrom(const UserLoginTokenLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_logintempid()) {
      set_logintempid(from.logintempid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_tokenmd5()) {
      set_tokenmd5(from.tokenmd5());
    }
    if (from.has_compress()) {
      set_compress(from.compress());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginTokenLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginTokenLoginUserPmd_C::CopyFrom(const UserLoginTokenLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginTokenLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void UserLoginTokenLoginUserPmd_C::Swap(UserLoginTokenLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(accountid_, other->accountid_);
    std::swap(logintempid_, other->logintempid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(tokenmd5_, other->tokenmd5_);
    std::swap(compress_, other->compress_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginTokenLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginTokenLoginUserPmd_C_descriptor_;
  metadata.reflection = UserLoginTokenLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLogUrlLoginUserPmd_S::kLoglevelFieldNumber;
const int ClientLogUrlLoginUserPmd_S::kLogurlFieldNumber;
const int ClientLogUrlLoginUserPmd_S::kDistinctFieldNumber;
#endif  // !_MSC_VER

ClientLogUrlLoginUserPmd_S::ClientLogUrlLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ClientLogUrlLoginUserPmd_S)
}

void ClientLogUrlLoginUserPmd_S::InitAsDefaultInstance() {
}

ClientLogUrlLoginUserPmd_S::ClientLogUrlLoginUserPmd_S(const ClientLogUrlLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ClientLogUrlLoginUserPmd_S)
}

void ClientLogUrlLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  loglevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distinct_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLogUrlLoginUserPmd_S::~ClientLogUrlLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ClientLogUrlLoginUserPmd_S)
  SharedDtor();
}

void ClientLogUrlLoginUserPmd_S::SharedDtor() {
  if (loglevel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loglevel_;
  }
  if (logurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logurl_;
  }
  if (this != default_instance_) {
  }
}

void ClientLogUrlLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLogUrlLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLogUrlLoginUserPmd_S_descriptor_;
}

const ClientLogUrlLoginUserPmd_S& ClientLogUrlLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ClientLogUrlLoginUserPmd_S* ClientLogUrlLoginUserPmd_S::default_instance_ = NULL;

ClientLogUrlLoginUserPmd_S* ClientLogUrlLoginUserPmd_S::New() const {
  return new ClientLogUrlLoginUserPmd_S;
}

void ClientLogUrlLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_loglevel()) {
      if (loglevel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loglevel_->clear();
      }
    }
    if (has_logurl()) {
      if (logurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logurl_->clear();
      }
    }
    distinct_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLogUrlLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ClientLogUrlLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string loglevel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loglevel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loglevel().data(), this->loglevel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loglevel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logurl;
        break;
      }

      // required string logurl = 2;
      case 2: {
        if (tag == 18) {
         parse_logurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logurl().data(), this->logurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_distinct;
        break;
      }

      // required bool distinct = 3;
      case 3: {
        if (tag == 24) {
         parse_distinct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distinct_)));
          set_has_distinct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ClientLogUrlLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ClientLogUrlLoginUserPmd_S)
  return false;
#undef DO_
}

void ClientLogUrlLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ClientLogUrlLoginUserPmd_S)
  // required string loglevel = 1;
  if (has_loglevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loglevel().data(), this->loglevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loglevel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->loglevel(), output);
  }

  // required string logurl = 2;
  if (has_logurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logurl().data(), this->logurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->logurl(), output);
  }

  // required bool distinct = 3;
  if (has_distinct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->distinct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ClientLogUrlLoginUserPmd_S)
}

::google::protobuf::uint8* ClientLogUrlLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ClientLogUrlLoginUserPmd_S)
  // required string loglevel = 1;
  if (has_loglevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loglevel().data(), this->loglevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loglevel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loglevel(), target);
  }

  // required string logurl = 2;
  if (has_logurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logurl().data(), this->logurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logurl(), target);
  }

  // required bool distinct = 3;
  if (has_distinct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->distinct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ClientLogUrlLoginUserPmd_S)
  return target;
}

int ClientLogUrlLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string loglevel = 1;
    if (has_loglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loglevel());
    }

    // required string logurl = 2;
    if (has_logurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logurl());
    }

    // required bool distinct = 3;
    if (has_distinct()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLogUrlLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLogUrlLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLogUrlLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLogUrlLoginUserPmd_S::MergeFrom(const ClientLogUrlLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loglevel()) {
      set_loglevel(from.loglevel());
    }
    if (from.has_logurl()) {
      set_logurl(from.logurl());
    }
    if (from.has_distinct()) {
      set_distinct(from.distinct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLogUrlLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLogUrlLoginUserPmd_S::CopyFrom(const ClientLogUrlLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLogUrlLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientLogUrlLoginUserPmd_S::Swap(ClientLogUrlLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(loglevel_, other->loglevel_);
    std::swap(logurl_, other->logurl_);
    std::swap(distinct_, other->distinct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLogUrlLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLogUrlLoginUserPmd_S_descriptor_;
  metadata.reflection = ClientLogUrlLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageBoxLoginUserPmd_S::kBtnleftFieldNumber;
const int MessageBoxLoginUserPmd_S::kBtnmiddleFieldNumber;
const int MessageBoxLoginUserPmd_S::kBtnrightFieldNumber;
const int MessageBoxLoginUserPmd_S::kInfoFieldNumber;
#endif  // !_MSC_VER

MessageBoxLoginUserPmd_S::MessageBoxLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.MessageBoxLoginUserPmd_S)
}

void MessageBoxLoginUserPmd_S::InitAsDefaultInstance() {
}

MessageBoxLoginUserPmd_S::MessageBoxLoginUserPmd_S(const MessageBoxLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.MessageBoxLoginUserPmd_S)
}

void MessageBoxLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  btnleft_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  btnmiddle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  btnright_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageBoxLoginUserPmd_S::~MessageBoxLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.MessageBoxLoginUserPmd_S)
  SharedDtor();
}

void MessageBoxLoginUserPmd_S::SharedDtor() {
  if (btnleft_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btnleft_;
  }
  if (btnmiddle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btnmiddle_;
  }
  if (btnright_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete btnright_;
  }
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void MessageBoxLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageBoxLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageBoxLoginUserPmd_S_descriptor_;
}

const MessageBoxLoginUserPmd_S& MessageBoxLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

MessageBoxLoginUserPmd_S* MessageBoxLoginUserPmd_S::default_instance_ = NULL;

MessageBoxLoginUserPmd_S* MessageBoxLoginUserPmd_S::New() const {
  return new MessageBoxLoginUserPmd_S;
}

void MessageBoxLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_btnleft()) {
      if (btnleft_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        btnleft_->clear();
      }
    }
    if (has_btnmiddle()) {
      if (btnmiddle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        btnmiddle_->clear();
      }
    }
    if (has_btnright()) {
      if (btnright_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        btnright_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageBoxLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.MessageBoxLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string btnleft = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btnleft()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->btnleft().data(), this->btnleft().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "btnleft");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_btnmiddle;
        break;
      }

      // optional string btnmiddle = 2;
      case 2: {
        if (tag == 18) {
         parse_btnmiddle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btnmiddle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->btnmiddle().data(), this->btnmiddle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "btnmiddle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_btnright;
        break;
      }

      // optional string btnright = 3;
      case 3: {
        if (tag == 26) {
         parse_btnright:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btnright()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->btnright().data(), this->btnright().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "btnright");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional string info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.MessageBoxLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.MessageBoxLoginUserPmd_S)
  return false;
#undef DO_
}

void MessageBoxLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.MessageBoxLoginUserPmd_S)
  // optional string btnleft = 1;
  if (has_btnleft()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btnleft().data(), this->btnleft().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "btnleft");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->btnleft(), output);
  }

  // optional string btnmiddle = 2;
  if (has_btnmiddle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btnmiddle().data(), this->btnmiddle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "btnmiddle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->btnmiddle(), output);
  }

  // optional string btnright = 3;
  if (has_btnright()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btnright().data(), this->btnright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "btnright");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->btnright(), output);
  }

  // optional string info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.MessageBoxLoginUserPmd_S)
}

::google::protobuf::uint8* MessageBoxLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.MessageBoxLoginUserPmd_S)
  // optional string btnleft = 1;
  if (has_btnleft()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btnleft().data(), this->btnleft().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "btnleft");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->btnleft(), target);
  }

  // optional string btnmiddle = 2;
  if (has_btnmiddle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btnmiddle().data(), this->btnmiddle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "btnmiddle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->btnmiddle(), target);
  }

  // optional string btnright = 3;
  if (has_btnright()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btnright().data(), this->btnright().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "btnright");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->btnright(), target);
  }

  // optional string info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.MessageBoxLoginUserPmd_S)
  return target;
}

int MessageBoxLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string btnleft = 1;
    if (has_btnleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->btnleft());
    }

    // optional string btnmiddle = 2;
    if (has_btnmiddle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->btnmiddle());
    }

    // optional string btnright = 3;
    if (has_btnright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->btnright());
    }

    // optional string info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageBoxLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageBoxLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageBoxLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageBoxLoginUserPmd_S::MergeFrom(const MessageBoxLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btnleft()) {
      set_btnleft(from.btnleft());
    }
    if (from.has_btnmiddle()) {
      set_btnmiddle(from.btnmiddle());
    }
    if (from.has_btnright()) {
      set_btnright(from.btnright());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageBoxLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBoxLoginUserPmd_S::CopyFrom(const MessageBoxLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBoxLoginUserPmd_S::IsInitialized() const {

  return true;
}

void MessageBoxLoginUserPmd_S::Swap(MessageBoxLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(btnleft_, other->btnleft_);
    std::swap(btnmiddle_, other->btnmiddle_);
    std::swap(btnright_, other->btnright_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageBoxLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageBoxLoginUserPmd_S_descriptor_;
  metadata.reflection = MessageBoxLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAccountRegisterLoginUserPmd_C::kAccountFieldNumber;
const int RequestAccountRegisterLoginUserPmd_C::kPasswordFieldNumber;
const int RequestAccountRegisterLoginUserPmd_C::kCodeFieldNumber;
#endif  // !_MSC_VER

RequestAccountRegisterLoginUserPmd_C::RequestAccountRegisterLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestAccountRegisterLoginUserPmd_C)
}

void RequestAccountRegisterLoginUserPmd_C::InitAsDefaultInstance() {
}

RequestAccountRegisterLoginUserPmd_C::RequestAccountRegisterLoginUserPmd_C(const RequestAccountRegisterLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestAccountRegisterLoginUserPmd_C)
}

void RequestAccountRegisterLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAccountRegisterLoginUserPmd_C::~RequestAccountRegisterLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestAccountRegisterLoginUserPmd_C)
  SharedDtor();
}

void RequestAccountRegisterLoginUserPmd_C::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void RequestAccountRegisterLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAccountRegisterLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAccountRegisterLoginUserPmd_C_descriptor_;
}

const RequestAccountRegisterLoginUserPmd_C& RequestAccountRegisterLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

RequestAccountRegisterLoginUserPmd_C* RequestAccountRegisterLoginUserPmd_C::default_instance_ = NULL;

RequestAccountRegisterLoginUserPmd_C* RequestAccountRegisterLoginUserPmd_C::New() const {
  return new RequestAccountRegisterLoginUserPmd_C;
}

void RequestAccountRegisterLoginUserPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAccountRegisterLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestAccountRegisterLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // optional string code = 3;
      case 3: {
        if (tag == 26) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestAccountRegisterLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestAccountRegisterLoginUserPmd_C)
  return false;
#undef DO_
}

void RequestAccountRegisterLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestAccountRegisterLoginUserPmd_C)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestAccountRegisterLoginUserPmd_C)
}

::google::protobuf::uint8* RequestAccountRegisterLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestAccountRegisterLoginUserPmd_C)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestAccountRegisterLoginUserPmd_C)
  return target;
}

int RequestAccountRegisterLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAccountRegisterLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAccountRegisterLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAccountRegisterLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAccountRegisterLoginUserPmd_C::MergeFrom(const RequestAccountRegisterLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAccountRegisterLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAccountRegisterLoginUserPmd_C::CopyFrom(const RequestAccountRegisterLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAccountRegisterLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAccountRegisterLoginUserPmd_C::Swap(RequestAccountRegisterLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAccountRegisterLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAccountRegisterLoginUserPmd_C_descriptor_;
  metadata.reflection = RequestAccountRegisterLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnAccountRegisterLoginUserPmd_S::kAccountFieldNumber;
const int ReturnAccountRegisterLoginUserPmd_S::kAccountidFieldNumber;
#endif  // !_MSC_VER

ReturnAccountRegisterLoginUserPmd_S::ReturnAccountRegisterLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnAccountRegisterLoginUserPmd_S)
}

void ReturnAccountRegisterLoginUserPmd_S::InitAsDefaultInstance() {
}

ReturnAccountRegisterLoginUserPmd_S::ReturnAccountRegisterLoginUserPmd_S(const ReturnAccountRegisterLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnAccountRegisterLoginUserPmd_S)
}

void ReturnAccountRegisterLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnAccountRegisterLoginUserPmd_S::~ReturnAccountRegisterLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnAccountRegisterLoginUserPmd_S)
  SharedDtor();
}

void ReturnAccountRegisterLoginUserPmd_S::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void ReturnAccountRegisterLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnAccountRegisterLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnAccountRegisterLoginUserPmd_S_descriptor_;
}

const ReturnAccountRegisterLoginUserPmd_S& ReturnAccountRegisterLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ReturnAccountRegisterLoginUserPmd_S* ReturnAccountRegisterLoginUserPmd_S::default_instance_ = NULL;

ReturnAccountRegisterLoginUserPmd_S* ReturnAccountRegisterLoginUserPmd_S::New() const {
  return new ReturnAccountRegisterLoginUserPmd_S;
}

void ReturnAccountRegisterLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    accountid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnAccountRegisterLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnAccountRegisterLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // required uint64 accountid = 2;
      case 2: {
        if (tag == 16) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnAccountRegisterLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnAccountRegisterLoginUserPmd_S)
  return false;
#undef DO_
}

void ReturnAccountRegisterLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnAccountRegisterLoginUserPmd_S)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required uint64 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnAccountRegisterLoginUserPmd_S)
}

::google::protobuf::uint8* ReturnAccountRegisterLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnAccountRegisterLoginUserPmd_S)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required uint64 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnAccountRegisterLoginUserPmd_S)
  return target;
}

int ReturnAccountRegisterLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required uint64 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnAccountRegisterLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnAccountRegisterLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnAccountRegisterLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnAccountRegisterLoginUserPmd_S::MergeFrom(const ReturnAccountRegisterLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnAccountRegisterLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnAccountRegisterLoginUserPmd_S::CopyFrom(const ReturnAccountRegisterLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnAccountRegisterLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReturnAccountRegisterLoginUserPmd_S::Swap(ReturnAccountRegisterLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnAccountRegisterLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnAccountRegisterLoginUserPmd_S_descriptor_;
  metadata.reflection = ReturnAccountRegisterLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserLogoutTokenLoginUserPmd_C::UserLogoutTokenLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserLogoutTokenLoginUserPmd_C)
}

void UserLogoutTokenLoginUserPmd_C::InitAsDefaultInstance() {
}

UserLogoutTokenLoginUserPmd_C::UserLogoutTokenLoginUserPmd_C(const UserLogoutTokenLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserLogoutTokenLoginUserPmd_C)
}

void UserLogoutTokenLoginUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogoutTokenLoginUserPmd_C::~UserLogoutTokenLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.UserLogoutTokenLoginUserPmd_C)
  SharedDtor();
}

void UserLogoutTokenLoginUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLogoutTokenLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogoutTokenLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogoutTokenLoginUserPmd_C_descriptor_;
}

const UserLogoutTokenLoginUserPmd_C& UserLogoutTokenLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserLogoutTokenLoginUserPmd_C* UserLogoutTokenLoginUserPmd_C::default_instance_ = NULL;

UserLogoutTokenLoginUserPmd_C* UserLogoutTokenLoginUserPmd_C::New() const {
  return new UserLogoutTokenLoginUserPmd_C;
}

void UserLogoutTokenLoginUserPmd_C::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogoutTokenLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserLogoutTokenLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserLogoutTokenLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserLogoutTokenLoginUserPmd_C)
  return false;
#undef DO_
}

void UserLogoutTokenLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserLogoutTokenLoginUserPmd_C)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserLogoutTokenLoginUserPmd_C)
}

::google::protobuf::uint8* UserLogoutTokenLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserLogoutTokenLoginUserPmd_C)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserLogoutTokenLoginUserPmd_C)
  return target;
}

int UserLogoutTokenLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogoutTokenLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogoutTokenLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogoutTokenLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogoutTokenLoginUserPmd_C::MergeFrom(const UserLogoutTokenLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogoutTokenLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogoutTokenLoginUserPmd_C::CopyFrom(const UserLogoutTokenLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogoutTokenLoginUserPmd_C::IsInitialized() const {

  return true;
}

void UserLogoutTokenLoginUserPmd_C::Swap(UserLogoutTokenLoginUserPmd_C* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogoutTokenLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogoutTokenLoginUserPmd_C_descriptor_;
  metadata.reflection = UserLogoutTokenLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginReconnectLoginUserPmd_C::kAccountidFieldNumber;
const int UserLoginReconnectLoginUserPmd_C::kTimestampFieldNumber;
const int UserLoginReconnectLoginUserPmd_C::kTokenmd5FieldNumber;
const int UserLoginReconnectLoginUserPmd_C::kLogintempidFieldNumber;
#endif  // !_MSC_VER

UserLoginReconnectLoginUserPmd_C::UserLoginReconnectLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.UserLoginReconnectLoginUserPmd_C)
}

void UserLoginReconnectLoginUserPmd_C::InitAsDefaultInstance() {
}

UserLoginReconnectLoginUserPmd_C::UserLoginReconnectLoginUserPmd_C(const UserLoginReconnectLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.UserLoginReconnectLoginUserPmd_C)
}

void UserLoginReconnectLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  timestamp_ = 0u;
  tokenmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logintempid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginReconnectLoginUserPmd_C::~UserLoginReconnectLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.UserLoginReconnectLoginUserPmd_C)
  SharedDtor();
}

void UserLoginReconnectLoginUserPmd_C::SharedDtor() {
  if (tokenmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tokenmd5_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginReconnectLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginReconnectLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginReconnectLoginUserPmd_C_descriptor_;
}

const UserLoginReconnectLoginUserPmd_C& UserLoginReconnectLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

UserLoginReconnectLoginUserPmd_C* UserLoginReconnectLoginUserPmd_C::default_instance_ = NULL;

UserLoginReconnectLoginUserPmd_C* UserLoginReconnectLoginUserPmd_C::New() const {
  return new UserLoginReconnectLoginUserPmd_C;
}

void UserLoginReconnectLoginUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserLoginReconnectLoginUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(logintempid_, timestamp_);
    accountid_ = GOOGLE_ULONGLONG(0);
    if (has_tokenmd5()) {
      if (tokenmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tokenmd5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginReconnectLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.UserLoginReconnectLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tokenmd5;
        break;
      }

      // optional string tokenmd5 = 3;
      case 3: {
        if (tag == 26) {
         parse_tokenmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tokenmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tokenmd5().data(), this->tokenmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tokenmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_logintempid;
        break;
      }

      // optional uint64 logintempid = 4;
      case 4: {
        if (tag == 32) {
         parse_logintempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintempid_)));
          set_has_logintempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.UserLoginReconnectLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.UserLoginReconnectLoginUserPmd_C)
  return false;
#undef DO_
}

void UserLoginReconnectLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.UserLoginReconnectLoginUserPmd_C)
  // optional uint64 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional string tokenmd5 = 3;
  if (has_tokenmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokenmd5().data(), this->tokenmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tokenmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tokenmd5(), output);
  }

  // optional uint64 logintempid = 4;
  if (has_logintempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logintempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.UserLoginReconnectLoginUserPmd_C)
}

::google::protobuf::uint8* UserLoginReconnectLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.UserLoginReconnectLoginUserPmd_C)
  // optional uint64 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional string tokenmd5 = 3;
  if (has_tokenmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tokenmd5().data(), this->tokenmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tokenmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tokenmd5(), target);
  }

  // optional uint64 logintempid = 4;
  if (has_logintempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logintempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.UserLoginReconnectLoginUserPmd_C)
  return target;
}

int UserLoginReconnectLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional string tokenmd5 = 3;
    if (has_tokenmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tokenmd5());
    }

    // optional uint64 logintempid = 4;
    if (has_logintempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginReconnectLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginReconnectLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginReconnectLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginReconnectLoginUserPmd_C::MergeFrom(const UserLoginReconnectLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_tokenmd5()) {
      set_tokenmd5(from.tokenmd5());
    }
    if (from.has_logintempid()) {
      set_logintempid(from.logintempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginReconnectLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginReconnectLoginUserPmd_C::CopyFrom(const UserLoginReconnectLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginReconnectLoginUserPmd_C::IsInitialized() const {

  return true;
}

void UserLoginReconnectLoginUserPmd_C::Swap(UserLoginReconnectLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(tokenmd5_, other->tokenmd5_);
    std::swap(logintempid_, other->logintempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginReconnectLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginReconnectLoginUserPmd_C_descriptor_;
  metadata.reflection = UserLoginReconnectLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectKickoutLoginUserPmd_S::kDescFieldNumber;
#endif  // !_MSC_VER

ReconnectKickoutLoginUserPmd_S::ReconnectKickoutLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReconnectKickoutLoginUserPmd_S)
}

void ReconnectKickoutLoginUserPmd_S::InitAsDefaultInstance() {
}

ReconnectKickoutLoginUserPmd_S::ReconnectKickoutLoginUserPmd_S(const ReconnectKickoutLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReconnectKickoutLoginUserPmd_S)
}

void ReconnectKickoutLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectKickoutLoginUserPmd_S::~ReconnectKickoutLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReconnectKickoutLoginUserPmd_S)
  SharedDtor();
}

void ReconnectKickoutLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void ReconnectKickoutLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectKickoutLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectKickoutLoginUserPmd_S_descriptor_;
}

const ReconnectKickoutLoginUserPmd_S& ReconnectKickoutLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ReconnectKickoutLoginUserPmd_S* ReconnectKickoutLoginUserPmd_S::default_instance_ = NULL;

ReconnectKickoutLoginUserPmd_S* ReconnectKickoutLoginUserPmd_S::New() const {
  return new ReconnectKickoutLoginUserPmd_S;
}

void ReconnectKickoutLoginUserPmd_S::Clear() {
  if (has_desc()) {
    if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      desc_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectKickoutLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReconnectKickoutLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReconnectKickoutLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReconnectKickoutLoginUserPmd_S)
  return false;
#undef DO_
}

void ReconnectKickoutLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReconnectKickoutLoginUserPmd_S)
  // optional string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReconnectKickoutLoginUserPmd_S)
}

::google::protobuf::uint8* ReconnectKickoutLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReconnectKickoutLoginUserPmd_S)
  // optional string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReconnectKickoutLoginUserPmd_S)
  return target;
}

int ReconnectKickoutLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string desc = 1;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectKickoutLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectKickoutLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectKickoutLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectKickoutLoginUserPmd_S::MergeFrom(const ReconnectKickoutLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectKickoutLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectKickoutLoginUserPmd_S::CopyFrom(const ReconnectKickoutLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectKickoutLoginUserPmd_S::IsInitialized() const {

  return true;
}

void ReconnectKickoutLoginUserPmd_S::Swap(ReconnectKickoutLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectKickoutLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectKickoutLoginUserPmd_S_descriptor_;
  metadata.reflection = ReconnectKickoutLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectErrorLoginUserPmd_S::kDescFieldNumber;
#endif  // !_MSC_VER

ReconnectErrorLoginUserPmd_S::ReconnectErrorLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReconnectErrorLoginUserPmd_S)
}

void ReconnectErrorLoginUserPmd_S::InitAsDefaultInstance() {
}

ReconnectErrorLoginUserPmd_S::ReconnectErrorLoginUserPmd_S(const ReconnectErrorLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReconnectErrorLoginUserPmd_S)
}

void ReconnectErrorLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectErrorLoginUserPmd_S::~ReconnectErrorLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReconnectErrorLoginUserPmd_S)
  SharedDtor();
}

void ReconnectErrorLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void ReconnectErrorLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectErrorLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectErrorLoginUserPmd_S_descriptor_;
}

const ReconnectErrorLoginUserPmd_S& ReconnectErrorLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ReconnectErrorLoginUserPmd_S* ReconnectErrorLoginUserPmd_S::default_instance_ = NULL;

ReconnectErrorLoginUserPmd_S* ReconnectErrorLoginUserPmd_S::New() const {
  return new ReconnectErrorLoginUserPmd_S;
}

void ReconnectErrorLoginUserPmd_S::Clear() {
  if (has_desc()) {
    if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      desc_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectErrorLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReconnectErrorLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReconnectErrorLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReconnectErrorLoginUserPmd_S)
  return false;
#undef DO_
}

void ReconnectErrorLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReconnectErrorLoginUserPmd_S)
  // optional string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReconnectErrorLoginUserPmd_S)
}

::google::protobuf::uint8* ReconnectErrorLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReconnectErrorLoginUserPmd_S)
  // optional string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReconnectErrorLoginUserPmd_S)
  return target;
}

int ReconnectErrorLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string desc = 1;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectErrorLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectErrorLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectErrorLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectErrorLoginUserPmd_S::MergeFrom(const ReconnectErrorLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectErrorLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectErrorLoginUserPmd_S::CopyFrom(const ReconnectErrorLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectErrorLoginUserPmd_S::IsInitialized() const {

  return true;
}

void ReconnectErrorLoginUserPmd_S::Swap(ReconnectErrorLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectErrorLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectErrorLoginUserPmd_S_descriptor_;
  metadata.reflection = ReconnectErrorLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerKickoutLoginUserPmd_S::kAccountidFieldNumber;
const int ServerKickoutLoginUserPmd_S::kDescFieldNumber;
#endif  // !_MSC_VER

ServerKickoutLoginUserPmd_S::ServerKickoutLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ServerKickoutLoginUserPmd_S)
}

void ServerKickoutLoginUserPmd_S::InitAsDefaultInstance() {
}

ServerKickoutLoginUserPmd_S::ServerKickoutLoginUserPmd_S(const ServerKickoutLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ServerKickoutLoginUserPmd_S)
}

void ServerKickoutLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerKickoutLoginUserPmd_S::~ServerKickoutLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ServerKickoutLoginUserPmd_S)
  SharedDtor();
}

void ServerKickoutLoginUserPmd_S::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void ServerKickoutLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerKickoutLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerKickoutLoginUserPmd_S_descriptor_;
}

const ServerKickoutLoginUserPmd_S& ServerKickoutLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ServerKickoutLoginUserPmd_S* ServerKickoutLoginUserPmd_S::default_instance_ = NULL;

ServerKickoutLoginUserPmd_S* ServerKickoutLoginUserPmd_S::New() const {
  return new ServerKickoutLoginUserPmd_S;
}

void ServerKickoutLoginUserPmd_S::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    accountid_ = GOOGLE_ULONGLONG(0);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerKickoutLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ServerKickoutLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 accountid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ServerKickoutLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ServerKickoutLoginUserPmd_S)
  return false;
#undef DO_
}

void ServerKickoutLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ServerKickoutLoginUserPmd_S)
  // required uint64 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ServerKickoutLoginUserPmd_S)
}

::google::protobuf::uint8* ServerKickoutLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ServerKickoutLoginUserPmd_S)
  // required uint64 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ServerKickoutLoginUserPmd_S)
  return target;
}

int ServerKickoutLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerKickoutLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerKickoutLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerKickoutLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerKickoutLoginUserPmd_S::MergeFrom(const ServerKickoutLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerKickoutLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerKickoutLoginUserPmd_S::CopyFrom(const ServerKickoutLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerKickoutLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerKickoutLoginUserPmd_S::Swap(ServerKickoutLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerKickoutLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerKickoutLoginUserPmd_S_descriptor_;
  metadata.reflection = ServerKickoutLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlatInfo::kAccountFieldNumber;
const int PlatInfo::kPlatidFieldNumber;
const int PlatInfo::kEmailFieldNumber;
const int PlatInfo::kGenderFieldNumber;
const int PlatInfo::kNicknameFieldNumber;
const int PlatInfo::kTimestampFieldNumber;
const int PlatInfo::kSignFieldNumber;
const int PlatInfo::kFaceurlFieldNumber;
const int PlatInfo::kExtdataFieldNumber;
const int PlatInfo::kUidFieldNumber;
#endif  // !_MSC_VER

PlatInfo::PlatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PlatInfo)
}

void PlatInfo::InitAsDefaultInstance() {
}

PlatInfo::PlatInfo(const PlatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PlatInfo)
}

void PlatInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platid_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  faceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlatInfo::~PlatInfo() {
  // @@protoc_insertion_point(destructor:Pmd.PlatInfo)
  SharedDtor();
}

void PlatInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete email_;
  }
  if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gender_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timestamp_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (faceurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete faceurl_;
  }
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void PlatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatInfo_descriptor_;
}

const PlatInfo& PlatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

PlatInfo* PlatInfo::default_instance_ = NULL;

PlatInfo* PlatInfo::New() const {
  return new PlatInfo;
}

void PlatInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    platid_ = 0;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
      }
    }
    if (has_gender()) {
      if (gender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gender_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timestamp_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_faceurl()) {
      if (faceurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        faceurl_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_extdata()) {
      if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extdata_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PlatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_platid;
        break;
      }

      // required .Pmd.PlatType platid = 2;
      case 2: {
        if (tag == 16) {
         parse_platid:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pmd::PlatType_IsValid(value)) {
            set_platid(static_cast< ::Pmd::PlatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gender;
        break;
      }

      // optional string gender = 4;
      case 4: {
        if (tag == 34) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (tag == 42) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sign;
        break;
      }

      // optional string sign = 8;
      case 8: {
        if (tag == 66) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_faceurl;
        break;
      }

      // optional string faceurl = 10;
      case 10: {
        if (tag == 82) {
         parse_faceurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->faceurl().data(), this->faceurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "faceurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_extdata;
        break;
      }

      // optional string extdata = 11;
      case 11: {
        if (tag == 90) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_uid;
        break;
      }

      // optional string uid = 12;
      case 12: {
        if (tag == 98) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PlatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PlatInfo)
  return false;
#undef DO_
}

void PlatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PlatInfo)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required .Pmd.PlatType platid = 2;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->platid(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gender(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nickname(), output);
  }

  // optional string timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->timestamp(), output);
  }

  // optional string sign = 8;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sign(), output);
  }

  // optional string faceurl = 10;
  if (has_faceurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->faceurl().data(), this->faceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "faceurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->faceurl(), output);
  }

  // optional string extdata = 11;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->extdata(), output);
  }

  // optional string uid = 12;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PlatInfo)
}

::google::protobuf::uint8* PlatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PlatInfo)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required .Pmd.PlatType platid = 2;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->platid(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gender(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timestamp(), target);
  }

  // optional string sign = 8;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sign(), target);
  }

  // optional string faceurl = 10;
  if (has_faceurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->faceurl().data(), this->faceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "faceurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->faceurl(), target);
  }

  // optional string extdata = 11;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->extdata(), target);
  }

  // optional string uid = 12;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PlatInfo)
  return target;
}

int PlatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required .Pmd.PlatType platid = 2;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platid());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional string sign = 8;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string faceurl = 10;
    if (has_faceurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceurl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string extdata = 11;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional string uid = 12;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlatInfo::MergeFrom(const PlatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_faceurl()) {
      set_faceurl(from.faceurl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extdata()) {
      set_extdata(from.extdata());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatInfo::CopyFrom(const PlatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlatInfo::Swap(PlatInfo* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(platid_, other->platid_);
    std::swap(email_, other->email_);
    std::swap(gender_, other->gender_);
    std::swap(nickname_, other->nickname_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sign_, other->sign_);
    std::swap(faceurl_, other->faceurl_);
    std::swap(extdata_, other->extdata_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlatInfo_descriptor_;
  metadata.reflection = PlatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThirdPlatLoginUserPmd_C::kPlatinfoFieldNumber;
const int ThirdPlatLoginUserPmd_C::kGameidFieldNumber;
const int ThirdPlatLoginUserPmd_C::kSidFieldNumber;
const int ThirdPlatLoginUserPmd_C::kUidFieldNumber;
#endif  // !_MSC_VER

ThirdPlatLoginUserPmd_C::ThirdPlatLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ThirdPlatLoginUserPmd_C)
}

void ThirdPlatLoginUserPmd_C::InitAsDefaultInstance() {
  platinfo_ = const_cast< ::Pmd::PlatInfo*>(&::Pmd::PlatInfo::default_instance());
}

ThirdPlatLoginUserPmd_C::ThirdPlatLoginUserPmd_C(const ThirdPlatLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ThirdPlatLoginUserPmd_C)
}

void ThirdPlatLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platinfo_ = NULL;
  gameid_ = 0u;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThirdPlatLoginUserPmd_C::~ThirdPlatLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.ThirdPlatLoginUserPmd_C)
  SharedDtor();
}

void ThirdPlatLoginUserPmd_C::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (this != default_instance_) {
    delete platinfo_;
  }
}

void ThirdPlatLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThirdPlatLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThirdPlatLoginUserPmd_C_descriptor_;
}

const ThirdPlatLoginUserPmd_C& ThirdPlatLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ThirdPlatLoginUserPmd_C* ThirdPlatLoginUserPmd_C::default_instance_ = NULL;

ThirdPlatLoginUserPmd_C* ThirdPlatLoginUserPmd_C::New() const {
  return new ThirdPlatLoginUserPmd_C;
}

void ThirdPlatLoginUserPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_platinfo()) {
      if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
    }
    gameid_ = 0u;
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sid_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThirdPlatLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ThirdPlatLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.PlatInfo platinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }

      // required string sid = 3;
      case 3: {
        if (tag == 26) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // required string uid = 4;
      case 4: {
        if (tag == 34) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ThirdPlatLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ThirdPlatLoginUserPmd_C)
  return false;
#undef DO_
}

void ThirdPlatLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ThirdPlatLoginUserPmd_C)
  // required .Pmd.PlatInfo platinfo = 1;
  if (has_platinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->platinfo(), output);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // required string sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sid(), output);
  }

  // required string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ThirdPlatLoginUserPmd_C)
}

::google::protobuf::uint8* ThirdPlatLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ThirdPlatLoginUserPmd_C)
  // required .Pmd.PlatInfo platinfo = 1;
  if (has_platinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->platinfo(), target);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // required string sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sid(), target);
  }

  // required string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ThirdPlatLoginUserPmd_C)
  return target;
}

int ThirdPlatLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.PlatInfo platinfo = 1;
    if (has_platinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platinfo());
    }

    // required uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required string sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // required string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThirdPlatLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThirdPlatLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThirdPlatLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThirdPlatLoginUserPmd_C::MergeFrom(const ThirdPlatLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platinfo()) {
      mutable_platinfo()->::Pmd::PlatInfo::MergeFrom(from.platinfo());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThirdPlatLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThirdPlatLoginUserPmd_C::CopyFrom(const ThirdPlatLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThirdPlatLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_platinfo()) {
    if (!this->platinfo().IsInitialized()) return false;
  }
  return true;
}

void ThirdPlatLoginUserPmd_C::Swap(ThirdPlatLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(platinfo_, other->platinfo_);
    std::swap(gameid_, other->gameid_);
    std::swap(sid_, other->sid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThirdPlatLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThirdPlatLoginUserPmd_C_descriptor_;
  metadata.reflection = ThirdPlatLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetServerLangLoginUserPmd_C::kLangFieldNumber;
const int SetServerLangLoginUserPmd_C::kGameregionFieldNumber;
#endif  // !_MSC_VER

SetServerLangLoginUserPmd_C::SetServerLangLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.SetServerLangLoginUserPmd_C)
}

void SetServerLangLoginUserPmd_C::InitAsDefaultInstance() {
}

SetServerLangLoginUserPmd_C::SetServerLangLoginUserPmd_C(const SetServerLangLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.SetServerLangLoginUserPmd_C)
}

void SetServerLangLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameregion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetServerLangLoginUserPmd_C::~SetServerLangLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.SetServerLangLoginUserPmd_C)
  SharedDtor();
}

void SetServerLangLoginUserPmd_C::SharedDtor() {
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (this != default_instance_) {
  }
}

void SetServerLangLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetServerLangLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetServerLangLoginUserPmd_C_descriptor_;
}

const SetServerLangLoginUserPmd_C& SetServerLangLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

SetServerLangLoginUserPmd_C* SetServerLangLoginUserPmd_C::default_instance_ = NULL;

SetServerLangLoginUserPmd_C* SetServerLangLoginUserPmd_C::New() const {
  return new SetServerLangLoginUserPmd_C;
}

void SetServerLangLoginUserPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lang_->clear();
      }
    }
    gameregion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetServerLangLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.SetServerLangLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lang = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameregion;
        break;
      }

      // required int32 gameregion = 2;
      case 2: {
        if (tag == 16) {
         parse_gameregion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameregion_)));
          set_has_gameregion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.SetServerLangLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.SetServerLangLoginUserPmd_C)
  return false;
#undef DO_
}

void SetServerLangLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.SetServerLangLoginUserPmd_C)
  // required string lang = 1;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lang(), output);
  }

  // required int32 gameregion = 2;
  if (has_gameregion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameregion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.SetServerLangLoginUserPmd_C)
}

::google::protobuf::uint8* SetServerLangLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.SetServerLangLoginUserPmd_C)
  // required string lang = 1;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lang(), target);
  }

  // required int32 gameregion = 2;
  if (has_gameregion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameregion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.SetServerLangLoginUserPmd_C)
  return target;
}

int SetServerLangLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lang = 1;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

    // required int32 gameregion = 2;
    if (has_gameregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameregion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetServerLangLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetServerLangLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetServerLangLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetServerLangLoginUserPmd_C::MergeFrom(const SetServerLangLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lang()) {
      set_lang(from.lang());
    }
    if (from.has_gameregion()) {
      set_gameregion(from.gameregion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetServerLangLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetServerLangLoginUserPmd_C::CopyFrom(const SetServerLangLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetServerLangLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetServerLangLoginUserPmd_C::Swap(SetServerLangLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(lang_, other->lang_);
    std::swap(gameregion_, other->gameregion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetServerLangLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetServerLangLoginUserPmd_C_descriptor_;
  metadata.reflection = SetServerLangLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestClientIPLoginUserPmd_C::RequestClientIPLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestClientIPLoginUserPmd_C)
}

void RequestClientIPLoginUserPmd_C::InitAsDefaultInstance() {
}

RequestClientIPLoginUserPmd_C::RequestClientIPLoginUserPmd_C(const RequestClientIPLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestClientIPLoginUserPmd_C)
}

void RequestClientIPLoginUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestClientIPLoginUserPmd_C::~RequestClientIPLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestClientIPLoginUserPmd_C)
  SharedDtor();
}

void RequestClientIPLoginUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestClientIPLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestClientIPLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestClientIPLoginUserPmd_C_descriptor_;
}

const RequestClientIPLoginUserPmd_C& RequestClientIPLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

RequestClientIPLoginUserPmd_C* RequestClientIPLoginUserPmd_C::default_instance_ = NULL;

RequestClientIPLoginUserPmd_C* RequestClientIPLoginUserPmd_C::New() const {
  return new RequestClientIPLoginUserPmd_C;
}

void RequestClientIPLoginUserPmd_C::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestClientIPLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestClientIPLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestClientIPLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestClientIPLoginUserPmd_C)
  return false;
#undef DO_
}

void RequestClientIPLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestClientIPLoginUserPmd_C)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestClientIPLoginUserPmd_C)
}

::google::protobuf::uint8* RequestClientIPLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestClientIPLoginUserPmd_C)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestClientIPLoginUserPmd_C)
  return target;
}

int RequestClientIPLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestClientIPLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestClientIPLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestClientIPLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestClientIPLoginUserPmd_C::MergeFrom(const RequestClientIPLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestClientIPLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestClientIPLoginUserPmd_C::CopyFrom(const RequestClientIPLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestClientIPLoginUserPmd_C::IsInitialized() const {

  return true;
}

void RequestClientIPLoginUserPmd_C::Swap(RequestClientIPLoginUserPmd_C* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestClientIPLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestClientIPLoginUserPmd_C_descriptor_;
  metadata.reflection = RequestClientIPLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnClientIPLoginUserPmd_S::kPstripFieldNumber;
#endif  // !_MSC_VER

ReturnClientIPLoginUserPmd_S::ReturnClientIPLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnClientIPLoginUserPmd_S)
}

void ReturnClientIPLoginUserPmd_S::InitAsDefaultInstance() {
}

ReturnClientIPLoginUserPmd_S::ReturnClientIPLoginUserPmd_S(const ReturnClientIPLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnClientIPLoginUserPmd_S)
}

void ReturnClientIPLoginUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pstrip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnClientIPLoginUserPmd_S::~ReturnClientIPLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnClientIPLoginUserPmd_S)
  SharedDtor();
}

void ReturnClientIPLoginUserPmd_S::SharedDtor() {
  if (pstrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pstrip_;
  }
  if (this != default_instance_) {
  }
}

void ReturnClientIPLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnClientIPLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnClientIPLoginUserPmd_S_descriptor_;
}

const ReturnClientIPLoginUserPmd_S& ReturnClientIPLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ReturnClientIPLoginUserPmd_S* ReturnClientIPLoginUserPmd_S::default_instance_ = NULL;

ReturnClientIPLoginUserPmd_S* ReturnClientIPLoginUserPmd_S::New() const {
  return new ReturnClientIPLoginUserPmd_S;
}

void ReturnClientIPLoginUserPmd_S::Clear() {
  if (has_pstrip()) {
    if (pstrip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      pstrip_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnClientIPLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnClientIPLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pstrip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pstrip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pstrip().data(), this->pstrip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pstrip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnClientIPLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnClientIPLoginUserPmd_S)
  return false;
#undef DO_
}

void ReturnClientIPLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnClientIPLoginUserPmd_S)
  // required string pstrip = 1;
  if (has_pstrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pstrip().data(), this->pstrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pstrip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pstrip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnClientIPLoginUserPmd_S)
}

::google::protobuf::uint8* ReturnClientIPLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnClientIPLoginUserPmd_S)
  // required string pstrip = 1;
  if (has_pstrip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pstrip().data(), this->pstrip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pstrip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pstrip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnClientIPLoginUserPmd_S)
  return target;
}

int ReturnClientIPLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pstrip = 1;
    if (has_pstrip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pstrip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnClientIPLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnClientIPLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnClientIPLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnClientIPLoginUserPmd_S::MergeFrom(const ReturnClientIPLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pstrip()) {
      set_pstrip(from.pstrip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnClientIPLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnClientIPLoginUserPmd_S::CopyFrom(const ReturnClientIPLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnClientIPLoginUserPmd_S::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReturnClientIPLoginUserPmd_S::Swap(ReturnClientIPLoginUserPmd_S* other) {
  if (other != this) {
    std::swap(pstrip_, other->pstrip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnClientIPLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnClientIPLoginUserPmd_S_descriptor_;
  metadata.reflection = ReturnClientIPLoginUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckVersionLoginUserPmd_C::kDefaultCharidFieldNumber;
const int CheckVersionLoginUserPmd_C::kVersionFieldNumber;
#endif  // !_MSC_VER

CheckVersionLoginUserPmd_C::CheckVersionLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.CheckVersionLoginUserPmd_C)
}

void CheckVersionLoginUserPmd_C::InitAsDefaultInstance() {
}

CheckVersionLoginUserPmd_C::CheckVersionLoginUserPmd_C(const CheckVersionLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.CheckVersionLoginUserPmd_C)
}

void CheckVersionLoginUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  default_charid_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckVersionLoginUserPmd_C::~CheckVersionLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.CheckVersionLoginUserPmd_C)
  SharedDtor();
}

void CheckVersionLoginUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckVersionLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckVersionLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVersionLoginUserPmd_C_descriptor_;
}

const CheckVersionLoginUserPmd_C& CheckVersionLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

CheckVersionLoginUserPmd_C* CheckVersionLoginUserPmd_C::default_instance_ = NULL;

CheckVersionLoginUserPmd_C* CheckVersionLoginUserPmd_C::New() const {
  return new CheckVersionLoginUserPmd_C;
}

void CheckVersionLoginUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckVersionLoginUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(default_charid_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckVersionLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.CheckVersionLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 default_charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_charid_)));
          set_has_default_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.CheckVersionLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.CheckVersionLoginUserPmd_C)
  return false;
#undef DO_
}

void CheckVersionLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.CheckVersionLoginUserPmd_C)
  // optional uint32 default_charid = 1;
  if (has_default_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->default_charid(), output);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.CheckVersionLoginUserPmd_C)
}

::google::protobuf::uint8* CheckVersionLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.CheckVersionLoginUserPmd_C)
  // optional uint32 default_charid = 1;
  if (has_default_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->default_charid(), target);
  }

  // optional uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.CheckVersionLoginUserPmd_C)
  return target;
}

int CheckVersionLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 default_charid = 1;
    if (has_default_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_charid());
    }

    // optional uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVersionLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckVersionLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckVersionLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckVersionLoginUserPmd_C::MergeFrom(const CheckVersionLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_default_charid()) {
      set_default_charid(from.default_charid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckVersionLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVersionLoginUserPmd_C::CopyFrom(const CheckVersionLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVersionLoginUserPmd_C::IsInitialized() const {

  return true;
}

void CheckVersionLoginUserPmd_C::Swap(CheckVersionLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(default_charid_, other->default_charid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckVersionLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckVersionLoginUserPmd_C_descriptor_;
  metadata.reflection = CheckVersionLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorClientVerifyLoginUserPmd_C::kAccountFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kTokenFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kVersionFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kGameidFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kMidFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kPlatidFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kZoneidFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kGameversionFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kCompressFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kEncryptFieldNumber;
const int BehaviorClientVerifyLoginUserPmd_C::kEncryptkeyFieldNumber;
#endif  // !_MSC_VER

BehaviorClientVerifyLoginUserPmd_C::BehaviorClientVerifyLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.BehaviorClientVerifyLoginUserPmd_C)
}

void BehaviorClientVerifyLoginUserPmd_C::InitAsDefaultInstance() {
}

BehaviorClientVerifyLoginUserPmd_C::BehaviorClientVerifyLoginUserPmd_C(const BehaviorClientVerifyLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.BehaviorClientVerifyLoginUserPmd_C)
}

void BehaviorClientVerifyLoginUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  gameid_ = 0u;
  mid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platid_ = 0u;
  zoneid_ = 0u;
  gameversion_ = 0u;
  compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorClientVerifyLoginUserPmd_C::~BehaviorClientVerifyLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.BehaviorClientVerifyLoginUserPmd_C)
  SharedDtor();
}

void BehaviorClientVerifyLoginUserPmd_C::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mid_;
  }
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void BehaviorClientVerifyLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorClientVerifyLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorClientVerifyLoginUserPmd_C_descriptor_;
}

const BehaviorClientVerifyLoginUserPmd_C& BehaviorClientVerifyLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

BehaviorClientVerifyLoginUserPmd_C* BehaviorClientVerifyLoginUserPmd_C::default_instance_ = NULL;

BehaviorClientVerifyLoginUserPmd_C* BehaviorClientVerifyLoginUserPmd_C::New() const {
  return new BehaviorClientVerifyLoginUserPmd_C;
}

void BehaviorClientVerifyLoginUserPmd_C::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BehaviorClientVerifyLoginUserPmd_C*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(version_, gameid_);
    ZR_(platid_, zoneid_);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_mid()) {
      if (mid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mid_->clear();
      }
    }
    gameversion_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_compress()) {
      if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compress_->clear();
      }
    }
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encrypt_->clear();
      }
    }
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encryptkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorClientVerifyLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.BehaviorClientVerifyLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gameid;
        break;
      }

      // optional uint32 gameid = 4;
      case 4: {
        if (tag == 32) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mid;
        break;
      }

      // optional string mid = 5;
      case 5: {
        if (tag == 42) {
         parse_mid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mid().data(), this->mid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_platid;
        break;
      }

      // optional uint32 platid = 6;
      case 6: {
        if (tag == 48) {
         parse_platid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platid_)));
          set_has_platid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 7;
      case 7: {
        if (tag == 56) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gameversion;
        break;
      }

      // optional uint32 gameversion = 8;
      case 8: {
        if (tag == 64) {
         parse_gameversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_compress;
        break;
      }

      // optional string compress = 9;
      case 9: {
        if (tag == 74) {
         parse_compress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compress().data(), this->compress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 10;
      case 10: {
        if (tag == 82) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encrypt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_encryptkey;
        break;
      }

      // optional string encryptkey = 11;
      case 11: {
        if (tag == 90) {
         parse_encryptkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "encryptkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.BehaviorClientVerifyLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.BehaviorClientVerifyLoginUserPmd_C)
  return false;
#undef DO_
}

void BehaviorClientVerifyLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.BehaviorClientVerifyLoginUserPmd_C)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // required uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint32 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gameid(), output);
  }

  // optional string mid = 5;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mid(), output);
  }

  // optional uint32 platid = 6;
  if (has_platid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->platid(), output);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zoneid(), output);
  }

  // optional uint32 gameversion = 8;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gameversion(), output);
  }

  // optional string compress = 9;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->compress(), output);
  }

  // optional string encrypt = 10;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->encrypt(), output);
  }

  // optional string encryptkey = 11;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.BehaviorClientVerifyLoginUserPmd_C)
}

::google::protobuf::uint8* BehaviorClientVerifyLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.BehaviorClientVerifyLoginUserPmd_C)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // optional uint32 gameid = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gameid(), target);
  }

  // optional string mid = 5;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mid().data(), this->mid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mid(), target);
  }

  // optional uint32 platid = 6;
  if (has_platid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->platid(), target);
  }

  // optional uint32 zoneid = 7;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zoneid(), target);
  }

  // optional uint32 gameversion = 8;
  if (has_gameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gameversion(), target);
  }

  // optional string compress = 9;
  if (has_compress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compress().data(), this->compress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->compress(), target);
  }

  // optional string encrypt = 10;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encrypt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->encrypt(), target);
  }

  // optional string encryptkey = 11;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "encryptkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.BehaviorClientVerifyLoginUserPmd_C)
  return target;
}

int BehaviorClientVerifyLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional string mid = 5;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mid());
    }

    // optional uint32 platid = 6;
    if (has_platid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platid());
    }

    // optional uint32 zoneid = 7;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 gameversion = 8;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameversion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string compress = 9;
    if (has_compress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compress());
    }

    // optional string encrypt = 10;
    if (has_encrypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

    // optional string encryptkey = 11;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorClientVerifyLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorClientVerifyLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorClientVerifyLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorClientVerifyLoginUserPmd_C::MergeFrom(const BehaviorClientVerifyLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_platid()) {
      set_platid(from.platid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_compress()) {
      set_compress(from.compress());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorClientVerifyLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorClientVerifyLoginUserPmd_C::CopyFrom(const BehaviorClientVerifyLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorClientVerifyLoginUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BehaviorClientVerifyLoginUserPmd_C::Swap(BehaviorClientVerifyLoginUserPmd_C* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(version_, other->version_);
    std::swap(gameid_, other->gameid_);
    std::swap(mid_, other->mid_);
    std::swap(platid_, other->platid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(compress_, other->compress_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorClientVerifyLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorClientVerifyLoginUserPmd_C_descriptor_;
  metadata.reflection = BehaviorClientVerifyLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSupoortGameListLoginUserPmd_C::RequestSupoortGameListLoginUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestSupoortGameListLoginUserPmd_C)
}

void RequestSupoortGameListLoginUserPmd_C::InitAsDefaultInstance() {
}

RequestSupoortGameListLoginUserPmd_C::RequestSupoortGameListLoginUserPmd_C(const RequestSupoortGameListLoginUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestSupoortGameListLoginUserPmd_C)
}

void RequestSupoortGameListLoginUserPmd_C::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSupoortGameListLoginUserPmd_C::~RequestSupoortGameListLoginUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.RequestSupoortGameListLoginUserPmd_C)
  SharedDtor();
}

void RequestSupoortGameListLoginUserPmd_C::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSupoortGameListLoginUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSupoortGameListLoginUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSupoortGameListLoginUserPmd_C_descriptor_;
}

const RequestSupoortGameListLoginUserPmd_C& RequestSupoortGameListLoginUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

RequestSupoortGameListLoginUserPmd_C* RequestSupoortGameListLoginUserPmd_C::default_instance_ = NULL;

RequestSupoortGameListLoginUserPmd_C* RequestSupoortGameListLoginUserPmd_C::New() const {
  return new RequestSupoortGameListLoginUserPmd_C;
}

void RequestSupoortGameListLoginUserPmd_C::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSupoortGameListLoginUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestSupoortGameListLoginUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestSupoortGameListLoginUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestSupoortGameListLoginUserPmd_C)
  return false;
#undef DO_
}

void RequestSupoortGameListLoginUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestSupoortGameListLoginUserPmd_C)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestSupoortGameListLoginUserPmd_C)
}

::google::protobuf::uint8* RequestSupoortGameListLoginUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestSupoortGameListLoginUserPmd_C)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestSupoortGameListLoginUserPmd_C)
  return target;
}

int RequestSupoortGameListLoginUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSupoortGameListLoginUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSupoortGameListLoginUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSupoortGameListLoginUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSupoortGameListLoginUserPmd_C::MergeFrom(const RequestSupoortGameListLoginUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSupoortGameListLoginUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSupoortGameListLoginUserPmd_C::CopyFrom(const RequestSupoortGameListLoginUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSupoortGameListLoginUserPmd_C::IsInitialized() const {

  return true;
}

void RequestSupoortGameListLoginUserPmd_C::Swap(RequestSupoortGameListLoginUserPmd_C* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSupoortGameListLoginUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSupoortGameListLoginUserPmd_C_descriptor_;
  metadata.reflection = RequestSupoortGameListLoginUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnSupoortGameListLoginUserPmd_S_Game::kGamenameFieldNumber;
const int ReturnSupoortGameListLoginUserPmd_S_Game::kGameidFieldNumber;
#endif  // !_MSC_VER

ReturnSupoortGameListLoginUserPmd_S_Game::ReturnSupoortGameListLoginUserPmd_S_Game()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
}

void ReturnSupoortGameListLoginUserPmd_S_Game::InitAsDefaultInstance() {
}

ReturnSupoortGameListLoginUserPmd_S_Game::ReturnSupoortGameListLoginUserPmd_S_Game(const ReturnSupoortGameListLoginUserPmd_S_Game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
}

void ReturnSupoortGameListLoginUserPmd_S_Game::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnSupoortGameListLoginUserPmd_S_Game::~ReturnSupoortGameListLoginUserPmd_S_Game() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
  SharedDtor();
}

void ReturnSupoortGameListLoginUserPmd_S_Game::SharedDtor() {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (this != default_instance_) {
  }
}

void ReturnSupoortGameListLoginUserPmd_S_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnSupoortGameListLoginUserPmd_S_Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnSupoortGameListLoginUserPmd_S_Game_descriptor_;
}

const ReturnSupoortGameListLoginUserPmd_S_Game& ReturnSupoortGameListLoginUserPmd_S_Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ReturnSupoortGameListLoginUserPmd_S_Game* ReturnSupoortGameListLoginUserPmd_S_Game::default_instance_ = NULL;

ReturnSupoortGameListLoginUserPmd_S_Game* ReturnSupoortGameListLoginUserPmd_S_Game::New() const {
  return new ReturnSupoortGameListLoginUserPmd_S_Game;
}

void ReturnSupoortGameListLoginUserPmd_S_Game::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gamename_->clear();
      }
    }
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnSupoortGameListLoginUserPmd_S_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gamename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gamename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
  return false;
#undef DO_
}

void ReturnSupoortGameListLoginUserPmd_S_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
  // optional string gamename = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
}

::google::protobuf::uint8* ReturnSupoortGameListLoginUserPmd_S_Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
  // optional string gamename = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamename(), target);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnSupoortGameListLoginUserPmd_S_Game)
  return target;
}

int ReturnSupoortGameListLoginUserPmd_S_Game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gamename = 1;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }

    // required uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnSupoortGameListLoginUserPmd_S_Game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnSupoortGameListLoginUserPmd_S_Game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnSupoortGameListLoginUserPmd_S_Game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnSupoortGameListLoginUserPmd_S_Game::MergeFrom(const ReturnSupoortGameListLoginUserPmd_S_Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnSupoortGameListLoginUserPmd_S_Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnSupoortGameListLoginUserPmd_S_Game::CopyFrom(const ReturnSupoortGameListLoginUserPmd_S_Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnSupoortGameListLoginUserPmd_S_Game::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ReturnSupoortGameListLoginUserPmd_S_Game::Swap(ReturnSupoortGameListLoginUserPmd_S_Game* other) {
  if (other != this) {
    std::swap(gamename_, other->gamename_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnSupoortGameListLoginUserPmd_S_Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnSupoortGameListLoginUserPmd_S_Game_descriptor_;
  metadata.reflection = ReturnSupoortGameListLoginUserPmd_S_Game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnSupoortGameListLoginUserPmd_S::kGamelistFieldNumber;
#endif  // !_MSC_VER

ReturnSupoortGameListLoginUserPmd_S::ReturnSupoortGameListLoginUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.ReturnSupoortGameListLoginUserPmd_S)
}

void ReturnSupoortGameListLoginUserPmd_S::InitAsDefaultInstance() {
}

ReturnSupoortGameListLoginUserPmd_S::ReturnSupoortGameListLoginUserPmd_S(const ReturnSupoortGameListLoginUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.ReturnSupoortGameListLoginUserPmd_S)
}

void ReturnSupoortGameListLoginUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnSupoortGameListLoginUserPmd_S::~ReturnSupoortGameListLoginUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.ReturnSupoortGameListLoginUserPmd_S)
  SharedDtor();
}

void ReturnSupoortGameListLoginUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnSupoortGameListLoginUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnSupoortGameListLoginUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnSupoortGameListLoginUserPmd_S_descriptor_;
}

const ReturnSupoortGameListLoginUserPmd_S& ReturnSupoortGameListLoginUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logincommand_2eproto();
  return *default_instance_;
}

ReturnSupoortGameListLoginUserPmd_S* ReturnSupoortGameListLoginUserPmd_S::default_instance_ = NULL;

ReturnSupoortGameListLoginUserPmd_S* ReturnSupoortGameListLoginUserPmd_S::New() const {
  return new ReturnSupoortGameListLoginUserPmd_S;
}

void ReturnSupoortGameListLoginUserPmd_S::Clear() {
  gamelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnSupoortGameListLoginUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.ReturnSupoortGameListLoginUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.ReturnSupoortGameListLoginUserPmd_S_Game gamelist = 1;
      case 1: {
        if (tag == 10) {
         parse_gamelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gamelist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.ReturnSupoortGameListLoginUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.ReturnSupoortGameListLoginUserPmd_S)
  return false;
#undef DO_
}

void ReturnSupoortGameListLoginUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.ReturnSupoortGameListLoginUserPmd_S)
  // repeated .Pmd.ReturnSupoortGameListLoginUserPmd_S_Game gamelist = 1;
  for (int i = 0; i < this->gamelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.ReturnSupoortGameListLoginUserPmd_S)
}

::google::protobuf::uint8* ReturnSupoortGameListLoginUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.ReturnSupoortGameListLoginUserPmd_S)
  // repeated .Pmd.ReturnSupoortGameListLoginUserPmd_S_Game gamelist = 1;
  for (int i = 0; i < this->gamelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.ReturnSupoortGameListLoginUserPmd_S)
  return target;
}

int ReturnSupoortGameListLoginUserPmd_S::ByteSize() const {
  int total_size = 0;

  // repeated .Pmd.ReturnSupoortGameListLoginUserPmd_S_Game gamelist = 1;
  total_size += 1 * this->gamelist_size();
  for (int i = 0; i < this->gamelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnSupoortGameListLoginUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnSupoortGameListLoginUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnSupoortGameListLoginUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnSupoortGameListLoginUserPmd_S::MergeFrom(const ReturnSupoortGameListLoginUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamelist_.MergeFrom(from.gamelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnSupoortGameListLoginUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnSupoortGameListLoginUserPmd_S::CopyFrom(const ReturnSupoortGameListLoginUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnSupoortGameListLoginUserPmd_S::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->gamelist())) return false;
  return true;
}

void ReturnSupoortGameListLoginUserPmd_S::Swap(ReturnSupoortGameListLoginUserPmd_S* other) {
  if (other != this) {
    gamelist_.Swap(&other->gamelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnSupoortGameListLoginUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnSupoortGameListLoginUserPmd_S_descriptor_;
  metadata.reflection = ReturnSupoortGameListLoginUserPmd_S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
