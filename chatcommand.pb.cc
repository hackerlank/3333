// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chatcommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Chat_Param_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommonChatUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonChatUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonChatUserPmd_CS_ChatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommonChatUserPmd_CS_ChatPos_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GMCommandChatUserPmd_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCommandChatUserPmd_C_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMHelpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMHelpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMCommandListChatUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCommandListChatUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateChatUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateChatUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentGmLevelChatUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentGmLevelChatUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAddHideButtonBookChatUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddHideButtonBookChatUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAddHideButtonChatUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddHideButtonChatUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAddHideButtonNewFunctionChatUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddHideButtonNewFunctionChatUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAddHideButtonServerHotKeyChatUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddHideButtonServerHotKeyChatUserPmd_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* stCommonChatUserPmd_CS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCommonChatUserPmd_CS_reflection_ = NULL;
const ::google::protobuf::Descriptor* stMessageBoxChatUserPmd_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMessageBoxChatUserPmd_S_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chatcommand_2eproto() {
  protobuf_AddDesc_chatcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chatcommand.proto");
  GOOGLE_CHECK(file != NULL);
  Chat_descriptor_ = file->message_type(0);
  static const int Chat_offsets_[1] = {
  };
  Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chat_descriptor_,
      Chat::default_instance_,
      Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chat));
  Chat_Param_descriptor_ = Chat_descriptor_->enum_type(0);
  CommonChatUserPmd_CS_descriptor_ = file->message_type(1);
  static const int CommonChatUserPmd_CS_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, sexman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, chatpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, time_),
  };
  CommonChatUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonChatUserPmd_CS_descriptor_,
      CommonChatUserPmd_CS::default_instance_,
      CommonChatUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonChatUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonChatUserPmd_CS));
  CommonChatUserPmd_CS_ChatType_descriptor_ = CommonChatUserPmd_CS_descriptor_->enum_type(0);
  CommonChatUserPmd_CS_ChatPos_descriptor_ = CommonChatUserPmd_CS_descriptor_->enum_type(1);
  GMCommandChatUserPmd_C_descriptor_ = file->message_type(2);
  static const int GMCommandChatUserPmd_C_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandChatUserPmd_C, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandChatUserPmd_C, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandChatUserPmd_C, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandChatUserPmd_C, params_),
  };
  GMCommandChatUserPmd_C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCommandChatUserPmd_C_descriptor_,
      GMCommandChatUserPmd_C::default_instance_,
      GMCommandChatUserPmd_C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandChatUserPmd_C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandChatUserPmd_C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCommandChatUserPmd_C));
  GMHelpInfo_descriptor_ = file->message_type(3);
  static const int GMHelpInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHelpInfo, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHelpInfo, example_),
  };
  GMHelpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMHelpInfo_descriptor_,
      GMHelpInfo::default_instance_,
      GMHelpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHelpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMHelpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMHelpInfo));
  GMCommandListChatUserPmd_S_descriptor_ = file->message_type(4);
  static const int GMCommandListChatUserPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandListChatUserPmd_S, list_),
  };
  GMCommandListChatUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCommandListChatUserPmd_S_descriptor_,
      GMCommandListChatUserPmd_S::default_instance_,
      GMCommandListChatUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandListChatUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandListChatUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCommandListChatUserPmd_S));
  PrivateChatUserPmd_CS_descriptor_ = file->message_type(5);
  static const int PrivateChatUserPmd_CS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatUserPmd_CS, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatUserPmd_CS, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatUserPmd_CS, sexman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatUserPmd_CS, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatUserPmd_CS, time_),
  };
  PrivateChatUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivateChatUserPmd_CS_descriptor_,
      PrivateChatUserPmd_CS::default_instance_,
      PrivateChatUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivateChatUserPmd_CS));
  CurrentGmLevelChatUserPmd_S_descriptor_ = file->message_type(6);
  static const int CurrentGmLevelChatUserPmd_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentGmLevelChatUserPmd_S, gmlevel_),
  };
  CurrentGmLevelChatUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentGmLevelChatUserPmd_S_descriptor_,
      CurrentGmLevelChatUserPmd_S::default_instance_,
      CurrentGmLevelChatUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentGmLevelChatUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentGmLevelChatUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentGmLevelChatUserPmd_S));
  stAddHideButtonBookChatUserPmd_S_descriptor_ = file->message_type(7);
  static const int stAddHideButtonBookChatUserPmd_S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonBookChatUserPmd_S, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonBookChatUserPmd_S, bookid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonBookChatUserPmd_S, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonBookChatUserPmd_S, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonBookChatUserPmd_S, tips_),
  };
  stAddHideButtonBookChatUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddHideButtonBookChatUserPmd_S_descriptor_,
      stAddHideButtonBookChatUserPmd_S::default_instance_,
      stAddHideButtonBookChatUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonBookChatUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonBookChatUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddHideButtonBookChatUserPmd_S));
  stAddHideButtonChatUserPmd_S_descriptor_ = file->message_type(8);
  static const int stAddHideButtonChatUserPmd_S_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, hotkeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, tabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, tabframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, tips_),
  };
  stAddHideButtonChatUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddHideButtonChatUserPmd_S_descriptor_,
      stAddHideButtonChatUserPmd_S::default_instance_,
      stAddHideButtonChatUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonChatUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddHideButtonChatUserPmd_S));
  stAddHideButtonNewFunctionChatUserPmd_S_descriptor_ = file->message_type(9);
  static const int stAddHideButtonNewFunctionChatUserPmd_S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonNewFunctionChatUserPmd_S, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonNewFunctionChatUserPmd_S, functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonNewFunctionChatUserPmd_S, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonNewFunctionChatUserPmd_S, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonNewFunctionChatUserPmd_S, tips_),
  };
  stAddHideButtonNewFunctionChatUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddHideButtonNewFunctionChatUserPmd_S_descriptor_,
      stAddHideButtonNewFunctionChatUserPmd_S::default_instance_,
      stAddHideButtonNewFunctionChatUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonNewFunctionChatUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonNewFunctionChatUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddHideButtonNewFunctionChatUserPmd_S));
  stAddHideButtonServerHotKeyChatUserPmd_S_descriptor_ = file->message_type(10);
  static const int stAddHideButtonServerHotKeyChatUserPmd_S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonServerHotKeyChatUserPmd_S, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonServerHotKeyChatUserPmd_S, serverhotkeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonServerHotKeyChatUserPmd_S, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonServerHotKeyChatUserPmd_S, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonServerHotKeyChatUserPmd_S, tips_),
  };
  stAddHideButtonServerHotKeyChatUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddHideButtonServerHotKeyChatUserPmd_S_descriptor_,
      stAddHideButtonServerHotKeyChatUserPmd_S::default_instance_,
      stAddHideButtonServerHotKeyChatUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonServerHotKeyChatUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddHideButtonServerHotKeyChatUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddHideButtonServerHotKeyChatUserPmd_S));
  stCommonChatUserPmd_CS_descriptor_ = file->message_type(11);
  static const int stCommonChatUserPmd_CS_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, bychattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, bychatcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, byitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, bychatpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, dwopdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, levelorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, vipflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, wdoldzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, bybitmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, byusercmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, byuserparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, szinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, timestamp_),
  };
  stCommonChatUserPmd_CS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCommonChatUserPmd_CS_descriptor_,
      stCommonChatUserPmd_CS::default_instance_,
      stCommonChatUserPmd_CS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonChatUserPmd_CS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCommonChatUserPmd_CS));
  stMessageBoxChatUserPmd_S_descriptor_ = file->message_type(12);
  static const int stMessageBoxChatUserPmd_S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMessageBoxChatUserPmd_S, buttons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMessageBoxChatUserPmd_S, szinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMessageBoxChatUserPmd_S, data0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMessageBoxChatUserPmd_S, data1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMessageBoxChatUserPmd_S, data2_),
  };
  stMessageBoxChatUserPmd_S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMessageBoxChatUserPmd_S_descriptor_,
      stMessageBoxChatUserPmd_S::default_instance_,
      stMessageBoxChatUserPmd_S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMessageBoxChatUserPmd_S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMessageBoxChatUserPmd_S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMessageBoxChatUserPmd_S));
  ChatType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chatcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chat_descriptor_, &Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonChatUserPmd_CS_descriptor_, &CommonChatUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCommandChatUserPmd_C_descriptor_, &GMCommandChatUserPmd_C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMHelpInfo_descriptor_, &GMHelpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCommandListChatUserPmd_S_descriptor_, &GMCommandListChatUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivateChatUserPmd_CS_descriptor_, &PrivateChatUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentGmLevelChatUserPmd_S_descriptor_, &CurrentGmLevelChatUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddHideButtonBookChatUserPmd_S_descriptor_, &stAddHideButtonBookChatUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddHideButtonChatUserPmd_S_descriptor_, &stAddHideButtonChatUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddHideButtonNewFunctionChatUserPmd_S_descriptor_, &stAddHideButtonNewFunctionChatUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddHideButtonServerHotKeyChatUserPmd_S_descriptor_, &stAddHideButtonServerHotKeyChatUserPmd_S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCommonChatUserPmd_CS_descriptor_, &stCommonChatUserPmd_CS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMessageBoxChatUserPmd_S_descriptor_, &stMessageBoxChatUserPmd_S::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chatcommand_2eproto() {
  delete Chat::default_instance_;
  delete Chat_reflection_;
  delete CommonChatUserPmd_CS::default_instance_;
  delete CommonChatUserPmd_CS_reflection_;
  delete GMCommandChatUserPmd_C::default_instance_;
  delete GMCommandChatUserPmd_C_reflection_;
  delete GMHelpInfo::default_instance_;
  delete GMHelpInfo_reflection_;
  delete GMCommandListChatUserPmd_S::default_instance_;
  delete GMCommandListChatUserPmd_S_reflection_;
  delete PrivateChatUserPmd_CS::default_instance_;
  delete PrivateChatUserPmd_CS_reflection_;
  delete CurrentGmLevelChatUserPmd_S::default_instance_;
  delete CurrentGmLevelChatUserPmd_S_reflection_;
  delete stAddHideButtonBookChatUserPmd_S::default_instance_;
  delete stAddHideButtonBookChatUserPmd_S_reflection_;
  delete stAddHideButtonChatUserPmd_S::default_instance_;
  delete stAddHideButtonChatUserPmd_S_reflection_;
  delete stAddHideButtonNewFunctionChatUserPmd_S::default_instance_;
  delete stAddHideButtonNewFunctionChatUserPmd_S_reflection_;
  delete stAddHideButtonServerHotKeyChatUserPmd_S::default_instance_;
  delete stAddHideButtonServerHotKeyChatUserPmd_S_reflection_;
  delete stCommonChatUserPmd_CS::default_instance_;
  delete stCommonChatUserPmd_CS_reflection_;
  delete stMessageBoxChatUserPmd_S::default_instance_;
  delete stMessageBoxChatUserPmd_S_reflection_;
}

void protobuf_AddDesc_chatcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021chatcommand.proto\022\003Pmd\"\200\003\n\004Chat\"\367\002\n\005Pa"
    "ram\022\030\n\024CommonChatUserPmd_CS\020\001\022\032\n\026GMComma"
    "ndChatUserPmd_C\020\002\022\036\n\032GMCommandListChatUs"
    "erPmd_S\020\004\022\031\n\025PrivateChatUserPmd_CS\020\005\022\037\n\033"
    "CurrentGmLevelChatUserPmd_S\020\006\022$\n stAddHi"
    "deButtonBookChatUserPmd_S\020\007\022 \n\034stAddHide"
    "ButtonChatUserPmd_S\020\010\022+\n\'stAddHideButton"
    "NewFunctionChatUserPmd_S\020\t\022,\n(stAddHideB"
    "uttonServerHotKeyChatUserPmd_S\020\n\022\032\n\026stCo"
    "mmonChatUserPmd_CS\020\013\022\035\n\031stMessageBoxChat"
    "UserPmd_S\020\014\"\217\003\n\024CommonChatUserPmd_CS\022\n\n\002"
    "id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\016\n\006sexman\030\003 \001(\010\022\017"
    "\n\007chatpos\030\004 \001(\r\022\020\n\010chattype\030\005 \001(\r\022\014\n\004inf"
    "o\030\006 \002(\t\022\014\n\004time\030\007 \001(\004\"X\n\010ChatType\022\021\n\rCha"
    "tType_None\020\000\022\022\n\016ChatType_Lobby\020\001\022\021\n\rChat"
    "Type_Room\020\002\022\022\n\016ChatType_Robot\020\004\"\263\001\n\007Chat"
    "Pos\022\020\n\014ChatPos_None\020\000\022\022\n\016ChatPos_Normal\020"
    "\001\022\017\n\013ChatPos_Sys\020\002\022\020\n\014ChatPos_Tips\020\004\022\017\n\013"
    "ChatPos_Pop\020\010\022\023\n\017ChatPos_Private\020\020\022\025\n\021Ch"
    "atPos_Important\020 \022\021\n\rChatPos_Honor\020@\022\017\n\n"
    "ChatPos_Gm\020\200\001\"Z\n\026GMCommandChatUserPmd_C\022"
    "\016\n\006charid\030\001 \001(\004\022\020\n\010charname\030\002 \001(\t\022\016\n\006met"
    "hod\030\003 \002(\t\022\016\n\006params\030\004 \001(\t\"-\n\nGMHelpInfo\022"
    "\016\n\006method\030\001 \002(\t\022\017\n\007example\030\002 \002(\t\";\n\032GMCo"
    "mmandListChatUserPmd_S\022\035\n\004list\030\001 \003(\0132\017.P"
    "md.GMHelpInfo\"]\n\025PrivateChatUserPmd_CS\022\n"
    "\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\016\n\006sexman\030\003 \001(\010"
    "\022\014\n\004info\030\004 \002(\t\022\014\n\004time\030\005 \001(\004\".\n\033CurrentG"
    "mLevelChatUserPmd_S\022\017\n\007gmlevel\030\001 \001(\r\"q\n "
    "stAddHideButtonBookChatUserPmd_S\022\020\n\010life"
    "time\030\001 \001(\r\022\016\n\006bookid\030\002 \001(\r\022\016\n\006iconid\030\003 \001"
    "(\r\022\r\n\005close\030\004 \001(\r\022\014\n\004tips\030\005 \001(\t\"\220\001\n\034stAd"
    "dHideButtonChatUserPmd_S\022\020\n\010lifetime\030\001 \001"
    "(\r\022\020\n\010hotkeyid\030\002 \001(\r\022\016\n\006iconid\030\003 \001(\r\022\r\n\005"
    "tabid\030\004 \001(\r\022\020\n\010tabframe\030\005 \001(\r\022\r\n\005close\030\006"
    " \001(\r\022\014\n\004tips\030\007 \001(\t\"|\n\'stAddHideButtonNew"
    "FunctionChatUserPmd_S\022\020\n\010lifetime\030\001 \001(\r\022"
    "\022\n\nfunctionid\030\002 \001(\r\022\016\n\006iconid\030\003 \001(\r\022\r\n\005c"
    "lose\030\004 \001(\r\022\014\n\004tips\030\005 \001(\t\"\201\001\n(stAddHideBu"
    "ttonServerHotKeyChatUserPmd_S\022\020\n\010lifetim"
    "e\030\001 \001(\r\022\026\n\016serverhotkeyid\030\002 \001(\r\022\016\n\006iconi"
    "d\030\003 \001(\r\022\r\n\005close\030\004 \001(\r\022\014\n\004tips\030\005 \001(\t\"\346\002\n"
    "\026stCommonChatUserPmd_CS\022\022\n\nbyChatType\030\001 "
    "\001(\r\022\023\n\013byChatColor\030\002 \001(\r\022\021\n\tbyItemNum\030\003 "
    "\001(\r\022\021\n\tbyChatPos\030\004 \001(\r\022\020\n\010reserved\030\005 \001(\r"
    "\022\017\n\007country\030\006 \001(\r\022\020\n\010function\030\007 \001(\r\022\017\n\007d"
    "wOPDes\030\010 \001(\r\022\022\n\nlevelOrder\030\t \001(\r\022\017\n\007vipf"
    "lag\030\n \001(\r\022\023\n\013wdOldZoneID\030\013 \001(\r\022\021\n\tbyBitm"
    "ask\030\014 \001(\r\022\021\n\tbyUserCmd\030\r \001(\r\022\023\n\013byUserPa"
    "ram\030\016 \001(\r\022\016\n\006szInfo\030\017 \001(\t\022\022\n\nprofession\030"
    "\020 \001(\r\022\013\n\003sex\030\021 \001(\r\022\021\n\ttimestamp\030\022 \001(\r\"i\n"
    "\031stMessageBoxChatUserPmd_S\022\017\n\007buttons\030\001 "
    "\001(\t\022\016\n\006szInfo\030\002 \001(\t\022\r\n\005data0\030\003 \001(\r\022\r\n\005da"
    "ta1\030\004 \001(\r\022\r\n\005data2\030\005 \001(\r*\034\n\010ChatType\022\020\n\014"
    "ChatType_Map\020\002", 2174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chatcommand.proto", &protobuf_RegisterTypes);
  Chat::default_instance_ = new Chat();
  CommonChatUserPmd_CS::default_instance_ = new CommonChatUserPmd_CS();
  GMCommandChatUserPmd_C::default_instance_ = new GMCommandChatUserPmd_C();
  GMHelpInfo::default_instance_ = new GMHelpInfo();
  GMCommandListChatUserPmd_S::default_instance_ = new GMCommandListChatUserPmd_S();
  PrivateChatUserPmd_CS::default_instance_ = new PrivateChatUserPmd_CS();
  CurrentGmLevelChatUserPmd_S::default_instance_ = new CurrentGmLevelChatUserPmd_S();
  stAddHideButtonBookChatUserPmd_S::default_instance_ = new stAddHideButtonBookChatUserPmd_S();
  stAddHideButtonChatUserPmd_S::default_instance_ = new stAddHideButtonChatUserPmd_S();
  stAddHideButtonNewFunctionChatUserPmd_S::default_instance_ = new stAddHideButtonNewFunctionChatUserPmd_S();
  stAddHideButtonServerHotKeyChatUserPmd_S::default_instance_ = new stAddHideButtonServerHotKeyChatUserPmd_S();
  stCommonChatUserPmd_CS::default_instance_ = new stCommonChatUserPmd_CS();
  stMessageBoxChatUserPmd_S::default_instance_ = new stMessageBoxChatUserPmd_S();
  Chat::default_instance_->InitAsDefaultInstance();
  CommonChatUserPmd_CS::default_instance_->InitAsDefaultInstance();
  GMCommandChatUserPmd_C::default_instance_->InitAsDefaultInstance();
  GMHelpInfo::default_instance_->InitAsDefaultInstance();
  GMCommandListChatUserPmd_S::default_instance_->InitAsDefaultInstance();
  PrivateChatUserPmd_CS::default_instance_->InitAsDefaultInstance();
  CurrentGmLevelChatUserPmd_S::default_instance_->InitAsDefaultInstance();
  stAddHideButtonBookChatUserPmd_S::default_instance_->InitAsDefaultInstance();
  stAddHideButtonChatUserPmd_S::default_instance_->InitAsDefaultInstance();
  stAddHideButtonNewFunctionChatUserPmd_S::default_instance_->InitAsDefaultInstance();
  stAddHideButtonServerHotKeyChatUserPmd_S::default_instance_->InitAsDefaultInstance();
  stCommonChatUserPmd_CS::default_instance_->InitAsDefaultInstance();
  stMessageBoxChatUserPmd_S::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatcommand_2eproto {
  StaticDescriptorInitializer_chatcommand_2eproto() {
    protobuf_AddDesc_chatcommand_2eproto();
  }
} static_descriptor_initializer_chatcommand_2eproto_;
const ::google::protobuf::EnumDescriptor* ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatType_descriptor_;
}
bool ChatType_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Chat_Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_Param_descriptor_;
}
bool Chat_Param_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Chat_Param Chat::CommonChatUserPmd_CS;
const Chat_Param Chat::GMCommandChatUserPmd_C;
const Chat_Param Chat::GMCommandListChatUserPmd_S;
const Chat_Param Chat::PrivateChatUserPmd_CS;
const Chat_Param Chat::CurrentGmLevelChatUserPmd_S;
const Chat_Param Chat::stAddHideButtonBookChatUserPmd_S;
const Chat_Param Chat::stAddHideButtonChatUserPmd_S;
const Chat_Param Chat::stAddHideButtonNewFunctionChatUserPmd_S;
const Chat_Param Chat::stAddHideButtonServerHotKeyChatUserPmd_S;
const Chat_Param Chat::stCommonChatUserPmd_CS;
const Chat_Param Chat::stMessageBoxChatUserPmd_S;
const Chat_Param Chat::Param_MIN;
const Chat_Param Chat::Param_MAX;
const int Chat::Param_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Chat::Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.Chat)
}

void Chat::InitAsDefaultInstance() {
}

Chat::Chat(const Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.Chat)
}

void Chat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chat::~Chat() {
  // @@protoc_insertion_point(destructor:Pmd.Chat)
  SharedDtor();
}

void Chat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chat_descriptor_;
}

const Chat& Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

Chat* Chat::default_instance_ = NULL;

Chat* Chat::New() const {
  return new Chat;
}

void Chat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.Chat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.Chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.Chat)
  return false;
#undef DO_
}

void Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.Chat)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.Chat)
}

::google::protobuf::uint8* Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.Chat)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.Chat)
  return target;
}

int Chat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chat::MergeFrom(const Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chat::CopyFrom(const Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat::IsInitialized() const {

  return true;
}

void Chat::Swap(Chat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chat_descriptor_;
  metadata.reflection = Chat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CommonChatUserPmd_CS_ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonChatUserPmd_CS_ChatType_descriptor_;
}
bool CommonChatUserPmd_CS_ChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonChatUserPmd_CS_ChatType CommonChatUserPmd_CS::ChatType_None;
const CommonChatUserPmd_CS_ChatType CommonChatUserPmd_CS::ChatType_Lobby;
const CommonChatUserPmd_CS_ChatType CommonChatUserPmd_CS::ChatType_Room;
const CommonChatUserPmd_CS_ChatType CommonChatUserPmd_CS::ChatType_Robot;
const CommonChatUserPmd_CS_ChatType CommonChatUserPmd_CS::ChatType_MIN;
const CommonChatUserPmd_CS_ChatType CommonChatUserPmd_CS::ChatType_MAX;
const int CommonChatUserPmd_CS::ChatType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CommonChatUserPmd_CS_ChatPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonChatUserPmd_CS_ChatPos_descriptor_;
}
bool CommonChatUserPmd_CS_ChatPos_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_None;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_Normal;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_Sys;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_Tips;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_Pop;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_Private;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_Important;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_Honor;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_Gm;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_MIN;
const CommonChatUserPmd_CS_ChatPos CommonChatUserPmd_CS::ChatPos_MAX;
const int CommonChatUserPmd_CS::ChatPos_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CommonChatUserPmd_CS::kIdFieldNumber;
const int CommonChatUserPmd_CS::kNameFieldNumber;
const int CommonChatUserPmd_CS::kSexmanFieldNumber;
const int CommonChatUserPmd_CS::kChatposFieldNumber;
const int CommonChatUserPmd_CS::kChattypeFieldNumber;
const int CommonChatUserPmd_CS::kInfoFieldNumber;
const int CommonChatUserPmd_CS::kTimeFieldNumber;
#endif  // !_MSC_VER

CommonChatUserPmd_CS::CommonChatUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.CommonChatUserPmd_CS)
}

void CommonChatUserPmd_CS::InitAsDefaultInstance() {
}

CommonChatUserPmd_CS::CommonChatUserPmd_CS(const CommonChatUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.CommonChatUserPmd_CS)
}

void CommonChatUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sexman_ = false;
  chatpos_ = 0u;
  chattype_ = 0u;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonChatUserPmd_CS::~CommonChatUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.CommonChatUserPmd_CS)
  SharedDtor();
}

void CommonChatUserPmd_CS::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void CommonChatUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonChatUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonChatUserPmd_CS_descriptor_;
}

const CommonChatUserPmd_CS& CommonChatUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

CommonChatUserPmd_CS* CommonChatUserPmd_CS::default_instance_ = NULL;

CommonChatUserPmd_CS* CommonChatUserPmd_CS::New() const {
  return new CommonChatUserPmd_CS;
}

void CommonChatUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommonChatUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(sexman_, chatpos_);
    ZR_(time_, chattype_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonChatUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.CommonChatUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sexman;
        break;
      }

      // optional bool sexman = 3;
      case 3: {
        if (tag == 24) {
         parse_sexman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sexman_)));
          set_has_sexman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatpos;
        break;
      }

      // optional uint32 chatpos = 4;
      case 4: {
        if (tag == 32) {
         parse_chatpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatpos_)));
          set_has_chatpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chattype;
        break;
      }

      // optional uint32 chattype = 5;
      case 5: {
        if (tag == 40) {
         parse_chattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // required string info = 6;
      case 6: {
        if (tag == 50) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional uint64 time = 7;
      case 7: {
        if (tag == 56) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.CommonChatUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.CommonChatUserPmd_CS)
  return false;
#undef DO_
}

void CommonChatUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.CommonChatUserPmd_CS)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool sexman = 3;
  if (has_sexman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sexman(), output);
  }

  // optional uint32 chatpos = 4;
  if (has_chatpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chatpos(), output);
  }

  // optional uint32 chattype = 5;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chattype(), output);
  }

  // required string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->info(), output);
  }

  // optional uint64 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.CommonChatUserPmd_CS)
}

::google::protobuf::uint8* CommonChatUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.CommonChatUserPmd_CS)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool sexman = 3;
  if (has_sexman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sexman(), target);
  }

  // optional uint32 chatpos = 4;
  if (has_chatpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chatpos(), target);
  }

  // optional uint32 chattype = 5;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chattype(), target);
  }

  // required string info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->info(), target);
  }

  // optional uint64 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.CommonChatUserPmd_CS)
  return target;
}

int CommonChatUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool sexman = 3;
    if (has_sexman()) {
      total_size += 1 + 1;
    }

    // optional uint32 chatpos = 4;
    if (has_chatpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatpos());
    }

    // optional uint32 chattype = 5;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chattype());
    }

    // required string info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional uint64 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonChatUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonChatUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonChatUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonChatUserPmd_CS::MergeFrom(const CommonChatUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sexman()) {
      set_sexman(from.sexman());
    }
    if (from.has_chatpos()) {
      set_chatpos(from.chatpos());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonChatUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonChatUserPmd_CS::CopyFrom(const CommonChatUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonChatUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void CommonChatUserPmd_CS::Swap(CommonChatUserPmd_CS* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(sexman_, other->sexman_);
    std::swap(chatpos_, other->chatpos_);
    std::swap(chattype_, other->chattype_);
    std::swap(info_, other->info_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonChatUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonChatUserPmd_CS_descriptor_;
  metadata.reflection = CommonChatUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMCommandChatUserPmd_C::kCharidFieldNumber;
const int GMCommandChatUserPmd_C::kCharnameFieldNumber;
const int GMCommandChatUserPmd_C::kMethodFieldNumber;
const int GMCommandChatUserPmd_C::kParamsFieldNumber;
#endif  // !_MSC_VER

GMCommandChatUserPmd_C::GMCommandChatUserPmd_C()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GMCommandChatUserPmd_C)
}

void GMCommandChatUserPmd_C::InitAsDefaultInstance() {
}

GMCommandChatUserPmd_C::GMCommandChatUserPmd_C(const GMCommandChatUserPmd_C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GMCommandChatUserPmd_C)
}

void GMCommandChatUserPmd_C::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCommandChatUserPmd_C::~GMCommandChatUserPmd_C() {
  // @@protoc_insertion_point(destructor:Pmd.GMCommandChatUserPmd_C)
  SharedDtor();
}

void GMCommandChatUserPmd_C::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete params_;
  }
  if (this != default_instance_) {
  }
}

void GMCommandChatUserPmd_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCommandChatUserPmd_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCommandChatUserPmd_C_descriptor_;
}

const GMCommandChatUserPmd_C& GMCommandChatUserPmd_C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

GMCommandChatUserPmd_C* GMCommandChatUserPmd_C::default_instance_ = NULL;

GMCommandChatUserPmd_C* GMCommandChatUserPmd_C::New() const {
  return new GMCommandChatUserPmd_C;
}

void GMCommandChatUserPmd_C::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCommandChatUserPmd_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GMCommandChatUserPmd_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (tag == 18) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_method;
        break;
      }

      // required string method = 3;
      case 3: {
        if (tag == 26) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }

      // optional string params = 4;
      case 4: {
        if (tag == 34) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GMCommandChatUserPmd_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GMCommandChatUserPmd_C)
  return false;
#undef DO_
}

void GMCommandChatUserPmd_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GMCommandChatUserPmd_C)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charname(), output);
  }

  // required string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method(), output);
  }

  // optional string params = 4;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GMCommandChatUserPmd_C)
}

::google::protobuf::uint8* GMCommandChatUserPmd_C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GMCommandChatUserPmd_C)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // required string method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // optional string params = 4;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GMCommandChatUserPmd_C)
  return target;
}

int GMCommandChatUserPmd_C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required string method = 3;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional string params = 4;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCommandChatUserPmd_C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCommandChatUserPmd_C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCommandChatUserPmd_C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCommandChatUserPmd_C::MergeFrom(const GMCommandChatUserPmd_C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCommandChatUserPmd_C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCommandChatUserPmd_C::CopyFrom(const GMCommandChatUserPmd_C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCommandChatUserPmd_C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GMCommandChatUserPmd_C::Swap(GMCommandChatUserPmd_C* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(method_, other->method_);
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCommandChatUserPmd_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCommandChatUserPmd_C_descriptor_;
  metadata.reflection = GMCommandChatUserPmd_C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMHelpInfo::kMethodFieldNumber;
const int GMHelpInfo::kExampleFieldNumber;
#endif  // !_MSC_VER

GMHelpInfo::GMHelpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GMHelpInfo)
}

void GMHelpInfo::InitAsDefaultInstance() {
}

GMHelpInfo::GMHelpInfo(const GMHelpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GMHelpInfo)
}

void GMHelpInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  example_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMHelpInfo::~GMHelpInfo() {
  // @@protoc_insertion_point(destructor:Pmd.GMHelpInfo)
  SharedDtor();
}

void GMHelpInfo::SharedDtor() {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (example_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete example_;
  }
  if (this != default_instance_) {
  }
}

void GMHelpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMHelpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMHelpInfo_descriptor_;
}

const GMHelpInfo& GMHelpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

GMHelpInfo* GMHelpInfo::default_instance_ = NULL;

GMHelpInfo* GMHelpInfo::New() const {
  return new GMHelpInfo;
}

void GMHelpInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
    if (has_example()) {
      if (example_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        example_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMHelpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GMHelpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string method = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_example;
        break;
      }

      // required string example = 2;
      case 2: {
        if (tag == 18) {
         parse_example:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_example()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->example().data(), this->example().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "example");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GMHelpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GMHelpInfo)
  return false;
#undef DO_
}

void GMHelpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GMHelpInfo)
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->method(), output);
  }

  // required string example = 2;
  if (has_example()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->example().data(), this->example().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "example");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->example(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GMHelpInfo)
}

::google::protobuf::uint8* GMHelpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GMHelpInfo)
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }

  // required string example = 2;
  if (has_example()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->example().data(), this->example().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "example");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->example(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GMHelpInfo)
  return target;
}

int GMHelpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // required string example = 2;
    if (has_example()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->example());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMHelpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMHelpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMHelpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMHelpInfo::MergeFrom(const GMHelpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_example()) {
      set_example(from.example());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMHelpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMHelpInfo::CopyFrom(const GMHelpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMHelpInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMHelpInfo::Swap(GMHelpInfo* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(example_, other->example_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMHelpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMHelpInfo_descriptor_;
  metadata.reflection = GMHelpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMCommandListChatUserPmd_S::kListFieldNumber;
#endif  // !_MSC_VER

GMCommandListChatUserPmd_S::GMCommandListChatUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.GMCommandListChatUserPmd_S)
}

void GMCommandListChatUserPmd_S::InitAsDefaultInstance() {
}

GMCommandListChatUserPmd_S::GMCommandListChatUserPmd_S(const GMCommandListChatUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.GMCommandListChatUserPmd_S)
}

void GMCommandListChatUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCommandListChatUserPmd_S::~GMCommandListChatUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.GMCommandListChatUserPmd_S)
  SharedDtor();
}

void GMCommandListChatUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMCommandListChatUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCommandListChatUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCommandListChatUserPmd_S_descriptor_;
}

const GMCommandListChatUserPmd_S& GMCommandListChatUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

GMCommandListChatUserPmd_S* GMCommandListChatUserPmd_S::default_instance_ = NULL;

GMCommandListChatUserPmd_S* GMCommandListChatUserPmd_S::New() const {
  return new GMCommandListChatUserPmd_S;
}

void GMCommandListChatUserPmd_S::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCommandListChatUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.GMCommandListChatUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pmd.GMHelpInfo list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.GMCommandListChatUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.GMCommandListChatUserPmd_S)
  return false;
#undef DO_
}

void GMCommandListChatUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.GMCommandListChatUserPmd_S)
  // repeated .Pmd.GMHelpInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.GMCommandListChatUserPmd_S)
}

::google::protobuf::uint8* GMCommandListChatUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.GMCommandListChatUserPmd_S)
  // repeated .Pmd.GMHelpInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.GMCommandListChatUserPmd_S)
  return target;
}

int GMCommandListChatUserPmd_S::ByteSize() const {
  int total_size = 0;

  // repeated .Pmd.GMHelpInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCommandListChatUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCommandListChatUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCommandListChatUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCommandListChatUserPmd_S::MergeFrom(const GMCommandListChatUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCommandListChatUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCommandListChatUserPmd_S::CopyFrom(const GMCommandListChatUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCommandListChatUserPmd_S::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void GMCommandListChatUserPmd_S::Swap(GMCommandListChatUserPmd_S* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCommandListChatUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCommandListChatUserPmd_S_descriptor_;
  metadata.reflection = GMCommandListChatUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivateChatUserPmd_CS::kIdFieldNumber;
const int PrivateChatUserPmd_CS::kNameFieldNumber;
const int PrivateChatUserPmd_CS::kSexmanFieldNumber;
const int PrivateChatUserPmd_CS::kInfoFieldNumber;
const int PrivateChatUserPmd_CS::kTimeFieldNumber;
#endif  // !_MSC_VER

PrivateChatUserPmd_CS::PrivateChatUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PrivateChatUserPmd_CS)
}

void PrivateChatUserPmd_CS::InitAsDefaultInstance() {
}

PrivateChatUserPmd_CS::PrivateChatUserPmd_CS(const PrivateChatUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PrivateChatUserPmd_CS)
}

void PrivateChatUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sexman_ = false;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateChatUserPmd_CS::~PrivateChatUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.PrivateChatUserPmd_CS)
  SharedDtor();
}

void PrivateChatUserPmd_CS::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void PrivateChatUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateChatUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateChatUserPmd_CS_descriptor_;
}

const PrivateChatUserPmd_CS& PrivateChatUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

PrivateChatUserPmd_CS* PrivateChatUserPmd_CS::default_instance_ = NULL;

PrivateChatUserPmd_CS* PrivateChatUserPmd_CS::New() const {
  return new PrivateChatUserPmd_CS;
}

void PrivateChatUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrivateChatUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(time_, sexman_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivateChatUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PrivateChatUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sexman;
        break;
      }

      // optional bool sexman = 3;
      case 3: {
        if (tag == 24) {
         parse_sexman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sexman_)));
          set_has_sexman();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // required string info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PrivateChatUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PrivateChatUserPmd_CS)
  return false;
#undef DO_
}

void PrivateChatUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PrivateChatUserPmd_CS)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool sexman = 3;
  if (has_sexman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sexman(), output);
  }

  // required string info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PrivateChatUserPmd_CS)
}

::google::protobuf::uint8* PrivateChatUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PrivateChatUserPmd_CS)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool sexman = 3;
  if (has_sexman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sexman(), target);
  }

  // required string info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PrivateChatUserPmd_CS)
  return target;
}

int PrivateChatUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool sexman = 3;
    if (has_sexman()) {
      total_size += 1 + 1;
    }

    // required string info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateChatUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivateChatUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivateChatUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivateChatUserPmd_CS::MergeFrom(const PrivateChatUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sexman()) {
      set_sexman(from.sexman());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivateChatUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateChatUserPmd_CS::CopyFrom(const PrivateChatUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateChatUserPmd_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void PrivateChatUserPmd_CS::Swap(PrivateChatUserPmd_CS* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(sexman_, other->sexman_);
    std::swap(info_, other->info_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivateChatUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateChatUserPmd_CS_descriptor_;
  metadata.reflection = PrivateChatUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentGmLevelChatUserPmd_S::kGmlevelFieldNumber;
#endif  // !_MSC_VER

CurrentGmLevelChatUserPmd_S::CurrentGmLevelChatUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.CurrentGmLevelChatUserPmd_S)
}

void CurrentGmLevelChatUserPmd_S::InitAsDefaultInstance() {
}

CurrentGmLevelChatUserPmd_S::CurrentGmLevelChatUserPmd_S(const CurrentGmLevelChatUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.CurrentGmLevelChatUserPmd_S)
}

void CurrentGmLevelChatUserPmd_S::SharedCtor() {
  _cached_size_ = 0;
  gmlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentGmLevelChatUserPmd_S::~CurrentGmLevelChatUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.CurrentGmLevelChatUserPmd_S)
  SharedDtor();
}

void CurrentGmLevelChatUserPmd_S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrentGmLevelChatUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentGmLevelChatUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentGmLevelChatUserPmd_S_descriptor_;
}

const CurrentGmLevelChatUserPmd_S& CurrentGmLevelChatUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

CurrentGmLevelChatUserPmd_S* CurrentGmLevelChatUserPmd_S::default_instance_ = NULL;

CurrentGmLevelChatUserPmd_S* CurrentGmLevelChatUserPmd_S::New() const {
  return new CurrentGmLevelChatUserPmd_S;
}

void CurrentGmLevelChatUserPmd_S::Clear() {
  gmlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentGmLevelChatUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.CurrentGmLevelChatUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gmlevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmlevel_)));
          set_has_gmlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.CurrentGmLevelChatUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.CurrentGmLevelChatUserPmd_S)
  return false;
#undef DO_
}

void CurrentGmLevelChatUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.CurrentGmLevelChatUserPmd_S)
  // optional uint32 gmlevel = 1;
  if (has_gmlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gmlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.CurrentGmLevelChatUserPmd_S)
}

::google::protobuf::uint8* CurrentGmLevelChatUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.CurrentGmLevelChatUserPmd_S)
  // optional uint32 gmlevel = 1;
  if (has_gmlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gmlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.CurrentGmLevelChatUserPmd_S)
  return target;
}

int CurrentGmLevelChatUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gmlevel = 1;
    if (has_gmlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentGmLevelChatUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentGmLevelChatUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentGmLevelChatUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentGmLevelChatUserPmd_S::MergeFrom(const CurrentGmLevelChatUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gmlevel()) {
      set_gmlevel(from.gmlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentGmLevelChatUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentGmLevelChatUserPmd_S::CopyFrom(const CurrentGmLevelChatUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentGmLevelChatUserPmd_S::IsInitialized() const {

  return true;
}

void CurrentGmLevelChatUserPmd_S::Swap(CurrentGmLevelChatUserPmd_S* other) {
  if (other != this) {
    std::swap(gmlevel_, other->gmlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentGmLevelChatUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentGmLevelChatUserPmd_S_descriptor_;
  metadata.reflection = CurrentGmLevelChatUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAddHideButtonBookChatUserPmd_S::kLifetimeFieldNumber;
const int stAddHideButtonBookChatUserPmd_S::kBookidFieldNumber;
const int stAddHideButtonBookChatUserPmd_S::kIconidFieldNumber;
const int stAddHideButtonBookChatUserPmd_S::kCloseFieldNumber;
const int stAddHideButtonBookChatUserPmd_S::kTipsFieldNumber;
#endif  // !_MSC_VER

stAddHideButtonBookChatUserPmd_S::stAddHideButtonBookChatUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stAddHideButtonBookChatUserPmd_S)
}

void stAddHideButtonBookChatUserPmd_S::InitAsDefaultInstance() {
}

stAddHideButtonBookChatUserPmd_S::stAddHideButtonBookChatUserPmd_S(const stAddHideButtonBookChatUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stAddHideButtonBookChatUserPmd_S)
}

void stAddHideButtonBookChatUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lifetime_ = 0u;
  bookid_ = 0u;
  iconid_ = 0u;
  close_ = 0u;
  tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddHideButtonBookChatUserPmd_S::~stAddHideButtonBookChatUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.stAddHideButtonBookChatUserPmd_S)
  SharedDtor();
}

void stAddHideButtonBookChatUserPmd_S::SharedDtor() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (this != default_instance_) {
  }
}

void stAddHideButtonBookChatUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddHideButtonBookChatUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddHideButtonBookChatUserPmd_S_descriptor_;
}

const stAddHideButtonBookChatUserPmd_S& stAddHideButtonBookChatUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

stAddHideButtonBookChatUserPmd_S* stAddHideButtonBookChatUserPmd_S::default_instance_ = NULL;

stAddHideButtonBookChatUserPmd_S* stAddHideButtonBookChatUserPmd_S::New() const {
  return new stAddHideButtonBookChatUserPmd_S;
}

void stAddHideButtonBookChatUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stAddHideButtonBookChatUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lifetime_, close_);
    if (has_tips()) {
      if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tips_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddHideButtonBookChatUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stAddHideButtonBookChatUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lifetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bookid;
        break;
      }

      // optional uint32 bookid = 2;
      case 2: {
        if (tag == 16) {
         parse_bookid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bookid_)));
          set_has_bookid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iconid;
        break;
      }

      // optional uint32 iconid = 3;
      case 3: {
        if (tag == 24) {
         parse_iconid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_close;
        break;
      }

      // optional uint32 close = 4;
      case 4: {
        if (tag == 32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tips;
        break;
      }

      // optional string tips = 5;
      case 5: {
        if (tag == 42) {
         parse_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tips().data(), this->tips().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stAddHideButtonBookChatUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stAddHideButtonBookChatUserPmd_S)
  return false;
#undef DO_
}

void stAddHideButtonBookChatUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stAddHideButtonBookChatUserPmd_S)
  // optional uint32 lifetime = 1;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lifetime(), output);
  }

  // optional uint32 bookid = 2;
  if (has_bookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bookid(), output);
  }

  // optional uint32 iconid = 3;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iconid(), output);
  }

  // optional uint32 close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->close(), output);
  }

  // optional string tips = 5;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stAddHideButtonBookChatUserPmd_S)
}

::google::protobuf::uint8* stAddHideButtonBookChatUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stAddHideButtonBookChatUserPmd_S)
  // optional uint32 lifetime = 1;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lifetime(), target);
  }

  // optional uint32 bookid = 2;
  if (has_bookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bookid(), target);
  }

  // optional uint32 iconid = 3;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iconid(), target);
  }

  // optional uint32 close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->close(), target);
  }

  // optional string tips = 5;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stAddHideButtonBookChatUserPmd_S)
  return target;
}

int stAddHideButtonBookChatUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lifetime = 1;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime());
    }

    // optional uint32 bookid = 2;
    if (has_bookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bookid());
    }

    // optional uint32 iconid = 3;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iconid());
    }

    // optional uint32 close = 4;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close());
    }

    // optional string tips = 5;
    if (has_tips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddHideButtonBookChatUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddHideButtonBookChatUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddHideButtonBookChatUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddHideButtonBookChatUserPmd_S::MergeFrom(const stAddHideButtonBookChatUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_bookid()) {
      set_bookid(from.bookid());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_tips()) {
      set_tips(from.tips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddHideButtonBookChatUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddHideButtonBookChatUserPmd_S::CopyFrom(const stAddHideButtonBookChatUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddHideButtonBookChatUserPmd_S::IsInitialized() const {

  return true;
}

void stAddHideButtonBookChatUserPmd_S::Swap(stAddHideButtonBookChatUserPmd_S* other) {
  if (other != this) {
    std::swap(lifetime_, other->lifetime_);
    std::swap(bookid_, other->bookid_);
    std::swap(iconid_, other->iconid_);
    std::swap(close_, other->close_);
    std::swap(tips_, other->tips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddHideButtonBookChatUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddHideButtonBookChatUserPmd_S_descriptor_;
  metadata.reflection = stAddHideButtonBookChatUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAddHideButtonChatUserPmd_S::kLifetimeFieldNumber;
const int stAddHideButtonChatUserPmd_S::kHotkeyidFieldNumber;
const int stAddHideButtonChatUserPmd_S::kIconidFieldNumber;
const int stAddHideButtonChatUserPmd_S::kTabidFieldNumber;
const int stAddHideButtonChatUserPmd_S::kTabframeFieldNumber;
const int stAddHideButtonChatUserPmd_S::kCloseFieldNumber;
const int stAddHideButtonChatUserPmd_S::kTipsFieldNumber;
#endif  // !_MSC_VER

stAddHideButtonChatUserPmd_S::stAddHideButtonChatUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stAddHideButtonChatUserPmd_S)
}

void stAddHideButtonChatUserPmd_S::InitAsDefaultInstance() {
}

stAddHideButtonChatUserPmd_S::stAddHideButtonChatUserPmd_S(const stAddHideButtonChatUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stAddHideButtonChatUserPmd_S)
}

void stAddHideButtonChatUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lifetime_ = 0u;
  hotkeyid_ = 0u;
  iconid_ = 0u;
  tabid_ = 0u;
  tabframe_ = 0u;
  close_ = 0u;
  tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddHideButtonChatUserPmd_S::~stAddHideButtonChatUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.stAddHideButtonChatUserPmd_S)
  SharedDtor();
}

void stAddHideButtonChatUserPmd_S::SharedDtor() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (this != default_instance_) {
  }
}

void stAddHideButtonChatUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddHideButtonChatUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddHideButtonChatUserPmd_S_descriptor_;
}

const stAddHideButtonChatUserPmd_S& stAddHideButtonChatUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

stAddHideButtonChatUserPmd_S* stAddHideButtonChatUserPmd_S::default_instance_ = NULL;

stAddHideButtonChatUserPmd_S* stAddHideButtonChatUserPmd_S::New() const {
  return new stAddHideButtonChatUserPmd_S;
}

void stAddHideButtonChatUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stAddHideButtonChatUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(lifetime_, close_);
    if (has_tips()) {
      if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tips_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddHideButtonChatUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stAddHideButtonChatUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lifetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hotkeyid;
        break;
      }

      // optional uint32 hotkeyid = 2;
      case 2: {
        if (tag == 16) {
         parse_hotkeyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hotkeyid_)));
          set_has_hotkeyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iconid;
        break;
      }

      // optional uint32 iconid = 3;
      case 3: {
        if (tag == 24) {
         parse_iconid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tabid;
        break;
      }

      // optional uint32 tabid = 4;
      case 4: {
        if (tag == 32) {
         parse_tabid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tabid_)));
          set_has_tabid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tabframe;
        break;
      }

      // optional uint32 tabframe = 5;
      case 5: {
        if (tag == 40) {
         parse_tabframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tabframe_)));
          set_has_tabframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_close;
        break;
      }

      // optional uint32 close = 6;
      case 6: {
        if (tag == 48) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tips;
        break;
      }

      // optional string tips = 7;
      case 7: {
        if (tag == 58) {
         parse_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tips().data(), this->tips().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stAddHideButtonChatUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stAddHideButtonChatUserPmd_S)
  return false;
#undef DO_
}

void stAddHideButtonChatUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stAddHideButtonChatUserPmd_S)
  // optional uint32 lifetime = 1;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lifetime(), output);
  }

  // optional uint32 hotkeyid = 2;
  if (has_hotkeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hotkeyid(), output);
  }

  // optional uint32 iconid = 3;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iconid(), output);
  }

  // optional uint32 tabid = 4;
  if (has_tabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tabid(), output);
  }

  // optional uint32 tabframe = 5;
  if (has_tabframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tabframe(), output);
  }

  // optional uint32 close = 6;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->close(), output);
  }

  // optional string tips = 7;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stAddHideButtonChatUserPmd_S)
}

::google::protobuf::uint8* stAddHideButtonChatUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stAddHideButtonChatUserPmd_S)
  // optional uint32 lifetime = 1;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lifetime(), target);
  }

  // optional uint32 hotkeyid = 2;
  if (has_hotkeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hotkeyid(), target);
  }

  // optional uint32 iconid = 3;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iconid(), target);
  }

  // optional uint32 tabid = 4;
  if (has_tabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tabid(), target);
  }

  // optional uint32 tabframe = 5;
  if (has_tabframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tabframe(), target);
  }

  // optional uint32 close = 6;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->close(), target);
  }

  // optional string tips = 7;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stAddHideButtonChatUserPmd_S)
  return target;
}

int stAddHideButtonChatUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lifetime = 1;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime());
    }

    // optional uint32 hotkeyid = 2;
    if (has_hotkeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hotkeyid());
    }

    // optional uint32 iconid = 3;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iconid());
    }

    // optional uint32 tabid = 4;
    if (has_tabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tabid());
    }

    // optional uint32 tabframe = 5;
    if (has_tabframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tabframe());
    }

    // optional uint32 close = 6;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close());
    }

    // optional string tips = 7;
    if (has_tips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddHideButtonChatUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddHideButtonChatUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddHideButtonChatUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddHideButtonChatUserPmd_S::MergeFrom(const stAddHideButtonChatUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_hotkeyid()) {
      set_hotkeyid(from.hotkeyid());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_tabid()) {
      set_tabid(from.tabid());
    }
    if (from.has_tabframe()) {
      set_tabframe(from.tabframe());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_tips()) {
      set_tips(from.tips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddHideButtonChatUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddHideButtonChatUserPmd_S::CopyFrom(const stAddHideButtonChatUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddHideButtonChatUserPmd_S::IsInitialized() const {

  return true;
}

void stAddHideButtonChatUserPmd_S::Swap(stAddHideButtonChatUserPmd_S* other) {
  if (other != this) {
    std::swap(lifetime_, other->lifetime_);
    std::swap(hotkeyid_, other->hotkeyid_);
    std::swap(iconid_, other->iconid_);
    std::swap(tabid_, other->tabid_);
    std::swap(tabframe_, other->tabframe_);
    std::swap(close_, other->close_);
    std::swap(tips_, other->tips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddHideButtonChatUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddHideButtonChatUserPmd_S_descriptor_;
  metadata.reflection = stAddHideButtonChatUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAddHideButtonNewFunctionChatUserPmd_S::kLifetimeFieldNumber;
const int stAddHideButtonNewFunctionChatUserPmd_S::kFunctionidFieldNumber;
const int stAddHideButtonNewFunctionChatUserPmd_S::kIconidFieldNumber;
const int stAddHideButtonNewFunctionChatUserPmd_S::kCloseFieldNumber;
const int stAddHideButtonNewFunctionChatUserPmd_S::kTipsFieldNumber;
#endif  // !_MSC_VER

stAddHideButtonNewFunctionChatUserPmd_S::stAddHideButtonNewFunctionChatUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
}

void stAddHideButtonNewFunctionChatUserPmd_S::InitAsDefaultInstance() {
}

stAddHideButtonNewFunctionChatUserPmd_S::stAddHideButtonNewFunctionChatUserPmd_S(const stAddHideButtonNewFunctionChatUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
}

void stAddHideButtonNewFunctionChatUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lifetime_ = 0u;
  functionid_ = 0u;
  iconid_ = 0u;
  close_ = 0u;
  tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddHideButtonNewFunctionChatUserPmd_S::~stAddHideButtonNewFunctionChatUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
  SharedDtor();
}

void stAddHideButtonNewFunctionChatUserPmd_S::SharedDtor() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (this != default_instance_) {
  }
}

void stAddHideButtonNewFunctionChatUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddHideButtonNewFunctionChatUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddHideButtonNewFunctionChatUserPmd_S_descriptor_;
}

const stAddHideButtonNewFunctionChatUserPmd_S& stAddHideButtonNewFunctionChatUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

stAddHideButtonNewFunctionChatUserPmd_S* stAddHideButtonNewFunctionChatUserPmd_S::default_instance_ = NULL;

stAddHideButtonNewFunctionChatUserPmd_S* stAddHideButtonNewFunctionChatUserPmd_S::New() const {
  return new stAddHideButtonNewFunctionChatUserPmd_S;
}

void stAddHideButtonNewFunctionChatUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stAddHideButtonNewFunctionChatUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lifetime_, close_);
    if (has_tips()) {
      if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tips_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddHideButtonNewFunctionChatUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lifetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_functionid;
        break;
      }

      // optional uint32 functionid = 2;
      case 2: {
        if (tag == 16) {
         parse_functionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iconid;
        break;
      }

      // optional uint32 iconid = 3;
      case 3: {
        if (tag == 24) {
         parse_iconid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_close;
        break;
      }

      // optional uint32 close = 4;
      case 4: {
        if (tag == 32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tips;
        break;
      }

      // optional string tips = 5;
      case 5: {
        if (tag == 42) {
         parse_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tips().data(), this->tips().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
  return false;
#undef DO_
}

void stAddHideButtonNewFunctionChatUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
  // optional uint32 lifetime = 1;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lifetime(), output);
  }

  // optional uint32 functionid = 2;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->functionid(), output);
  }

  // optional uint32 iconid = 3;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iconid(), output);
  }

  // optional uint32 close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->close(), output);
  }

  // optional string tips = 5;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
}

::google::protobuf::uint8* stAddHideButtonNewFunctionChatUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
  // optional uint32 lifetime = 1;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lifetime(), target);
  }

  // optional uint32 functionid = 2;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->functionid(), target);
  }

  // optional uint32 iconid = 3;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iconid(), target);
  }

  // optional uint32 close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->close(), target);
  }

  // optional string tips = 5;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stAddHideButtonNewFunctionChatUserPmd_S)
  return target;
}

int stAddHideButtonNewFunctionChatUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lifetime = 1;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime());
    }

    // optional uint32 functionid = 2;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->functionid());
    }

    // optional uint32 iconid = 3;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iconid());
    }

    // optional uint32 close = 4;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close());
    }

    // optional string tips = 5;
    if (has_tips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddHideButtonNewFunctionChatUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddHideButtonNewFunctionChatUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddHideButtonNewFunctionChatUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddHideButtonNewFunctionChatUserPmd_S::MergeFrom(const stAddHideButtonNewFunctionChatUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_tips()) {
      set_tips(from.tips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddHideButtonNewFunctionChatUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddHideButtonNewFunctionChatUserPmd_S::CopyFrom(const stAddHideButtonNewFunctionChatUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddHideButtonNewFunctionChatUserPmd_S::IsInitialized() const {

  return true;
}

void stAddHideButtonNewFunctionChatUserPmd_S::Swap(stAddHideButtonNewFunctionChatUserPmd_S* other) {
  if (other != this) {
    std::swap(lifetime_, other->lifetime_);
    std::swap(functionid_, other->functionid_);
    std::swap(iconid_, other->iconid_);
    std::swap(close_, other->close_);
    std::swap(tips_, other->tips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddHideButtonNewFunctionChatUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddHideButtonNewFunctionChatUserPmd_S_descriptor_;
  metadata.reflection = stAddHideButtonNewFunctionChatUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAddHideButtonServerHotKeyChatUserPmd_S::kLifetimeFieldNumber;
const int stAddHideButtonServerHotKeyChatUserPmd_S::kServerhotkeyidFieldNumber;
const int stAddHideButtonServerHotKeyChatUserPmd_S::kIconidFieldNumber;
const int stAddHideButtonServerHotKeyChatUserPmd_S::kCloseFieldNumber;
const int stAddHideButtonServerHotKeyChatUserPmd_S::kTipsFieldNumber;
#endif  // !_MSC_VER

stAddHideButtonServerHotKeyChatUserPmd_S::stAddHideButtonServerHotKeyChatUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
}

void stAddHideButtonServerHotKeyChatUserPmd_S::InitAsDefaultInstance() {
}

stAddHideButtonServerHotKeyChatUserPmd_S::stAddHideButtonServerHotKeyChatUserPmd_S(const stAddHideButtonServerHotKeyChatUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
}

void stAddHideButtonServerHotKeyChatUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lifetime_ = 0u;
  serverhotkeyid_ = 0u;
  iconid_ = 0u;
  close_ = 0u;
  tips_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddHideButtonServerHotKeyChatUserPmd_S::~stAddHideButtonServerHotKeyChatUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
  SharedDtor();
}

void stAddHideButtonServerHotKeyChatUserPmd_S::SharedDtor() {
  if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tips_;
  }
  if (this != default_instance_) {
  }
}

void stAddHideButtonServerHotKeyChatUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddHideButtonServerHotKeyChatUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddHideButtonServerHotKeyChatUserPmd_S_descriptor_;
}

const stAddHideButtonServerHotKeyChatUserPmd_S& stAddHideButtonServerHotKeyChatUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

stAddHideButtonServerHotKeyChatUserPmd_S* stAddHideButtonServerHotKeyChatUserPmd_S::default_instance_ = NULL;

stAddHideButtonServerHotKeyChatUserPmd_S* stAddHideButtonServerHotKeyChatUserPmd_S::New() const {
  return new stAddHideButtonServerHotKeyChatUserPmd_S;
}

void stAddHideButtonServerHotKeyChatUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stAddHideButtonServerHotKeyChatUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lifetime_, close_);
    if (has_tips()) {
      if (tips_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tips_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddHideButtonServerHotKeyChatUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lifetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverhotkeyid;
        break;
      }

      // optional uint32 serverhotkeyid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverhotkeyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverhotkeyid_)));
          set_has_serverhotkeyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iconid;
        break;
      }

      // optional uint32 iconid = 3;
      case 3: {
        if (tag == 24) {
         parse_iconid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_close;
        break;
      }

      // optional uint32 close = 4;
      case 4: {
        if (tag == 32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tips;
        break;
      }

      // optional string tips = 5;
      case 5: {
        if (tag == 42) {
         parse_tips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tips().data(), this->tips().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
  return false;
#undef DO_
}

void stAddHideButtonServerHotKeyChatUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
  // optional uint32 lifetime = 1;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lifetime(), output);
  }

  // optional uint32 serverhotkeyid = 2;
  if (has_serverhotkeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverhotkeyid(), output);
  }

  // optional uint32 iconid = 3;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iconid(), output);
  }

  // optional uint32 close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->close(), output);
  }

  // optional string tips = 5;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
}

::google::protobuf::uint8* stAddHideButtonServerHotKeyChatUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
  // optional uint32 lifetime = 1;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lifetime(), target);
  }

  // optional uint32 serverhotkeyid = 2;
  if (has_serverhotkeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverhotkeyid(), target);
  }

  // optional uint32 iconid = 3;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iconid(), target);
  }

  // optional uint32 close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->close(), target);
  }

  // optional string tips = 5;
  if (has_tips()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tips().data(), this->tips().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stAddHideButtonServerHotKeyChatUserPmd_S)
  return target;
}

int stAddHideButtonServerHotKeyChatUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lifetime = 1;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime());
    }

    // optional uint32 serverhotkeyid = 2;
    if (has_serverhotkeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverhotkeyid());
    }

    // optional uint32 iconid = 3;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iconid());
    }

    // optional uint32 close = 4;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close());
    }

    // optional string tips = 5;
    if (has_tips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddHideButtonServerHotKeyChatUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddHideButtonServerHotKeyChatUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddHideButtonServerHotKeyChatUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddHideButtonServerHotKeyChatUserPmd_S::MergeFrom(const stAddHideButtonServerHotKeyChatUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_serverhotkeyid()) {
      set_serverhotkeyid(from.serverhotkeyid());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_tips()) {
      set_tips(from.tips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddHideButtonServerHotKeyChatUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddHideButtonServerHotKeyChatUserPmd_S::CopyFrom(const stAddHideButtonServerHotKeyChatUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddHideButtonServerHotKeyChatUserPmd_S::IsInitialized() const {

  return true;
}

void stAddHideButtonServerHotKeyChatUserPmd_S::Swap(stAddHideButtonServerHotKeyChatUserPmd_S* other) {
  if (other != this) {
    std::swap(lifetime_, other->lifetime_);
    std::swap(serverhotkeyid_, other->serverhotkeyid_);
    std::swap(iconid_, other->iconid_);
    std::swap(close_, other->close_);
    std::swap(tips_, other->tips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddHideButtonServerHotKeyChatUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddHideButtonServerHotKeyChatUserPmd_S_descriptor_;
  metadata.reflection = stAddHideButtonServerHotKeyChatUserPmd_S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCommonChatUserPmd_CS::kByChatTypeFieldNumber;
const int stCommonChatUserPmd_CS::kByChatColorFieldNumber;
const int stCommonChatUserPmd_CS::kByItemNumFieldNumber;
const int stCommonChatUserPmd_CS::kByChatPosFieldNumber;
const int stCommonChatUserPmd_CS::kReservedFieldNumber;
const int stCommonChatUserPmd_CS::kCountryFieldNumber;
const int stCommonChatUserPmd_CS::kFunctionFieldNumber;
const int stCommonChatUserPmd_CS::kDwOPDesFieldNumber;
const int stCommonChatUserPmd_CS::kLevelOrderFieldNumber;
const int stCommonChatUserPmd_CS::kVipflagFieldNumber;
const int stCommonChatUserPmd_CS::kWdOldZoneIDFieldNumber;
const int stCommonChatUserPmd_CS::kByBitmaskFieldNumber;
const int stCommonChatUserPmd_CS::kByUserCmdFieldNumber;
const int stCommonChatUserPmd_CS::kByUserParamFieldNumber;
const int stCommonChatUserPmd_CS::kSzInfoFieldNumber;
const int stCommonChatUserPmd_CS::kProfessionFieldNumber;
const int stCommonChatUserPmd_CS::kSexFieldNumber;
const int stCommonChatUserPmd_CS::kTimestampFieldNumber;
#endif  // !_MSC_VER

stCommonChatUserPmd_CS::stCommonChatUserPmd_CS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stCommonChatUserPmd_CS)
}

void stCommonChatUserPmd_CS::InitAsDefaultInstance() {
}

stCommonChatUserPmd_CS::stCommonChatUserPmd_CS(const stCommonChatUserPmd_CS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stCommonChatUserPmd_CS)
}

void stCommonChatUserPmd_CS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bychattype_ = 0u;
  bychatcolor_ = 0u;
  byitemnum_ = 0u;
  bychatpos_ = 0u;
  reserved_ = 0u;
  country_ = 0u;
  function_ = 0u;
  dwopdes_ = 0u;
  levelorder_ = 0u;
  vipflag_ = 0u;
  wdoldzoneid_ = 0u;
  bybitmask_ = 0u;
  byusercmd_ = 0u;
  byuserparam_ = 0u;
  szinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  profession_ = 0u;
  sex_ = 0u;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCommonChatUserPmd_CS::~stCommonChatUserPmd_CS() {
  // @@protoc_insertion_point(destructor:Pmd.stCommonChatUserPmd_CS)
  SharedDtor();
}

void stCommonChatUserPmd_CS::SharedDtor() {
  if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szinfo_;
  }
  if (this != default_instance_) {
  }
}

void stCommonChatUserPmd_CS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCommonChatUserPmd_CS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommonChatUserPmd_CS_descriptor_;
}

const stCommonChatUserPmd_CS& stCommonChatUserPmd_CS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

stCommonChatUserPmd_CS* stCommonChatUserPmd_CS::default_instance_ = NULL;

stCommonChatUserPmd_CS* stCommonChatUserPmd_CS::New() const {
  return new stCommonChatUserPmd_CS;
}

void stCommonChatUserPmd_CS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stCommonChatUserPmd_CS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bychattype_, dwopdes_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(levelorder_, byuserparam_);
    if (has_szinfo()) {
      if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szinfo_->clear();
      }
    }
    profession_ = 0u;
  }
  ZR_(sex_, timestamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCommonChatUserPmd_CS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stCommonChatUserPmd_CS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 byChatType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bychattype_)));
          set_has_bychattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_byChatColor;
        break;
      }

      // optional uint32 byChatColor = 2;
      case 2: {
        if (tag == 16) {
         parse_byChatColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bychatcolor_)));
          set_has_bychatcolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_byItemNum;
        break;
      }

      // optional uint32 byItemNum = 3;
      case 3: {
        if (tag == 24) {
         parse_byItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &byitemnum_)));
          set_has_byitemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_byChatPos;
        break;
      }

      // optional uint32 byChatPos = 4;
      case 4: {
        if (tag == 32) {
         parse_byChatPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bychatpos_)));
          set_has_bychatpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reserved;
        break;
      }

      // optional uint32 reserved = 5;
      case 5: {
        if (tag == 40) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_country;
        break;
      }

      // optional uint32 country = 6;
      case 6: {
        if (tag == 48) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_function;
        break;
      }

      // optional uint32 function = 7;
      case 7: {
        if (tag == 56) {
         parse_function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &function_)));
          set_has_function();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dwOPDes;
        break;
      }

      // optional uint32 dwOPDes = 8;
      case 8: {
        if (tag == 64) {
         parse_dwOPDes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwopdes_)));
          set_has_dwopdes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_levelOrder;
        break;
      }

      // optional uint32 levelOrder = 9;
      case 9: {
        if (tag == 72) {
         parse_levelOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelorder_)));
          set_has_levelorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vipflag;
        break;
      }

      // optional uint32 vipflag = 10;
      case 10: {
        if (tag == 80) {
         parse_vipflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipflag_)));
          set_has_vipflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wdOldZoneID;
        break;
      }

      // optional uint32 wdOldZoneID = 11;
      case 11: {
        if (tag == 88) {
         parse_wdOldZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wdoldzoneid_)));
          set_has_wdoldzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_byBitmask;
        break;
      }

      // optional uint32 byBitmask = 12;
      case 12: {
        if (tag == 96) {
         parse_byBitmask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bybitmask_)));
          set_has_bybitmask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_byUserCmd;
        break;
      }

      // optional uint32 byUserCmd = 13;
      case 13: {
        if (tag == 104) {
         parse_byUserCmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &byusercmd_)));
          set_has_byusercmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_byUserParam;
        break;
      }

      // optional uint32 byUserParam = 14;
      case 14: {
        if (tag == 112) {
         parse_byUserParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &byuserparam_)));
          set_has_byuserparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_szInfo;
        break;
      }

      // optional string szInfo = 15;
      case 15: {
        if (tag == 122) {
         parse_szInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szinfo().data(), this->szinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 16;
      case 16: {
        if (tag == 128) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 17;
      case 17: {
        if (tag == 136) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 18;
      case 18: {
        if (tag == 144) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stCommonChatUserPmd_CS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stCommonChatUserPmd_CS)
  return false;
#undef DO_
}

void stCommonChatUserPmd_CS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stCommonChatUserPmd_CS)
  // optional uint32 byChatType = 1;
  if (has_bychattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bychattype(), output);
  }

  // optional uint32 byChatColor = 2;
  if (has_bychatcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bychatcolor(), output);
  }

  // optional uint32 byItemNum = 3;
  if (has_byitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->byitemnum(), output);
  }

  // optional uint32 byChatPos = 4;
  if (has_bychatpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bychatpos(), output);
  }

  // optional uint32 reserved = 5;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reserved(), output);
  }

  // optional uint32 country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->country(), output);
  }

  // optional uint32 function = 7;
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->function(), output);
  }

  // optional uint32 dwOPDes = 8;
  if (has_dwopdes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dwopdes(), output);
  }

  // optional uint32 levelOrder = 9;
  if (has_levelorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->levelorder(), output);
  }

  // optional uint32 vipflag = 10;
  if (has_vipflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->vipflag(), output);
  }

  // optional uint32 wdOldZoneID = 11;
  if (has_wdoldzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wdoldzoneid(), output);
  }

  // optional uint32 byBitmask = 12;
  if (has_bybitmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->bybitmask(), output);
  }

  // optional uint32 byUserCmd = 13;
  if (has_byusercmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->byusercmd(), output);
  }

  // optional uint32 byUserParam = 14;
  if (has_byuserparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->byuserparam(), output);
  }

  // optional string szInfo = 15;
  if (has_szinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szinfo().data(), this->szinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->szinfo(), output);
  }

  // optional uint32 profession = 16;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->profession(), output);
  }

  // optional uint32 sex = 17;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sex(), output);
  }

  // optional uint32 timestamp = 18;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stCommonChatUserPmd_CS)
}

::google::protobuf::uint8* stCommonChatUserPmd_CS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stCommonChatUserPmd_CS)
  // optional uint32 byChatType = 1;
  if (has_bychattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bychattype(), target);
  }

  // optional uint32 byChatColor = 2;
  if (has_bychatcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bychatcolor(), target);
  }

  // optional uint32 byItemNum = 3;
  if (has_byitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->byitemnum(), target);
  }

  // optional uint32 byChatPos = 4;
  if (has_bychatpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bychatpos(), target);
  }

  // optional uint32 reserved = 5;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reserved(), target);
  }

  // optional uint32 country = 6;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->country(), target);
  }

  // optional uint32 function = 7;
  if (has_function()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->function(), target);
  }

  // optional uint32 dwOPDes = 8;
  if (has_dwopdes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dwopdes(), target);
  }

  // optional uint32 levelOrder = 9;
  if (has_levelorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->levelorder(), target);
  }

  // optional uint32 vipflag = 10;
  if (has_vipflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->vipflag(), target);
  }

  // optional uint32 wdOldZoneID = 11;
  if (has_wdoldzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wdoldzoneid(), target);
  }

  // optional uint32 byBitmask = 12;
  if (has_bybitmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->bybitmask(), target);
  }

  // optional uint32 byUserCmd = 13;
  if (has_byusercmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->byusercmd(), target);
  }

  // optional uint32 byUserParam = 14;
  if (has_byuserparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->byuserparam(), target);
  }

  // optional string szInfo = 15;
  if (has_szinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szinfo().data(), this->szinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->szinfo(), target);
  }

  // optional uint32 profession = 16;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->profession(), target);
  }

  // optional uint32 sex = 17;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sex(), target);
  }

  // optional uint32 timestamp = 18;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stCommonChatUserPmd_CS)
  return target;
}

int stCommonChatUserPmd_CS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 byChatType = 1;
    if (has_bychattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bychattype());
    }

    // optional uint32 byChatColor = 2;
    if (has_bychatcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bychatcolor());
    }

    // optional uint32 byItemNum = 3;
    if (has_byitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->byitemnum());
    }

    // optional uint32 byChatPos = 4;
    if (has_bychatpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bychatpos());
    }

    // optional uint32 reserved = 5;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

    // optional uint32 country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional uint32 function = 7;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->function());
    }

    // optional uint32 dwOPDes = 8;
    if (has_dwopdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwopdes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 levelOrder = 9;
    if (has_levelorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelorder());
    }

    // optional uint32 vipflag = 10;
    if (has_vipflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipflag());
    }

    // optional uint32 wdOldZoneID = 11;
    if (has_wdoldzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wdoldzoneid());
    }

    // optional uint32 byBitmask = 12;
    if (has_bybitmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bybitmask());
    }

    // optional uint32 byUserCmd = 13;
    if (has_byusercmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->byusercmd());
    }

    // optional uint32 byUserParam = 14;
    if (has_byuserparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->byuserparam());
    }

    // optional string szInfo = 15;
    if (has_szinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szinfo());
    }

    // optional uint32 profession = 16;
    if (has_profession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 sex = 17;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 timestamp = 18;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCommonChatUserPmd_CS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCommonChatUserPmd_CS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCommonChatUserPmd_CS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCommonChatUserPmd_CS::MergeFrom(const stCommonChatUserPmd_CS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bychattype()) {
      set_bychattype(from.bychattype());
    }
    if (from.has_bychatcolor()) {
      set_bychatcolor(from.bychatcolor());
    }
    if (from.has_byitemnum()) {
      set_byitemnum(from.byitemnum());
    }
    if (from.has_bychatpos()) {
      set_bychatpos(from.bychatpos());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_dwopdes()) {
      set_dwopdes(from.dwopdes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_levelorder()) {
      set_levelorder(from.levelorder());
    }
    if (from.has_vipflag()) {
      set_vipflag(from.vipflag());
    }
    if (from.has_wdoldzoneid()) {
      set_wdoldzoneid(from.wdoldzoneid());
    }
    if (from.has_bybitmask()) {
      set_bybitmask(from.bybitmask());
    }
    if (from.has_byusercmd()) {
      set_byusercmd(from.byusercmd());
    }
    if (from.has_byuserparam()) {
      set_byuserparam(from.byuserparam());
    }
    if (from.has_szinfo()) {
      set_szinfo(from.szinfo());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCommonChatUserPmd_CS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCommonChatUserPmd_CS::CopyFrom(const stCommonChatUserPmd_CS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCommonChatUserPmd_CS::IsInitialized() const {

  return true;
}

void stCommonChatUserPmd_CS::Swap(stCommonChatUserPmd_CS* other) {
  if (other != this) {
    std::swap(bychattype_, other->bychattype_);
    std::swap(bychatcolor_, other->bychatcolor_);
    std::swap(byitemnum_, other->byitemnum_);
    std::swap(bychatpos_, other->bychatpos_);
    std::swap(reserved_, other->reserved_);
    std::swap(country_, other->country_);
    std::swap(function_, other->function_);
    std::swap(dwopdes_, other->dwopdes_);
    std::swap(levelorder_, other->levelorder_);
    std::swap(vipflag_, other->vipflag_);
    std::swap(wdoldzoneid_, other->wdoldzoneid_);
    std::swap(bybitmask_, other->bybitmask_);
    std::swap(byusercmd_, other->byusercmd_);
    std::swap(byuserparam_, other->byuserparam_);
    std::swap(szinfo_, other->szinfo_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCommonChatUserPmd_CS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCommonChatUserPmd_CS_descriptor_;
  metadata.reflection = stCommonChatUserPmd_CS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stMessageBoxChatUserPmd_S::kButtonsFieldNumber;
const int stMessageBoxChatUserPmd_S::kSzInfoFieldNumber;
const int stMessageBoxChatUserPmd_S::kData0FieldNumber;
const int stMessageBoxChatUserPmd_S::kData1FieldNumber;
const int stMessageBoxChatUserPmd_S::kData2FieldNumber;
#endif  // !_MSC_VER

stMessageBoxChatUserPmd_S::stMessageBoxChatUserPmd_S()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.stMessageBoxChatUserPmd_S)
}

void stMessageBoxChatUserPmd_S::InitAsDefaultInstance() {
}

stMessageBoxChatUserPmd_S::stMessageBoxChatUserPmd_S(const stMessageBoxChatUserPmd_S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.stMessageBoxChatUserPmd_S)
}

void stMessageBoxChatUserPmd_S::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buttons_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data0_ = 0u;
  data1_ = 0u;
  data2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMessageBoxChatUserPmd_S::~stMessageBoxChatUserPmd_S() {
  // @@protoc_insertion_point(destructor:Pmd.stMessageBoxChatUserPmd_S)
  SharedDtor();
}

void stMessageBoxChatUserPmd_S::SharedDtor() {
  if (buttons_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buttons_;
  }
  if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete szinfo_;
  }
  if (this != default_instance_) {
  }
}

void stMessageBoxChatUserPmd_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMessageBoxChatUserPmd_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMessageBoxChatUserPmd_S_descriptor_;
}

const stMessageBoxChatUserPmd_S& stMessageBoxChatUserPmd_S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatcommand_2eproto();
  return *default_instance_;
}

stMessageBoxChatUserPmd_S* stMessageBoxChatUserPmd_S::default_instance_ = NULL;

stMessageBoxChatUserPmd_S* stMessageBoxChatUserPmd_S::New() const {
  return new stMessageBoxChatUserPmd_S;
}

void stMessageBoxChatUserPmd_S::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<stMessageBoxChatUserPmd_S*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(data0_, data2_);
    if (has_buttons()) {
      if (buttons_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buttons_->clear();
      }
    }
    if (has_szinfo()) {
      if (szinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        szinfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMessageBoxChatUserPmd_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.stMessageBoxChatUserPmd_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string buttons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buttons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buttons().data(), this->buttons().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buttons");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_szInfo;
        break;
      }

      // optional string szInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_szInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->szinfo().data(), this->szinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "szinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data0;
        break;
      }

      // optional uint32 data0 = 3;
      case 3: {
        if (tag == 24) {
         parse_data0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data0_)));
          set_has_data0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data1;
        break;
      }

      // optional uint32 data1 = 4;
      case 4: {
        if (tag == 32) {
         parse_data1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data1_)));
          set_has_data1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data2;
        break;
      }

      // optional uint32 data2 = 5;
      case 5: {
        if (tag == 40) {
         parse_data2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data2_)));
          set_has_data2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.stMessageBoxChatUserPmd_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.stMessageBoxChatUserPmd_S)
  return false;
#undef DO_
}

void stMessageBoxChatUserPmd_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.stMessageBoxChatUserPmd_S)
  // optional string buttons = 1;
  if (has_buttons()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buttons().data(), this->buttons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buttons");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->buttons(), output);
  }

  // optional string szInfo = 2;
  if (has_szinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szinfo().data(), this->szinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szinfo(), output);
  }

  // optional uint32 data0 = 3;
  if (has_data0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data0(), output);
  }

  // optional uint32 data1 = 4;
  if (has_data1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data1(), output);
  }

  // optional uint32 data2 = 5;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.stMessageBoxChatUserPmd_S)
}

::google::protobuf::uint8* stMessageBoxChatUserPmd_S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.stMessageBoxChatUserPmd_S)
  // optional string buttons = 1;
  if (has_buttons()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buttons().data(), this->buttons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buttons");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->buttons(), target);
  }

  // optional string szInfo = 2;
  if (has_szinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->szinfo().data(), this->szinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "szinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szinfo(), target);
  }

  // optional uint32 data0 = 3;
  if (has_data0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data0(), target);
  }

  // optional uint32 data1 = 4;
  if (has_data1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->data1(), target);
  }

  // optional uint32 data2 = 5;
  if (has_data2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.stMessageBoxChatUserPmd_S)
  return target;
}

int stMessageBoxChatUserPmd_S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string buttons = 1;
    if (has_buttons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buttons());
    }

    // optional string szInfo = 2;
    if (has_szinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szinfo());
    }

    // optional uint32 data0 = 3;
    if (has_data0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data0());
    }

    // optional uint32 data1 = 4;
    if (has_data1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data1());
    }

    // optional uint32 data2 = 5;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMessageBoxChatUserPmd_S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMessageBoxChatUserPmd_S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMessageBoxChatUserPmd_S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMessageBoxChatUserPmd_S::MergeFrom(const stMessageBoxChatUserPmd_S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buttons()) {
      set_buttons(from.buttons());
    }
    if (from.has_szinfo()) {
      set_szinfo(from.szinfo());
    }
    if (from.has_data0()) {
      set_data0(from.data0());
    }
    if (from.has_data1()) {
      set_data1(from.data1());
    }
    if (from.has_data2()) {
      set_data2(from.data2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMessageBoxChatUserPmd_S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMessageBoxChatUserPmd_S::CopyFrom(const stMessageBoxChatUserPmd_S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMessageBoxChatUserPmd_S::IsInitialized() const {

  return true;
}

void stMessageBoxChatUserPmd_S::Swap(stMessageBoxChatUserPmd_S* other) {
  if (other != this) {
    std::swap(buttons_, other->buttons_);
    std::swap(szinfo_, other->szinfo_);
    std::swap(data0_, other->data0_);
    std::swap(data1_, other->data1_);
    std::swap(data2_, other->data2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMessageBoxChatUserPmd_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMessageBoxChatUserPmd_S_descriptor_;
  metadata.reflection = stMessageBoxChatUserPmd_S_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
