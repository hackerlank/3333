// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unilightclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "unilightclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pmd {

namespace {

const ::google::protobuf::Descriptor* Any_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Any_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpPackageReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpPackageReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestZoneList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestZoneList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSelectZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSelectZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSelectZoneReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSelectZoneReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlatTokenLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlatTokenLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlatTokenLoginReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlatTokenLoginReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_unilightclient_2eproto() {
  protobuf_AddDesc_unilightclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "unilightclient.proto");
  GOOGLE_CHECK(file != NULL);
  Any_descriptor_ = file->message_type(0);
  static const int Any_offsets_[1] = {
  };
  Any_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Any_descriptor_,
      Any::default_instance_,
      Any_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Any, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Any));
  HttpPackage_descriptor_ = file->message_type(1);
  static const int HttpPackage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, do__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, unigame_plat_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, unigame_plat_timestamp_),
  };
  HttpPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpPackage_descriptor_,
      HttpPackage::default_instance_,
      HttpPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpPackage));
  HttpPackageReturn_descriptor_ = file->message_type(2);
  static const int HttpPackageReturn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackageReturn, do__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackageReturn, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackageReturn, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackageReturn, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackageReturn, errno_),
  };
  HttpPackageReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpPackageReturn_descriptor_,
      HttpPackageReturn::default_instance_,
      HttpPackageReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackageReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpPackageReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpPackageReturn));
  RequestZoneList_descriptor_ = file->message_type(3);
  static const int RequestZoneList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestZoneList, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestZoneList, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestZoneList, zonelist_),
  };
  RequestZoneList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestZoneList_descriptor_,
      RequestZoneList::default_instance_,
      RequestZoneList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestZoneList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestZoneList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestZoneList));
  RequestSelectZone_descriptor_ = file->message_type(4);
  static const int RequestSelectZone_offsets_[1] = {
  };
  RequestSelectZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSelectZone_descriptor_,
      RequestSelectZone::default_instance_,
      RequestSelectZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSelectZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSelectZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSelectZone));
  RequestSelectZoneReturn_descriptor_ = file->message_type(5);
  static const int RequestSelectZoneReturn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSelectZoneReturn, gatewayurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSelectZoneReturn, separatezoneuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSelectZoneReturn, uid_),
  };
  RequestSelectZoneReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSelectZoneReturn_descriptor_,
      RequestSelectZoneReturn::default_instance_,
      RequestSelectZoneReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSelectZoneReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSelectZoneReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSelectZoneReturn));
  PlatTokenLogin_descriptor_ = file->message_type(6);
  static const int PlatTokenLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLogin, platinfo_),
  };
  PlatTokenLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlatTokenLogin_descriptor_,
      PlatTokenLogin::default_instance_,
      PlatTokenLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlatTokenLogin));
  PlatTokenLoginReturn_descriptor_ = file->message_type(7);
  static const int PlatTokenLoginReturn_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, platinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, unigame_plat_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, unigame_plat_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, unigame_plat_login_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, timezone_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, timezone_offset_),
  };
  PlatTokenLoginReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlatTokenLoginReturn_descriptor_,
      PlatTokenLoginReturn::default_instance_,
      PlatTokenLoginReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlatTokenLoginReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlatTokenLoginReturn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_unilightclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Any_descriptor_, &Any::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpPackage_descriptor_, &HttpPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpPackageReturn_descriptor_, &HttpPackageReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestZoneList_descriptor_, &RequestZoneList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSelectZone_descriptor_, &RequestSelectZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSelectZoneReturn_descriptor_, &RequestSelectZoneReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlatTokenLogin_descriptor_, &PlatTokenLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlatTokenLoginReturn_descriptor_, &PlatTokenLoginReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_unilightclient_2eproto() {
  delete Any::default_instance_;
  delete Any_reflection_;
  delete HttpPackage::default_instance_;
  delete HttpPackage_reflection_;
  delete HttpPackageReturn::default_instance_;
  delete HttpPackageReturn_reflection_;
  delete RequestZoneList::default_instance_;
  delete RequestZoneList_reflection_;
  delete RequestSelectZone::default_instance_;
  delete RequestSelectZone_reflection_;
  delete RequestSelectZoneReturn::default_instance_;
  delete RequestSelectZoneReturn_reflection_;
  delete PlatTokenLogin::default_instance_;
  delete PlatTokenLogin_reflection_;
  delete PlatTokenLoginReturn::default_instance_;
  delete PlatTokenLoginReturn_reflection_;
}

void protobuf_AddDesc_unilightclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Pmd::protobuf_AddDesc_pmd_2eproto();
  ::Pmd::protobuf_AddDesc_logincommand_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024unilightclient.proto\022\003Pmd\032\tpmd.proto\032\022"
    "logincommand.proto\"\005\n\003Any\"\247\001\n\013HttpPackag"
    "e\022\n\n\002do\030\001 \002(\t\022\026\n\004data\030\002 \002(\0132\010.Pmd.Any\022\016\n"
    "\006gameid\030\003 \002(\r\022\016\n\006zoneid\030\004 \002(\r\022\013\n\003uid\030\005 \001"
    "(\t\022\013\n\003sid\030\006 \001(\t\022\032\n\022unigame_plat_login\030\007 "
    "\001(\t\022\036\n\026unigame_plat_timestamp\030\010 \002(\004\"{\n\021H"
    "ttpPackageReturn\022\n\n\002do\030\001 \002(\t\022\026\n\004data\030\002 \002"
    "(\0132\010.Pmd.Any\022\016\n\006gameid\030\003 \002(\r\022\016\n\006zoneid\030\004"
    " \001(\r\022\"\n\005errno\030\007 \001(\0162\023.Pmd.HttpReturnCode"
    "\"T\n\017RequestZoneList\022\020\n\010gamename\030\001 \001(\t\022\016\n"
    "\006gameid\030\002 \002(\r\022\037\n\010zonelist\030\003 \003(\0132\r.Pmd.Zo"
    "neInfo\"\023\n\021RequestSelectZone\"S\n\027RequestSe"
    "lectZoneReturn\022\022\n\ngatewayurl\030\001 \002(\t\022\027\n\017se"
    "paratezoneuid\030\002 \001(\010\022\013\n\003uid\030\003 \001(\004\"1\n\016Plat"
    "TokenLogin\022\037\n\010platinfo\030\001 \002(\0132\r.Pmd.PlatI"
    "nfo\"\330\001\n\024PlatTokenLoginReturn\022\037\n\010platinfo"
    "\030\001 \001(\0132\r.Pmd.PlatInfo\022\013\n\003uid\030\003 \002(\t\022\013\n\003si"
    "d\030\004 \002(\t\022\030\n\020unigame_plat_key\030\005 \002(\t\022\032\n\022uni"
    "game_plat_login\030\006 \002(\t\022\037\n\027unigame_plat_lo"
    "gin_life\030\007 \002(\r\022\025\n\rtimezone_name\030\010 \001(\t\022\027\n"
    "\017timezone_offset\030\t \002(\005", 822);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "unilightclient.proto", &protobuf_RegisterTypes);
  Any::default_instance_ = new Any();
  HttpPackage::default_instance_ = new HttpPackage();
  HttpPackageReturn::default_instance_ = new HttpPackageReturn();
  RequestZoneList::default_instance_ = new RequestZoneList();
  RequestSelectZone::default_instance_ = new RequestSelectZone();
  RequestSelectZoneReturn::default_instance_ = new RequestSelectZoneReturn();
  PlatTokenLogin::default_instance_ = new PlatTokenLogin();
  PlatTokenLoginReturn::default_instance_ = new PlatTokenLoginReturn();
  Any::default_instance_->InitAsDefaultInstance();
  HttpPackage::default_instance_->InitAsDefaultInstance();
  HttpPackageReturn::default_instance_->InitAsDefaultInstance();
  RequestZoneList::default_instance_->InitAsDefaultInstance();
  RequestSelectZone::default_instance_->InitAsDefaultInstance();
  RequestSelectZoneReturn::default_instance_->InitAsDefaultInstance();
  PlatTokenLogin::default_instance_->InitAsDefaultInstance();
  PlatTokenLoginReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_unilightclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_unilightclient_2eproto {
  StaticDescriptorInitializer_unilightclient_2eproto() {
    protobuf_AddDesc_unilightclient_2eproto();
  }
} static_descriptor_initializer_unilightclient_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Any::Any()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.Any)
}

void Any::InitAsDefaultInstance() {
}

Any::Any(const Any& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.Any)
}

void Any::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Any::~Any() {
  // @@protoc_insertion_point(destructor:Pmd.Any)
  SharedDtor();
}

void Any::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Any::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Any::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Any_descriptor_;
}

const Any& Any::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unilightclient_2eproto();
  return *default_instance_;
}

Any* Any::default_instance_ = NULL;

Any* Any::New() const {
  return new Any;
}

void Any::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Any::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.Any)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.Any)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.Any)
  return false;
#undef DO_
}

void Any::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.Any)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.Any)
}

::google::protobuf::uint8* Any::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.Any)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.Any)
  return target;
}

int Any::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Any::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Any* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Any*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Any::MergeFrom(const Any& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Any::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Any::CopyFrom(const Any& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {

  return true;
}

void Any::Swap(Any* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Any::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Any_descriptor_;
  metadata.reflection = Any_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HttpPackage::kDoFieldNumber;
const int HttpPackage::kDataFieldNumber;
const int HttpPackage::kGameidFieldNumber;
const int HttpPackage::kZoneidFieldNumber;
const int HttpPackage::kUidFieldNumber;
const int HttpPackage::kSidFieldNumber;
const int HttpPackage::kUnigamePlatLoginFieldNumber;
const int HttpPackage::kUnigamePlatTimestampFieldNumber;
#endif  // !_MSC_VER

HttpPackage::HttpPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.HttpPackage)
}

void HttpPackage::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::Any*>(&::Pmd::Any::default_instance());
}

HttpPackage::HttpPackage(const HttpPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.HttpPackage)
}

void HttpPackage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  do__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  gameid_ = 0u;
  zoneid_ = 0u;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpPackage::~HttpPackage() {
  // @@protoc_insertion_point(destructor:Pmd.HttpPackage)
  SharedDtor();
}

void HttpPackage::SharedDtor() {
  if (do__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete do__;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (unigame_plat_login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unigame_plat_login_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void HttpPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpPackage_descriptor_;
}

const HttpPackage& HttpPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unilightclient_2eproto();
  return *default_instance_;
}

HttpPackage* HttpPackage::default_instance_ = NULL;

HttpPackage* HttpPackage::New() const {
  return new HttpPackage;
}

void HttpPackage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HttpPackage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gameid_, zoneid_);
    if (has_do_()) {
      if (do__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        do__->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::Any::Clear();
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sid_->clear();
      }
    }
    if (has_unigame_plat_login()) {
      if (unigame_plat_login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unigame_plat_login_->clear();
      }
    }
    unigame_plat_timestamp_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.HttpPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string do = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->do_().data(), this->do_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "do_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .Pmd.Any data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 3;
      case 3: {
        if (tag == 24) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uid;
        break;
      }

      // optional string uid = 5;
      case 5: {
        if (tag == 42) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sid;
        break;
      }

      // optional string sid = 6;
      case 6: {
        if (tag == 50) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_unigame_plat_login;
        break;
      }

      // optional string unigame_plat_login = 7;
      case 7: {
        if (tag == 58) {
         parse_unigame_plat_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unigame_plat_login().data(), this->unigame_plat_login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unigame_plat_login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_unigame_plat_timestamp;
        break;
      }

      // required uint64 unigame_plat_timestamp = 8;
      case 8: {
        if (tag == 64) {
         parse_unigame_plat_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unigame_plat_timestamp_)));
          set_has_unigame_plat_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.HttpPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.HttpPackage)
  return false;
#undef DO_
}

void HttpPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.HttpPackage)
  // required string do = 1;
  if (has_do_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_().data(), this->do_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "do_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->do_(), output);
  }

  // required .Pmd.Any data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // required uint32 gameid = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uid(), output);
  }

  // optional string sid = 6;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sid(), output);
  }

  // optional string unigame_plat_login = 7;
  if (has_unigame_plat_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unigame_plat_login().data(), this->unigame_plat_login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unigame_plat_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->unigame_plat_login(), output);
  }

  // required uint64 unigame_plat_timestamp = 8;
  if (has_unigame_plat_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->unigame_plat_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.HttpPackage)
}

::google::protobuf::uint8* HttpPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.HttpPackage)
  // required string do = 1;
  if (has_do_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_().data(), this->do_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "do_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->do_(), target);
  }

  // required .Pmd.Any data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // required uint32 gameid = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gameid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uid(), target);
  }

  // optional string sid = 6;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sid(), target);
  }

  // optional string unigame_plat_login = 7;
  if (has_unigame_plat_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unigame_plat_login().data(), this->unigame_plat_login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unigame_plat_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->unigame_plat_login(), target);
  }

  // required uint64 unigame_plat_timestamp = 8;
  if (has_unigame_plat_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->unigame_plat_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.HttpPackage)
  return target;
}

int HttpPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string do = 1;
    if (has_do_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_());
    }

    // required .Pmd.Any data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // required uint32 gameid = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // optional string unigame_plat_login = 7;
    if (has_unigame_plat_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unigame_plat_login());
    }

    // required uint64 unigame_plat_timestamp = 8;
    if (has_unigame_plat_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unigame_plat_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpPackage::MergeFrom(const HttpPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_do_()) {
      set_do_(from.do_());
    }
    if (from.has_data()) {
      mutable_data()->::Pmd::Any::MergeFrom(from.data());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_unigame_plat_login()) {
      set_unigame_plat_login(from.unigame_plat_login());
    }
    if (from.has_unigame_plat_timestamp()) {
      set_unigame_plat_timestamp(from.unigame_plat_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpPackage::CopyFrom(const HttpPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000008f) != 0x0000008f) return false;

  return true;
}

void HttpPackage::Swap(HttpPackage* other) {
  if (other != this) {
    std::swap(do__, other->do__);
    std::swap(data_, other->data_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(uid_, other->uid_);
    std::swap(sid_, other->sid_);
    std::swap(unigame_plat_login_, other->unigame_plat_login_);
    std::swap(unigame_plat_timestamp_, other->unigame_plat_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpPackage_descriptor_;
  metadata.reflection = HttpPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HttpPackageReturn::kDoFieldNumber;
const int HttpPackageReturn::kDataFieldNumber;
const int HttpPackageReturn::kGameidFieldNumber;
const int HttpPackageReturn::kZoneidFieldNumber;
const int HttpPackageReturn::kErrnoFieldNumber;
#endif  // !_MSC_VER

HttpPackageReturn::HttpPackageReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.HttpPackageReturn)
}

void HttpPackageReturn::InitAsDefaultInstance() {
  data_ = const_cast< ::Pmd::Any*>(&::Pmd::Any::default_instance());
}

HttpPackageReturn::HttpPackageReturn(const HttpPackageReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.HttpPackageReturn)
}

void HttpPackageReturn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  do__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  gameid_ = 0u;
  zoneid_ = 0u;
  errno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpPackageReturn::~HttpPackageReturn() {
  // @@protoc_insertion_point(destructor:Pmd.HttpPackageReturn)
  SharedDtor();
}

void HttpPackageReturn::SharedDtor() {
  if (do__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete do__;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void HttpPackageReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpPackageReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpPackageReturn_descriptor_;
}

const HttpPackageReturn& HttpPackageReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unilightclient_2eproto();
  return *default_instance_;
}

HttpPackageReturn* HttpPackageReturn::default_instance_ = NULL;

HttpPackageReturn* HttpPackageReturn::New() const {
  return new HttpPackageReturn;
}

void HttpPackageReturn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HttpPackageReturn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gameid_, errno_);
    if (has_do_()) {
      if (do__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        do__->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::Pmd::Any::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpPackageReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.HttpPackageReturn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string do = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->do_().data(), this->do_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "do_");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .Pmd.Any data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 3;
      case 3: {
        if (tag == 24) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_errno;
        break;
      }

      // optional .Pmd.HttpReturnCode errno = 7;
      case 7: {
        if (tag == 56) {
         parse_errno:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Pmd::HttpReturnCode_IsValid(value)) {
            set_errno(static_cast< ::Pmd::HttpReturnCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.HttpPackageReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.HttpPackageReturn)
  return false;
#undef DO_
}

void HttpPackageReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.HttpPackageReturn)
  // required string do = 1;
  if (has_do_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_().data(), this->do_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "do_");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->do_(), output);
  }

  // required .Pmd.Any data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // required uint32 gameid = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional .Pmd.HttpReturnCode errno = 7;
  if (has_errno()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->errno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.HttpPackageReturn)
}

::google::protobuf::uint8* HttpPackageReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.HttpPackageReturn)
  // required string do = 1;
  if (has_do_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_().data(), this->do_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "do_");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->do_(), target);
  }

  // required .Pmd.Any data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // required uint32 gameid = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gameid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional .Pmd.HttpReturnCode errno = 7;
  if (has_errno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->errno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.HttpPackageReturn)
  return target;
}

int HttpPackageReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string do = 1;
    if (has_do_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_());
    }

    // required .Pmd.Any data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // required uint32 gameid = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional .Pmd.HttpReturnCode errno = 7;
    if (has_errno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpPackageReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpPackageReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpPackageReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpPackageReturn::MergeFrom(const HttpPackageReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_do_()) {
      set_do_(from.do_());
    }
    if (from.has_data()) {
      mutable_data()->::Pmd::Any::MergeFrom(from.data());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_errno()) {
      set_errno(from.errno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpPackageReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpPackageReturn::CopyFrom(const HttpPackageReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpPackageReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HttpPackageReturn::Swap(HttpPackageReturn* other) {
  if (other != this) {
    std::swap(do__, other->do__);
    std::swap(data_, other->data_);
    std::swap(gameid_, other->gameid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(errno_, other->errno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpPackageReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpPackageReturn_descriptor_;
  metadata.reflection = HttpPackageReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestZoneList::kGamenameFieldNumber;
const int RequestZoneList::kGameidFieldNumber;
const int RequestZoneList::kZonelistFieldNumber;
#endif  // !_MSC_VER

RequestZoneList::RequestZoneList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestZoneList)
}

void RequestZoneList::InitAsDefaultInstance() {
}

RequestZoneList::RequestZoneList(const RequestZoneList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestZoneList)
}

void RequestZoneList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestZoneList::~RequestZoneList() {
  // @@protoc_insertion_point(destructor:Pmd.RequestZoneList)
  SharedDtor();
}

void RequestZoneList::SharedDtor() {
  if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gamename_;
  }
  if (this != default_instance_) {
  }
}

void RequestZoneList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestZoneList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestZoneList_descriptor_;
}

const RequestZoneList& RequestZoneList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unilightclient_2eproto();
  return *default_instance_;
}

RequestZoneList* RequestZoneList::default_instance_ = NULL;

RequestZoneList* RequestZoneList::New() const {
  return new RequestZoneList;
}

void RequestZoneList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gamename_->clear();
      }
    }
    gameid_ = 0u;
  }
  zonelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestZoneList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestZoneList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gamename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gamename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // required uint32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zonelist;
        break;
      }

      // repeated .Pmd.ZoneInfo zonelist = 3;
      case 3: {
        if (tag == 26) {
         parse_zonelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zonelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zonelist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestZoneList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestZoneList)
  return false;
#undef DO_
}

void RequestZoneList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestZoneList)
  // optional string gamename = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameid(), output);
  }

  // repeated .Pmd.ZoneInfo zonelist = 3;
  for (int i = 0; i < this->zonelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zonelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestZoneList)
}

::google::protobuf::uint8* RequestZoneList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestZoneList)
  // optional string gamename = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gamename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamename(), target);
  }

  // required uint32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameid(), target);
  }

  // repeated .Pmd.ZoneInfo zonelist = 3;
  for (int i = 0; i < this->zonelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zonelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestZoneList)
  return target;
}

int RequestZoneList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gamename = 1;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }

    // required uint32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

  }
  // repeated .Pmd.ZoneInfo zonelist = 3;
  total_size += 1 * this->zonelist_size();
  for (int i = 0; i < this->zonelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zonelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestZoneList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestZoneList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestZoneList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestZoneList::MergeFrom(const RequestZoneList& from) {
  GOOGLE_CHECK_NE(&from, this);
  zonelist_.MergeFrom(from.zonelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestZoneList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestZoneList::CopyFrom(const RequestZoneList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestZoneList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->zonelist())) return false;
  return true;
}

void RequestZoneList::Swap(RequestZoneList* other) {
  if (other != this) {
    std::swap(gamename_, other->gamename_);
    std::swap(gameid_, other->gameid_);
    zonelist_.Swap(&other->zonelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestZoneList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestZoneList_descriptor_;
  metadata.reflection = RequestZoneList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestSelectZone::RequestSelectZone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestSelectZone)
}

void RequestSelectZone::InitAsDefaultInstance() {
}

RequestSelectZone::RequestSelectZone(const RequestSelectZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestSelectZone)
}

void RequestSelectZone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSelectZone::~RequestSelectZone() {
  // @@protoc_insertion_point(destructor:Pmd.RequestSelectZone)
  SharedDtor();
}

void RequestSelectZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSelectZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSelectZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSelectZone_descriptor_;
}

const RequestSelectZone& RequestSelectZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unilightclient_2eproto();
  return *default_instance_;
}

RequestSelectZone* RequestSelectZone::default_instance_ = NULL;

RequestSelectZone* RequestSelectZone::New() const {
  return new RequestSelectZone;
}

void RequestSelectZone::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSelectZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestSelectZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestSelectZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestSelectZone)
  return false;
#undef DO_
}

void RequestSelectZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestSelectZone)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestSelectZone)
}

::google::protobuf::uint8* RequestSelectZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestSelectZone)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestSelectZone)
  return target;
}

int RequestSelectZone::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSelectZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSelectZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSelectZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSelectZone::MergeFrom(const RequestSelectZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSelectZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSelectZone::CopyFrom(const RequestSelectZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSelectZone::IsInitialized() const {

  return true;
}

void RequestSelectZone::Swap(RequestSelectZone* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSelectZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSelectZone_descriptor_;
  metadata.reflection = RequestSelectZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSelectZoneReturn::kGatewayurlFieldNumber;
const int RequestSelectZoneReturn::kSeparatezoneuidFieldNumber;
const int RequestSelectZoneReturn::kUidFieldNumber;
#endif  // !_MSC_VER

RequestSelectZoneReturn::RequestSelectZoneReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.RequestSelectZoneReturn)
}

void RequestSelectZoneReturn::InitAsDefaultInstance() {
}

RequestSelectZoneReturn::RequestSelectZoneReturn(const RequestSelectZoneReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.RequestSelectZoneReturn)
}

void RequestSelectZoneReturn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gatewayurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  separatezoneuid_ = false;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSelectZoneReturn::~RequestSelectZoneReturn() {
  // @@protoc_insertion_point(destructor:Pmd.RequestSelectZoneReturn)
  SharedDtor();
}

void RequestSelectZoneReturn::SharedDtor() {
  if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gatewayurl_;
  }
  if (this != default_instance_) {
  }
}

void RequestSelectZoneReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSelectZoneReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSelectZoneReturn_descriptor_;
}

const RequestSelectZoneReturn& RequestSelectZoneReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unilightclient_2eproto();
  return *default_instance_;
}

RequestSelectZoneReturn* RequestSelectZoneReturn::default_instance_ = NULL;

RequestSelectZoneReturn* RequestSelectZoneReturn::New() const {
  return new RequestSelectZoneReturn;
}

void RequestSelectZoneReturn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestSelectZoneReturn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, separatezoneuid_);
    if (has_gatewayurl()) {
      if (gatewayurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gatewayurl_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSelectZoneReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.RequestSelectZoneReturn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gatewayurl = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gatewayurl().data(), this->gatewayurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gatewayurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_separatezoneuid;
        break;
      }

      // optional bool separatezoneuid = 2;
      case 2: {
        if (tag == 16) {
         parse_separatezoneuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &separatezoneuid_)));
          set_has_separatezoneuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.RequestSelectZoneReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.RequestSelectZoneReturn)
  return false;
#undef DO_
}

void RequestSelectZoneReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.RequestSelectZoneReturn)
  // required string gatewayurl = 1;
  if (has_gatewayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurl().data(), this->gatewayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gatewayurl(), output);
  }

  // optional bool separatezoneuid = 2;
  if (has_separatezoneuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->separatezoneuid(), output);
  }

  // optional uint64 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.RequestSelectZoneReturn)
}

::google::protobuf::uint8* RequestSelectZoneReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.RequestSelectZoneReturn)
  // required string gatewayurl = 1;
  if (has_gatewayurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gatewayurl().data(), this->gatewayurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gatewayurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gatewayurl(), target);
  }

  // optional bool separatezoneuid = 2;
  if (has_separatezoneuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->separatezoneuid(), target);
  }

  // optional uint64 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.RequestSelectZoneReturn)
  return target;
}

int RequestSelectZoneReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gatewayurl = 1;
    if (has_gatewayurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayurl());
    }

    // optional bool separatezoneuid = 2;
    if (has_separatezoneuid()) {
      total_size += 1 + 1;
    }

    // optional uint64 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSelectZoneReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSelectZoneReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSelectZoneReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSelectZoneReturn::MergeFrom(const RequestSelectZoneReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gatewayurl()) {
      set_gatewayurl(from.gatewayurl());
    }
    if (from.has_separatezoneuid()) {
      set_separatezoneuid(from.separatezoneuid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSelectZoneReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSelectZoneReturn::CopyFrom(const RequestSelectZoneReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSelectZoneReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestSelectZoneReturn::Swap(RequestSelectZoneReturn* other) {
  if (other != this) {
    std::swap(gatewayurl_, other->gatewayurl_);
    std::swap(separatezoneuid_, other->separatezoneuid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSelectZoneReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSelectZoneReturn_descriptor_;
  metadata.reflection = RequestSelectZoneReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlatTokenLogin::kPlatinfoFieldNumber;
#endif  // !_MSC_VER

PlatTokenLogin::PlatTokenLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PlatTokenLogin)
}

void PlatTokenLogin::InitAsDefaultInstance() {
  platinfo_ = const_cast< ::Pmd::PlatInfo*>(&::Pmd::PlatInfo::default_instance());
}

PlatTokenLogin::PlatTokenLogin(const PlatTokenLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PlatTokenLogin)
}

void PlatTokenLogin::SharedCtor() {
  _cached_size_ = 0;
  platinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlatTokenLogin::~PlatTokenLogin() {
  // @@protoc_insertion_point(destructor:Pmd.PlatTokenLogin)
  SharedDtor();
}

void PlatTokenLogin::SharedDtor() {
  if (this != default_instance_) {
    delete platinfo_;
  }
}

void PlatTokenLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlatTokenLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatTokenLogin_descriptor_;
}

const PlatTokenLogin& PlatTokenLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unilightclient_2eproto();
  return *default_instance_;
}

PlatTokenLogin* PlatTokenLogin::default_instance_ = NULL;

PlatTokenLogin* PlatTokenLogin::New() const {
  return new PlatTokenLogin;
}

void PlatTokenLogin::Clear() {
  if (has_platinfo()) {
    if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlatTokenLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PlatTokenLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Pmd.PlatInfo platinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PlatTokenLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PlatTokenLogin)
  return false;
#undef DO_
}

void PlatTokenLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PlatTokenLogin)
  // required .Pmd.PlatInfo platinfo = 1;
  if (has_platinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->platinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PlatTokenLogin)
}

::google::protobuf::uint8* PlatTokenLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PlatTokenLogin)
  // required .Pmd.PlatInfo platinfo = 1;
  if (has_platinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->platinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PlatTokenLogin)
  return target;
}

int PlatTokenLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Pmd.PlatInfo platinfo = 1;
    if (has_platinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlatTokenLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlatTokenLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlatTokenLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlatTokenLogin::MergeFrom(const PlatTokenLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platinfo()) {
      mutable_platinfo()->::Pmd::PlatInfo::MergeFrom(from.platinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlatTokenLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatTokenLogin::CopyFrom(const PlatTokenLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatTokenLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_platinfo()) {
    if (!this->platinfo().IsInitialized()) return false;
  }
  return true;
}

void PlatTokenLogin::Swap(PlatTokenLogin* other) {
  if (other != this) {
    std::swap(platinfo_, other->platinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlatTokenLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlatTokenLogin_descriptor_;
  metadata.reflection = PlatTokenLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlatTokenLoginReturn::kPlatinfoFieldNumber;
const int PlatTokenLoginReturn::kUidFieldNumber;
const int PlatTokenLoginReturn::kSidFieldNumber;
const int PlatTokenLoginReturn::kUnigamePlatKeyFieldNumber;
const int PlatTokenLoginReturn::kUnigamePlatLoginFieldNumber;
const int PlatTokenLoginReturn::kUnigamePlatLoginLifeFieldNumber;
const int PlatTokenLoginReturn::kTimezoneNameFieldNumber;
const int PlatTokenLoginReturn::kTimezoneOffsetFieldNumber;
#endif  // !_MSC_VER

PlatTokenLoginReturn::PlatTokenLoginReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pmd.PlatTokenLoginReturn)
}

void PlatTokenLoginReturn::InitAsDefaultInstance() {
  platinfo_ = const_cast< ::Pmd::PlatInfo*>(&::Pmd::PlatInfo::default_instance());
}

PlatTokenLoginReturn::PlatTokenLoginReturn(const PlatTokenLoginReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Pmd.PlatTokenLoginReturn)
}

void PlatTokenLoginReturn::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platinfo_ = NULL;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unigame_plat_login_life_ = 0u;
  timezone_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlatTokenLoginReturn::~PlatTokenLoginReturn() {
  // @@protoc_insertion_point(destructor:Pmd.PlatTokenLoginReturn)
  SharedDtor();
}

void PlatTokenLoginReturn::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sid_;
  }
  if (unigame_plat_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unigame_plat_key_;
  }
  if (unigame_plat_login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unigame_plat_login_;
  }
  if (timezone_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete timezone_name_;
  }
  if (this != default_instance_) {
    delete platinfo_;
  }
}

void PlatTokenLoginReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlatTokenLoginReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlatTokenLoginReturn_descriptor_;
}

const PlatTokenLoginReturn& PlatTokenLoginReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_unilightclient_2eproto();
  return *default_instance_;
}

PlatTokenLoginReturn* PlatTokenLoginReturn::default_instance_ = NULL;

PlatTokenLoginReturn* PlatTokenLoginReturn::New() const {
  return new PlatTokenLoginReturn;
}

void PlatTokenLoginReturn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlatTokenLoginReturn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(unigame_plat_login_life_, timezone_offset_);
    if (has_platinfo()) {
      if (platinfo_ != NULL) platinfo_->::Pmd::PlatInfo::Clear();
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sid_->clear();
      }
    }
    if (has_unigame_plat_key()) {
      if (unigame_plat_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unigame_plat_key_->clear();
      }
    }
    if (has_unigame_plat_login()) {
      if (unigame_plat_login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unigame_plat_login_->clear();
      }
    }
    if (has_timezone_name()) {
      if (timezone_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        timezone_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlatTokenLoginReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pmd.PlatTokenLoginReturn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Pmd.PlatInfo platinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_platinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // required string uid = 3;
      case 3: {
        if (tag == 26) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sid;
        break;
      }

      // required string sid = 4;
      case 4: {
        if (tag == 34) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unigame_plat_key;
        break;
      }

      // required string unigame_plat_key = 5;
      case 5: {
        if (tag == 42) {
         parse_unigame_plat_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unigame_plat_key().data(), this->unigame_plat_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unigame_plat_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_unigame_plat_login;
        break;
      }

      // required string unigame_plat_login = 6;
      case 6: {
        if (tag == 50) {
         parse_unigame_plat_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unigame_plat_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unigame_plat_login().data(), this->unigame_plat_login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unigame_plat_login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_unigame_plat_login_life;
        break;
      }

      // required uint32 unigame_plat_login_life = 7;
      case 7: {
        if (tag == 56) {
         parse_unigame_plat_login_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unigame_plat_login_life_)));
          set_has_unigame_plat_login_life();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_timezone_name;
        break;
      }

      // optional string timezone_name = 8;
      case 8: {
        if (tag == 66) {
         parse_timezone_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone_name().data(), this->timezone_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "timezone_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timezone_offset;
        break;
      }

      // required int32 timezone_offset = 9;
      case 9: {
        if (tag == 72) {
         parse_timezone_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
          set_has_timezone_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pmd.PlatTokenLoginReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pmd.PlatTokenLoginReturn)
  return false;
#undef DO_
}

void PlatTokenLoginReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pmd.PlatTokenLoginReturn)
  // optional .Pmd.PlatInfo platinfo = 1;
  if (has_platinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->platinfo(), output);
  }

  // required string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uid(), output);
  }

  // required string sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sid(), output);
  }

  // required string unigame_plat_key = 5;
  if (has_unigame_plat_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unigame_plat_key().data(), this->unigame_plat_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unigame_plat_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unigame_plat_key(), output);
  }

  // required string unigame_plat_login = 6;
  if (has_unigame_plat_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unigame_plat_login().data(), this->unigame_plat_login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unigame_plat_login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->unigame_plat_login(), output);
  }

  // required uint32 unigame_plat_login_life = 7;
  if (has_unigame_plat_login_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unigame_plat_login_life(), output);
  }

  // optional string timezone_name = 8;
  if (has_timezone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone_name().data(), this->timezone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timezone_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->timezone_name(), output);
  }

  // required int32 timezone_offset = 9;
  if (has_timezone_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->timezone_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Pmd.PlatTokenLoginReturn)
}

::google::protobuf::uint8* PlatTokenLoginReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pmd.PlatTokenLoginReturn)
  // optional .Pmd.PlatInfo platinfo = 1;
  if (has_platinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->platinfo(), target);
  }

  // required string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  // required string sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sid(), target);
  }

  // required string unigame_plat_key = 5;
  if (has_unigame_plat_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unigame_plat_key().data(), this->unigame_plat_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unigame_plat_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unigame_plat_key(), target);
  }

  // required string unigame_plat_login = 6;
  if (has_unigame_plat_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unigame_plat_login().data(), this->unigame_plat_login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unigame_plat_login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unigame_plat_login(), target);
  }

  // required uint32 unigame_plat_login_life = 7;
  if (has_unigame_plat_login_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->unigame_plat_login_life(), target);
  }

  // optional string timezone_name = 8;
  if (has_timezone_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone_name().data(), this->timezone_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "timezone_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timezone_name(), target);
  }

  // required int32 timezone_offset = 9;
  if (has_timezone_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->timezone_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pmd.PlatTokenLoginReturn)
  return target;
}

int PlatTokenLoginReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Pmd.PlatInfo platinfo = 1;
    if (has_platinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->platinfo());
    }

    // required string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // required string sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // required string unigame_plat_key = 5;
    if (has_unigame_plat_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unigame_plat_key());
    }

    // required string unigame_plat_login = 6;
    if (has_unigame_plat_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unigame_plat_login());
    }

    // required uint32 unigame_plat_login_life = 7;
    if (has_unigame_plat_login_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unigame_plat_login_life());
    }

    // optional string timezone_name = 8;
    if (has_timezone_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone_name());
    }

    // required int32 timezone_offset = 9;
    if (has_timezone_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlatTokenLoginReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlatTokenLoginReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlatTokenLoginReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlatTokenLoginReturn::MergeFrom(const PlatTokenLoginReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platinfo()) {
      mutable_platinfo()->::Pmd::PlatInfo::MergeFrom(from.platinfo());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_unigame_plat_key()) {
      set_unigame_plat_key(from.unigame_plat_key());
    }
    if (from.has_unigame_plat_login()) {
      set_unigame_plat_login(from.unigame_plat_login());
    }
    if (from.has_unigame_plat_login_life()) {
      set_unigame_plat_login_life(from.unigame_plat_login_life());
    }
    if (from.has_timezone_name()) {
      set_timezone_name(from.timezone_name());
    }
    if (from.has_timezone_offset()) {
      set_timezone_offset(from.timezone_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlatTokenLoginReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlatTokenLoginReturn::CopyFrom(const PlatTokenLoginReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatTokenLoginReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000be) != 0x000000be) return false;

  if (has_platinfo()) {
    if (!this->platinfo().IsInitialized()) return false;
  }
  return true;
}

void PlatTokenLoginReturn::Swap(PlatTokenLoginReturn* other) {
  if (other != this) {
    std::swap(platinfo_, other->platinfo_);
    std::swap(uid_, other->uid_);
    std::swap(sid_, other->sid_);
    std::swap(unigame_plat_key_, other->unigame_plat_key_);
    std::swap(unigame_plat_login_, other->unigame_plat_login_);
    std::swap(unigame_plat_login_life_, other->unigame_plat_login_life_);
    std::swap(timezone_name_, other->timezone_name_);
    std::swap(timezone_offset_, other->timezone_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlatTokenLoginReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlatTokenLoginReturn_descriptor_;
  metadata.reflection = PlatTokenLoginReturn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

// @@protoc_insertion_point(global_scope)
