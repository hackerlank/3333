// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitorpmd.proto

#ifndef PROTOBUF_monitorpmd_2eproto__INCLUDED
#define PROTOBUF_monitorpmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Pmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_monitorpmd_2eproto();
void protobuf_AssignDesc_monitorpmd_2eproto();
void protobuf_ShutdownFile_monitorpmd_2eproto();

class Monitor;
class StartUpGameRequestMonitorPmd_C;
class StartUpGameReturnMonitorPmd_S;
class SupportGameZoneListSdkPmd_C;
class ServerState;
class GameZoneServerState;
class RefreshServerStateListMonitorPmd_S;
class RefreshServerStateMonitorPmd_CSC;
class StRequestNewbeeCardMonitorUserCmd_C;
class StServerShutdownMonitorUserCmd_S;
class StServerStartupMonitorUserCmd_S;
class StServerListMonitorUserCmd_S;
class StMonitorServerMessageMonitorUserCmd_S;
class ClientCmdExitInfo;
class StGameClientCmdExitMonitorUserCmd_S;
class StErrorLogMonitorUserCmd_S;
class QueryPackageCodeMonitorPmd_CS;
class RequestUsePackageCodeMonitorPmd_CS;
class RequestInsertPackageCodeMonitorPmd_CS;
class RequestResetPackageCodeMonitorPmd_CS;

enum Monitor_Param {
  Monitor_Param_StartUpGameRequestMonitorPmd_C = 1,
  Monitor_Param_StartUpGameReturnMonitorPmd_S = 2,
  Monitor_Param_SupportGameZoneListSdkPmd_C = 3,
  Monitor_Param_RefreshServerStateListMonitorPmd_S = 4,
  Monitor_Param_RefreshServerStateMonitorPmd_CSC = 5,
  Monitor_Param_StRequestNewbeeCardMonitorUserCmd_C = 6,
  Monitor_Param_StServerShutdownMonitorUserCmd_S = 7,
  Monitor_Param_StServerStartupMonitorUserCmd_S = 8,
  Monitor_Param_StServerListMonitorUserCmd_S = 9,
  Monitor_Param_StMonitorServerMessageMonitorUserCmd_S = 10,
  Monitor_Param_StGameClientCmdExitMonitorUserCmd_S = 12,
  Monitor_Param_StErrorLogMonitorUserCmd_S = 13,
  Monitor_Param_QueryPackageCodeMonitorPmd_CS = 14,
  Monitor_Param_RequestUsePackageCodeMonitorPmd_CS = 15,
  Monitor_Param_RequestInsertPackageCodeMonitorPmd_CS = 16,
  Monitor_Param_RequestResetPackageCodeMonitorPmd_CS = 17
};
bool Monitor_Param_IsValid(int value);
const Monitor_Param Monitor_Param_Param_MIN = Monitor_Param_StartUpGameRequestMonitorPmd_C;
const Monitor_Param Monitor_Param_Param_MAX = Monitor_Param_RequestResetPackageCodeMonitorPmd_CS;
const int Monitor_Param_Param_ARRAYSIZE = Monitor_Param_Param_MAX + 1;

const ::google::protobuf::EnumDescriptor* Monitor_Param_descriptor();
inline const ::std::string& Monitor_Param_Name(Monitor_Param value) {
  return ::google::protobuf::internal::NameOfEnum(
    Monitor_Param_descriptor(), value);
}
inline bool Monitor_Param_Parse(
    const ::std::string& name, Monitor_Param* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Monitor_Param>(
    Monitor_Param_descriptor(), name, value);
}
enum ServerInfoState {
  ServerInfoState_DoubleExp = 1,
  ServerInfoState_DoubleExp_Task = 2
};
bool ServerInfoState_IsValid(int value);
const ServerInfoState ServerInfoState_MIN = ServerInfoState_DoubleExp;
const ServerInfoState ServerInfoState_MAX = ServerInfoState_DoubleExp_Task;
const int ServerInfoState_ARRAYSIZE = ServerInfoState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerInfoState_descriptor();
inline const ::std::string& ServerInfoState_Name(ServerInfoState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerInfoState_descriptor(), value);
}
inline bool ServerInfoState_Parse(
    const ::std::string& name, ServerInfoState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerInfoState>(
    ServerInfoState_descriptor(), name, value);
}
enum MonitorServerMessageType {
  MonitorServerMessageType_Info = 0,
  MonitorServerMessageType_Warning = 1,
  MonitorServerMessageType_Error = 2,
  MonitorServerMessageType_Notify = 3
};
bool MonitorServerMessageType_IsValid(int value);
const MonitorServerMessageType MonitorServerMessageType_MIN = MonitorServerMessageType_Info;
const MonitorServerMessageType MonitorServerMessageType_MAX = MonitorServerMessageType_Notify;
const int MonitorServerMessageType_ARRAYSIZE = MonitorServerMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MonitorServerMessageType_descriptor();
inline const ::std::string& MonitorServerMessageType_Name(MonitorServerMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonitorServerMessageType_descriptor(), value);
}
inline bool MonitorServerMessageType_Parse(
    const ::std::string& name, MonitorServerMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonitorServerMessageType>(
    MonitorServerMessageType_descriptor(), name, value);
}
// ===================================================================

class Monitor : public ::google::protobuf::Message {
 public:
  Monitor();
  virtual ~Monitor();

  Monitor(const Monitor& from);

  inline Monitor& operator=(const Monitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Monitor& default_instance();

  void Swap(Monitor* other);

  // implements Message ----------------------------------------------

  Monitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Monitor& from);
  void MergeFrom(const Monitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Monitor_Param Param;
  static const Param StartUpGameRequestMonitorPmd_C = Monitor_Param_StartUpGameRequestMonitorPmd_C;
  static const Param StartUpGameReturnMonitorPmd_S = Monitor_Param_StartUpGameReturnMonitorPmd_S;
  static const Param SupportGameZoneListSdkPmd_C = Monitor_Param_SupportGameZoneListSdkPmd_C;
  static const Param RefreshServerStateListMonitorPmd_S = Monitor_Param_RefreshServerStateListMonitorPmd_S;
  static const Param RefreshServerStateMonitorPmd_CSC = Monitor_Param_RefreshServerStateMonitorPmd_CSC;
  static const Param StRequestNewbeeCardMonitorUserCmd_C = Monitor_Param_StRequestNewbeeCardMonitorUserCmd_C;
  static const Param StServerShutdownMonitorUserCmd_S = Monitor_Param_StServerShutdownMonitorUserCmd_S;
  static const Param StServerStartupMonitorUserCmd_S = Monitor_Param_StServerStartupMonitorUserCmd_S;
  static const Param StServerListMonitorUserCmd_S = Monitor_Param_StServerListMonitorUserCmd_S;
  static const Param StMonitorServerMessageMonitorUserCmd_S = Monitor_Param_StMonitorServerMessageMonitorUserCmd_S;
  static const Param StGameClientCmdExitMonitorUserCmd_S = Monitor_Param_StGameClientCmdExitMonitorUserCmd_S;
  static const Param StErrorLogMonitorUserCmd_S = Monitor_Param_StErrorLogMonitorUserCmd_S;
  static const Param QueryPackageCodeMonitorPmd_CS = Monitor_Param_QueryPackageCodeMonitorPmd_CS;
  static const Param RequestUsePackageCodeMonitorPmd_CS = Monitor_Param_RequestUsePackageCodeMonitorPmd_CS;
  static const Param RequestInsertPackageCodeMonitorPmd_CS = Monitor_Param_RequestInsertPackageCodeMonitorPmd_CS;
  static const Param RequestResetPackageCodeMonitorPmd_CS = Monitor_Param_RequestResetPackageCodeMonitorPmd_CS;
  static inline bool Param_IsValid(int value) {
    return Monitor_Param_IsValid(value);
  }
  static const Param Param_MIN =
    Monitor_Param_Param_MIN;
  static const Param Param_MAX =
    Monitor_Param_Param_MAX;
  static const int Param_ARRAYSIZE =
    Monitor_Param_Param_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Param_descriptor() {
    return Monitor_Param_descriptor();
  }
  static inline const ::std::string& Param_Name(Param value) {
    return Monitor_Param_Name(value);
  }
  static inline bool Param_Parse(const ::std::string& name,
      Param* value) {
    return Monitor_Param_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Pmd.Monitor)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static Monitor* default_instance_;
};
// -------------------------------------------------------------------

class StartUpGameRequestMonitorPmd_C : public ::google::protobuf::Message {
 public:
  StartUpGameRequestMonitorPmd_C();
  virtual ~StartUpGameRequestMonitorPmd_C();

  StartUpGameRequestMonitorPmd_C(const StartUpGameRequestMonitorPmd_C& from);

  inline StartUpGameRequestMonitorPmd_C& operator=(const StartUpGameRequestMonitorPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartUpGameRequestMonitorPmd_C& default_instance();

  void Swap(StartUpGameRequestMonitorPmd_C* other);

  // implements Message ----------------------------------------------

  StartUpGameRequestMonitorPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartUpGameRequestMonitorPmd_C& from);
  void MergeFrom(const StartUpGameRequestMonitorPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required uint32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional string compress = 3;
  inline bool has_compress() const;
  inline void clear_compress();
  static const int kCompressFieldNumber = 3;
  inline const ::std::string& compress() const;
  inline void set_compress(const ::std::string& value);
  inline void set_compress(const char* value);
  inline void set_compress(const char* value, size_t size);
  inline ::std::string* mutable_compress();
  inline ::std::string* release_compress();
  inline void set_allocated_compress(::std::string* compress);

  // optional string encrypt = 4;
  inline bool has_encrypt() const;
  inline void clear_encrypt();
  static const int kEncryptFieldNumber = 4;
  inline const ::std::string& encrypt() const;
  inline void set_encrypt(const ::std::string& value);
  inline void set_encrypt(const char* value);
  inline void set_encrypt(const char* value, size_t size);
  inline ::std::string* mutable_encrypt();
  inline ::std::string* release_encrypt();
  inline void set_allocated_encrypt(::std::string* encrypt);

  // optional string encryptkey = 5;
  inline bool has_encryptkey() const;
  inline void clear_encryptkey();
  static const int kEncryptkeyFieldNumber = 5;
  inline const ::std::string& encryptkey() const;
  inline void set_encryptkey(const ::std::string& value);
  inline void set_encryptkey(const char* value);
  inline void set_encryptkey(const char* value, size_t size);
  inline ::std::string* mutable_encryptkey();
  inline ::std::string* release_encryptkey();
  inline void set_allocated_encryptkey(::std::string* encryptkey);

  // @@protoc_insertion_point(class_scope:Pmd.StartUpGameRequestMonitorPmd_C)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_compress();
  inline void clear_has_compress();
  inline void set_has_encrypt();
  inline void clear_has_encrypt();
  inline void set_has_encryptkey();
  inline void clear_has_encryptkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* compress_;
  ::std::string* encrypt_;
  ::std::string* encryptkey_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StartUpGameRequestMonitorPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class StartUpGameReturnMonitorPmd_S : public ::google::protobuf::Message {
 public:
  StartUpGameReturnMonitorPmd_S();
  virtual ~StartUpGameReturnMonitorPmd_S();

  StartUpGameReturnMonitorPmd_S(const StartUpGameReturnMonitorPmd_S& from);

  inline StartUpGameReturnMonitorPmd_S& operator=(const StartUpGameReturnMonitorPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartUpGameReturnMonitorPmd_S& default_instance();

  void Swap(StartUpGameReturnMonitorPmd_S* other);

  // implements Message ----------------------------------------------

  StartUpGameReturnMonitorPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartUpGameReturnMonitorPmd_S& from);
  void MergeFrom(const StartUpGameReturnMonitorPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional string retdesc = 2;
  inline bool has_retdesc() const;
  inline void clear_retdesc();
  static const int kRetdescFieldNumber = 2;
  inline const ::std::string& retdesc() const;
  inline void set_retdesc(const ::std::string& value);
  inline void set_retdesc(const char* value);
  inline void set_retdesc(const char* value, size_t size);
  inline ::std::string* mutable_retdesc();
  inline ::std::string* release_retdesc();
  inline void set_allocated_retdesc(::std::string* retdesc);

  // @@protoc_insertion_point(class_scope:Pmd.StartUpGameReturnMonitorPmd_S)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_retdesc();
  inline void clear_has_retdesc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* retdesc_;
  bool ret_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StartUpGameReturnMonitorPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class SupportGameZoneListSdkPmd_C : public ::google::protobuf::Message {
 public:
  SupportGameZoneListSdkPmd_C();
  virtual ~SupportGameZoneListSdkPmd_C();

  SupportGameZoneListSdkPmd_C(const SupportGameZoneListSdkPmd_C& from);

  inline SupportGameZoneListSdkPmd_C& operator=(const SupportGameZoneListSdkPmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SupportGameZoneListSdkPmd_C& default_instance();

  void Swap(SupportGameZoneListSdkPmd_C* other);

  // implements Message ----------------------------------------------

  SupportGameZoneListSdkPmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SupportGameZoneListSdkPmd_C& from);
  void MergeFrom(const SupportGameZoneListSdkPmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pmd.GameZoneInfo gamezonelist = 1;
  inline int gamezonelist_size() const;
  inline void clear_gamezonelist();
  static const int kGamezonelistFieldNumber = 1;
  inline const ::Pmd::GameZoneInfo& gamezonelist(int index) const;
  inline ::Pmd::GameZoneInfo* mutable_gamezonelist(int index);
  inline ::Pmd::GameZoneInfo* add_gamezonelist();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneInfo >&
      gamezonelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneInfo >*
      mutable_gamezonelist();

  // @@protoc_insertion_point(class_scope:Pmd.SupportGameZoneListSdkPmd_C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneInfo > gamezonelist_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static SupportGameZoneListSdkPmd_C* default_instance_;
};
// -------------------------------------------------------------------

class ServerState : public ::google::protobuf::Message {
 public:
  ServerState();
  virtual ~ServerState();

  ServerState(const ServerState& from);

  inline ServerState& operator=(const ServerState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerState& default_instance();

  void Swap(ServerState* other);

  // implements Message ----------------------------------------------

  ServerState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerState& from);
  void MergeFrom(const ServerState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // required string addr = 4;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 4;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // optional uint32 onlinenum = 5;
  inline bool has_onlinenum() const;
  inline void clear_onlinenum();
  static const int kOnlinenumFieldNumber = 5;
  inline ::google::protobuf::uint32 onlinenum() const;
  inline void set_onlinenum(::google::protobuf::uint32 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Pmd.ServerState)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_onlinenum();
  inline void clear_has_onlinenum();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::std::string* addr_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 onlinenum_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static ServerState* default_instance_;
};
// -------------------------------------------------------------------

class GameZoneServerState : public ::google::protobuf::Message {
 public:
  GameZoneServerState();
  virtual ~GameZoneServerState();

  GameZoneServerState(const GameZoneServerState& from);

  inline GameZoneServerState& operator=(const GameZoneServerState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameZoneServerState& default_instance();

  void Swap(GameZoneServerState* other);

  // implements Message ----------------------------------------------

  GameZoneServerState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameZoneServerState& from);
  void MergeFrom(const GameZoneServerState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Pmd.GameZoneInfo gamezone = 1;
  inline bool has_gamezone() const;
  inline void clear_gamezone();
  static const int kGamezoneFieldNumber = 1;
  inline const ::Pmd::GameZoneInfo& gamezone() const;
  inline ::Pmd::GameZoneInfo* mutable_gamezone();
  inline ::Pmd::GameZoneInfo* release_gamezone();
  inline void set_allocated_gamezone(::Pmd::GameZoneInfo* gamezone);

  // repeated .Pmd.ServerState statelist = 2;
  inline int statelist_size() const;
  inline void clear_statelist();
  static const int kStatelistFieldNumber = 2;
  inline const ::Pmd::ServerState& statelist(int index) const;
  inline ::Pmd::ServerState* mutable_statelist(int index);
  inline ::Pmd::ServerState* add_statelist();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ServerState >&
      statelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::ServerState >*
      mutable_statelist();

  // @@protoc_insertion_point(class_scope:Pmd.GameZoneServerState)
 private:
  inline void set_has_gamezone();
  inline void clear_has_gamezone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::GameZoneInfo* gamezone_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::ServerState > statelist_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static GameZoneServerState* default_instance_;
};
// -------------------------------------------------------------------

class RefreshServerStateListMonitorPmd_S : public ::google::protobuf::Message {
 public:
  RefreshServerStateListMonitorPmd_S();
  virtual ~RefreshServerStateListMonitorPmd_S();

  RefreshServerStateListMonitorPmd_S(const RefreshServerStateListMonitorPmd_S& from);

  inline RefreshServerStateListMonitorPmd_S& operator=(const RefreshServerStateListMonitorPmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshServerStateListMonitorPmd_S& default_instance();

  void Swap(RefreshServerStateListMonitorPmd_S* other);

  // implements Message ----------------------------------------------

  RefreshServerStateListMonitorPmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshServerStateListMonitorPmd_S& from);
  void MergeFrom(const RefreshServerStateListMonitorPmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pmd.GameZoneServerState statelist = 1;
  inline int statelist_size() const;
  inline void clear_statelist();
  static const int kStatelistFieldNumber = 1;
  inline const ::Pmd::GameZoneServerState& statelist(int index) const;
  inline ::Pmd::GameZoneServerState* mutable_statelist(int index);
  inline ::Pmd::GameZoneServerState* add_statelist();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneServerState >&
      statelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneServerState >*
      mutable_statelist();

  // optional bool reset = 2;
  inline bool has_reset() const;
  inline void clear_reset();
  static const int kResetFieldNumber = 2;
  inline bool reset() const;
  inline void set_reset(bool value);

  // @@protoc_insertion_point(class_scope:Pmd.RefreshServerStateListMonitorPmd_S)
 private:
  inline void set_has_reset();
  inline void clear_has_reset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneServerState > statelist_;
  bool reset_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static RefreshServerStateListMonitorPmd_S* default_instance_;
};
// -------------------------------------------------------------------

class RefreshServerStateMonitorPmd_CSC : public ::google::protobuf::Message {
 public:
  RefreshServerStateMonitorPmd_CSC();
  virtual ~RefreshServerStateMonitorPmd_CSC();

  RefreshServerStateMonitorPmd_CSC(const RefreshServerStateMonitorPmd_CSC& from);

  inline RefreshServerStateMonitorPmd_CSC& operator=(const RefreshServerStateMonitorPmd_CSC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshServerStateMonitorPmd_CSC& default_instance();

  void Swap(RefreshServerStateMonitorPmd_CSC* other);

  // implements Message ----------------------------------------------

  RefreshServerStateMonitorPmd_CSC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshServerStateMonitorPmd_CSC& from);
  void MergeFrom(const RefreshServerStateMonitorPmd_CSC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Pmd.GameZoneServerState state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline const ::Pmd::GameZoneServerState& state() const;
  inline ::Pmd::GameZoneServerState* mutable_state();
  inline ::Pmd::GameZoneServerState* release_state();
  inline void set_allocated_state(::Pmd::GameZoneServerState* state);

  // optional bool reset = 2;
  inline bool has_reset() const;
  inline void clear_reset();
  static const int kResetFieldNumber = 2;
  inline bool reset() const;
  inline void set_reset(bool value);

  // @@protoc_insertion_point(class_scope:Pmd.RefreshServerStateMonitorPmd_CSC)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_reset();
  inline void clear_has_reset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::GameZoneServerState* state_;
  bool reset_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static RefreshServerStateMonitorPmd_CSC* default_instance_;
};
// -------------------------------------------------------------------

class StRequestNewbeeCardMonitorUserCmd_C : public ::google::protobuf::Message {
 public:
  StRequestNewbeeCardMonitorUserCmd_C();
  virtual ~StRequestNewbeeCardMonitorUserCmd_C();

  StRequestNewbeeCardMonitorUserCmd_C(const StRequestNewbeeCardMonitorUserCmd_C& from);

  inline StRequestNewbeeCardMonitorUserCmd_C& operator=(const StRequestNewbeeCardMonitorUserCmd_C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StRequestNewbeeCardMonitorUserCmd_C& default_instance();

  void Swap(StRequestNewbeeCardMonitorUserCmd_C* other);

  // implements Message ----------------------------------------------

  StRequestNewbeeCardMonitorUserCmd_C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StRequestNewbeeCardMonitorUserCmd_C& from);
  void MergeFrom(const StRequestNewbeeCardMonitorUserCmd_C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);

  // optional string keystring = 2;
  inline bool has_keystring() const;
  inline void clear_keystring();
  static const int kKeystringFieldNumber = 2;
  inline const ::std::string& keystring() const;
  inline void set_keystring(const ::std::string& value);
  inline void set_keystring(const char* value);
  inline void set_keystring(const char* value, size_t size);
  inline ::std::string* mutable_keystring();
  inline ::std::string* release_keystring();
  inline void set_allocated_keystring(::std::string* keystring);

  // optional uint32 mutextype = 3;
  inline bool has_mutextype() const;
  inline void clear_mutextype();
  static const int kMutextypeFieldNumber = 3;
  inline ::google::protobuf::uint32 mutextype() const;
  inline void set_mutextype(::google::protobuf::uint32 value);

  // optional uint32 accid = 4;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 4;
  inline ::google::protobuf::uint32 accid() const;
  inline void set_accid(::google::protobuf::uint32 value);

  // optional uint64 mobile = 5;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 5;
  inline ::google::protobuf::uint64 mobile() const;
  inline void set_mobile(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Pmd.StRequestNewbeeCardMonitorUserCmd_C)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_keystring();
  inline void clear_has_keystring();
  inline void set_has_mutextype();
  inline void clear_has_mutextype();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_mobile();
  inline void clear_has_mobile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* keystring_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 mutextype_;
  ::google::protobuf::uint64 mobile_;
  ::google::protobuf::uint32 accid_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StRequestNewbeeCardMonitorUserCmd_C* default_instance_;
};
// -------------------------------------------------------------------

class StServerShutdownMonitorUserCmd_S : public ::google::protobuf::Message {
 public:
  StServerShutdownMonitorUserCmd_S();
  virtual ~StServerShutdownMonitorUserCmd_S();

  StServerShutdownMonitorUserCmd_S(const StServerShutdownMonitorUserCmd_S& from);

  inline StServerShutdownMonitorUserCmd_S& operator=(const StServerShutdownMonitorUserCmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StServerShutdownMonitorUserCmd_S& default_instance();

  void Swap(StServerShutdownMonitorUserCmd_S* other);

  // implements Message ----------------------------------------------

  StServerShutdownMonitorUserCmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StServerShutdownMonitorUserCmd_S& from);
  void MergeFrom(const StServerShutdownMonitorUserCmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Pmd.ServerInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Pmd::ServerInfo& data() const;
  inline ::Pmd::ServerInfo* mutable_data();
  inline ::Pmd::ServerInfo* release_data();
  inline void set_allocated_data(::Pmd::ServerInfo* data);

  // @@protoc_insertion_point(class_scope:Pmd.StServerShutdownMonitorUserCmd_S)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::ServerInfo* data_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StServerShutdownMonitorUserCmd_S* default_instance_;
};
// -------------------------------------------------------------------

class StServerStartupMonitorUserCmd_S : public ::google::protobuf::Message {
 public:
  StServerStartupMonitorUserCmd_S();
  virtual ~StServerStartupMonitorUserCmd_S();

  StServerStartupMonitorUserCmd_S(const StServerStartupMonitorUserCmd_S& from);

  inline StServerStartupMonitorUserCmd_S& operator=(const StServerStartupMonitorUserCmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StServerStartupMonitorUserCmd_S& default_instance();

  void Swap(StServerStartupMonitorUserCmd_S* other);

  // implements Message ----------------------------------------------

  StServerStartupMonitorUserCmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StServerStartupMonitorUserCmd_S& from);
  void MergeFrom(const StServerStartupMonitorUserCmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Pmd.ServerInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Pmd::ServerInfo& data() const;
  inline ::Pmd::ServerInfo* mutable_data();
  inline ::Pmd::ServerInfo* release_data();
  inline void set_allocated_data(::Pmd::ServerInfo* data);

  // @@protoc_insertion_point(class_scope:Pmd.StServerStartupMonitorUserCmd_S)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::ServerInfo* data_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StServerStartupMonitorUserCmd_S* default_instance_;
};
// -------------------------------------------------------------------

class StServerListMonitorUserCmd_S : public ::google::protobuf::Message {
 public:
  StServerListMonitorUserCmd_S();
  virtual ~StServerListMonitorUserCmd_S();

  StServerListMonitorUserCmd_S(const StServerListMonitorUserCmd_S& from);

  inline StServerListMonitorUserCmd_S& operator=(const StServerListMonitorUserCmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StServerListMonitorUserCmd_S& default_instance();

  void Swap(StServerListMonitorUserCmd_S* other);

  // implements Message ----------------------------------------------

  StServerListMonitorUserCmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StServerListMonitorUserCmd_S& from);
  void MergeFrom(const StServerListMonitorUserCmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Pmd.ServerInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Pmd::ServerInfo& data(int index) const;
  inline ::Pmd::ServerInfo* mutable_data(int index);
  inline ::Pmd::ServerInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ServerInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pmd::ServerInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Pmd.StServerListMonitorUserCmd_S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Pmd::ServerInfo > data_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StServerListMonitorUserCmd_S* default_instance_;
};
// -------------------------------------------------------------------

class StMonitorServerMessageMonitorUserCmd_S : public ::google::protobuf::Message {
 public:
  StMonitorServerMessageMonitorUserCmd_S();
  virtual ~StMonitorServerMessageMonitorUserCmd_S();

  StMonitorServerMessageMonitorUserCmd_S(const StMonitorServerMessageMonitorUserCmd_S& from);

  inline StMonitorServerMessageMonitorUserCmd_S& operator=(const StMonitorServerMessageMonitorUserCmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StMonitorServerMessageMonitorUserCmd_S& default_instance();

  void Swap(StMonitorServerMessageMonitorUserCmd_S* other);

  // implements Message ----------------------------------------------

  StMonitorServerMessageMonitorUserCmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StMonitorServerMessageMonitorUserCmd_S& from);
  void MergeFrom(const StMonitorServerMessageMonitorUserCmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gmid = 1;
  inline bool has_gmid() const;
  inline void clear_gmid();
  static const int kGmidFieldNumber = 1;
  inline ::google::protobuf::uint32 gmid() const;
  inline void set_gmid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Pmd.StMonitorServerMessageMonitorUserCmd_S)
 private:
  inline void set_has_gmid();
  inline void clear_has_gmid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gmid_;
  ::google::protobuf::uint32 type_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StMonitorServerMessageMonitorUserCmd_S* default_instance_;
};
// -------------------------------------------------------------------

class ClientCmdExitInfo : public ::google::protobuf::Message {
 public:
  ClientCmdExitInfo();
  virtual ~ClientCmdExitInfo();

  ClientCmdExitInfo(const ClientCmdExitInfo& from);

  inline ClientCmdExitInfo& operator=(const ClientCmdExitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientCmdExitInfo& default_instance();

  void Swap(ClientCmdExitInfo* other);

  // implements Message ----------------------------------------------

  ClientCmdExitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientCmdExitInfo& from);
  void MergeFrom(const ClientCmdExitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 zone = 2;
  inline bool has_zone() const;
  inline void clear_zone();
  static const int kZoneFieldNumber = 2;
  inline ::google::protobuf::uint32 zone() const;
  inline void set_zone(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 byCmd = 4;
  inline bool has_bycmd() const;
  inline void clear_bycmd();
  static const int kByCmdFieldNumber = 4;
  inline ::google::protobuf::uint32 bycmd() const;
  inline void set_bycmd(::google::protobuf::uint32 value);

  // optional uint32 byParam = 5;
  inline bool has_byparam() const;
  inline void clear_byparam();
  static const int kByParamFieldNumber = 5;
  inline ::google::protobuf::uint32 byparam() const;
  inline void set_byparam(::google::protobuf::uint32 value);

  // optional uint32 nettype = 6;
  inline bool has_nettype() const;
  inline void clear_nettype();
  static const int kNettypeFieldNumber = 6;
  inline ::google::protobuf::uint32 nettype() const;
  inline void set_nettype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.ClientCmdExitInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_zone();
  inline void clear_has_zone();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_bycmd();
  inline void clear_has_bycmd();
  inline void set_has_byparam();
  inline void clear_has_byparam();
  inline void set_has_nettype();
  inline void clear_has_nettype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 zone_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 bycmd_;
  ::google::protobuf::uint32 byparam_;
  ::google::protobuf::uint32 nettype_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static ClientCmdExitInfo* default_instance_;
};
// -------------------------------------------------------------------

class StGameClientCmdExitMonitorUserCmd_S : public ::google::protobuf::Message {
 public:
  StGameClientCmdExitMonitorUserCmd_S();
  virtual ~StGameClientCmdExitMonitorUserCmd_S();

  StGameClientCmdExitMonitorUserCmd_S(const StGameClientCmdExitMonitorUserCmd_S& from);

  inline StGameClientCmdExitMonitorUserCmd_S& operator=(const StGameClientCmdExitMonitorUserCmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StGameClientCmdExitMonitorUserCmd_S& default_instance();

  void Swap(StGameClientCmdExitMonitorUserCmd_S* other);

  // implements Message ----------------------------------------------

  StGameClientCmdExitMonitorUserCmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StGameClientCmdExitMonitorUserCmd_S& from);
  void MergeFrom(const StGameClientCmdExitMonitorUserCmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Pmd.ClientCmdExitInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Pmd::ClientCmdExitInfo& data() const;
  inline ::Pmd::ClientCmdExitInfo* mutable_data();
  inline ::Pmd::ClientCmdExitInfo* release_data();
  inline void set_allocated_data(::Pmd::ClientCmdExitInfo* data);

  // @@protoc_insertion_point(class_scope:Pmd.StGameClientCmdExitMonitorUserCmd_S)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Pmd::ClientCmdExitInfo* data_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StGameClientCmdExitMonitorUserCmd_S* default_instance_;
};
// -------------------------------------------------------------------

class StErrorLogMonitorUserCmd_S : public ::google::protobuf::Message {
 public:
  StErrorLogMonitorUserCmd_S();
  virtual ~StErrorLogMonitorUserCmd_S();

  StErrorLogMonitorUserCmd_S(const StErrorLogMonitorUserCmd_S& from);

  inline StErrorLogMonitorUserCmd_S& operator=(const StErrorLogMonitorUserCmd_S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StErrorLogMonitorUserCmd_S& default_instance();

  void Swap(StErrorLogMonitorUserCmd_S* other);

  // implements Message ----------------------------------------------

  StErrorLogMonitorUserCmd_S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StErrorLogMonitorUserCmd_S& from);
  void MergeFrom(const StErrorLogMonitorUserCmd_S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string logger = 1;
  inline bool has_logger() const;
  inline void clear_logger();
  static const int kLoggerFieldNumber = 1;
  inline const ::std::string& logger() const;
  inline void set_logger(const ::std::string& value);
  inline void set_logger(const char* value);
  inline void set_logger(const char* value, size_t size);
  inline ::std::string* mutable_logger();
  inline ::std::string* release_logger();
  inline void set_allocated_logger(::std::string* logger);

  // optional .Pmd.GameZoneInfo gamezone = 2;
  inline bool has_gamezone() const;
  inline void clear_gamezone();
  static const int kGamezoneFieldNumber = 2;
  inline const ::Pmd::GameZoneInfo& gamezone() const;
  inline ::Pmd::GameZoneInfo* mutable_gamezone();
  inline ::Pmd::GameZoneInfo* release_gamezone();
  inline void set_allocated_gamezone(::Pmd::GameZoneInfo* gamezone);

  // optional string remoteaddr = 3;
  inline bool has_remoteaddr() const;
  inline void clear_remoteaddr();
  static const int kRemoteaddrFieldNumber = 3;
  inline const ::std::string& remoteaddr() const;
  inline void set_remoteaddr(const ::std::string& value);
  inline void set_remoteaddr(const char* value);
  inline void set_remoteaddr(const char* value, size_t size);
  inline ::std::string* mutable_remoteaddr();
  inline ::std::string* release_remoteaddr();
  inline void set_allocated_remoteaddr(::std::string* remoteaddr);

  // @@protoc_insertion_point(class_scope:Pmd.StErrorLogMonitorUserCmd_S)
 private:
  inline void set_has_logger();
  inline void clear_has_logger();
  inline void set_has_gamezone();
  inline void clear_has_gamezone();
  inline void set_has_remoteaddr();
  inline void clear_has_remoteaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* logger_;
  ::Pmd::GameZoneInfo* gamezone_;
  ::std::string* remoteaddr_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static StErrorLogMonitorUserCmd_S* default_instance_;
};
// -------------------------------------------------------------------

class QueryPackageCodeMonitorPmd_CS : public ::google::protobuf::Message {
 public:
  QueryPackageCodeMonitorPmd_CS();
  virtual ~QueryPackageCodeMonitorPmd_CS();

  QueryPackageCodeMonitorPmd_CS(const QueryPackageCodeMonitorPmd_CS& from);

  inline QueryPackageCodeMonitorPmd_CS& operator=(const QueryPackageCodeMonitorPmd_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPackageCodeMonitorPmd_CS& default_instance();

  void Swap(QueryPackageCodeMonitorPmd_CS* other);

  // implements Message ----------------------------------------------

  QueryPackageCodeMonitorPmd_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPackageCodeMonitorPmd_CS& from);
  void MergeFrom(const QueryPackageCodeMonitorPmd_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string codeid = 1;
  inline bool has_codeid() const;
  inline void clear_codeid();
  static const int kCodeidFieldNumber = 1;
  inline const ::std::string& codeid() const;
  inline void set_codeid(const ::std::string& value);
  inline void set_codeid(const char* value);
  inline void set_codeid(const char* value, size_t size);
  inline ::std::string* mutable_codeid();
  inline ::std::string* release_codeid();
  inline void set_allocated_codeid(::std::string* codeid);

  // required uint64 accid = 2;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 2;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // optional uint64 createtime = 5;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 5;
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // optional uint64 usedtime = 6;
  inline bool has_usedtime() const;
  inline void clear_usedtime();
  static const int kUsedtimeFieldNumber = 6;
  inline ::google::protobuf::uint64 usedtime() const;
  inline void set_usedtime(::google::protobuf::uint64 value);

  // optional uint32 usedgameid = 7;
  inline bool has_usedgameid() const;
  inline void clear_usedgameid();
  static const int kUsedgameidFieldNumber = 7;
  inline ::google::protobuf::uint32 usedgameid() const;
  inline void set_usedgameid(::google::protobuf::uint32 value);

  // optional uint32 usedzoneid = 8;
  inline bool has_usedzoneid() const;
  inline void clear_usedzoneid();
  static const int kUsedzoneidFieldNumber = 8;
  inline ::google::protobuf::uint32 usedzoneid() const;
  inline void set_usedzoneid(::google::protobuf::uint32 value);

  // optional uint64 useduid = 9;
  inline bool has_useduid() const;
  inline void clear_useduid();
  static const int kUseduidFieldNumber = 9;
  inline ::google::protobuf::uint64 useduid() const;
  inline void set_useduid(::google::protobuf::uint64 value);

  // optional string extdata = 10;
  inline bool has_extdata() const;
  inline void clear_extdata();
  static const int kExtdataFieldNumber = 10;
  inline const ::std::string& extdata() const;
  inline void set_extdata(const ::std::string& value);
  inline void set_extdata(const char* value);
  inline void set_extdata(const char* value, size_t size);
  inline ::std::string* mutable_extdata();
  inline ::std::string* release_extdata();
  inline void set_allocated_extdata(::std::string* extdata);

  // optional uint32 codetype = 11;
  inline bool has_codetype() const;
  inline void clear_codetype();
  static const int kCodetypeFieldNumber = 11;
  inline ::google::protobuf::uint32 codetype() const;
  inline void set_codetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.QueryPackageCodeMonitorPmd_CS)
 private:
  inline void set_has_codeid();
  inline void clear_has_codeid();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_usedtime();
  inline void clear_has_usedtime();
  inline void set_has_usedgameid();
  inline void clear_has_usedgameid();
  inline void set_has_usedzoneid();
  inline void clear_has_usedzoneid();
  inline void set_has_useduid();
  inline void clear_has_useduid();
  inline void set_has_extdata();
  inline void clear_has_extdata();
  inline void set_has_codetype();
  inline void clear_has_codetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* codeid_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint64 usedtime_;
  ::google::protobuf::uint32 usedgameid_;
  ::google::protobuf::uint32 usedzoneid_;
  ::google::protobuf::uint64 useduid_;
  ::std::string* extdata_;
  ::google::protobuf::uint32 codetype_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static QueryPackageCodeMonitorPmd_CS* default_instance_;
};
// -------------------------------------------------------------------

class RequestUsePackageCodeMonitorPmd_CS : public ::google::protobuf::Message {
 public:
  RequestUsePackageCodeMonitorPmd_CS();
  virtual ~RequestUsePackageCodeMonitorPmd_CS();

  RequestUsePackageCodeMonitorPmd_CS(const RequestUsePackageCodeMonitorPmd_CS& from);

  inline RequestUsePackageCodeMonitorPmd_CS& operator=(const RequestUsePackageCodeMonitorPmd_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestUsePackageCodeMonitorPmd_CS& default_instance();

  void Swap(RequestUsePackageCodeMonitorPmd_CS* other);

  // implements Message ----------------------------------------------

  RequestUsePackageCodeMonitorPmd_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestUsePackageCodeMonitorPmd_CS& from);
  void MergeFrom(const RequestUsePackageCodeMonitorPmd_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string codeid = 1;
  inline bool has_codeid() const;
  inline void clear_codeid();
  static const int kCodeidFieldNumber = 1;
  inline const ::std::string& codeid() const;
  inline void set_codeid(const ::std::string& value);
  inline void set_codeid(const char* value);
  inline void set_codeid(const char* value, size_t size);
  inline ::std::string* mutable_codeid();
  inline ::std::string* release_codeid();
  inline void set_allocated_codeid(::std::string* codeid);

  // required uint64 accid = 2;
  inline bool has_accid() const;
  inline void clear_accid();
  static const int kAccidFieldNumber = 2;
  inline ::google::protobuf::uint64 accid() const;
  inline void set_accid(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 createtime = 4;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 4;
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // optional uint64 usedtime = 5;
  inline bool has_usedtime() const;
  inline void clear_usedtime();
  static const int kUsedtimeFieldNumber = 5;
  inline ::google::protobuf::uint64 usedtime() const;
  inline void set_usedtime(::google::protobuf::uint64 value);

  // optional uint32 usedgameid = 6;
  inline bool has_usedgameid() const;
  inline void clear_usedgameid();
  static const int kUsedgameidFieldNumber = 6;
  inline ::google::protobuf::uint32 usedgameid() const;
  inline void set_usedgameid(::google::protobuf::uint32 value);

  // optional uint32 usedzoneid = 7;
  inline bool has_usedzoneid() const;
  inline void clear_usedzoneid();
  static const int kUsedzoneidFieldNumber = 7;
  inline ::google::protobuf::uint32 usedzoneid() const;
  inline void set_usedzoneid(::google::protobuf::uint32 value);

  // optional uint64 useduid = 8;
  inline bool has_useduid() const;
  inline void clear_useduid();
  static const int kUseduidFieldNumber = 8;
  inline ::google::protobuf::uint64 useduid() const;
  inline void set_useduid(::google::protobuf::uint64 value);

  // optional string extdata = 9;
  inline bool has_extdata() const;
  inline void clear_extdata();
  static const int kExtdataFieldNumber = 9;
  inline const ::std::string& extdata() const;
  inline void set_extdata(const ::std::string& value);
  inline void set_extdata(const char* value);
  inline void set_extdata(const char* value, size_t size);
  inline ::std::string* mutable_extdata();
  inline ::std::string* release_extdata();
  inline void set_allocated_extdata(::std::string* extdata);

  // optional uint32 codetype = 10;
  inline bool has_codetype() const;
  inline void clear_codetype();
  static const int kCodetypeFieldNumber = 10;
  inline ::google::protobuf::uint32 codetype() const;
  inline void set_codetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.RequestUsePackageCodeMonitorPmd_CS)
 private:
  inline void set_has_codeid();
  inline void clear_has_codeid();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_usedtime();
  inline void clear_has_usedtime();
  inline void set_has_usedgameid();
  inline void clear_has_usedgameid();
  inline void set_has_usedzoneid();
  inline void clear_has_usedzoneid();
  inline void set_has_useduid();
  inline void clear_has_useduid();
  inline void set_has_extdata();
  inline void clear_has_extdata();
  inline void set_has_codetype();
  inline void clear_has_codetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* codeid_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 usedgameid_;
  ::google::protobuf::uint64 usedtime_;
  ::google::protobuf::uint64 useduid_;
  ::google::protobuf::uint32 usedzoneid_;
  ::google::protobuf::uint32 codetype_;
  ::std::string* extdata_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static RequestUsePackageCodeMonitorPmd_CS* default_instance_;
};
// -------------------------------------------------------------------

class RequestInsertPackageCodeMonitorPmd_CS : public ::google::protobuf::Message {
 public:
  RequestInsertPackageCodeMonitorPmd_CS();
  virtual ~RequestInsertPackageCodeMonitorPmd_CS();

  RequestInsertPackageCodeMonitorPmd_CS(const RequestInsertPackageCodeMonitorPmd_CS& from);

  inline RequestInsertPackageCodeMonitorPmd_CS& operator=(const RequestInsertPackageCodeMonitorPmd_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestInsertPackageCodeMonitorPmd_CS& default_instance();

  void Swap(RequestInsertPackageCodeMonitorPmd_CS* other);

  // implements Message ----------------------------------------------

  RequestInsertPackageCodeMonitorPmd_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestInsertPackageCodeMonitorPmd_CS& from);
  void MergeFrom(const RequestInsertPackageCodeMonitorPmd_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string codeid = 1;
  inline bool has_codeid() const;
  inline void clear_codeid();
  static const int kCodeidFieldNumber = 1;
  inline const ::std::string& codeid() const;
  inline void set_codeid(const ::std::string& value);
  inline void set_codeid(const char* value);
  inline void set_codeid(const char* value, size_t size);
  inline ::std::string* mutable_codeid();
  inline ::std::string* release_codeid();
  inline void set_allocated_codeid(::std::string* codeid);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional string extdata = 3;
  inline bool has_extdata() const;
  inline void clear_extdata();
  static const int kExtdataFieldNumber = 3;
  inline const ::std::string& extdata() const;
  inline void set_extdata(const ::std::string& value);
  inline void set_extdata(const char* value);
  inline void set_extdata(const char* value, size_t size);
  inline ::std::string* mutable_extdata();
  inline ::std::string* release_extdata();
  inline void set_allocated_extdata(::std::string* extdata);

  // optional uint32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // optional uint64 createtime = 5;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 5;
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // optional uint64 endtime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 6;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint32 usedgameid = 7;
  inline bool has_usedgameid() const;
  inline void clear_usedgameid();
  static const int kUsedgameidFieldNumber = 7;
  inline ::google::protobuf::uint32 usedgameid() const;
  inline void set_usedgameid(::google::protobuf::uint32 value);

  // optional uint32 usedzoneid = 8;
  inline bool has_usedzoneid() const;
  inline void clear_usedzoneid();
  static const int kUsedzoneidFieldNumber = 8;
  inline ::google::protobuf::uint32 usedzoneid() const;
  inline void set_usedzoneid(::google::protobuf::uint32 value);

  // optional uint64 useduid = 9;
  inline bool has_useduid() const;
  inline void clear_useduid();
  static const int kUseduidFieldNumber = 9;
  inline ::google::protobuf::uint64 useduid() const;
  inline void set_useduid(::google::protobuf::uint64 value);

  // optional uint32 codetype = 10;
  inline bool has_codetype() const;
  inline void clear_codetype();
  static const int kCodetypeFieldNumber = 10;
  inline ::google::protobuf::uint32 codetype() const;
  inline void set_codetype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.RequestInsertPackageCodeMonitorPmd_CS)
 private:
  inline void set_has_codeid();
  inline void clear_has_codeid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_extdata();
  inline void clear_has_extdata();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_usedgameid();
  inline void clear_has_usedgameid();
  inline void set_has_usedzoneid();
  inline void clear_has_usedzoneid();
  inline void set_has_useduid();
  inline void clear_has_useduid();
  inline void set_has_codetype();
  inline void clear_has_codetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* codeid_;
  ::std::string* extdata_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint32 usedgameid_;
  ::google::protobuf::uint32 usedzoneid_;
  ::google::protobuf::uint64 useduid_;
  ::google::protobuf::uint32 codetype_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static RequestInsertPackageCodeMonitorPmd_CS* default_instance_;
};
// -------------------------------------------------------------------

class RequestResetPackageCodeMonitorPmd_CS : public ::google::protobuf::Message {
 public:
  RequestResetPackageCodeMonitorPmd_CS();
  virtual ~RequestResetPackageCodeMonitorPmd_CS();

  RequestResetPackageCodeMonitorPmd_CS(const RequestResetPackageCodeMonitorPmd_CS& from);

  inline RequestResetPackageCodeMonitorPmd_CS& operator=(const RequestResetPackageCodeMonitorPmd_CS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestResetPackageCodeMonitorPmd_CS& default_instance();

  void Swap(RequestResetPackageCodeMonitorPmd_CS* other);

  // implements Message ----------------------------------------------

  RequestResetPackageCodeMonitorPmd_CS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestResetPackageCodeMonitorPmd_CS& from);
  void MergeFrom(const RequestResetPackageCodeMonitorPmd_CS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string codeid = 1;
  inline bool has_codeid() const;
  inline void clear_codeid();
  static const int kCodeidFieldNumber = 1;
  inline const ::std::string& codeid() const;
  inline void set_codeid(const ::std::string& value);
  inline void set_codeid(const char* value);
  inline void set_codeid(const char* value, size_t size);
  inline ::std::string* mutable_codeid();
  inline ::std::string* release_codeid();
  inline void set_allocated_codeid(::std::string* codeid);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pmd.RequestResetPackageCodeMonitorPmd_CS)
 private:
  inline void set_has_codeid();
  inline void clear_has_codeid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* codeid_;
  ::google::protobuf::uint32 ret_;
  friend void  protobuf_AddDesc_monitorpmd_2eproto();
  friend void protobuf_AssignDesc_monitorpmd_2eproto();
  friend void protobuf_ShutdownFile_monitorpmd_2eproto();

  void InitAsDefaultInstance();
  static RequestResetPackageCodeMonitorPmd_CS* default_instance_;
};
// ===================================================================


// ===================================================================

// Monitor

// -------------------------------------------------------------------

// StartUpGameRequestMonitorPmd_C

// required string key = 1;
inline bool StartUpGameRequestMonitorPmd_C::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartUpGameRequestMonitorPmd_C::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& StartUpGameRequestMonitorPmd_C::key() const {
  // @@protoc_insertion_point(field_get:Pmd.StartUpGameRequestMonitorPmd_C.key)
  return *key_;
}
inline void StartUpGameRequestMonitorPmd_C::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StartUpGameRequestMonitorPmd_C.key)
}
inline void StartUpGameRequestMonitorPmd_C::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StartUpGameRequestMonitorPmd_C.key)
}
inline void StartUpGameRequestMonitorPmd_C::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StartUpGameRequestMonitorPmd_C.key)
}
inline ::std::string* StartUpGameRequestMonitorPmd_C::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StartUpGameRequestMonitorPmd_C.key)
  return key_;
}
inline ::std::string* StartUpGameRequestMonitorPmd_C::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StartUpGameRequestMonitorPmd_C::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StartUpGameRequestMonitorPmd_C.key)
}

// required uint32 version = 2;
inline bool StartUpGameRequestMonitorPmd_C::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartUpGameRequestMonitorPmd_C::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 StartUpGameRequestMonitorPmd_C::version() const {
  // @@protoc_insertion_point(field_get:Pmd.StartUpGameRequestMonitorPmd_C.version)
  return version_;
}
inline void StartUpGameRequestMonitorPmd_C::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Pmd.StartUpGameRequestMonitorPmd_C.version)
}

// optional string compress = 3;
inline bool StartUpGameRequestMonitorPmd_C::has_compress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartUpGameRequestMonitorPmd_C::set_has_compress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_has_compress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_compress() {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_->clear();
  }
  clear_has_compress();
}
inline const ::std::string& StartUpGameRequestMonitorPmd_C::compress() const {
  // @@protoc_insertion_point(field_get:Pmd.StartUpGameRequestMonitorPmd_C.compress)
  return *compress_;
}
inline void StartUpGameRequestMonitorPmd_C::set_compress(const ::std::string& value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StartUpGameRequestMonitorPmd_C.compress)
}
inline void StartUpGameRequestMonitorPmd_C::set_compress(const char* value) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StartUpGameRequestMonitorPmd_C.compress)
}
inline void StartUpGameRequestMonitorPmd_C::set_compress(const char* value, size_t size) {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  compress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StartUpGameRequestMonitorPmd_C.compress)
}
inline ::std::string* StartUpGameRequestMonitorPmd_C::mutable_compress() {
  set_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    compress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StartUpGameRequestMonitorPmd_C.compress)
  return compress_;
}
inline ::std::string* StartUpGameRequestMonitorPmd_C::release_compress() {
  clear_has_compress();
  if (compress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = compress_;
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StartUpGameRequestMonitorPmd_C::set_allocated_compress(::std::string* compress) {
  if (compress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compress_;
  }
  if (compress) {
    set_has_compress();
    compress_ = compress;
  } else {
    clear_has_compress();
    compress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StartUpGameRequestMonitorPmd_C.compress)
}

// optional string encrypt = 4;
inline bool StartUpGameRequestMonitorPmd_C::has_encrypt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StartUpGameRequestMonitorPmd_C::set_has_encrypt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_has_encrypt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_encrypt() {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_->clear();
  }
  clear_has_encrypt();
}
inline const ::std::string& StartUpGameRequestMonitorPmd_C::encrypt() const {
  // @@protoc_insertion_point(field_get:Pmd.StartUpGameRequestMonitorPmd_C.encrypt)
  return *encrypt_;
}
inline void StartUpGameRequestMonitorPmd_C::set_encrypt(const ::std::string& value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StartUpGameRequestMonitorPmd_C.encrypt)
}
inline void StartUpGameRequestMonitorPmd_C::set_encrypt(const char* value) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StartUpGameRequestMonitorPmd_C.encrypt)
}
inline void StartUpGameRequestMonitorPmd_C::set_encrypt(const char* value, size_t size) {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  encrypt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StartUpGameRequestMonitorPmd_C.encrypt)
}
inline ::std::string* StartUpGameRequestMonitorPmd_C::mutable_encrypt() {
  set_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encrypt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StartUpGameRequestMonitorPmd_C.encrypt)
  return encrypt_;
}
inline ::std::string* StartUpGameRequestMonitorPmd_C::release_encrypt() {
  clear_has_encrypt();
  if (encrypt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encrypt_;
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StartUpGameRequestMonitorPmd_C::set_allocated_encrypt(::std::string* encrypt) {
  if (encrypt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encrypt_;
  }
  if (encrypt) {
    set_has_encrypt();
    encrypt_ = encrypt;
  } else {
    clear_has_encrypt();
    encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StartUpGameRequestMonitorPmd_C.encrypt)
}

// optional string encryptkey = 5;
inline bool StartUpGameRequestMonitorPmd_C::has_encryptkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StartUpGameRequestMonitorPmd_C::set_has_encryptkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_has_encryptkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StartUpGameRequestMonitorPmd_C::clear_encryptkey() {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_->clear();
  }
  clear_has_encryptkey();
}
inline const ::std::string& StartUpGameRequestMonitorPmd_C::encryptkey() const {
  // @@protoc_insertion_point(field_get:Pmd.StartUpGameRequestMonitorPmd_C.encryptkey)
  return *encryptkey_;
}
inline void StartUpGameRequestMonitorPmd_C::set_encryptkey(const ::std::string& value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StartUpGameRequestMonitorPmd_C.encryptkey)
}
inline void StartUpGameRequestMonitorPmd_C::set_encryptkey(const char* value) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StartUpGameRequestMonitorPmd_C.encryptkey)
}
inline void StartUpGameRequestMonitorPmd_C::set_encryptkey(const char* value, size_t size) {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  encryptkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StartUpGameRequestMonitorPmd_C.encryptkey)
}
inline ::std::string* StartUpGameRequestMonitorPmd_C::mutable_encryptkey() {
  set_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encryptkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StartUpGameRequestMonitorPmd_C.encryptkey)
  return encryptkey_;
}
inline ::std::string* StartUpGameRequestMonitorPmd_C::release_encryptkey() {
  clear_has_encryptkey();
  if (encryptkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encryptkey_;
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StartUpGameRequestMonitorPmd_C::set_allocated_encryptkey(::std::string* encryptkey) {
  if (encryptkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encryptkey_;
  }
  if (encryptkey) {
    set_has_encryptkey();
    encryptkey_ = encryptkey;
  } else {
    clear_has_encryptkey();
    encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StartUpGameRequestMonitorPmd_C.encryptkey)
}

// -------------------------------------------------------------------

// StartUpGameReturnMonitorPmd_S

// required bool ret = 1;
inline bool StartUpGameReturnMonitorPmd_S::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartUpGameReturnMonitorPmd_S::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartUpGameReturnMonitorPmd_S::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartUpGameReturnMonitorPmd_S::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool StartUpGameReturnMonitorPmd_S::ret() const {
  // @@protoc_insertion_point(field_get:Pmd.StartUpGameReturnMonitorPmd_S.ret)
  return ret_;
}
inline void StartUpGameReturnMonitorPmd_S::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Pmd.StartUpGameReturnMonitorPmd_S.ret)
}

// optional string retdesc = 2;
inline bool StartUpGameReturnMonitorPmd_S::has_retdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartUpGameReturnMonitorPmd_S::set_has_retdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartUpGameReturnMonitorPmd_S::clear_has_retdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartUpGameReturnMonitorPmd_S::clear_retdesc() {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retdesc_->clear();
  }
  clear_has_retdesc();
}
inline const ::std::string& StartUpGameReturnMonitorPmd_S::retdesc() const {
  // @@protoc_insertion_point(field_get:Pmd.StartUpGameReturnMonitorPmd_S.retdesc)
  return *retdesc_;
}
inline void StartUpGameReturnMonitorPmd_S::set_retdesc(const ::std::string& value) {
  set_has_retdesc();
  if (retdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retdesc_ = new ::std::string;
  }
  retdesc_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StartUpGameReturnMonitorPmd_S.retdesc)
}
inline void StartUpGameReturnMonitorPmd_S::set_retdesc(const char* value) {
  set_has_retdesc();
  if (retdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retdesc_ = new ::std::string;
  }
  retdesc_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StartUpGameReturnMonitorPmd_S.retdesc)
}
inline void StartUpGameReturnMonitorPmd_S::set_retdesc(const char* value, size_t size) {
  set_has_retdesc();
  if (retdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retdesc_ = new ::std::string;
  }
  retdesc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StartUpGameReturnMonitorPmd_S.retdesc)
}
inline ::std::string* StartUpGameReturnMonitorPmd_S::mutable_retdesc() {
  set_has_retdesc();
  if (retdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retdesc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StartUpGameReturnMonitorPmd_S.retdesc)
  return retdesc_;
}
inline ::std::string* StartUpGameReturnMonitorPmd_S::release_retdesc() {
  clear_has_retdesc();
  if (retdesc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retdesc_;
    retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StartUpGameReturnMonitorPmd_S::set_allocated_retdesc(::std::string* retdesc) {
  if (retdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retdesc_;
  }
  if (retdesc) {
    set_has_retdesc();
    retdesc_ = retdesc;
  } else {
    clear_has_retdesc();
    retdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StartUpGameReturnMonitorPmd_S.retdesc)
}

// -------------------------------------------------------------------

// SupportGameZoneListSdkPmd_C

// repeated .Pmd.GameZoneInfo gamezonelist = 1;
inline int SupportGameZoneListSdkPmd_C::gamezonelist_size() const {
  return gamezonelist_.size();
}
inline void SupportGameZoneListSdkPmd_C::clear_gamezonelist() {
  gamezonelist_.Clear();
}
inline const ::Pmd::GameZoneInfo& SupportGameZoneListSdkPmd_C::gamezonelist(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.SupportGameZoneListSdkPmd_C.gamezonelist)
  return gamezonelist_.Get(index);
}
inline ::Pmd::GameZoneInfo* SupportGameZoneListSdkPmd_C::mutable_gamezonelist(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.SupportGameZoneListSdkPmd_C.gamezonelist)
  return gamezonelist_.Mutable(index);
}
inline ::Pmd::GameZoneInfo* SupportGameZoneListSdkPmd_C::add_gamezonelist() {
  // @@protoc_insertion_point(field_add:Pmd.SupportGameZoneListSdkPmd_C.gamezonelist)
  return gamezonelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneInfo >&
SupportGameZoneListSdkPmd_C::gamezonelist() const {
  // @@protoc_insertion_point(field_list:Pmd.SupportGameZoneListSdkPmd_C.gamezonelist)
  return gamezonelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneInfo >*
SupportGameZoneListSdkPmd_C::mutable_gamezonelist() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.SupportGameZoneListSdkPmd_C.gamezonelist)
  return &gamezonelist_;
}

// -------------------------------------------------------------------

// ServerState

// required uint32 id = 1;
inline bool ServerState::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerState::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerState::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerState::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ServerState::id() const {
  // @@protoc_insertion_point(field_get:Pmd.ServerState.id)
  return id_;
}
inline void ServerState::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ServerState.id)
}

// required uint32 type = 2;
inline bool ServerState::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerState::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerState::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerState::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ServerState::type() const {
  // @@protoc_insertion_point(field_get:Pmd.ServerState.type)
  return type_;
}
inline void ServerState::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ServerState.type)
}

// required uint32 state = 3;
inline bool ServerState::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerState::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerState::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerState::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 ServerState::state() const {
  // @@protoc_insertion_point(field_get:Pmd.ServerState.state)
  return state_;
}
inline void ServerState::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ServerState.state)
}

// required string addr = 4;
inline bool ServerState::has_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerState::set_has_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerState::clear_has_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerState::clear_addr() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& ServerState::addr() const {
  // @@protoc_insertion_point(field_get:Pmd.ServerState.addr)
  return *addr_;
}
inline void ServerState::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ServerState.addr)
}
inline void ServerState::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ServerState.addr)
}
inline void ServerState::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ServerState.addr)
}
inline ::std::string* ServerState::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ServerState.addr)
  return addr_;
}
inline ::std::string* ServerState::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerState::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ServerState.addr)
}

// optional uint32 onlinenum = 5;
inline bool ServerState::has_onlinenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerState::set_has_onlinenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerState::clear_has_onlinenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerState::clear_onlinenum() {
  onlinenum_ = 0u;
  clear_has_onlinenum();
}
inline ::google::protobuf::uint32 ServerState::onlinenum() const {
  // @@protoc_insertion_point(field_get:Pmd.ServerState.onlinenum)
  return onlinenum_;
}
inline void ServerState::set_onlinenum(::google::protobuf::uint32 value) {
  set_has_onlinenum();
  onlinenum_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ServerState.onlinenum)
}

// optional string name = 6;
inline bool ServerState::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerState::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerState::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerState::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ServerState::name() const {
  // @@protoc_insertion_point(field_get:Pmd.ServerState.name)
  return *name_;
}
inline void ServerState::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.ServerState.name)
}
inline void ServerState::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.ServerState.name)
}
inline void ServerState::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.ServerState.name)
}
inline ::std::string* ServerState::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.ServerState.name)
  return name_;
}
inline ::std::string* ServerState::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerState::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.ServerState.name)
}

// -------------------------------------------------------------------

// GameZoneServerState

// optional .Pmd.GameZoneInfo gamezone = 1;
inline bool GameZoneServerState::has_gamezone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameZoneServerState::set_has_gamezone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameZoneServerState::clear_has_gamezone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameZoneServerState::clear_gamezone() {
  if (gamezone_ != NULL) gamezone_->::Pmd::GameZoneInfo::Clear();
  clear_has_gamezone();
}
inline const ::Pmd::GameZoneInfo& GameZoneServerState::gamezone() const {
  // @@protoc_insertion_point(field_get:Pmd.GameZoneServerState.gamezone)
  return gamezone_ != NULL ? *gamezone_ : *default_instance_->gamezone_;
}
inline ::Pmd::GameZoneInfo* GameZoneServerState::mutable_gamezone() {
  set_has_gamezone();
  if (gamezone_ == NULL) gamezone_ = new ::Pmd::GameZoneInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.GameZoneServerState.gamezone)
  return gamezone_;
}
inline ::Pmd::GameZoneInfo* GameZoneServerState::release_gamezone() {
  clear_has_gamezone();
  ::Pmd::GameZoneInfo* temp = gamezone_;
  gamezone_ = NULL;
  return temp;
}
inline void GameZoneServerState::set_allocated_gamezone(::Pmd::GameZoneInfo* gamezone) {
  delete gamezone_;
  gamezone_ = gamezone;
  if (gamezone) {
    set_has_gamezone();
  } else {
    clear_has_gamezone();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.GameZoneServerState.gamezone)
}

// repeated .Pmd.ServerState statelist = 2;
inline int GameZoneServerState::statelist_size() const {
  return statelist_.size();
}
inline void GameZoneServerState::clear_statelist() {
  statelist_.Clear();
}
inline const ::Pmd::ServerState& GameZoneServerState::statelist(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.GameZoneServerState.statelist)
  return statelist_.Get(index);
}
inline ::Pmd::ServerState* GameZoneServerState::mutable_statelist(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.GameZoneServerState.statelist)
  return statelist_.Mutable(index);
}
inline ::Pmd::ServerState* GameZoneServerState::add_statelist() {
  // @@protoc_insertion_point(field_add:Pmd.GameZoneServerState.statelist)
  return statelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ServerState >&
GameZoneServerState::statelist() const {
  // @@protoc_insertion_point(field_list:Pmd.GameZoneServerState.statelist)
  return statelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::ServerState >*
GameZoneServerState::mutable_statelist() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.GameZoneServerState.statelist)
  return &statelist_;
}

// -------------------------------------------------------------------

// RefreshServerStateListMonitorPmd_S

// repeated .Pmd.GameZoneServerState statelist = 1;
inline int RefreshServerStateListMonitorPmd_S::statelist_size() const {
  return statelist_.size();
}
inline void RefreshServerStateListMonitorPmd_S::clear_statelist() {
  statelist_.Clear();
}
inline const ::Pmd::GameZoneServerState& RefreshServerStateListMonitorPmd_S::statelist(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.RefreshServerStateListMonitorPmd_S.statelist)
  return statelist_.Get(index);
}
inline ::Pmd::GameZoneServerState* RefreshServerStateListMonitorPmd_S::mutable_statelist(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.RefreshServerStateListMonitorPmd_S.statelist)
  return statelist_.Mutable(index);
}
inline ::Pmd::GameZoneServerState* RefreshServerStateListMonitorPmd_S::add_statelist() {
  // @@protoc_insertion_point(field_add:Pmd.RefreshServerStateListMonitorPmd_S.statelist)
  return statelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneServerState >&
RefreshServerStateListMonitorPmd_S::statelist() const {
  // @@protoc_insertion_point(field_list:Pmd.RefreshServerStateListMonitorPmd_S.statelist)
  return statelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::GameZoneServerState >*
RefreshServerStateListMonitorPmd_S::mutable_statelist() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.RefreshServerStateListMonitorPmd_S.statelist)
  return &statelist_;
}

// optional bool reset = 2;
inline bool RefreshServerStateListMonitorPmd_S::has_reset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshServerStateListMonitorPmd_S::set_has_reset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshServerStateListMonitorPmd_S::clear_has_reset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshServerStateListMonitorPmd_S::clear_reset() {
  reset_ = false;
  clear_has_reset();
}
inline bool RefreshServerStateListMonitorPmd_S::reset() const {
  // @@protoc_insertion_point(field_get:Pmd.RefreshServerStateListMonitorPmd_S.reset)
  return reset_;
}
inline void RefreshServerStateListMonitorPmd_S::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RefreshServerStateListMonitorPmd_S.reset)
}

// -------------------------------------------------------------------

// RefreshServerStateMonitorPmd_CSC

// required .Pmd.GameZoneServerState state = 1;
inline bool RefreshServerStateMonitorPmd_CSC::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefreshServerStateMonitorPmd_CSC::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefreshServerStateMonitorPmd_CSC::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefreshServerStateMonitorPmd_CSC::clear_state() {
  if (state_ != NULL) state_->::Pmd::GameZoneServerState::Clear();
  clear_has_state();
}
inline const ::Pmd::GameZoneServerState& RefreshServerStateMonitorPmd_CSC::state() const {
  // @@protoc_insertion_point(field_get:Pmd.RefreshServerStateMonitorPmd_CSC.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::Pmd::GameZoneServerState* RefreshServerStateMonitorPmd_CSC::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::Pmd::GameZoneServerState;
  // @@protoc_insertion_point(field_mutable:Pmd.RefreshServerStateMonitorPmd_CSC.state)
  return state_;
}
inline ::Pmd::GameZoneServerState* RefreshServerStateMonitorPmd_CSC::release_state() {
  clear_has_state();
  ::Pmd::GameZoneServerState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void RefreshServerStateMonitorPmd_CSC::set_allocated_state(::Pmd::GameZoneServerState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RefreshServerStateMonitorPmd_CSC.state)
}

// optional bool reset = 2;
inline bool RefreshServerStateMonitorPmd_CSC::has_reset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshServerStateMonitorPmd_CSC::set_has_reset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshServerStateMonitorPmd_CSC::clear_has_reset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshServerStateMonitorPmd_CSC::clear_reset() {
  reset_ = false;
  clear_has_reset();
}
inline bool RefreshServerStateMonitorPmd_CSC::reset() const {
  // @@protoc_insertion_point(field_get:Pmd.RefreshServerStateMonitorPmd_CSC.reset)
  return reset_;
}
inline void RefreshServerStateMonitorPmd_CSC::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RefreshServerStateMonitorPmd_CSC.reset)
}

// -------------------------------------------------------------------

// StRequestNewbeeCardMonitorUserCmd_C

// optional uint32 userid = 1;
inline bool StRequestNewbeeCardMonitorUserCmd_C::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 StRequestNewbeeCardMonitorUserCmd_C::userid() const {
  // @@protoc_insertion_point(field_get:Pmd.StRequestNewbeeCardMonitorUserCmd_C.userid)
  return userid_;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.StRequestNewbeeCardMonitorUserCmd_C.userid)
}

// optional string keystring = 2;
inline bool StRequestNewbeeCardMonitorUserCmd_C::has_keystring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_has_keystring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_has_keystring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_keystring() {
  if (keystring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keystring_->clear();
  }
  clear_has_keystring();
}
inline const ::std::string& StRequestNewbeeCardMonitorUserCmd_C::keystring() const {
  // @@protoc_insertion_point(field_get:Pmd.StRequestNewbeeCardMonitorUserCmd_C.keystring)
  return *keystring_;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_keystring(const ::std::string& value) {
  set_has_keystring();
  if (keystring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keystring_ = new ::std::string;
  }
  keystring_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StRequestNewbeeCardMonitorUserCmd_C.keystring)
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_keystring(const char* value) {
  set_has_keystring();
  if (keystring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keystring_ = new ::std::string;
  }
  keystring_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StRequestNewbeeCardMonitorUserCmd_C.keystring)
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_keystring(const char* value, size_t size) {
  set_has_keystring();
  if (keystring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keystring_ = new ::std::string;
  }
  keystring_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StRequestNewbeeCardMonitorUserCmd_C.keystring)
}
inline ::std::string* StRequestNewbeeCardMonitorUserCmd_C::mutable_keystring() {
  set_has_keystring();
  if (keystring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    keystring_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StRequestNewbeeCardMonitorUserCmd_C.keystring)
  return keystring_;
}
inline ::std::string* StRequestNewbeeCardMonitorUserCmd_C::release_keystring() {
  clear_has_keystring();
  if (keystring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = keystring_;
    keystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_allocated_keystring(::std::string* keystring) {
  if (keystring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keystring_;
  }
  if (keystring) {
    set_has_keystring();
    keystring_ = keystring;
  } else {
    clear_has_keystring();
    keystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StRequestNewbeeCardMonitorUserCmd_C.keystring)
}

// optional uint32 mutextype = 3;
inline bool StRequestNewbeeCardMonitorUserCmd_C::has_mutextype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_has_mutextype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_has_mutextype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_mutextype() {
  mutextype_ = 0u;
  clear_has_mutextype();
}
inline ::google::protobuf::uint32 StRequestNewbeeCardMonitorUserCmd_C::mutextype() const {
  // @@protoc_insertion_point(field_get:Pmd.StRequestNewbeeCardMonitorUserCmd_C.mutextype)
  return mutextype_;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_mutextype(::google::protobuf::uint32 value) {
  set_has_mutextype();
  mutextype_ = value;
  // @@protoc_insertion_point(field_set:Pmd.StRequestNewbeeCardMonitorUserCmd_C.mutextype)
}

// optional uint32 accid = 4;
inline bool StRequestNewbeeCardMonitorUserCmd_C::has_accid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_has_accid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_has_accid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_accid() {
  accid_ = 0u;
  clear_has_accid();
}
inline ::google::protobuf::uint32 StRequestNewbeeCardMonitorUserCmd_C::accid() const {
  // @@protoc_insertion_point(field_get:Pmd.StRequestNewbeeCardMonitorUserCmd_C.accid)
  return accid_;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_accid(::google::protobuf::uint32 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.StRequestNewbeeCardMonitorUserCmd_C.accid)
}

// optional uint64 mobile = 5;
inline bool StRequestNewbeeCardMonitorUserCmd_C::has_mobile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_has_mobile() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::clear_mobile() {
  mobile_ = GOOGLE_ULONGLONG(0);
  clear_has_mobile();
}
inline ::google::protobuf::uint64 StRequestNewbeeCardMonitorUserCmd_C::mobile() const {
  // @@protoc_insertion_point(field_get:Pmd.StRequestNewbeeCardMonitorUserCmd_C.mobile)
  return mobile_;
}
inline void StRequestNewbeeCardMonitorUserCmd_C::set_mobile(::google::protobuf::uint64 value) {
  set_has_mobile();
  mobile_ = value;
  // @@protoc_insertion_point(field_set:Pmd.StRequestNewbeeCardMonitorUserCmd_C.mobile)
}

// -------------------------------------------------------------------

// StServerShutdownMonitorUserCmd_S

// optional .Pmd.ServerInfo data = 1;
inline bool StServerShutdownMonitorUserCmd_S::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StServerShutdownMonitorUserCmd_S::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StServerShutdownMonitorUserCmd_S::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StServerShutdownMonitorUserCmd_S::clear_data() {
  if (data_ != NULL) data_->::Pmd::ServerInfo::Clear();
  clear_has_data();
}
inline const ::Pmd::ServerInfo& StServerShutdownMonitorUserCmd_S::data() const {
  // @@protoc_insertion_point(field_get:Pmd.StServerShutdownMonitorUserCmd_S.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Pmd::ServerInfo* StServerShutdownMonitorUserCmd_S::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Pmd::ServerInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.StServerShutdownMonitorUserCmd_S.data)
  return data_;
}
inline ::Pmd::ServerInfo* StServerShutdownMonitorUserCmd_S::release_data() {
  clear_has_data();
  ::Pmd::ServerInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void StServerShutdownMonitorUserCmd_S::set_allocated_data(::Pmd::ServerInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StServerShutdownMonitorUserCmd_S.data)
}

// -------------------------------------------------------------------

// StServerStartupMonitorUserCmd_S

// optional .Pmd.ServerInfo data = 1;
inline bool StServerStartupMonitorUserCmd_S::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StServerStartupMonitorUserCmd_S::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StServerStartupMonitorUserCmd_S::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StServerStartupMonitorUserCmd_S::clear_data() {
  if (data_ != NULL) data_->::Pmd::ServerInfo::Clear();
  clear_has_data();
}
inline const ::Pmd::ServerInfo& StServerStartupMonitorUserCmd_S::data() const {
  // @@protoc_insertion_point(field_get:Pmd.StServerStartupMonitorUserCmd_S.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Pmd::ServerInfo* StServerStartupMonitorUserCmd_S::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Pmd::ServerInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.StServerStartupMonitorUserCmd_S.data)
  return data_;
}
inline ::Pmd::ServerInfo* StServerStartupMonitorUserCmd_S::release_data() {
  clear_has_data();
  ::Pmd::ServerInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void StServerStartupMonitorUserCmd_S::set_allocated_data(::Pmd::ServerInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StServerStartupMonitorUserCmd_S.data)
}

// -------------------------------------------------------------------

// StServerListMonitorUserCmd_S

// repeated .Pmd.ServerInfo data = 1;
inline int StServerListMonitorUserCmd_S::data_size() const {
  return data_.size();
}
inline void StServerListMonitorUserCmd_S::clear_data() {
  data_.Clear();
}
inline const ::Pmd::ServerInfo& StServerListMonitorUserCmd_S::data(int index) const {
  // @@protoc_insertion_point(field_get:Pmd.StServerListMonitorUserCmd_S.data)
  return data_.Get(index);
}
inline ::Pmd::ServerInfo* StServerListMonitorUserCmd_S::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Pmd.StServerListMonitorUserCmd_S.data)
  return data_.Mutable(index);
}
inline ::Pmd::ServerInfo* StServerListMonitorUserCmd_S::add_data() {
  // @@protoc_insertion_point(field_add:Pmd.StServerListMonitorUserCmd_S.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pmd::ServerInfo >&
StServerListMonitorUserCmd_S::data() const {
  // @@protoc_insertion_point(field_list:Pmd.StServerListMonitorUserCmd_S.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pmd::ServerInfo >*
StServerListMonitorUserCmd_S::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Pmd.StServerListMonitorUserCmd_S.data)
  return &data_;
}

// -------------------------------------------------------------------

// StMonitorServerMessageMonitorUserCmd_S

// optional uint32 gmid = 1;
inline bool StMonitorServerMessageMonitorUserCmd_S::has_gmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_has_gmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StMonitorServerMessageMonitorUserCmd_S::clear_has_gmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StMonitorServerMessageMonitorUserCmd_S::clear_gmid() {
  gmid_ = 0u;
  clear_has_gmid();
}
inline ::google::protobuf::uint32 StMonitorServerMessageMonitorUserCmd_S::gmid() const {
  // @@protoc_insertion_point(field_get:Pmd.StMonitorServerMessageMonitorUserCmd_S.gmid)
  return gmid_;
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_gmid(::google::protobuf::uint32 value) {
  set_has_gmid();
  gmid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.StMonitorServerMessageMonitorUserCmd_S.gmid)
}

// optional uint32 type = 2;
inline bool StMonitorServerMessageMonitorUserCmd_S::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StMonitorServerMessageMonitorUserCmd_S::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StMonitorServerMessageMonitorUserCmd_S::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 StMonitorServerMessageMonitorUserCmd_S::type() const {
  // @@protoc_insertion_point(field_get:Pmd.StMonitorServerMessageMonitorUserCmd_S.type)
  return type_;
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Pmd.StMonitorServerMessageMonitorUserCmd_S.type)
}

// optional string data = 3;
inline bool StMonitorServerMessageMonitorUserCmd_S::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StMonitorServerMessageMonitorUserCmd_S::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StMonitorServerMessageMonitorUserCmd_S::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& StMonitorServerMessageMonitorUserCmd_S::data() const {
  // @@protoc_insertion_point(field_get:Pmd.StMonitorServerMessageMonitorUserCmd_S.data)
  return *data_;
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StMonitorServerMessageMonitorUserCmd_S.data)
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StMonitorServerMessageMonitorUserCmd_S.data)
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StMonitorServerMessageMonitorUserCmd_S.data)
}
inline ::std::string* StMonitorServerMessageMonitorUserCmd_S::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StMonitorServerMessageMonitorUserCmd_S.data)
  return data_;
}
inline ::std::string* StMonitorServerMessageMonitorUserCmd_S::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StMonitorServerMessageMonitorUserCmd_S::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StMonitorServerMessageMonitorUserCmd_S.data)
}

// -------------------------------------------------------------------

// ClientCmdExitInfo

// optional uint32 time = 1;
inline bool ClientCmdExitInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCmdExitInfo::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientCmdExitInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientCmdExitInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ClientCmdExitInfo::time() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientCmdExitInfo.time)
  return time_;
}
inline void ClientCmdExitInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ClientCmdExitInfo.time)
}

// optional uint32 zone = 2;
inline bool ClientCmdExitInfo::has_zone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientCmdExitInfo::set_has_zone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientCmdExitInfo::clear_has_zone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientCmdExitInfo::clear_zone() {
  zone_ = 0u;
  clear_has_zone();
}
inline ::google::protobuf::uint32 ClientCmdExitInfo::zone() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientCmdExitInfo.zone)
  return zone_;
}
inline void ClientCmdExitInfo::set_zone(::google::protobuf::uint32 value) {
  set_has_zone();
  zone_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ClientCmdExitInfo.zone)
}

// optional uint32 num = 3;
inline bool ClientCmdExitInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientCmdExitInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientCmdExitInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientCmdExitInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 ClientCmdExitInfo::num() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientCmdExitInfo.num)
  return num_;
}
inline void ClientCmdExitInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ClientCmdExitInfo.num)
}

// optional uint32 byCmd = 4;
inline bool ClientCmdExitInfo::has_bycmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientCmdExitInfo::set_has_bycmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientCmdExitInfo::clear_has_bycmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientCmdExitInfo::clear_bycmd() {
  bycmd_ = 0u;
  clear_has_bycmd();
}
inline ::google::protobuf::uint32 ClientCmdExitInfo::bycmd() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientCmdExitInfo.byCmd)
  return bycmd_;
}
inline void ClientCmdExitInfo::set_bycmd(::google::protobuf::uint32 value) {
  set_has_bycmd();
  bycmd_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ClientCmdExitInfo.byCmd)
}

// optional uint32 byParam = 5;
inline bool ClientCmdExitInfo::has_byparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientCmdExitInfo::set_has_byparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientCmdExitInfo::clear_has_byparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientCmdExitInfo::clear_byparam() {
  byparam_ = 0u;
  clear_has_byparam();
}
inline ::google::protobuf::uint32 ClientCmdExitInfo::byparam() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientCmdExitInfo.byParam)
  return byparam_;
}
inline void ClientCmdExitInfo::set_byparam(::google::protobuf::uint32 value) {
  set_has_byparam();
  byparam_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ClientCmdExitInfo.byParam)
}

// optional uint32 nettype = 6;
inline bool ClientCmdExitInfo::has_nettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientCmdExitInfo::set_has_nettype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientCmdExitInfo::clear_has_nettype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientCmdExitInfo::clear_nettype() {
  nettype_ = 0u;
  clear_has_nettype();
}
inline ::google::protobuf::uint32 ClientCmdExitInfo::nettype() const {
  // @@protoc_insertion_point(field_get:Pmd.ClientCmdExitInfo.nettype)
  return nettype_;
}
inline void ClientCmdExitInfo::set_nettype(::google::protobuf::uint32 value) {
  set_has_nettype();
  nettype_ = value;
  // @@protoc_insertion_point(field_set:Pmd.ClientCmdExitInfo.nettype)
}

// -------------------------------------------------------------------

// StGameClientCmdExitMonitorUserCmd_S

// optional .Pmd.ClientCmdExitInfo data = 1;
inline bool StGameClientCmdExitMonitorUserCmd_S::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StGameClientCmdExitMonitorUserCmd_S::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StGameClientCmdExitMonitorUserCmd_S::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StGameClientCmdExitMonitorUserCmd_S::clear_data() {
  if (data_ != NULL) data_->::Pmd::ClientCmdExitInfo::Clear();
  clear_has_data();
}
inline const ::Pmd::ClientCmdExitInfo& StGameClientCmdExitMonitorUserCmd_S::data() const {
  // @@protoc_insertion_point(field_get:Pmd.StGameClientCmdExitMonitorUserCmd_S.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Pmd::ClientCmdExitInfo* StGameClientCmdExitMonitorUserCmd_S::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Pmd::ClientCmdExitInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.StGameClientCmdExitMonitorUserCmd_S.data)
  return data_;
}
inline ::Pmd::ClientCmdExitInfo* StGameClientCmdExitMonitorUserCmd_S::release_data() {
  clear_has_data();
  ::Pmd::ClientCmdExitInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void StGameClientCmdExitMonitorUserCmd_S::set_allocated_data(::Pmd::ClientCmdExitInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StGameClientCmdExitMonitorUserCmd_S.data)
}

// -------------------------------------------------------------------

// StErrorLogMonitorUserCmd_S

// optional string logger = 1;
inline bool StErrorLogMonitorUserCmd_S::has_logger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StErrorLogMonitorUserCmd_S::set_has_logger() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StErrorLogMonitorUserCmd_S::clear_has_logger() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StErrorLogMonitorUserCmd_S::clear_logger() {
  if (logger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logger_->clear();
  }
  clear_has_logger();
}
inline const ::std::string& StErrorLogMonitorUserCmd_S::logger() const {
  // @@protoc_insertion_point(field_get:Pmd.StErrorLogMonitorUserCmd_S.logger)
  return *logger_;
}
inline void StErrorLogMonitorUserCmd_S::set_logger(const ::std::string& value) {
  set_has_logger();
  if (logger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logger_ = new ::std::string;
  }
  logger_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StErrorLogMonitorUserCmd_S.logger)
}
inline void StErrorLogMonitorUserCmd_S::set_logger(const char* value) {
  set_has_logger();
  if (logger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logger_ = new ::std::string;
  }
  logger_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StErrorLogMonitorUserCmd_S.logger)
}
inline void StErrorLogMonitorUserCmd_S::set_logger(const char* value, size_t size) {
  set_has_logger();
  if (logger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logger_ = new ::std::string;
  }
  logger_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StErrorLogMonitorUserCmd_S.logger)
}
inline ::std::string* StErrorLogMonitorUserCmd_S::mutable_logger() {
  set_has_logger();
  if (logger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    logger_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StErrorLogMonitorUserCmd_S.logger)
  return logger_;
}
inline ::std::string* StErrorLogMonitorUserCmd_S::release_logger() {
  clear_has_logger();
  if (logger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = logger_;
    logger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StErrorLogMonitorUserCmd_S::set_allocated_logger(::std::string* logger) {
  if (logger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logger_;
  }
  if (logger) {
    set_has_logger();
    logger_ = logger;
  } else {
    clear_has_logger();
    logger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StErrorLogMonitorUserCmd_S.logger)
}

// optional .Pmd.GameZoneInfo gamezone = 2;
inline bool StErrorLogMonitorUserCmd_S::has_gamezone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StErrorLogMonitorUserCmd_S::set_has_gamezone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StErrorLogMonitorUserCmd_S::clear_has_gamezone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StErrorLogMonitorUserCmd_S::clear_gamezone() {
  if (gamezone_ != NULL) gamezone_->::Pmd::GameZoneInfo::Clear();
  clear_has_gamezone();
}
inline const ::Pmd::GameZoneInfo& StErrorLogMonitorUserCmd_S::gamezone() const {
  // @@protoc_insertion_point(field_get:Pmd.StErrorLogMonitorUserCmd_S.gamezone)
  return gamezone_ != NULL ? *gamezone_ : *default_instance_->gamezone_;
}
inline ::Pmd::GameZoneInfo* StErrorLogMonitorUserCmd_S::mutable_gamezone() {
  set_has_gamezone();
  if (gamezone_ == NULL) gamezone_ = new ::Pmd::GameZoneInfo;
  // @@protoc_insertion_point(field_mutable:Pmd.StErrorLogMonitorUserCmd_S.gamezone)
  return gamezone_;
}
inline ::Pmd::GameZoneInfo* StErrorLogMonitorUserCmd_S::release_gamezone() {
  clear_has_gamezone();
  ::Pmd::GameZoneInfo* temp = gamezone_;
  gamezone_ = NULL;
  return temp;
}
inline void StErrorLogMonitorUserCmd_S::set_allocated_gamezone(::Pmd::GameZoneInfo* gamezone) {
  delete gamezone_;
  gamezone_ = gamezone;
  if (gamezone) {
    set_has_gamezone();
  } else {
    clear_has_gamezone();
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StErrorLogMonitorUserCmd_S.gamezone)
}

// optional string remoteaddr = 3;
inline bool StErrorLogMonitorUserCmd_S::has_remoteaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StErrorLogMonitorUserCmd_S::set_has_remoteaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StErrorLogMonitorUserCmd_S::clear_has_remoteaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StErrorLogMonitorUserCmd_S::clear_remoteaddr() {
  if (remoteaddr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remoteaddr_->clear();
  }
  clear_has_remoteaddr();
}
inline const ::std::string& StErrorLogMonitorUserCmd_S::remoteaddr() const {
  // @@protoc_insertion_point(field_get:Pmd.StErrorLogMonitorUserCmd_S.remoteaddr)
  return *remoteaddr_;
}
inline void StErrorLogMonitorUserCmd_S::set_remoteaddr(const ::std::string& value) {
  set_has_remoteaddr();
  if (remoteaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remoteaddr_ = new ::std::string;
  }
  remoteaddr_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.StErrorLogMonitorUserCmd_S.remoteaddr)
}
inline void StErrorLogMonitorUserCmd_S::set_remoteaddr(const char* value) {
  set_has_remoteaddr();
  if (remoteaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remoteaddr_ = new ::std::string;
  }
  remoteaddr_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.StErrorLogMonitorUserCmd_S.remoteaddr)
}
inline void StErrorLogMonitorUserCmd_S::set_remoteaddr(const char* value, size_t size) {
  set_has_remoteaddr();
  if (remoteaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remoteaddr_ = new ::std::string;
  }
  remoteaddr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.StErrorLogMonitorUserCmd_S.remoteaddr)
}
inline ::std::string* StErrorLogMonitorUserCmd_S::mutable_remoteaddr() {
  set_has_remoteaddr();
  if (remoteaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remoteaddr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.StErrorLogMonitorUserCmd_S.remoteaddr)
  return remoteaddr_;
}
inline ::std::string* StErrorLogMonitorUserCmd_S::release_remoteaddr() {
  clear_has_remoteaddr();
  if (remoteaddr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remoteaddr_;
    remoteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StErrorLogMonitorUserCmd_S::set_allocated_remoteaddr(::std::string* remoteaddr) {
  if (remoteaddr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remoteaddr_;
  }
  if (remoteaddr) {
    set_has_remoteaddr();
    remoteaddr_ = remoteaddr;
  } else {
    clear_has_remoteaddr();
    remoteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.StErrorLogMonitorUserCmd_S.remoteaddr)
}

// -------------------------------------------------------------------

// QueryPackageCodeMonitorPmd_CS

// required string codeid = 1;
inline bool QueryPackageCodeMonitorPmd_CS::has_codeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_codeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_codeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_codeid() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_->clear();
  }
  clear_has_codeid();
}
inline const ::std::string& QueryPackageCodeMonitorPmd_CS::codeid() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.codeid)
  return *codeid_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_codeid(const ::std::string& value) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.codeid)
}
inline void QueryPackageCodeMonitorPmd_CS::set_codeid(const char* value) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.QueryPackageCodeMonitorPmd_CS.codeid)
}
inline void QueryPackageCodeMonitorPmd_CS::set_codeid(const char* value, size_t size) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.QueryPackageCodeMonitorPmd_CS.codeid)
}
inline ::std::string* QueryPackageCodeMonitorPmd_CS::mutable_codeid() {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.QueryPackageCodeMonitorPmd_CS.codeid)
  return codeid_;
}
inline ::std::string* QueryPackageCodeMonitorPmd_CS::release_codeid() {
  clear_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = codeid_;
    codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryPackageCodeMonitorPmd_CS::set_allocated_codeid(::std::string* codeid) {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (codeid) {
    set_has_codeid();
    codeid_ = codeid;
  } else {
    clear_has_codeid();
    codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.QueryPackageCodeMonitorPmd_CS.codeid)
}

// required uint64 accid = 2;
inline bool QueryPackageCodeMonitorPmd_CS::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 QueryPackageCodeMonitorPmd_CS::accid() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.accid)
  return accid_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.accid)
}

// optional uint32 ret = 3;
inline bool QueryPackageCodeMonitorPmd_CS::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 QueryPackageCodeMonitorPmd_CS::ret() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.ret)
  return ret_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.ret)
}

// optional uint32 flag = 4;
inline bool QueryPackageCodeMonitorPmd_CS::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 QueryPackageCodeMonitorPmd_CS::flag() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.flag)
  return flag_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.flag)
}

// optional uint64 createtime = 5;
inline bool QueryPackageCodeMonitorPmd_CS::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 QueryPackageCodeMonitorPmd_CS::createtime() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.createtime)
  return createtime_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.createtime)
}

// optional uint64 usedtime = 6;
inline bool QueryPackageCodeMonitorPmd_CS::has_usedtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_usedtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_usedtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_usedtime() {
  usedtime_ = GOOGLE_ULONGLONG(0);
  clear_has_usedtime();
}
inline ::google::protobuf::uint64 QueryPackageCodeMonitorPmd_CS::usedtime() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.usedtime)
  return usedtime_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_usedtime(::google::protobuf::uint64 value) {
  set_has_usedtime();
  usedtime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.usedtime)
}

// optional uint32 usedgameid = 7;
inline bool QueryPackageCodeMonitorPmd_CS::has_usedgameid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_usedgameid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_usedgameid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_usedgameid() {
  usedgameid_ = 0u;
  clear_has_usedgameid();
}
inline ::google::protobuf::uint32 QueryPackageCodeMonitorPmd_CS::usedgameid() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.usedgameid)
  return usedgameid_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_usedgameid(::google::protobuf::uint32 value) {
  set_has_usedgameid();
  usedgameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.usedgameid)
}

// optional uint32 usedzoneid = 8;
inline bool QueryPackageCodeMonitorPmd_CS::has_usedzoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_usedzoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_usedzoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_usedzoneid() {
  usedzoneid_ = 0u;
  clear_has_usedzoneid();
}
inline ::google::protobuf::uint32 QueryPackageCodeMonitorPmd_CS::usedzoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.usedzoneid)
  return usedzoneid_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_usedzoneid(::google::protobuf::uint32 value) {
  set_has_usedzoneid();
  usedzoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.usedzoneid)
}

// optional uint64 useduid = 9;
inline bool QueryPackageCodeMonitorPmd_CS::has_useduid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_useduid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_useduid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_useduid() {
  useduid_ = GOOGLE_ULONGLONG(0);
  clear_has_useduid();
}
inline ::google::protobuf::uint64 QueryPackageCodeMonitorPmd_CS::useduid() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.useduid)
  return useduid_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_useduid(::google::protobuf::uint64 value) {
  set_has_useduid();
  useduid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.useduid)
}

// optional string extdata = 10;
inline bool QueryPackageCodeMonitorPmd_CS::has_extdata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_extdata() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_extdata() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_extdata() {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_->clear();
  }
  clear_has_extdata();
}
inline const ::std::string& QueryPackageCodeMonitorPmd_CS::extdata() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.extdata)
  return *extdata_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_extdata(const ::std::string& value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.extdata)
}
inline void QueryPackageCodeMonitorPmd_CS::set_extdata(const char* value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.QueryPackageCodeMonitorPmd_CS.extdata)
}
inline void QueryPackageCodeMonitorPmd_CS::set_extdata(const char* value, size_t size) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.QueryPackageCodeMonitorPmd_CS.extdata)
}
inline ::std::string* QueryPackageCodeMonitorPmd_CS::mutable_extdata() {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.QueryPackageCodeMonitorPmd_CS.extdata)
  return extdata_;
}
inline ::std::string* QueryPackageCodeMonitorPmd_CS::release_extdata() {
  clear_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extdata_;
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryPackageCodeMonitorPmd_CS::set_allocated_extdata(::std::string* extdata) {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (extdata) {
    set_has_extdata();
    extdata_ = extdata;
  } else {
    clear_has_extdata();
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.QueryPackageCodeMonitorPmd_CS.extdata)
}

// optional uint32 codetype = 11;
inline bool QueryPackageCodeMonitorPmd_CS::has_codetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QueryPackageCodeMonitorPmd_CS::set_has_codetype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_has_codetype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QueryPackageCodeMonitorPmd_CS::clear_codetype() {
  codetype_ = 0u;
  clear_has_codetype();
}
inline ::google::protobuf::uint32 QueryPackageCodeMonitorPmd_CS::codetype() const {
  // @@protoc_insertion_point(field_get:Pmd.QueryPackageCodeMonitorPmd_CS.codetype)
  return codetype_;
}
inline void QueryPackageCodeMonitorPmd_CS::set_codetype(::google::protobuf::uint32 value) {
  set_has_codetype();
  codetype_ = value;
  // @@protoc_insertion_point(field_set:Pmd.QueryPackageCodeMonitorPmd_CS.codetype)
}

// -------------------------------------------------------------------

// RequestUsePackageCodeMonitorPmd_CS

// required string codeid = 1;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_codeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_codeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_codeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_codeid() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_->clear();
  }
  clear_has_codeid();
}
inline const ::std::string& RequestUsePackageCodeMonitorPmd_CS::codeid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.codeid)
  return *codeid_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_codeid(const ::std::string& value) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.codeid)
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_codeid(const char* value) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestUsePackageCodeMonitorPmd_CS.codeid)
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_codeid(const char* value, size_t size) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestUsePackageCodeMonitorPmd_CS.codeid)
}
inline ::std::string* RequestUsePackageCodeMonitorPmd_CS::mutable_codeid() {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestUsePackageCodeMonitorPmd_CS.codeid)
  return codeid_;
}
inline ::std::string* RequestUsePackageCodeMonitorPmd_CS::release_codeid() {
  clear_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = codeid_;
    codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_allocated_codeid(::std::string* codeid) {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (codeid) {
    set_has_codeid();
    codeid_ = codeid;
  } else {
    clear_has_codeid();
    codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestUsePackageCodeMonitorPmd_CS.codeid)
}

// required uint64 accid = 2;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 RequestUsePackageCodeMonitorPmd_CS::accid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.accid)
  return accid_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.accid)
}

// optional uint32 ret = 3;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 RequestUsePackageCodeMonitorPmd_CS::ret() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.ret)
  return ret_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.ret)
}

// optional uint64 createtime = 4;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 RequestUsePackageCodeMonitorPmd_CS::createtime() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.createtime)
  return createtime_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.createtime)
}

// optional uint64 usedtime = 5;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_usedtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_usedtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_usedtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_usedtime() {
  usedtime_ = GOOGLE_ULONGLONG(0);
  clear_has_usedtime();
}
inline ::google::protobuf::uint64 RequestUsePackageCodeMonitorPmd_CS::usedtime() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.usedtime)
  return usedtime_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_usedtime(::google::protobuf::uint64 value) {
  set_has_usedtime();
  usedtime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.usedtime)
}

// optional uint32 usedgameid = 6;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_usedgameid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_usedgameid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_usedgameid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_usedgameid() {
  usedgameid_ = 0u;
  clear_has_usedgameid();
}
inline ::google::protobuf::uint32 RequestUsePackageCodeMonitorPmd_CS::usedgameid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.usedgameid)
  return usedgameid_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_usedgameid(::google::protobuf::uint32 value) {
  set_has_usedgameid();
  usedgameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.usedgameid)
}

// optional uint32 usedzoneid = 7;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_usedzoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_usedzoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_usedzoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_usedzoneid() {
  usedzoneid_ = 0u;
  clear_has_usedzoneid();
}
inline ::google::protobuf::uint32 RequestUsePackageCodeMonitorPmd_CS::usedzoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.usedzoneid)
  return usedzoneid_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_usedzoneid(::google::protobuf::uint32 value) {
  set_has_usedzoneid();
  usedzoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.usedzoneid)
}

// optional uint64 useduid = 8;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_useduid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_useduid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_useduid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_useduid() {
  useduid_ = GOOGLE_ULONGLONG(0);
  clear_has_useduid();
}
inline ::google::protobuf::uint64 RequestUsePackageCodeMonitorPmd_CS::useduid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.useduid)
  return useduid_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_useduid(::google::protobuf::uint64 value) {
  set_has_useduid();
  useduid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.useduid)
}

// optional string extdata = 9;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_extdata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_extdata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_extdata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_extdata() {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_->clear();
  }
  clear_has_extdata();
}
inline const ::std::string& RequestUsePackageCodeMonitorPmd_CS::extdata() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.extdata)
  return *extdata_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_extdata(const ::std::string& value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.extdata)
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_extdata(const char* value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestUsePackageCodeMonitorPmd_CS.extdata)
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_extdata(const char* value, size_t size) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestUsePackageCodeMonitorPmd_CS.extdata)
}
inline ::std::string* RequestUsePackageCodeMonitorPmd_CS::mutable_extdata() {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestUsePackageCodeMonitorPmd_CS.extdata)
  return extdata_;
}
inline ::std::string* RequestUsePackageCodeMonitorPmd_CS::release_extdata() {
  clear_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extdata_;
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_allocated_extdata(::std::string* extdata) {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (extdata) {
    set_has_extdata();
    extdata_ = extdata;
  } else {
    clear_has_extdata();
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestUsePackageCodeMonitorPmd_CS.extdata)
}

// optional uint32 codetype = 10;
inline bool RequestUsePackageCodeMonitorPmd_CS::has_codetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_has_codetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_has_codetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RequestUsePackageCodeMonitorPmd_CS::clear_codetype() {
  codetype_ = 0u;
  clear_has_codetype();
}
inline ::google::protobuf::uint32 RequestUsePackageCodeMonitorPmd_CS::codetype() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestUsePackageCodeMonitorPmd_CS.codetype)
  return codetype_;
}
inline void RequestUsePackageCodeMonitorPmd_CS::set_codetype(::google::protobuf::uint32 value) {
  set_has_codetype();
  codetype_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestUsePackageCodeMonitorPmd_CS.codetype)
}

// -------------------------------------------------------------------

// RequestInsertPackageCodeMonitorPmd_CS

// required string codeid = 1;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_codeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_codeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_codeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_codeid() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_->clear();
  }
  clear_has_codeid();
}
inline const ::std::string& RequestInsertPackageCodeMonitorPmd_CS::codeid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.codeid)
  return *codeid_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_codeid(const ::std::string& value) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.codeid)
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_codeid(const char* value) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestInsertPackageCodeMonitorPmd_CS.codeid)
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_codeid(const char* value, size_t size) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestInsertPackageCodeMonitorPmd_CS.codeid)
}
inline ::std::string* RequestInsertPackageCodeMonitorPmd_CS::mutable_codeid() {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestInsertPackageCodeMonitorPmd_CS.codeid)
  return codeid_;
}
inline ::std::string* RequestInsertPackageCodeMonitorPmd_CS::release_codeid() {
  clear_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = codeid_;
    codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_allocated_codeid(::std::string* codeid) {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (codeid) {
    set_has_codeid();
    codeid_ = codeid;
  } else {
    clear_has_codeid();
    codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestInsertPackageCodeMonitorPmd_CS.codeid)
}

// optional uint32 ret = 2;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 RequestInsertPackageCodeMonitorPmd_CS::ret() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.ret)
  return ret_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.ret)
}

// optional string extdata = 3;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_extdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_extdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_extdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_extdata() {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_->clear();
  }
  clear_has_extdata();
}
inline const ::std::string& RequestInsertPackageCodeMonitorPmd_CS::extdata() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.extdata)
  return *extdata_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_extdata(const ::std::string& value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.extdata)
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_extdata(const char* value) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestInsertPackageCodeMonitorPmd_CS.extdata)
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_extdata(const char* value, size_t size) {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  extdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestInsertPackageCodeMonitorPmd_CS.extdata)
}
inline ::std::string* RequestInsertPackageCodeMonitorPmd_CS::mutable_extdata() {
  set_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestInsertPackageCodeMonitorPmd_CS.extdata)
  return extdata_;
}
inline ::std::string* RequestInsertPackageCodeMonitorPmd_CS::release_extdata() {
  clear_has_extdata();
  if (extdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extdata_;
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_allocated_extdata(::std::string* extdata) {
  if (extdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extdata_;
  }
  if (extdata) {
    set_has_extdata();
    extdata_ = extdata;
  } else {
    clear_has_extdata();
    extdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestInsertPackageCodeMonitorPmd_CS.extdata)
}

// optional uint32 flag = 4;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 RequestInsertPackageCodeMonitorPmd_CS::flag() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.flag)
  return flag_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.flag)
}

// optional uint64 createtime = 5;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 RequestInsertPackageCodeMonitorPmd_CS::createtime() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.createtime)
  return createtime_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.createtime)
}

// optional uint64 endtime = 6;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 RequestInsertPackageCodeMonitorPmd_CS::endtime() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.endtime)
  return endtime_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.endtime)
}

// optional uint32 usedgameid = 7;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_usedgameid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_usedgameid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_usedgameid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_usedgameid() {
  usedgameid_ = 0u;
  clear_has_usedgameid();
}
inline ::google::protobuf::uint32 RequestInsertPackageCodeMonitorPmd_CS::usedgameid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.usedgameid)
  return usedgameid_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_usedgameid(::google::protobuf::uint32 value) {
  set_has_usedgameid();
  usedgameid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.usedgameid)
}

// optional uint32 usedzoneid = 8;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_usedzoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_usedzoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_usedzoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_usedzoneid() {
  usedzoneid_ = 0u;
  clear_has_usedzoneid();
}
inline ::google::protobuf::uint32 RequestInsertPackageCodeMonitorPmd_CS::usedzoneid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.usedzoneid)
  return usedzoneid_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_usedzoneid(::google::protobuf::uint32 value) {
  set_has_usedzoneid();
  usedzoneid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.usedzoneid)
}

// optional uint64 useduid = 9;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_useduid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_useduid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_useduid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_useduid() {
  useduid_ = GOOGLE_ULONGLONG(0);
  clear_has_useduid();
}
inline ::google::protobuf::uint64 RequestInsertPackageCodeMonitorPmd_CS::useduid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.useduid)
  return useduid_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_useduid(::google::protobuf::uint64 value) {
  set_has_useduid();
  useduid_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.useduid)
}

// optional uint32 codetype = 10;
inline bool RequestInsertPackageCodeMonitorPmd_CS::has_codetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_has_codetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_has_codetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::clear_codetype() {
  codetype_ = 0u;
  clear_has_codetype();
}
inline ::google::protobuf::uint32 RequestInsertPackageCodeMonitorPmd_CS::codetype() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestInsertPackageCodeMonitorPmd_CS.codetype)
  return codetype_;
}
inline void RequestInsertPackageCodeMonitorPmd_CS::set_codetype(::google::protobuf::uint32 value) {
  set_has_codetype();
  codetype_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestInsertPackageCodeMonitorPmd_CS.codetype)
}

// -------------------------------------------------------------------

// RequestResetPackageCodeMonitorPmd_CS

// required string codeid = 1;
inline bool RequestResetPackageCodeMonitorPmd_CS::has_codeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestResetPackageCodeMonitorPmd_CS::set_has_codeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestResetPackageCodeMonitorPmd_CS::clear_has_codeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestResetPackageCodeMonitorPmd_CS::clear_codeid() {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_->clear();
  }
  clear_has_codeid();
}
inline const ::std::string& RequestResetPackageCodeMonitorPmd_CS::codeid() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestResetPackageCodeMonitorPmd_CS.codeid)
  return *codeid_;
}
inline void RequestResetPackageCodeMonitorPmd_CS::set_codeid(const ::std::string& value) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(value);
  // @@protoc_insertion_point(field_set:Pmd.RequestResetPackageCodeMonitorPmd_CS.codeid)
}
inline void RequestResetPackageCodeMonitorPmd_CS::set_codeid(const char* value) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pmd.RequestResetPackageCodeMonitorPmd_CS.codeid)
}
inline void RequestResetPackageCodeMonitorPmd_CS::set_codeid(const char* value, size_t size) {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  codeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pmd.RequestResetPackageCodeMonitorPmd_CS.codeid)
}
inline ::std::string* RequestResetPackageCodeMonitorPmd_CS::mutable_codeid() {
  set_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    codeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pmd.RequestResetPackageCodeMonitorPmd_CS.codeid)
  return codeid_;
}
inline ::std::string* RequestResetPackageCodeMonitorPmd_CS::release_codeid() {
  clear_has_codeid();
  if (codeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = codeid_;
    codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestResetPackageCodeMonitorPmd_CS::set_allocated_codeid(::std::string* codeid) {
  if (codeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete codeid_;
  }
  if (codeid) {
    set_has_codeid();
    codeid_ = codeid;
  } else {
    clear_has_codeid();
    codeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pmd.RequestResetPackageCodeMonitorPmd_CS.codeid)
}

// optional uint32 ret = 2;
inline bool RequestResetPackageCodeMonitorPmd_CS::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestResetPackageCodeMonitorPmd_CS::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestResetPackageCodeMonitorPmd_CS::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestResetPackageCodeMonitorPmd_CS::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 RequestResetPackageCodeMonitorPmd_CS::ret() const {
  // @@protoc_insertion_point(field_get:Pmd.RequestResetPackageCodeMonitorPmd_CS.ret)
  return ret_;
}
inline void RequestResetPackageCodeMonitorPmd_CS::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Pmd.RequestResetPackageCodeMonitorPmd_CS.ret)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Pmd::Monitor_Param> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::Monitor_Param>() {
  return ::Pmd::Monitor_Param_descriptor();
}
template <> struct is_proto_enum< ::Pmd::ServerInfoState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::ServerInfoState>() {
  return ::Pmd::ServerInfoState_descriptor();
}
template <> struct is_proto_enum< ::Pmd::MonitorServerMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Pmd::MonitorServerMessageType>() {
  return ::Pmd::MonitorServerMessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_monitorpmd_2eproto__INCLUDED
